
VR_Glove_STM32_CDC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ac8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  08008bd4  08008bd4  00018bd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008cf0  08008cf0  00020270  2**0
                  CONTENTS
  4 .ARM          00000000  08008cf0  08008cf0  00020270  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008cf0  08008cf0  00020270  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008cf0  08008cf0  00018cf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008cf4  08008cf4  00018cf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000270  20000000  08008cf8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001210  20000270  08008f68  00020270  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001480  08008f68  00021480  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020270  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014c16  00000000  00000000  00020299  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003361  00000000  00000000  00034eaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bd8  00000000  00000000  00038210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a60  00000000  00000000  00038de8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a7bf  00000000  00000000  00039848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ffeb  00000000  00000000  00054007  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a3ce  00000000  00000000  00063ff2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ee3c0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003190  00000000  00000000  000ee414  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000270 	.word	0x20000270
 8000128:	00000000 	.word	0x00000000
 800012c:	08008bbc 	.word	0x08008bbc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000274 	.word	0x20000274
 8000148:	08008bbc 	.word	0x08008bbc

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fc4c 	bl	80009ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f81e 	bl	8000194 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f8b8 	bl	80002cc <MX_GPIO_Init>
  MX_ADC1_Init();
 800015c:	f000 f878 	bl	8000250 <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 8000160:	f007 fc24 	bl	80079ac <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  VR_Glove_Calibration(&vr_glove1);
 8000164:	480a      	ldr	r0, [pc, #40]	; (8000190 <main+0x44>)
 8000166:	f000 fa17 	bl	8000598 <VR_Glove_Calibration>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  VR_Glove_Input(&vr_glove1);
 800016a:	4809      	ldr	r0, [pc, #36]	; (8000190 <main+0x44>)
 800016c:	f000 fa88 	bl	8000680 <VR_Glove_Input>
	  VR_Glove_Scale(&vr_glove1);
 8000170:	4807      	ldr	r0, [pc, #28]	; (8000190 <main+0x44>)
 8000172:	f000 fb03 	bl	800077c <VR_Glove_Scale>
	  VR_Glove_Gestures(&vr_glove1);
 8000176:	4806      	ldr	r0, [pc, #24]	; (8000190 <main+0x44>)
 8000178:	f000 fbd5 	bl	8000926 <VR_Glove_Gestures>
	  VR_Glove_Serialization(&vr_glove1);
 800017c:	4804      	ldr	r0, [pc, #16]	; (8000190 <main+0x44>)
 800017e:	f000 fb37 	bl	80007f0 <VR_Glove_Serialization>
	  VR_Glove_Transmit(&vr_glove1);
 8000182:	4803      	ldr	r0, [pc, #12]	; (8000190 <main+0x44>)
 8000184:	f000 fbbe 	bl	8000904 <VR_Glove_Transmit>
	  HAL_Delay(10);
 8000188:	200a      	movs	r0, #10
 800018a:	f000 fc91 	bl	8000ab0 <HAL_Delay>
	  VR_Glove_Input(&vr_glove1);
 800018e:	e7ec      	b.n	800016a <main+0x1e>
 8000190:	20000000 	.word	0x20000000

08000194 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000194:	b580      	push	{r7, lr}
 8000196:	b094      	sub	sp, #80	; 0x50
 8000198:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800019a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800019e:	2228      	movs	r2, #40	; 0x28
 80001a0:	2100      	movs	r1, #0
 80001a2:	4618      	mov	r0, r3
 80001a4:	f008 f8c8 	bl	8008338 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001a8:	f107 0314 	add.w	r3, r7, #20
 80001ac:	2200      	movs	r2, #0
 80001ae:	601a      	str	r2, [r3, #0]
 80001b0:	605a      	str	r2, [r3, #4]
 80001b2:	609a      	str	r2, [r3, #8]
 80001b4:	60da      	str	r2, [r3, #12]
 80001b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001b8:	1d3b      	adds	r3, r7, #4
 80001ba:	2200      	movs	r2, #0
 80001bc:	601a      	str	r2, [r3, #0]
 80001be:	605a      	str	r2, [r3, #4]
 80001c0:	609a      	str	r2, [r3, #8]
 80001c2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001c4:	2301      	movs	r3, #1
 80001c6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001ce:	2300      	movs	r3, #0
 80001d0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001d2:	2301      	movs	r3, #1
 80001d4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001d6:	2302      	movs	r3, #2
 80001d8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80001e0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80001e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001ea:	4618      	mov	r0, r3
 80001ec:	f003 f862 	bl	80032b4 <HAL_RCC_OscConfig>
 80001f0:	4603      	mov	r3, r0
 80001f2:	2b00      	cmp	r3, #0
 80001f4:	d001      	beq.n	80001fa <SystemClock_Config+0x66>
  {
    Error_Handler();
 80001f6:	f000 f8cf 	bl	8000398 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001fa:	230f      	movs	r3, #15
 80001fc:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001fe:	2302      	movs	r3, #2
 8000200:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000202:	2300      	movs	r3, #0
 8000204:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000206:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800020a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800020c:	2300      	movs	r3, #0
 800020e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000210:	f107 0314 	add.w	r3, r7, #20
 8000214:	2101      	movs	r1, #1
 8000216:	4618      	mov	r0, r3
 8000218:	f003 facc 	bl	80037b4 <HAL_RCC_ClockConfig>
 800021c:	4603      	mov	r3, r0
 800021e:	2b00      	cmp	r3, #0
 8000220:	d001      	beq.n	8000226 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000222:	f000 f8b9 	bl	8000398 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8000226:	2312      	movs	r3, #18
 8000228:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 800022a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800022e:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000230:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000234:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000236:	1d3b      	adds	r3, r7, #4
 8000238:	4618      	mov	r0, r3
 800023a:	f003 fc41 	bl	8003ac0 <HAL_RCCEx_PeriphCLKConfig>
 800023e:	4603      	mov	r3, r0
 8000240:	2b00      	cmp	r3, #0
 8000242:	d001      	beq.n	8000248 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000244:	f000 f8a8 	bl	8000398 <Error_Handler>
  }
}
 8000248:	bf00      	nop
 800024a:	3750      	adds	r7, #80	; 0x50
 800024c:	46bd      	mov	sp, r7
 800024e:	bd80      	pop	{r7, pc}

08000250 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	b084      	sub	sp, #16
 8000254:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000256:	1d3b      	adds	r3, r7, #4
 8000258:	2200      	movs	r2, #0
 800025a:	601a      	str	r2, [r3, #0]
 800025c:	605a      	str	r2, [r3, #4]
 800025e:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000260:	4b18      	ldr	r3, [pc, #96]	; (80002c4 <MX_ADC1_Init+0x74>)
 8000262:	4a19      	ldr	r2, [pc, #100]	; (80002c8 <MX_ADC1_Init+0x78>)
 8000264:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000266:	4b17      	ldr	r3, [pc, #92]	; (80002c4 <MX_ADC1_Init+0x74>)
 8000268:	2200      	movs	r2, #0
 800026a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800026c:	4b15      	ldr	r3, [pc, #84]	; (80002c4 <MX_ADC1_Init+0x74>)
 800026e:	2200      	movs	r2, #0
 8000270:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000272:	4b14      	ldr	r3, [pc, #80]	; (80002c4 <MX_ADC1_Init+0x74>)
 8000274:	2200      	movs	r2, #0
 8000276:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000278:	4b12      	ldr	r3, [pc, #72]	; (80002c4 <MX_ADC1_Init+0x74>)
 800027a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800027e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000280:	4b10      	ldr	r3, [pc, #64]	; (80002c4 <MX_ADC1_Init+0x74>)
 8000282:	2200      	movs	r2, #0
 8000284:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000286:	4b0f      	ldr	r3, [pc, #60]	; (80002c4 <MX_ADC1_Init+0x74>)
 8000288:	2201      	movs	r2, #1
 800028a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800028c:	480d      	ldr	r0, [pc, #52]	; (80002c4 <MX_ADC1_Init+0x74>)
 800028e:	f000 fc33 	bl	8000af8 <HAL_ADC_Init>
 8000292:	4603      	mov	r3, r0
 8000294:	2b00      	cmp	r3, #0
 8000296:	d001      	beq.n	800029c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000298:	f000 f87e 	bl	8000398 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800029c:	2300      	movs	r3, #0
 800029e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80002a0:	2301      	movs	r3, #1
 80002a2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80002a4:	2300      	movs	r3, #0
 80002a6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002a8:	1d3b      	adds	r3, r7, #4
 80002aa:	4619      	mov	r1, r3
 80002ac:	4805      	ldr	r0, [pc, #20]	; (80002c4 <MX_ADC1_Init+0x74>)
 80002ae:	f000 fee7 	bl	8001080 <HAL_ADC_ConfigChannel>
 80002b2:	4603      	mov	r3, r0
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d001      	beq.n	80002bc <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80002b8:	f000 f86e 	bl	8000398 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80002bc:	bf00      	nop
 80002be:	3710      	adds	r7, #16
 80002c0:	46bd      	mov	sp, r7
 80002c2:	bd80      	pop	{r7, pc}
 80002c4:	200004bc 	.word	0x200004bc
 80002c8:	40012400 	.word	0x40012400

080002cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b088      	sub	sp, #32
 80002d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002d2:	f107 0310 	add.w	r3, r7, #16
 80002d6:	2200      	movs	r2, #0
 80002d8:	601a      	str	r2, [r3, #0]
 80002da:	605a      	str	r2, [r3, #4]
 80002dc:	609a      	str	r2, [r3, #8]
 80002de:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002e0:	4b2a      	ldr	r3, [pc, #168]	; (800038c <MX_GPIO_Init+0xc0>)
 80002e2:	699b      	ldr	r3, [r3, #24]
 80002e4:	4a29      	ldr	r2, [pc, #164]	; (800038c <MX_GPIO_Init+0xc0>)
 80002e6:	f043 0310 	orr.w	r3, r3, #16
 80002ea:	6193      	str	r3, [r2, #24]
 80002ec:	4b27      	ldr	r3, [pc, #156]	; (800038c <MX_GPIO_Init+0xc0>)
 80002ee:	699b      	ldr	r3, [r3, #24]
 80002f0:	f003 0310 	and.w	r3, r3, #16
 80002f4:	60fb      	str	r3, [r7, #12]
 80002f6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002f8:	4b24      	ldr	r3, [pc, #144]	; (800038c <MX_GPIO_Init+0xc0>)
 80002fa:	699b      	ldr	r3, [r3, #24]
 80002fc:	4a23      	ldr	r2, [pc, #140]	; (800038c <MX_GPIO_Init+0xc0>)
 80002fe:	f043 0320 	orr.w	r3, r3, #32
 8000302:	6193      	str	r3, [r2, #24]
 8000304:	4b21      	ldr	r3, [pc, #132]	; (800038c <MX_GPIO_Init+0xc0>)
 8000306:	699b      	ldr	r3, [r3, #24]
 8000308:	f003 0320 	and.w	r3, r3, #32
 800030c:	60bb      	str	r3, [r7, #8]
 800030e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000310:	4b1e      	ldr	r3, [pc, #120]	; (800038c <MX_GPIO_Init+0xc0>)
 8000312:	699b      	ldr	r3, [r3, #24]
 8000314:	4a1d      	ldr	r2, [pc, #116]	; (800038c <MX_GPIO_Init+0xc0>)
 8000316:	f043 0304 	orr.w	r3, r3, #4
 800031a:	6193      	str	r3, [r2, #24]
 800031c:	4b1b      	ldr	r3, [pc, #108]	; (800038c <MX_GPIO_Init+0xc0>)
 800031e:	699b      	ldr	r3, [r3, #24]
 8000320:	f003 0304 	and.w	r3, r3, #4
 8000324:	607b      	str	r3, [r7, #4]
 8000326:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000328:	4b18      	ldr	r3, [pc, #96]	; (800038c <MX_GPIO_Init+0xc0>)
 800032a:	699b      	ldr	r3, [r3, #24]
 800032c:	4a17      	ldr	r2, [pc, #92]	; (800038c <MX_GPIO_Init+0xc0>)
 800032e:	f043 0308 	orr.w	r3, r3, #8
 8000332:	6193      	str	r3, [r2, #24]
 8000334:	4b15      	ldr	r3, [pc, #84]	; (800038c <MX_GPIO_Init+0xc0>)
 8000336:	699b      	ldr	r3, [r3, #24]
 8000338:	f003 0308 	and.w	r3, r3, #8
 800033c:	603b      	str	r3, [r7, #0]
 800033e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000340:	2200      	movs	r2, #0
 8000342:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000346:	4812      	ldr	r0, [pc, #72]	; (8000390 <MX_GPIO_Init+0xc4>)
 8000348:	f001 fad7 	bl	80018fa <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800034c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000350:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000352:	2301      	movs	r3, #1
 8000354:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000356:	2300      	movs	r3, #0
 8000358:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800035a:	2302      	movs	r3, #2
 800035c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800035e:	f107 0310 	add.w	r3, r7, #16
 8000362:	4619      	mov	r1, r3
 8000364:	480a      	ldr	r0, [pc, #40]	; (8000390 <MX_GPIO_Init+0xc4>)
 8000366:	f001 f92d 	bl	80015c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : joy_button_Pin A_Pin B_Pin menu_Pin */
  GPIO_InitStruct.Pin = joy_button_Pin|A_Pin|B_Pin|menu_Pin;
 800036a:	f240 4307 	movw	r3, #1031	; 0x407
 800036e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000370:	2300      	movs	r3, #0
 8000372:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000374:	2301      	movs	r3, #1
 8000376:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000378:	f107 0310 	add.w	r3, r7, #16
 800037c:	4619      	mov	r1, r3
 800037e:	4805      	ldr	r0, [pc, #20]	; (8000394 <MX_GPIO_Init+0xc8>)
 8000380:	f001 f920 	bl	80015c4 <HAL_GPIO_Init>

}
 8000384:	bf00      	nop
 8000386:	3720      	adds	r7, #32
 8000388:	46bd      	mov	sp, r7
 800038a:	bd80      	pop	{r7, pc}
 800038c:	40021000 	.word	0x40021000
 8000390:	40011000 	.word	0x40011000
 8000394:	40010c00 	.word	0x40010c00

08000398 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000398:	b480      	push	{r7}
 800039a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800039c:	b672      	cpsid	i
}
 800039e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003a0:	e7fe      	b.n	80003a0 <Error_Handler+0x8>
	...

080003a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003a4:	b480      	push	{r7}
 80003a6:	b085      	sub	sp, #20
 80003a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003aa:	4b15      	ldr	r3, [pc, #84]	; (8000400 <HAL_MspInit+0x5c>)
 80003ac:	699b      	ldr	r3, [r3, #24]
 80003ae:	4a14      	ldr	r2, [pc, #80]	; (8000400 <HAL_MspInit+0x5c>)
 80003b0:	f043 0301 	orr.w	r3, r3, #1
 80003b4:	6193      	str	r3, [r2, #24]
 80003b6:	4b12      	ldr	r3, [pc, #72]	; (8000400 <HAL_MspInit+0x5c>)
 80003b8:	699b      	ldr	r3, [r3, #24]
 80003ba:	f003 0301 	and.w	r3, r3, #1
 80003be:	60bb      	str	r3, [r7, #8]
 80003c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003c2:	4b0f      	ldr	r3, [pc, #60]	; (8000400 <HAL_MspInit+0x5c>)
 80003c4:	69db      	ldr	r3, [r3, #28]
 80003c6:	4a0e      	ldr	r2, [pc, #56]	; (8000400 <HAL_MspInit+0x5c>)
 80003c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003cc:	61d3      	str	r3, [r2, #28]
 80003ce:	4b0c      	ldr	r3, [pc, #48]	; (8000400 <HAL_MspInit+0x5c>)
 80003d0:	69db      	ldr	r3, [r3, #28]
 80003d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003d6:	607b      	str	r3, [r7, #4]
 80003d8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80003da:	4b0a      	ldr	r3, [pc, #40]	; (8000404 <HAL_MspInit+0x60>)
 80003dc:	685b      	ldr	r3, [r3, #4]
 80003de:	60fb      	str	r3, [r7, #12]
 80003e0:	68fb      	ldr	r3, [r7, #12]
 80003e2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80003e6:	60fb      	str	r3, [r7, #12]
 80003e8:	68fb      	ldr	r3, [r7, #12]
 80003ea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80003ee:	60fb      	str	r3, [r7, #12]
 80003f0:	4a04      	ldr	r2, [pc, #16]	; (8000404 <HAL_MspInit+0x60>)
 80003f2:	68fb      	ldr	r3, [r7, #12]
 80003f4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003f6:	bf00      	nop
 80003f8:	3714      	adds	r7, #20
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bc80      	pop	{r7}
 80003fe:	4770      	bx	lr
 8000400:	40021000 	.word	0x40021000
 8000404:	40010000 	.word	0x40010000

08000408 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b088      	sub	sp, #32
 800040c:	af00      	add	r7, sp, #0
 800040e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000410:	f107 0310 	add.w	r3, r7, #16
 8000414:	2200      	movs	r2, #0
 8000416:	601a      	str	r2, [r3, #0]
 8000418:	605a      	str	r2, [r3, #4]
 800041a:	609a      	str	r2, [r3, #8]
 800041c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	4a14      	ldr	r2, [pc, #80]	; (8000474 <HAL_ADC_MspInit+0x6c>)
 8000424:	4293      	cmp	r3, r2
 8000426:	d121      	bne.n	800046c <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000428:	4b13      	ldr	r3, [pc, #76]	; (8000478 <HAL_ADC_MspInit+0x70>)
 800042a:	699b      	ldr	r3, [r3, #24]
 800042c:	4a12      	ldr	r2, [pc, #72]	; (8000478 <HAL_ADC_MspInit+0x70>)
 800042e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000432:	6193      	str	r3, [r2, #24]
 8000434:	4b10      	ldr	r3, [pc, #64]	; (8000478 <HAL_ADC_MspInit+0x70>)
 8000436:	699b      	ldr	r3, [r3, #24]
 8000438:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800043c:	60fb      	str	r3, [r7, #12]
 800043e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000440:	4b0d      	ldr	r3, [pc, #52]	; (8000478 <HAL_ADC_MspInit+0x70>)
 8000442:	699b      	ldr	r3, [r3, #24]
 8000444:	4a0c      	ldr	r2, [pc, #48]	; (8000478 <HAL_ADC_MspInit+0x70>)
 8000446:	f043 0304 	orr.w	r3, r3, #4
 800044a:	6193      	str	r3, [r2, #24]
 800044c:	4b0a      	ldr	r3, [pc, #40]	; (8000478 <HAL_ADC_MspInit+0x70>)
 800044e:	699b      	ldr	r3, [r3, #24]
 8000450:	f003 0304 	and.w	r3, r3, #4
 8000454:	60bb      	str	r3, [r7, #8]
 8000456:	68bb      	ldr	r3, [r7, #8]
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000458:	237f      	movs	r3, #127	; 0x7f
 800045a:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800045c:	2303      	movs	r3, #3
 800045e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000460:	f107 0310 	add.w	r3, r7, #16
 8000464:	4619      	mov	r1, r3
 8000466:	4805      	ldr	r0, [pc, #20]	; (800047c <HAL_ADC_MspInit+0x74>)
 8000468:	f001 f8ac 	bl	80015c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800046c:	bf00      	nop
 800046e:	3720      	adds	r7, #32
 8000470:	46bd      	mov	sp, r7
 8000472:	bd80      	pop	{r7, pc}
 8000474:	40012400 	.word	0x40012400
 8000478:	40021000 	.word	0x40021000
 800047c:	40010800 	.word	0x40010800

08000480 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000480:	b480      	push	{r7}
 8000482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000484:	e7fe      	b.n	8000484 <NMI_Handler+0x4>

08000486 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000486:	b480      	push	{r7}
 8000488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800048a:	e7fe      	b.n	800048a <HardFault_Handler+0x4>

0800048c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800048c:	b480      	push	{r7}
 800048e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000490:	e7fe      	b.n	8000490 <MemManage_Handler+0x4>

08000492 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000492:	b480      	push	{r7}
 8000494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000496:	e7fe      	b.n	8000496 <BusFault_Handler+0x4>

08000498 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000498:	b480      	push	{r7}
 800049a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800049c:	e7fe      	b.n	800049c <UsageFault_Handler+0x4>

0800049e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800049e:	b480      	push	{r7}
 80004a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004a2:	bf00      	nop
 80004a4:	46bd      	mov	sp, r7
 80004a6:	bc80      	pop	{r7}
 80004a8:	4770      	bx	lr

080004aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004aa:	b480      	push	{r7}
 80004ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004ae:	bf00      	nop
 80004b0:	46bd      	mov	sp, r7
 80004b2:	bc80      	pop	{r7}
 80004b4:	4770      	bx	lr

080004b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004b6:	b480      	push	{r7}
 80004b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004ba:	bf00      	nop
 80004bc:	46bd      	mov	sp, r7
 80004be:	bc80      	pop	{r7}
 80004c0:	4770      	bx	lr

080004c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004c2:	b580      	push	{r7, lr}
 80004c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004c6:	f000 fad7 	bl	8000a78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004ca:	bf00      	nop
 80004cc:	bd80      	pop	{r7, pc}
	...

080004d0 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80004d4:	4802      	ldr	r0, [pc, #8]	; (80004e0 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80004d6:	f001 fb59 	bl	8001b8c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80004da:	bf00      	nop
 80004dc:	bd80      	pop	{r7, pc}
 80004de:	bf00      	nop
 80004e0:	20001184 	.word	0x20001184

080004e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b086      	sub	sp, #24
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80004ec:	4a14      	ldr	r2, [pc, #80]	; (8000540 <_sbrk+0x5c>)
 80004ee:	4b15      	ldr	r3, [pc, #84]	; (8000544 <_sbrk+0x60>)
 80004f0:	1ad3      	subs	r3, r2, r3
 80004f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80004f4:	697b      	ldr	r3, [r7, #20]
 80004f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80004f8:	4b13      	ldr	r3, [pc, #76]	; (8000548 <_sbrk+0x64>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d102      	bne.n	8000506 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000500:	4b11      	ldr	r3, [pc, #68]	; (8000548 <_sbrk+0x64>)
 8000502:	4a12      	ldr	r2, [pc, #72]	; (800054c <_sbrk+0x68>)
 8000504:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000506:	4b10      	ldr	r3, [pc, #64]	; (8000548 <_sbrk+0x64>)
 8000508:	681a      	ldr	r2, [r3, #0]
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	4413      	add	r3, r2
 800050e:	693a      	ldr	r2, [r7, #16]
 8000510:	429a      	cmp	r2, r3
 8000512:	d207      	bcs.n	8000524 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000514:	f007 fee6 	bl	80082e4 <__errno>
 8000518:	4603      	mov	r3, r0
 800051a:	220c      	movs	r2, #12
 800051c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800051e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000522:	e009      	b.n	8000538 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000524:	4b08      	ldr	r3, [pc, #32]	; (8000548 <_sbrk+0x64>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800052a:	4b07      	ldr	r3, [pc, #28]	; (8000548 <_sbrk+0x64>)
 800052c:	681a      	ldr	r2, [r3, #0]
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	4413      	add	r3, r2
 8000532:	4a05      	ldr	r2, [pc, #20]	; (8000548 <_sbrk+0x64>)
 8000534:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000536:	68fb      	ldr	r3, [r7, #12]
}
 8000538:	4618      	mov	r0, r3
 800053a:	3718      	adds	r7, #24
 800053c:	46bd      	mov	sp, r7
 800053e:	bd80      	pop	{r7, pc}
 8000540:	20005000 	.word	0x20005000
 8000544:	00000400 	.word	0x00000400
 8000548:	2000028c 	.word	0x2000028c
 800054c:	20001480 	.word	0x20001480

08000550 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000550:	b480      	push	{r7}
 8000552:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000554:	bf00      	nop
 8000556:	46bd      	mov	sp, r7
 8000558:	bc80      	pop	{r7}
 800055a:	4770      	bx	lr

0800055c <ADC_Select_Channel>:
#include "vr_glove.h"
#include "usb_device.h"
void ADC_Select_Channel(uint32_t ch, VR_Glove* vr_glove) {
 800055c:	b580      	push	{r7, lr}
 800055e:	b086      	sub	sp, #24
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
 8000564:	6039      	str	r1, [r7, #0]
    ADC_ChannelConfTypeDef conf = {
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	60fb      	str	r3, [r7, #12]
 800056a:	2301      	movs	r3, #1
 800056c:	613b      	str	r3, [r7, #16]
 800056e:	2300      	movs	r3, #0
 8000570:	617b      	str	r3, [r7, #20]
        .Channel = ch,
        .Rank = 1,
        .SamplingTime = ADC_SAMPLETIME_1CYCLE_5,
    };
    if (HAL_ADC_ConfigChannel(vr_glove->hadc1, &conf) != HAL_OK) {
 8000572:	683b      	ldr	r3, [r7, #0]
 8000574:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000578:	f107 020c 	add.w	r2, r7, #12
 800057c:	4611      	mov	r1, r2
 800057e:	4618      	mov	r0, r3
 8000580:	f000 fd7e 	bl	8001080 <HAL_ADC_ConfigChannel>
 8000584:	4603      	mov	r3, r0
 8000586:	2b00      	cmp	r3, #0
 8000588:	d001      	beq.n	800058e <ADC_Select_Channel+0x32>
        Error_Handler();
 800058a:	f7ff ff05 	bl	8000398 <Error_Handler>
    }
}
 800058e:	bf00      	nop
 8000590:	3718      	adds	r7, #24
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}
	...

08000598 <VR_Glove_Calibration>:
int16_t VR_Glove_Calibration(VR_Glove* vr_glove)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b084      	sub	sp, #16
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED_GPIO_Port,LED_Pin,LED_ON);
 80005a0:	2201      	movs	r2, #1
 80005a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005a6:	4835      	ldr	r0, [pc, #212]	; (800067c <VR_Glove_Calibration+0xe4>)
 80005a8:	f001 f9a7 	bl	80018fa <HAL_GPIO_WritePin>
	HAL_Delay(2000);
 80005ac:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80005b0:	f000 fa7e 	bl	8000ab0 <HAL_Delay>
	VR_Glove_Input(vr_glove);
 80005b4:	6878      	ldr	r0, [r7, #4]
 80005b6:	f000 f863 	bl	8000680 <VR_Glove_Input>
	for (int i = 0; i < 5; i++)
 80005ba:	2300      	movs	r3, #0
 80005bc:	60fb      	str	r3, [r7, #12]
 80005be:	e00f      	b.n	80005e0 <VR_Glove_Calibration+0x48>
	{
		vr_glove->finger_zero[i] = vr_glove->flex_sensor_rawdata[i];
 80005c0:	687a      	ldr	r2, [r7, #4]
 80005c2:	68fb      	ldr	r3, [r7, #12]
 80005c4:	3304      	adds	r3, #4
 80005c6:	005b      	lsls	r3, r3, #1
 80005c8:	4413      	add	r3, r2
 80005ca:	8859      	ldrh	r1, [r3, #2]
 80005cc:	687a      	ldr	r2, [r7, #4]
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	3314      	adds	r3, #20
 80005d2:	005b      	lsls	r3, r3, #1
 80005d4:	4413      	add	r3, r2
 80005d6:	460a      	mov	r2, r1
 80005d8:	809a      	strh	r2, [r3, #4]
	for (int i = 0; i < 5; i++)
 80005da:	68fb      	ldr	r3, [r7, #12]
 80005dc:	3301      	adds	r3, #1
 80005de:	60fb      	str	r3, [r7, #12]
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	2b04      	cmp	r3, #4
 80005e4:	ddec      	ble.n	80005c0 <VR_Glove_Calibration+0x28>
	}
	HAL_GPIO_WritePin(LED_GPIO_Port,LED_Pin,LED_OFF);
 80005e6:	2200      	movs	r2, #0
 80005e8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005ec:	4823      	ldr	r0, [pc, #140]	; (800067c <VR_Glove_Calibration+0xe4>)
 80005ee:	f001 f984 	bl	80018fa <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 80005f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005f6:	f000 fa5b 	bl	8000ab0 <HAL_Delay>
	HAL_GPIO_WritePin(LED_GPIO_Port,LED_Pin,LED_ON);
 80005fa:	2201      	movs	r2, #1
 80005fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000600:	481e      	ldr	r0, [pc, #120]	; (800067c <VR_Glove_Calibration+0xe4>)
 8000602:	f001 f97a 	bl	80018fa <HAL_GPIO_WritePin>
	HAL_Delay(2000);
 8000606:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800060a:	f000 fa51 	bl	8000ab0 <HAL_Delay>
	VR_Glove_Input(vr_glove);
 800060e:	6878      	ldr	r0, [r7, #4]
 8000610:	f000 f836 	bl	8000680 <VR_Glove_Input>
	for (int i = 0; i < 5; i++)
 8000614:	2300      	movs	r3, #0
 8000616:	60bb      	str	r3, [r7, #8]
 8000618:	e01d      	b.n	8000656 <VR_Glove_Calibration+0xbe>
	{
		vr_glove->finger_calibr[i] =ANALOG_MAX/vr_glove->flex_sensor_rawdata[i]-vr_glove->finger_zero[i];
 800061a:	687a      	ldr	r2, [r7, #4]
 800061c:	68bb      	ldr	r3, [r7, #8]
 800061e:	3304      	adds	r3, #4
 8000620:	005b      	lsls	r3, r3, #1
 8000622:	4413      	add	r3, r2
 8000624:	885b      	ldrh	r3, [r3, #2]
 8000626:	461a      	mov	r2, r3
 8000628:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800062c:	fb93 f3f2 	sdiv	r3, r3, r2
 8000630:	b29a      	uxth	r2, r3
 8000632:	6879      	ldr	r1, [r7, #4]
 8000634:	68bb      	ldr	r3, [r7, #8]
 8000636:	3314      	adds	r3, #20
 8000638:	005b      	lsls	r3, r3, #1
 800063a:	440b      	add	r3, r1
 800063c:	889b      	ldrh	r3, [r3, #4]
 800063e:	1ad3      	subs	r3, r2, r3
 8000640:	b299      	uxth	r1, r3
 8000642:	687a      	ldr	r2, [r7, #4]
 8000644:	68bb      	ldr	r3, [r7, #8]
 8000646:	3318      	adds	r3, #24
 8000648:	005b      	lsls	r3, r3, #1
 800064a:	4413      	add	r3, r2
 800064c:	460a      	mov	r2, r1
 800064e:	80da      	strh	r2, [r3, #6]
	for (int i = 0; i < 5; i++)
 8000650:	68bb      	ldr	r3, [r7, #8]
 8000652:	3301      	adds	r3, #1
 8000654:	60bb      	str	r3, [r7, #8]
 8000656:	68bb      	ldr	r3, [r7, #8]
 8000658:	2b04      	cmp	r3, #4
 800065a:	ddde      	ble.n	800061a <VR_Glove_Calibration+0x82>
	}
	HAL_GPIO_WritePin(LED_GPIO_Port,LED_Pin,LED_OFF);
 800065c:	2200      	movs	r2, #0
 800065e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000662:	4806      	ldr	r0, [pc, #24]	; (800067c <VR_Glove_Calibration+0xe4>)
 8000664:	f001 f949 	bl	80018fa <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8000668:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800066c:	f000 fa20 	bl	8000ab0 <HAL_Delay>
	return 0;
 8000670:	2300      	movs	r3, #0

}
 8000672:	4618      	mov	r0, r3
 8000674:	3710      	adds	r7, #16
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	40011000 	.word	0x40011000

08000680 <VR_Glove_Input>:

int16_t VR_Glove_Input(VR_Glove* vr_glove)
{
 8000680:	b5b0      	push	{r4, r5, r7, lr}
 8000682:	b08a      	sub	sp, #40	; 0x28
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
	uint32_t channels[7]={ADC_CHANNEL_0,ADC_CHANNEL_1,ADC_CHANNEL_2,ADC_CHANNEL_3,ADC_CHANNEL_4,ADC_CHANNEL_5,ADC_CHANNEL_6};
 8000688:	4b3a      	ldr	r3, [pc, #232]	; (8000774 <VR_Glove_Input+0xf4>)
 800068a:	f107 0408 	add.w	r4, r7, #8
 800068e:	461d      	mov	r5, r3
 8000690:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000692:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000694:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000698:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	vr_glove->calib = 0;
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	2200      	movs	r2, #0
 80006a0:	849a      	strh	r2, [r3, #36]	; 0x24
	vr_glove->A_button = 1-HAL_GPIO_ReadPin(A_GPIO_Port,A_Pin);
 80006a2:	2102      	movs	r1, #2
 80006a4:	4834      	ldr	r0, [pc, #208]	; (8000778 <VR_Glove_Input+0xf8>)
 80006a6:	f001 f911 	bl	80018cc <HAL_GPIO_ReadPin>
 80006aa:	4603      	mov	r3, r0
 80006ac:	b29b      	uxth	r3, r3
 80006ae:	f1c3 0301 	rsb	r3, r3, #1
 80006b2:	b29a      	uxth	r2, r3
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	84da      	strh	r2, [r3, #38]	; 0x26
	vr_glove->B_button = 1-HAL_GPIO_ReadPin(B_GPIO_Port,B_Pin);
 80006b8:	2104      	movs	r1, #4
 80006ba:	482f      	ldr	r0, [pc, #188]	; (8000778 <VR_Glove_Input+0xf8>)
 80006bc:	f001 f906 	bl	80018cc <HAL_GPIO_ReadPin>
 80006c0:	4603      	mov	r3, r0
 80006c2:	b29b      	uxth	r3, r3
 80006c4:	f1c3 0301 	rsb	r3, r3, #1
 80006c8:	b29a      	uxth	r2, r3
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	851a      	strh	r2, [r3, #40]	; 0x28
	vr_glove->menu_button = 1-HAL_GPIO_ReadPin(menu_GPIO_Port,menu_Pin);
 80006ce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006d2:	4829      	ldr	r0, [pc, #164]	; (8000778 <VR_Glove_Input+0xf8>)
 80006d4:	f001 f8fa 	bl	80018cc <HAL_GPIO_ReadPin>
 80006d8:	4603      	mov	r3, r0
 80006da:	b29b      	uxth	r3, r3
 80006dc:	f1c3 0301 	rsb	r3, r3, #1
 80006e0:	b29a      	uxth	r2, r3
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	855a      	strh	r2, [r3, #42]	; 0x2a
	vr_glove->joy_button = 1-HAL_GPIO_ReadPin(joy_button_GPIO_Port,joy_button_Pin);
 80006e6:	2101      	movs	r1, #1
 80006e8:	4823      	ldr	r0, [pc, #140]	; (8000778 <VR_Glove_Input+0xf8>)
 80006ea:	f001 f8ef 	bl	80018cc <HAL_GPIO_ReadPin>
 80006ee:	4603      	mov	r3, r0
 80006f0:	b29b      	uxth	r3, r3
 80006f2:	f1c3 0301 	rsb	r3, r3, #1
 80006f6:	b29a      	uxth	r2, r3
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	839a      	strh	r2, [r3, #28]

	for(int i = 0; i < 7; i++)
 80006fc:	2300      	movs	r3, #0
 80006fe:	627b      	str	r3, [r7, #36]	; 0x24
 8000700:	e030      	b.n	8000764 <VR_Glove_Input+0xe4>
	{
		ADC_Select_Channel(channels[i],vr_glove);
 8000702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000704:	009b      	lsls	r3, r3, #2
 8000706:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800070a:	4413      	add	r3, r2
 800070c:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8000710:	6879      	ldr	r1, [r7, #4]
 8000712:	4618      	mov	r0, r3
 8000714:	f7ff ff22 	bl	800055c <ADC_Select_Channel>
		HAL_ADC_Start(vr_glove->hadc1);
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800071e:	4618      	mov	r0, r3
 8000720:	f000 fac2 	bl	8000ca8 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(vr_glove->hadc1, HAL_MAX_DELAY);
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800072a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800072e:	4618      	mov	r0, r3
 8000730:	f000 fb94 	bl	8000e5c <HAL_ADC_PollForConversion>
		vr_glove->flex_sensor_rawdata[i] = HAL_ADC_GetValue(vr_glove->hadc1);
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800073a:	4618      	mov	r0, r3
 800073c:	f000 fc94 	bl	8001068 <HAL_ADC_GetValue>
 8000740:	4603      	mov	r3, r0
 8000742:	b299      	uxth	r1, r3
 8000744:	687a      	ldr	r2, [r7, #4]
 8000746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000748:	3304      	adds	r3, #4
 800074a:	005b      	lsls	r3, r3, #1
 800074c:	4413      	add	r3, r2
 800074e:	460a      	mov	r2, r1
 8000750:	805a      	strh	r2, [r3, #2]
		HAL_ADC_Stop(vr_glove->hadc1);
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000758:	4618      	mov	r0, r3
 800075a:	f000 fb53 	bl	8000e04 <HAL_ADC_Stop>
	for(int i = 0; i < 7; i++)
 800075e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000760:	3301      	adds	r3, #1
 8000762:	627b      	str	r3, [r7, #36]	; 0x24
 8000764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000766:	2b06      	cmp	r3, #6
 8000768:	ddcb      	ble.n	8000702 <VR_Glove_Input+0x82>
	}


	return 0;
 800076a:	2300      	movs	r3, #0
}
 800076c:	4618      	mov	r0, r3
 800076e:	3728      	adds	r7, #40	; 0x28
 8000770:	46bd      	mov	sp, r7
 8000772:	bdb0      	pop	{r4, r5, r7, pc}
 8000774:	08008bd4 	.word	0x08008bd4
 8000778:	40010c00 	.word	0x40010c00

0800077c <VR_Glove_Scale>:

int16_t VR_Glove_Scale(VR_Glove* vr_glove)
{
 800077c:	b480      	push	{r7}
 800077e:	b085      	sub	sp, #20
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < 5; i++)
 8000784:	2300      	movs	r3, #0
 8000786:	60fb      	str	r3, [r7, #12]
 8000788:	e01d      	b.n	80007c6 <VR_Glove_Scale+0x4a>
	{
		vr_glove->finger_position[i] = (vr_glove->flex_sensor_rawdata[i] - vr_glove->finger_zero[i]) * vr_glove->finger_calibr[i];
 800078a:	687a      	ldr	r2, [r7, #4]
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	3304      	adds	r3, #4
 8000790:	005b      	lsls	r3, r3, #1
 8000792:	4413      	add	r3, r2
 8000794:	885a      	ldrh	r2, [r3, #2]
 8000796:	6879      	ldr	r1, [r7, #4]
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	3314      	adds	r3, #20
 800079c:	005b      	lsls	r3, r3, #1
 800079e:	440b      	add	r3, r1
 80007a0:	889b      	ldrh	r3, [r3, #4]
 80007a2:	1ad3      	subs	r3, r2, r3
 80007a4:	b29a      	uxth	r2, r3
 80007a6:	6879      	ldr	r1, [r7, #4]
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	3318      	adds	r3, #24
 80007ac:	005b      	lsls	r3, r3, #1
 80007ae:	440b      	add	r3, r1
 80007b0:	88db      	ldrh	r3, [r3, #6]
 80007b2:	fb03 f302 	mul.w	r3, r3, r2
 80007b6:	b299      	uxth	r1, r3
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	68fa      	ldr	r2, [r7, #12]
 80007bc:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for (int i = 0; i < 5; i++)
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	3301      	adds	r3, #1
 80007c4:	60fb      	str	r3, [r7, #12]
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	2b04      	cmp	r3, #4
 80007ca:	ddde      	ble.n	800078a <VR_Glove_Scale+0xe>
	}
	vr_glove->joy_axis[0] = vr_glove->flex_sensor_rawdata[5]/4;
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	8a9b      	ldrh	r3, [r3, #20]
 80007d0:	089b      	lsrs	r3, r3, #2
 80007d2:	b29a      	uxth	r2, r3
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	831a      	strh	r2, [r3, #24]
	vr_glove->joy_axis[1] = vr_glove->flex_sensor_rawdata[6]/4;
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	8adb      	ldrh	r3, [r3, #22]
 80007dc:	089b      	lsrs	r3, r3, #2
 80007de:	b29a      	uxth	r2, r3
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	835a      	strh	r2, [r3, #26]
	return 0;
 80007e4:	2300      	movs	r3, #0

}
 80007e6:	4618      	mov	r0, r3
 80007e8:	3714      	adds	r7, #20
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bc80      	pop	{r7}
 80007ee:	4770      	bx	lr

080007f0 <VR_Glove_Serialization>:

int16_t VR_Glove_Serialization(VR_Glove* vr_glove)
{
 80007f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80007f4:	b096      	sub	sp, #88	; 0x58
 80007f6:	af0e      	add	r7, sp, #56	; 0x38
 80007f8:	61f8      	str	r0, [r7, #28]
	sprintf(vr_glove->serializedData, "A%dB%dC%dD%dE%dF%dG%d%s%s%s%s%s%s%s%s\n",
 80007fa:	69fb      	ldr	r3, [r7, #28]
 80007fc:	f103 0c40 	add.w	ip, r3, #64	; 0x40
	  vr_glove->finger_position[0], vr_glove->finger_position[1], vr_glove->finger_position[2], vr_glove->finger_position[3], vr_glove->finger_position[4],
 8000800:	69fb      	ldr	r3, [r7, #28]
 8000802:	881b      	ldrh	r3, [r3, #0]
	sprintf(vr_glove->serializedData, "A%dB%dC%dD%dE%dF%dG%d%s%s%s%s%s%s%s%s\n",
 8000804:	469e      	mov	lr, r3
	  vr_glove->finger_position[0], vr_glove->finger_position[1], vr_glove->finger_position[2], vr_glove->finger_position[3], vr_glove->finger_position[4],
 8000806:	69fb      	ldr	r3, [r7, #28]
 8000808:	885b      	ldrh	r3, [r3, #2]
	sprintf(vr_glove->serializedData, "A%dB%dC%dD%dE%dF%dG%d%s%s%s%s%s%s%s%s\n",
 800080a:	4698      	mov	r8, r3
	  vr_glove->finger_position[0], vr_glove->finger_position[1], vr_glove->finger_position[2], vr_glove->finger_position[3], vr_glove->finger_position[4],
 800080c:	69fb      	ldr	r3, [r7, #28]
 800080e:	889b      	ldrh	r3, [r3, #4]
	sprintf(vr_glove->serializedData, "A%dB%dC%dD%dE%dF%dG%d%s%s%s%s%s%s%s%s\n",
 8000810:	617b      	str	r3, [r7, #20]
	  vr_glove->finger_position[0], vr_glove->finger_position[1], vr_glove->finger_position[2], vr_glove->finger_position[3], vr_glove->finger_position[4],
 8000812:	69fb      	ldr	r3, [r7, #28]
 8000814:	88db      	ldrh	r3, [r3, #6]
	sprintf(vr_glove->serializedData, "A%dB%dC%dD%dE%dF%dG%d%s%s%s%s%s%s%s%s\n",
 8000816:	613b      	str	r3, [r7, #16]
	  vr_glove->finger_position[0], vr_glove->finger_position[1], vr_glove->finger_position[2], vr_glove->finger_position[3], vr_glove->finger_position[4],
 8000818:	69fb      	ldr	r3, [r7, #28]
 800081a:	891b      	ldrh	r3, [r3, #8]
	sprintf(vr_glove->serializedData, "A%dB%dC%dD%dE%dF%dG%d%s%s%s%s%s%s%s%s\n",
 800081c:	60fb      	str	r3, [r7, #12]
	  vr_glove->joy_axis[0], vr_glove->joy_axis[1], vr_glove->joy_button?"H":"",
 800081e:	69fb      	ldr	r3, [r7, #28]
 8000820:	8b1b      	ldrh	r3, [r3, #24]
	sprintf(vr_glove->serializedData, "A%dB%dC%dD%dE%dF%dG%d%s%s%s%s%s%s%s%s\n",
 8000822:	60bb      	str	r3, [r7, #8]
	  vr_glove->joy_axis[0], vr_glove->joy_axis[1], vr_glove->joy_button?"H":"",
 8000824:	69fb      	ldr	r3, [r7, #28]
 8000826:	8b5b      	ldrh	r3, [r3, #26]
	sprintf(vr_glove->serializedData, "A%dB%dC%dD%dE%dF%dG%d%s%s%s%s%s%s%s%s\n",
 8000828:	607b      	str	r3, [r7, #4]
	  vr_glove->joy_axis[0], vr_glove->joy_axis[1], vr_glove->joy_button?"H":"",
 800082a:	69fb      	ldr	r3, [r7, #28]
 800082c:	8b9b      	ldrh	r3, [r3, #28]
	sprintf(vr_glove->serializedData, "A%dB%dC%dD%dE%dF%dG%d%s%s%s%s%s%s%s%s\n",
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <VR_Glove_Serialization+0x46>
 8000832:	482a      	ldr	r0, [pc, #168]	; (80008dc <VR_Glove_Serialization+0xec>)
 8000834:	e000      	b.n	8000838 <VR_Glove_Serialization+0x48>
 8000836:	482a      	ldr	r0, [pc, #168]	; (80008e0 <VR_Glove_Serialization+0xf0>)
	  vr_glove->trigger?"I":"", vr_glove->A_button?"J":"", vr_glove->B_button?"K":"", vr_glove->grub?"L":"", vr_glove->pinch?"M":"", vr_glove->menu_button?"N":"", vr_glove->calib?"O":""
 8000838:	69fb      	ldr	r3, [r7, #28]
 800083a:	8bdb      	ldrh	r3, [r3, #30]
	sprintf(vr_glove->serializedData, "A%dB%dC%dD%dE%dF%dG%d%s%s%s%s%s%s%s%s\n",
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <VR_Glove_Serialization+0x54>
 8000840:	4c28      	ldr	r4, [pc, #160]	; (80008e4 <VR_Glove_Serialization+0xf4>)
 8000842:	e000      	b.n	8000846 <VR_Glove_Serialization+0x56>
 8000844:	4c26      	ldr	r4, [pc, #152]	; (80008e0 <VR_Glove_Serialization+0xf0>)
	  vr_glove->trigger?"I":"", vr_glove->A_button?"J":"", vr_glove->B_button?"K":"", vr_glove->grub?"L":"", vr_glove->pinch?"M":"", vr_glove->menu_button?"N":"", vr_glove->calib?"O":""
 8000846:	69fb      	ldr	r3, [r7, #28]
 8000848:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
	sprintf(vr_glove->serializedData, "A%dB%dC%dD%dE%dF%dG%d%s%s%s%s%s%s%s%s\n",
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <VR_Glove_Serialization+0x62>
 800084e:	4d26      	ldr	r5, [pc, #152]	; (80008e8 <VR_Glove_Serialization+0xf8>)
 8000850:	e000      	b.n	8000854 <VR_Glove_Serialization+0x64>
 8000852:	4d23      	ldr	r5, [pc, #140]	; (80008e0 <VR_Glove_Serialization+0xf0>)
	  vr_glove->trigger?"I":"", vr_glove->A_button?"J":"", vr_glove->B_button?"K":"", vr_glove->grub?"L":"", vr_glove->pinch?"M":"", vr_glove->menu_button?"N":"", vr_glove->calib?"O":""
 8000854:	69fb      	ldr	r3, [r7, #28]
 8000856:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
	sprintf(vr_glove->serializedData, "A%dB%dC%dD%dE%dF%dG%d%s%s%s%s%s%s%s%s\n",
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <VR_Glove_Serialization+0x70>
 800085c:	4e23      	ldr	r6, [pc, #140]	; (80008ec <VR_Glove_Serialization+0xfc>)
 800085e:	e000      	b.n	8000862 <VR_Glove_Serialization+0x72>
 8000860:	4e1f      	ldr	r6, [pc, #124]	; (80008e0 <VR_Glove_Serialization+0xf0>)
	  vr_glove->trigger?"I":"", vr_glove->A_button?"J":"", vr_glove->B_button?"K":"", vr_glove->grub?"L":"", vr_glove->pinch?"M":"", vr_glove->menu_button?"N":"", vr_glove->calib?"O":""
 8000862:	69fb      	ldr	r3, [r7, #28]
 8000864:	8c1b      	ldrh	r3, [r3, #32]
	sprintf(vr_glove->serializedData, "A%dB%dC%dD%dE%dF%dG%d%s%s%s%s%s%s%s%s\n",
 8000866:	2b00      	cmp	r3, #0
 8000868:	d002      	beq.n	8000870 <VR_Glove_Serialization+0x80>
 800086a:	4b21      	ldr	r3, [pc, #132]	; (80008f0 <VR_Glove_Serialization+0x100>)
 800086c:	61bb      	str	r3, [r7, #24]
 800086e:	e001      	b.n	8000874 <VR_Glove_Serialization+0x84>
 8000870:	4b1b      	ldr	r3, [pc, #108]	; (80008e0 <VR_Glove_Serialization+0xf0>)
 8000872:	61bb      	str	r3, [r7, #24]
	  vr_glove->trigger?"I":"", vr_glove->A_button?"J":"", vr_glove->B_button?"K":"", vr_glove->grub?"L":"", vr_glove->pinch?"M":"", vr_glove->menu_button?"N":"", vr_glove->calib?"O":""
 8000874:	69fb      	ldr	r3, [r7, #28]
 8000876:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
	sprintf(vr_glove->serializedData, "A%dB%dC%dD%dE%dF%dG%d%s%s%s%s%s%s%s%s\n",
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <VR_Glove_Serialization+0x90>
 800087c:	491d      	ldr	r1, [pc, #116]	; (80008f4 <VR_Glove_Serialization+0x104>)
 800087e:	e000      	b.n	8000882 <VR_Glove_Serialization+0x92>
 8000880:	4917      	ldr	r1, [pc, #92]	; (80008e0 <VR_Glove_Serialization+0xf0>)
	  vr_glove->trigger?"I":"", vr_glove->A_button?"J":"", vr_glove->B_button?"K":"", vr_glove->grub?"L":"", vr_glove->pinch?"M":"", vr_glove->menu_button?"N":"", vr_glove->calib?"O":""
 8000882:	69fb      	ldr	r3, [r7, #28]
 8000884:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
	sprintf(vr_glove->serializedData, "A%dB%dC%dD%dE%dF%dG%d%s%s%s%s%s%s%s%s\n",
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <VR_Glove_Serialization+0x9e>
 800088a:	4a1b      	ldr	r2, [pc, #108]	; (80008f8 <VR_Glove_Serialization+0x108>)
 800088c:	e000      	b.n	8000890 <VR_Glove_Serialization+0xa0>
 800088e:	4a14      	ldr	r2, [pc, #80]	; (80008e0 <VR_Glove_Serialization+0xf0>)
	  vr_glove->trigger?"I":"", vr_glove->A_button?"J":"", vr_glove->B_button?"K":"", vr_glove->grub?"L":"", vr_glove->pinch?"M":"", vr_glove->menu_button?"N":"", vr_glove->calib?"O":""
 8000890:	69fb      	ldr	r3, [r7, #28]
 8000892:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
	sprintf(vr_glove->serializedData, "A%dB%dC%dD%dE%dF%dG%d%s%s%s%s%s%s%s%s\n",
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <VR_Glove_Serialization+0xac>
 8000898:	4b18      	ldr	r3, [pc, #96]	; (80008fc <VR_Glove_Serialization+0x10c>)
 800089a:	e000      	b.n	800089e <VR_Glove_Serialization+0xae>
 800089c:	4b10      	ldr	r3, [pc, #64]	; (80008e0 <VR_Glove_Serialization+0xf0>)
 800089e:	930c      	str	r3, [sp, #48]	; 0x30
 80008a0:	920b      	str	r2, [sp, #44]	; 0x2c
 80008a2:	910a      	str	r1, [sp, #40]	; 0x28
 80008a4:	69bb      	ldr	r3, [r7, #24]
 80008a6:	9309      	str	r3, [sp, #36]	; 0x24
 80008a8:	9608      	str	r6, [sp, #32]
 80008aa:	9507      	str	r5, [sp, #28]
 80008ac:	9406      	str	r4, [sp, #24]
 80008ae:	9005      	str	r0, [sp, #20]
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	9304      	str	r3, [sp, #16]
 80008b4:	68bb      	ldr	r3, [r7, #8]
 80008b6:	9303      	str	r3, [sp, #12]
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	9302      	str	r3, [sp, #8]
 80008bc:	693b      	ldr	r3, [r7, #16]
 80008be:	9301      	str	r3, [sp, #4]
 80008c0:	697b      	ldr	r3, [r7, #20]
 80008c2:	9300      	str	r3, [sp, #0]
 80008c4:	4643      	mov	r3, r8
 80008c6:	4672      	mov	r2, lr
 80008c8:	490d      	ldr	r1, [pc, #52]	; (8000900 <VR_Glove_Serialization+0x110>)
 80008ca:	4660      	mov	r0, ip
 80008cc:	f007 fd3c 	bl	8008348 <siprintf>
	  );
	return 0;
 80008d0:	2300      	movs	r3, #0
}
 80008d2:	4618      	mov	r0, r3
 80008d4:	3720      	adds	r7, #32
 80008d6:	46bd      	mov	sp, r7
 80008d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80008dc:	08008bf0 	.word	0x08008bf0
 80008e0:	08008bf4 	.word	0x08008bf4
 80008e4:	08008bf8 	.word	0x08008bf8
 80008e8:	08008bfc 	.word	0x08008bfc
 80008ec:	08008c00 	.word	0x08008c00
 80008f0:	08008c04 	.word	0x08008c04
 80008f4:	08008c08 	.word	0x08008c08
 80008f8:	08008c0c 	.word	0x08008c0c
 80008fc:	08008c10 	.word	0x08008c10
 8000900:	08008c14 	.word	0x08008c14

08000904 <VR_Glove_Transmit>:
int16_t VR_Glove_Transmit(VR_Glove* vr_glove)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b084      	sub	sp, #16
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
	int buf_len = 75;
 800090c:	234b      	movs	r3, #75	; 0x4b
 800090e:	60fb      	str	r3, [r7, #12]
	CDC_Transmit_FS(vr_glove->serializedData,buf_len);
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	3340      	adds	r3, #64	; 0x40
 8000914:	68f9      	ldr	r1, [r7, #12]
 8000916:	4618      	mov	r0, r3
 8000918:	f007 f906 	bl	8007b28 <CDC_Transmit_FS>
	return 0;
 800091c:	2300      	movs	r3, #0
}
 800091e:	4618      	mov	r0, r3
 8000920:	3710      	adds	r7, #16
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}

08000926 <VR_Glove_Gestures>:

int16_t VR_Glove_Gestures(VR_Glove* vr_glove)
{
 8000926:	b480      	push	{r7}
 8000928:	b083      	sub	sp, #12
 800092a:	af00      	add	r7, sp, #0
 800092c:	6078      	str	r0, [r7, #4]
	vr_glove->grub = (vr_glove->finger_position[1]+vr_glove->finger_position[2]+vr_glove->finger_position[3]+vr_glove->finger_position[4]) / 4 <= ANALOG_MAX/2 ? 0:1;
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	885b      	ldrh	r3, [r3, #2]
 8000932:	461a      	mov	r2, r3
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	889b      	ldrh	r3, [r3, #4]
 8000938:	4413      	add	r3, r2
 800093a:	687a      	ldr	r2, [r7, #4]
 800093c:	88d2      	ldrh	r2, [r2, #6]
 800093e:	4413      	add	r3, r2
 8000940:	687a      	ldr	r2, [r7, #4]
 8000942:	8912      	ldrh	r2, [r2, #8]
 8000944:	4413      	add	r3, r2
 8000946:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800094a:	4293      	cmp	r3, r2
 800094c:	bfcc      	ite	gt
 800094e:	2301      	movgt	r3, #1
 8000950:	2300      	movle	r3, #0
 8000952:	b2db      	uxtb	r3, r3
 8000954:	b29a      	uxth	r2, r3
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	841a      	strh	r2, [r3, #32]
	vr_glove->pinch = (vr_glove->finger_position[0]+vr_glove->finger_position[1]) / 2 <= ANALOG_MAX/2 ? 0:1;
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	881b      	ldrh	r3, [r3, #0]
 800095e:	461a      	mov	r2, r3
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	885b      	ldrh	r3, [r3, #2]
 8000964:	4413      	add	r3, r2
 8000966:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800096a:	4293      	cmp	r3, r2
 800096c:	bfcc      	ite	gt
 800096e:	2301      	movgt	r3, #1
 8000970:	2300      	movle	r3, #0
 8000972:	b2db      	uxtb	r3, r3
 8000974:	b29a      	uxth	r2, r3
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	845a      	strh	r2, [r3, #34]	; 0x22
	vr_glove->trigger = (vr_glove->finger_position[1]) <= ANALOG_MAX/2 ? 0:1;
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	885b      	ldrh	r3, [r3, #2]
 800097e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8000982:	4293      	cmp	r3, r2
 8000984:	bf8c      	ite	hi
 8000986:	2301      	movhi	r3, #1
 8000988:	2300      	movls	r3, #0
 800098a:	b2db      	uxtb	r3, r3
 800098c:	b29a      	uxth	r2, r3
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	83da      	strh	r2, [r3, #30]
	return 0;
 8000992:	2300      	movs	r3, #0
}
 8000994:	4618      	mov	r0, r3
 8000996:	370c      	adds	r7, #12
 8000998:	46bd      	mov	sp, r7
 800099a:	bc80      	pop	{r7}
 800099c:	4770      	bx	lr
	...

080009a0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009a0:	480c      	ldr	r0, [pc, #48]	; (80009d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80009a2:	490d      	ldr	r1, [pc, #52]	; (80009d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80009a4:	4a0d      	ldr	r2, [pc, #52]	; (80009dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80009a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009a8:	e002      	b.n	80009b0 <LoopCopyDataInit>

080009aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009ae:	3304      	adds	r3, #4

080009b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009b4:	d3f9      	bcc.n	80009aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009b6:	4a0a      	ldr	r2, [pc, #40]	; (80009e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80009b8:	4c0a      	ldr	r4, [pc, #40]	; (80009e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80009ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009bc:	e001      	b.n	80009c2 <LoopFillZerobss>

080009be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009c0:	3204      	adds	r2, #4

080009c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009c4:	d3fb      	bcc.n	80009be <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80009c6:	f7ff fdc3 	bl	8000550 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009ca:	f007 fc91 	bl	80082f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009ce:	f7ff fbbd 	bl	800014c <main>
  bx lr
 80009d2:	4770      	bx	lr
  ldr r0, =_sdata
 80009d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009d8:	20000270 	.word	0x20000270
  ldr r2, =_sidata
 80009dc:	08008cf8 	.word	0x08008cf8
  ldr r2, =_sbss
 80009e0:	20000270 	.word	0x20000270
  ldr r4, =_ebss
 80009e4:	20001480 	.word	0x20001480

080009e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009e8:	e7fe      	b.n	80009e8 <ADC1_2_IRQHandler>
	...

080009ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009f0:	4b08      	ldr	r3, [pc, #32]	; (8000a14 <HAL_Init+0x28>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a07      	ldr	r2, [pc, #28]	; (8000a14 <HAL_Init+0x28>)
 80009f6:	f043 0310 	orr.w	r3, r3, #16
 80009fa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009fc:	2003      	movs	r0, #3
 80009fe:	f000 fd9f 	bl	8001540 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a02:	200f      	movs	r0, #15
 8000a04:	f000 f808 	bl	8000a18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a08:	f7ff fccc 	bl	80003a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a0c:	2300      	movs	r3, #0
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	40022000 	.word	0x40022000

08000a18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a20:	4b12      	ldr	r3, [pc, #72]	; (8000a6c <HAL_InitTick+0x54>)
 8000a22:	681a      	ldr	r2, [r3, #0]
 8000a24:	4b12      	ldr	r3, [pc, #72]	; (8000a70 <HAL_InitTick+0x58>)
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	4619      	mov	r1, r3
 8000a2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a32:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a36:	4618      	mov	r0, r3
 8000a38:	f000 fdb7 	bl	80015aa <HAL_SYSTICK_Config>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a42:	2301      	movs	r3, #1
 8000a44:	e00e      	b.n	8000a64 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	2b0f      	cmp	r3, #15
 8000a4a:	d80a      	bhi.n	8000a62 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	6879      	ldr	r1, [r7, #4]
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a54:	f000 fd7f 	bl	8001556 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a58:	4a06      	ldr	r2, [pc, #24]	; (8000a74 <HAL_InitTick+0x5c>)
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	e000      	b.n	8000a64 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a62:	2301      	movs	r3, #1
}
 8000a64:	4618      	mov	r0, r3
 8000a66:	3708      	adds	r7, #8
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	20000090 	.word	0x20000090
 8000a70:	20000098 	.word	0x20000098
 8000a74:	20000094 	.word	0x20000094

08000a78 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a7c:	4b05      	ldr	r3, [pc, #20]	; (8000a94 <HAL_IncTick+0x1c>)
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	461a      	mov	r2, r3
 8000a82:	4b05      	ldr	r3, [pc, #20]	; (8000a98 <HAL_IncTick+0x20>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	4413      	add	r3, r2
 8000a88:	4a03      	ldr	r2, [pc, #12]	; (8000a98 <HAL_IncTick+0x20>)
 8000a8a:	6013      	str	r3, [r2, #0]
}
 8000a8c:	bf00      	nop
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bc80      	pop	{r7}
 8000a92:	4770      	bx	lr
 8000a94:	20000098 	.word	0x20000098
 8000a98:	200004ec 	.word	0x200004ec

08000a9c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000aa0:	4b02      	ldr	r3, [pc, #8]	; (8000aac <HAL_GetTick+0x10>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
}
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bc80      	pop	{r7}
 8000aaa:	4770      	bx	lr
 8000aac:	200004ec 	.word	0x200004ec

08000ab0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b084      	sub	sp, #16
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ab8:	f7ff fff0 	bl	8000a9c <HAL_GetTick>
 8000abc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000ac8:	d005      	beq.n	8000ad6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000aca:	4b0a      	ldr	r3, [pc, #40]	; (8000af4 <HAL_Delay+0x44>)
 8000acc:	781b      	ldrb	r3, [r3, #0]
 8000ace:	461a      	mov	r2, r3
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	4413      	add	r3, r2
 8000ad4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ad6:	bf00      	nop
 8000ad8:	f7ff ffe0 	bl	8000a9c <HAL_GetTick>
 8000adc:	4602      	mov	r2, r0
 8000ade:	68bb      	ldr	r3, [r7, #8]
 8000ae0:	1ad3      	subs	r3, r2, r3
 8000ae2:	68fa      	ldr	r2, [r7, #12]
 8000ae4:	429a      	cmp	r2, r3
 8000ae6:	d8f7      	bhi.n	8000ad8 <HAL_Delay+0x28>
  {
  }
}
 8000ae8:	bf00      	nop
 8000aea:	bf00      	nop
 8000aec:	3710      	adds	r7, #16
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	20000098 	.word	0x20000098

08000af8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b086      	sub	sp, #24
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b00:	2300      	movs	r3, #0
 8000b02:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000b04:	2300      	movs	r3, #0
 8000b06:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d101      	bne.n	8000b1a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000b16:	2301      	movs	r3, #1
 8000b18:	e0be      	b.n	8000c98 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	689b      	ldr	r3, [r3, #8]
 8000b1e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d109      	bne.n	8000b3c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	2200      	movs	r2, #0
 8000b32:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000b36:	6878      	ldr	r0, [r7, #4]
 8000b38:	f7ff fc66 	bl	8000408 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000b3c:	6878      	ldr	r0, [r7, #4]
 8000b3e:	f000 fbf1 	bl	8001324 <ADC_ConversionStop_Disable>
 8000b42:	4603      	mov	r3, r0
 8000b44:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b4a:	f003 0310 	and.w	r3, r3, #16
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	f040 8099 	bne.w	8000c86 <HAL_ADC_Init+0x18e>
 8000b54:	7dfb      	ldrb	r3, [r7, #23]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	f040 8095 	bne.w	8000c86 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b60:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000b64:	f023 0302 	bic.w	r3, r3, #2
 8000b68:	f043 0202 	orr.w	r2, r3, #2
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000b78:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	7b1b      	ldrb	r3, [r3, #12]
 8000b7e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000b80:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000b82:	68ba      	ldr	r2, [r7, #8]
 8000b84:	4313      	orrs	r3, r2
 8000b86:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	689b      	ldr	r3, [r3, #8]
 8000b8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000b90:	d003      	beq.n	8000b9a <HAL_ADC_Init+0xa2>
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	689b      	ldr	r3, [r3, #8]
 8000b96:	2b01      	cmp	r3, #1
 8000b98:	d102      	bne.n	8000ba0 <HAL_ADC_Init+0xa8>
 8000b9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b9e:	e000      	b.n	8000ba2 <HAL_ADC_Init+0xaa>
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	693a      	ldr	r2, [r7, #16]
 8000ba4:	4313      	orrs	r3, r2
 8000ba6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	7d1b      	ldrb	r3, [r3, #20]
 8000bac:	2b01      	cmp	r3, #1
 8000bae:	d119      	bne.n	8000be4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	7b1b      	ldrb	r3, [r3, #12]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d109      	bne.n	8000bcc <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	699b      	ldr	r3, [r3, #24]
 8000bbc:	3b01      	subs	r3, #1
 8000bbe:	035a      	lsls	r2, r3, #13
 8000bc0:	693b      	ldr	r3, [r7, #16]
 8000bc2:	4313      	orrs	r3, r2
 8000bc4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000bc8:	613b      	str	r3, [r7, #16]
 8000bca:	e00b      	b.n	8000be4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bd0:	f043 0220 	orr.w	r2, r3, #32
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bdc:	f043 0201 	orr.w	r2, r3, #1
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	685b      	ldr	r3, [r3, #4]
 8000bea:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	693a      	ldr	r2, [r7, #16]
 8000bf4:	430a      	orrs	r2, r1
 8000bf6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	689a      	ldr	r2, [r3, #8]
 8000bfe:	4b28      	ldr	r3, [pc, #160]	; (8000ca0 <HAL_ADC_Init+0x1a8>)
 8000c00:	4013      	ands	r3, r2
 8000c02:	687a      	ldr	r2, [r7, #4]
 8000c04:	6812      	ldr	r2, [r2, #0]
 8000c06:	68b9      	ldr	r1, [r7, #8]
 8000c08:	430b      	orrs	r3, r1
 8000c0a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	689b      	ldr	r3, [r3, #8]
 8000c10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000c14:	d003      	beq.n	8000c1e <HAL_ADC_Init+0x126>
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	689b      	ldr	r3, [r3, #8]
 8000c1a:	2b01      	cmp	r3, #1
 8000c1c:	d104      	bne.n	8000c28 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	691b      	ldr	r3, [r3, #16]
 8000c22:	3b01      	subs	r3, #1
 8000c24:	051b      	lsls	r3, r3, #20
 8000c26:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c2e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	68fa      	ldr	r2, [r7, #12]
 8000c38:	430a      	orrs	r2, r1
 8000c3a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	689a      	ldr	r2, [r3, #8]
 8000c42:	4b18      	ldr	r3, [pc, #96]	; (8000ca4 <HAL_ADC_Init+0x1ac>)
 8000c44:	4013      	ands	r3, r2
 8000c46:	68ba      	ldr	r2, [r7, #8]
 8000c48:	429a      	cmp	r2, r3
 8000c4a:	d10b      	bne.n	8000c64 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	2200      	movs	r2, #0
 8000c50:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c56:	f023 0303 	bic.w	r3, r3, #3
 8000c5a:	f043 0201 	orr.w	r2, r3, #1
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000c62:	e018      	b.n	8000c96 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c68:	f023 0312 	bic.w	r3, r3, #18
 8000c6c:	f043 0210 	orr.w	r2, r3, #16
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c78:	f043 0201 	orr.w	r2, r3, #1
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000c80:	2301      	movs	r3, #1
 8000c82:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000c84:	e007      	b.n	8000c96 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c8a:	f043 0210 	orr.w	r2, r3, #16
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000c92:	2301      	movs	r3, #1
 8000c94:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000c96:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c98:	4618      	mov	r0, r3
 8000c9a:	3718      	adds	r7, #24
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	ffe1f7fd 	.word	0xffe1f7fd
 8000ca4:	ff1f0efe 	.word	0xff1f0efe

08000ca8 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b084      	sub	sp, #16
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000cba:	2b01      	cmp	r3, #1
 8000cbc:	d101      	bne.n	8000cc2 <HAL_ADC_Start+0x1a>
 8000cbe:	2302      	movs	r3, #2
 8000cc0:	e098      	b.n	8000df4 <HAL_ADC_Start+0x14c>
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000cca:	6878      	ldr	r0, [r7, #4]
 8000ccc:	f000 fad0 	bl	8001270 <ADC_Enable>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000cd4:	7bfb      	ldrb	r3, [r7, #15]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	f040 8087 	bne.w	8000dea <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ce0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000ce4:	f023 0301 	bic.w	r3, r3, #1
 8000ce8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a41      	ldr	r2, [pc, #260]	; (8000dfc <HAL_ADC_Start+0x154>)
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	d105      	bne.n	8000d06 <HAL_ADC_Start+0x5e>
 8000cfa:	4b41      	ldr	r3, [pc, #260]	; (8000e00 <HAL_ADC_Start+0x158>)
 8000cfc:	685b      	ldr	r3, [r3, #4]
 8000cfe:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d115      	bne.n	8000d32 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d0a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d026      	beq.n	8000d6e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d24:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000d28:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000d30:	e01d      	b.n	8000d6e <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d36:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4a2f      	ldr	r2, [pc, #188]	; (8000e00 <HAL_ADC_Start+0x158>)
 8000d44:	4293      	cmp	r3, r2
 8000d46:	d004      	beq.n	8000d52 <HAL_ADC_Start+0xaa>
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a2b      	ldr	r2, [pc, #172]	; (8000dfc <HAL_ADC_Start+0x154>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d10d      	bne.n	8000d6e <HAL_ADC_Start+0xc6>
 8000d52:	4b2b      	ldr	r3, [pc, #172]	; (8000e00 <HAL_ADC_Start+0x158>)
 8000d54:	685b      	ldr	r3, [r3, #4]
 8000d56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d007      	beq.n	8000d6e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d62:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000d66:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d006      	beq.n	8000d88 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d7e:	f023 0206 	bic.w	r2, r3, #6
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	62da      	str	r2, [r3, #44]	; 0x2c
 8000d86:	e002      	b.n	8000d8e <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	2200      	movs	r2, #0
 8000d92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	f06f 0202 	mvn.w	r2, #2
 8000d9e:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	689b      	ldr	r3, [r3, #8]
 8000da6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000daa:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000dae:	d113      	bne.n	8000dd8 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000db4:	4a11      	ldr	r2, [pc, #68]	; (8000dfc <HAL_ADC_Start+0x154>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d105      	bne.n	8000dc6 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000dba:	4b11      	ldr	r3, [pc, #68]	; (8000e00 <HAL_ADC_Start+0x158>)
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d108      	bne.n	8000dd8 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	689a      	ldr	r2, [r3, #8]
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000dd4:	609a      	str	r2, [r3, #8]
 8000dd6:	e00c      	b.n	8000df2 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	689a      	ldr	r2, [r3, #8]
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000de6:	609a      	str	r2, [r3, #8]
 8000de8:	e003      	b.n	8000df2 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	2200      	movs	r2, #0
 8000dee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8000df2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	3710      	adds	r7, #16
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	40012800 	.word	0x40012800
 8000e00:	40012400 	.word	0x40012400

08000e04 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b084      	sub	sp, #16
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000e16:	2b01      	cmp	r3, #1
 8000e18:	d101      	bne.n	8000e1e <HAL_ADC_Stop+0x1a>
 8000e1a:	2302      	movs	r3, #2
 8000e1c:	e01a      	b.n	8000e54 <HAL_ADC_Stop+0x50>
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	2201      	movs	r2, #1
 8000e22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000e26:	6878      	ldr	r0, [r7, #4]
 8000e28:	f000 fa7c 	bl	8001324 <ADC_ConversionStop_Disable>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8000e30:	7bfb      	ldrb	r3, [r7, #15]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d109      	bne.n	8000e4a <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e3a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000e3e:	f023 0301 	bic.w	r3, r3, #1
 8000e42:	f043 0201 	orr.w	r2, r3, #1
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000e52:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	3710      	adds	r7, #16
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}

08000e5c <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000e5c:	b590      	push	{r4, r7, lr}
 8000e5e:	b087      	sub	sp, #28
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
 8000e64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000e66:	2300      	movs	r3, #0
 8000e68:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8000e72:	f7ff fe13 	bl	8000a9c <HAL_GetTick>
 8000e76:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	689b      	ldr	r3, [r3, #8]
 8000e7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d00b      	beq.n	8000e9e <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e8a:	f043 0220 	orr.w	r2, r3, #32
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	2200      	movs	r2, #0
 8000e96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	e0d3      	b.n	8001046 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d131      	bne.n	8000f10 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eb2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d12a      	bne.n	8000f10 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000eba:	e021      	b.n	8000f00 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000ec2:	d01d      	beq.n	8000f00 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d007      	beq.n	8000eda <HAL_ADC_PollForConversion+0x7e>
 8000eca:	f7ff fde7 	bl	8000a9c <HAL_GetTick>
 8000ece:	4602      	mov	r2, r0
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	1ad3      	subs	r3, r2, r3
 8000ed4:	683a      	ldr	r2, [r7, #0]
 8000ed6:	429a      	cmp	r2, r3
 8000ed8:	d212      	bcs.n	8000f00 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f003 0302 	and.w	r3, r3, #2
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d10b      	bne.n	8000f00 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eec:	f043 0204 	orr.w	r2, r3, #4
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8000efc:	2303      	movs	r3, #3
 8000efe:	e0a2      	b.n	8001046 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f003 0302 	and.w	r3, r3, #2
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d0d6      	beq.n	8000ebc <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000f0e:	e070      	b.n	8000ff2 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8000f10:	4b4f      	ldr	r3, [pc, #316]	; (8001050 <HAL_ADC_PollForConversion+0x1f4>)
 8000f12:	681c      	ldr	r4, [r3, #0]
 8000f14:	2002      	movs	r0, #2
 8000f16:	f002 fe89 	bl	8003c2c <HAL_RCCEx_GetPeriphCLKFreq>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	6919      	ldr	r1, [r3, #16]
 8000f26:	4b4b      	ldr	r3, [pc, #300]	; (8001054 <HAL_ADC_PollForConversion+0x1f8>)
 8000f28:	400b      	ands	r3, r1
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d118      	bne.n	8000f60 <HAL_ADC_PollForConversion+0x104>
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	68d9      	ldr	r1, [r3, #12]
 8000f34:	4b48      	ldr	r3, [pc, #288]	; (8001058 <HAL_ADC_PollForConversion+0x1fc>)
 8000f36:	400b      	ands	r3, r1
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d111      	bne.n	8000f60 <HAL_ADC_PollForConversion+0x104>
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	6919      	ldr	r1, [r3, #16]
 8000f42:	4b46      	ldr	r3, [pc, #280]	; (800105c <HAL_ADC_PollForConversion+0x200>)
 8000f44:	400b      	ands	r3, r1
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d108      	bne.n	8000f5c <HAL_ADC_PollForConversion+0x100>
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	68d9      	ldr	r1, [r3, #12]
 8000f50:	4b43      	ldr	r3, [pc, #268]	; (8001060 <HAL_ADC_PollForConversion+0x204>)
 8000f52:	400b      	ands	r3, r1
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d101      	bne.n	8000f5c <HAL_ADC_PollForConversion+0x100>
 8000f58:	2314      	movs	r3, #20
 8000f5a:	e020      	b.n	8000f9e <HAL_ADC_PollForConversion+0x142>
 8000f5c:	2329      	movs	r3, #41	; 0x29
 8000f5e:	e01e      	b.n	8000f9e <HAL_ADC_PollForConversion+0x142>
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	6919      	ldr	r1, [r3, #16]
 8000f66:	4b3d      	ldr	r3, [pc, #244]	; (800105c <HAL_ADC_PollForConversion+0x200>)
 8000f68:	400b      	ands	r3, r1
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d106      	bne.n	8000f7c <HAL_ADC_PollForConversion+0x120>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	68d9      	ldr	r1, [r3, #12]
 8000f74:	4b3a      	ldr	r3, [pc, #232]	; (8001060 <HAL_ADC_PollForConversion+0x204>)
 8000f76:	400b      	ands	r3, r1
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d00d      	beq.n	8000f98 <HAL_ADC_PollForConversion+0x13c>
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	6919      	ldr	r1, [r3, #16]
 8000f82:	4b38      	ldr	r3, [pc, #224]	; (8001064 <HAL_ADC_PollForConversion+0x208>)
 8000f84:	400b      	ands	r3, r1
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d108      	bne.n	8000f9c <HAL_ADC_PollForConversion+0x140>
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	68d9      	ldr	r1, [r3, #12]
 8000f90:	4b34      	ldr	r3, [pc, #208]	; (8001064 <HAL_ADC_PollForConversion+0x208>)
 8000f92:	400b      	ands	r3, r1
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d101      	bne.n	8000f9c <HAL_ADC_PollForConversion+0x140>
 8000f98:	2354      	movs	r3, #84	; 0x54
 8000f9a:	e000      	b.n	8000f9e <HAL_ADC_PollForConversion+0x142>
 8000f9c:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8000f9e:	fb02 f303 	mul.w	r3, r2, r3
 8000fa2:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000fa4:	e021      	b.n	8000fea <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000fac:	d01a      	beq.n	8000fe4 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d007      	beq.n	8000fc4 <HAL_ADC_PollForConversion+0x168>
 8000fb4:	f7ff fd72 	bl	8000a9c <HAL_GetTick>
 8000fb8:	4602      	mov	r2, r0
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	1ad3      	subs	r3, r2, r3
 8000fbe:	683a      	ldr	r2, [r7, #0]
 8000fc0:	429a      	cmp	r2, r3
 8000fc2:	d20f      	bcs.n	8000fe4 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	693a      	ldr	r2, [r7, #16]
 8000fc8:	429a      	cmp	r2, r3
 8000fca:	d90b      	bls.n	8000fe4 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fd0:	f043 0204 	orr.w	r2, r3, #4
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2200      	movs	r2, #0
 8000fdc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8000fe0:	2303      	movs	r3, #3
 8000fe2:	e030      	b.n	8001046 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	693a      	ldr	r2, [r7, #16]
 8000fee:	429a      	cmp	r2, r3
 8000ff0:	d8d9      	bhi.n	8000fa6 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f06f 0212 	mvn.w	r2, #18
 8000ffa:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001000:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	689b      	ldr	r3, [r3, #8]
 800100e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001012:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001016:	d115      	bne.n	8001044 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800101c:	2b00      	cmp	r3, #0
 800101e:	d111      	bne.n	8001044 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001024:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001030:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001034:	2b00      	cmp	r3, #0
 8001036:	d105      	bne.n	8001044 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800103c:	f043 0201 	orr.w	r2, r3, #1
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001044:	2300      	movs	r3, #0
}
 8001046:	4618      	mov	r0, r3
 8001048:	371c      	adds	r7, #28
 800104a:	46bd      	mov	sp, r7
 800104c:	bd90      	pop	{r4, r7, pc}
 800104e:	bf00      	nop
 8001050:	20000090 	.word	0x20000090
 8001054:	24924924 	.word	0x24924924
 8001058:	00924924 	.word	0x00924924
 800105c:	12492492 	.word	0x12492492
 8001060:	00492492 	.word	0x00492492
 8001064:	00249249 	.word	0x00249249

08001068 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001076:	4618      	mov	r0, r3
 8001078:	370c      	adds	r7, #12
 800107a:	46bd      	mov	sp, r7
 800107c:	bc80      	pop	{r7}
 800107e:	4770      	bx	lr

08001080 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001080:	b480      	push	{r7}
 8001082:	b085      	sub	sp, #20
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800108a:	2300      	movs	r3, #0
 800108c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800108e:	2300      	movs	r3, #0
 8001090:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001098:	2b01      	cmp	r3, #1
 800109a:	d101      	bne.n	80010a0 <HAL_ADC_ConfigChannel+0x20>
 800109c:	2302      	movs	r3, #2
 800109e:	e0dc      	b.n	800125a <HAL_ADC_ConfigChannel+0x1da>
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2201      	movs	r2, #1
 80010a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	2b06      	cmp	r3, #6
 80010ae:	d81c      	bhi.n	80010ea <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	685a      	ldr	r2, [r3, #4]
 80010ba:	4613      	mov	r3, r2
 80010bc:	009b      	lsls	r3, r3, #2
 80010be:	4413      	add	r3, r2
 80010c0:	3b05      	subs	r3, #5
 80010c2:	221f      	movs	r2, #31
 80010c4:	fa02 f303 	lsl.w	r3, r2, r3
 80010c8:	43db      	mvns	r3, r3
 80010ca:	4019      	ands	r1, r3
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	6818      	ldr	r0, [r3, #0]
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	685a      	ldr	r2, [r3, #4]
 80010d4:	4613      	mov	r3, r2
 80010d6:	009b      	lsls	r3, r3, #2
 80010d8:	4413      	add	r3, r2
 80010da:	3b05      	subs	r3, #5
 80010dc:	fa00 f203 	lsl.w	r2, r0, r3
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	430a      	orrs	r2, r1
 80010e6:	635a      	str	r2, [r3, #52]	; 0x34
 80010e8:	e03c      	b.n	8001164 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	2b0c      	cmp	r3, #12
 80010f0:	d81c      	bhi.n	800112c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	685a      	ldr	r2, [r3, #4]
 80010fc:	4613      	mov	r3, r2
 80010fe:	009b      	lsls	r3, r3, #2
 8001100:	4413      	add	r3, r2
 8001102:	3b23      	subs	r3, #35	; 0x23
 8001104:	221f      	movs	r2, #31
 8001106:	fa02 f303 	lsl.w	r3, r2, r3
 800110a:	43db      	mvns	r3, r3
 800110c:	4019      	ands	r1, r3
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	6818      	ldr	r0, [r3, #0]
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	685a      	ldr	r2, [r3, #4]
 8001116:	4613      	mov	r3, r2
 8001118:	009b      	lsls	r3, r3, #2
 800111a:	4413      	add	r3, r2
 800111c:	3b23      	subs	r3, #35	; 0x23
 800111e:	fa00 f203 	lsl.w	r2, r0, r3
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	430a      	orrs	r2, r1
 8001128:	631a      	str	r2, [r3, #48]	; 0x30
 800112a:	e01b      	b.n	8001164 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	685a      	ldr	r2, [r3, #4]
 8001136:	4613      	mov	r3, r2
 8001138:	009b      	lsls	r3, r3, #2
 800113a:	4413      	add	r3, r2
 800113c:	3b41      	subs	r3, #65	; 0x41
 800113e:	221f      	movs	r2, #31
 8001140:	fa02 f303 	lsl.w	r3, r2, r3
 8001144:	43db      	mvns	r3, r3
 8001146:	4019      	ands	r1, r3
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	6818      	ldr	r0, [r3, #0]
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	685a      	ldr	r2, [r3, #4]
 8001150:	4613      	mov	r3, r2
 8001152:	009b      	lsls	r3, r3, #2
 8001154:	4413      	add	r3, r2
 8001156:	3b41      	subs	r3, #65	; 0x41
 8001158:	fa00 f203 	lsl.w	r2, r0, r3
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	430a      	orrs	r2, r1
 8001162:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	2b09      	cmp	r3, #9
 800116a:	d91c      	bls.n	80011a6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	68d9      	ldr	r1, [r3, #12]
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	4613      	mov	r3, r2
 8001178:	005b      	lsls	r3, r3, #1
 800117a:	4413      	add	r3, r2
 800117c:	3b1e      	subs	r3, #30
 800117e:	2207      	movs	r2, #7
 8001180:	fa02 f303 	lsl.w	r3, r2, r3
 8001184:	43db      	mvns	r3, r3
 8001186:	4019      	ands	r1, r3
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	6898      	ldr	r0, [r3, #8]
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	4613      	mov	r3, r2
 8001192:	005b      	lsls	r3, r3, #1
 8001194:	4413      	add	r3, r2
 8001196:	3b1e      	subs	r3, #30
 8001198:	fa00 f203 	lsl.w	r2, r0, r3
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	430a      	orrs	r2, r1
 80011a2:	60da      	str	r2, [r3, #12]
 80011a4:	e019      	b.n	80011da <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	6919      	ldr	r1, [r3, #16]
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	4613      	mov	r3, r2
 80011b2:	005b      	lsls	r3, r3, #1
 80011b4:	4413      	add	r3, r2
 80011b6:	2207      	movs	r2, #7
 80011b8:	fa02 f303 	lsl.w	r3, r2, r3
 80011bc:	43db      	mvns	r3, r3
 80011be:	4019      	ands	r1, r3
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	6898      	ldr	r0, [r3, #8]
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	681a      	ldr	r2, [r3, #0]
 80011c8:	4613      	mov	r3, r2
 80011ca:	005b      	lsls	r3, r3, #1
 80011cc:	4413      	add	r3, r2
 80011ce:	fa00 f203 	lsl.w	r2, r0, r3
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	430a      	orrs	r2, r1
 80011d8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	2b10      	cmp	r3, #16
 80011e0:	d003      	beq.n	80011ea <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80011e6:	2b11      	cmp	r3, #17
 80011e8:	d132      	bne.n	8001250 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4a1d      	ldr	r2, [pc, #116]	; (8001264 <HAL_ADC_ConfigChannel+0x1e4>)
 80011f0:	4293      	cmp	r3, r2
 80011f2:	d125      	bne.n	8001240 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	689b      	ldr	r3, [r3, #8]
 80011fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d126      	bne.n	8001250 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	689a      	ldr	r2, [r3, #8]
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001210:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	2b10      	cmp	r3, #16
 8001218:	d11a      	bne.n	8001250 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800121a:	4b13      	ldr	r3, [pc, #76]	; (8001268 <HAL_ADC_ConfigChannel+0x1e8>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4a13      	ldr	r2, [pc, #76]	; (800126c <HAL_ADC_ConfigChannel+0x1ec>)
 8001220:	fba2 2303 	umull	r2, r3, r2, r3
 8001224:	0c9a      	lsrs	r2, r3, #18
 8001226:	4613      	mov	r3, r2
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	4413      	add	r3, r2
 800122c:	005b      	lsls	r3, r3, #1
 800122e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001230:	e002      	b.n	8001238 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001232:	68bb      	ldr	r3, [r7, #8]
 8001234:	3b01      	subs	r3, #1
 8001236:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001238:	68bb      	ldr	r3, [r7, #8]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d1f9      	bne.n	8001232 <HAL_ADC_ConfigChannel+0x1b2>
 800123e:	e007      	b.n	8001250 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001244:	f043 0220 	orr.w	r2, r3, #32
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800124c:	2301      	movs	r3, #1
 800124e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2200      	movs	r2, #0
 8001254:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001258:	7bfb      	ldrb	r3, [r7, #15]
}
 800125a:	4618      	mov	r0, r3
 800125c:	3714      	adds	r7, #20
 800125e:	46bd      	mov	sp, r7
 8001260:	bc80      	pop	{r7}
 8001262:	4770      	bx	lr
 8001264:	40012400 	.word	0x40012400
 8001268:	20000090 	.word	0x20000090
 800126c:	431bde83 	.word	0x431bde83

08001270 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b084      	sub	sp, #16
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001278:	2300      	movs	r3, #0
 800127a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800127c:	2300      	movs	r3, #0
 800127e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	689b      	ldr	r3, [r3, #8]
 8001286:	f003 0301 	and.w	r3, r3, #1
 800128a:	2b01      	cmp	r3, #1
 800128c:	d040      	beq.n	8001310 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	689a      	ldr	r2, [r3, #8]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f042 0201 	orr.w	r2, r2, #1
 800129c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800129e:	4b1f      	ldr	r3, [pc, #124]	; (800131c <ADC_Enable+0xac>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4a1f      	ldr	r2, [pc, #124]	; (8001320 <ADC_Enable+0xb0>)
 80012a4:	fba2 2303 	umull	r2, r3, r2, r3
 80012a8:	0c9b      	lsrs	r3, r3, #18
 80012aa:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80012ac:	e002      	b.n	80012b4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80012ae:	68bb      	ldr	r3, [r7, #8]
 80012b0:	3b01      	subs	r3, #1
 80012b2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80012b4:	68bb      	ldr	r3, [r7, #8]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d1f9      	bne.n	80012ae <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80012ba:	f7ff fbef 	bl	8000a9c <HAL_GetTick>
 80012be:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80012c0:	e01f      	b.n	8001302 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80012c2:	f7ff fbeb 	bl	8000a9c <HAL_GetTick>
 80012c6:	4602      	mov	r2, r0
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	1ad3      	subs	r3, r2, r3
 80012cc:	2b02      	cmp	r3, #2
 80012ce:	d918      	bls.n	8001302 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	689b      	ldr	r3, [r3, #8]
 80012d6:	f003 0301 	and.w	r3, r3, #1
 80012da:	2b01      	cmp	r3, #1
 80012dc:	d011      	beq.n	8001302 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012e2:	f043 0210 	orr.w	r2, r3, #16
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012ee:	f043 0201 	orr.w	r2, r3, #1
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2200      	movs	r2, #0
 80012fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
 8001300:	e007      	b.n	8001312 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	689b      	ldr	r3, [r3, #8]
 8001308:	f003 0301 	and.w	r3, r3, #1
 800130c:	2b01      	cmp	r3, #1
 800130e:	d1d8      	bne.n	80012c2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001310:	2300      	movs	r3, #0
}
 8001312:	4618      	mov	r0, r3
 8001314:	3710      	adds	r7, #16
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	20000090 	.word	0x20000090
 8001320:	431bde83 	.word	0x431bde83

08001324 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b084      	sub	sp, #16
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800132c:	2300      	movs	r3, #0
 800132e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	689b      	ldr	r3, [r3, #8]
 8001336:	f003 0301 	and.w	r3, r3, #1
 800133a:	2b01      	cmp	r3, #1
 800133c:	d12e      	bne.n	800139c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	689a      	ldr	r2, [r3, #8]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f022 0201 	bic.w	r2, r2, #1
 800134c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800134e:	f7ff fba5 	bl	8000a9c <HAL_GetTick>
 8001352:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001354:	e01b      	b.n	800138e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001356:	f7ff fba1 	bl	8000a9c <HAL_GetTick>
 800135a:	4602      	mov	r2, r0
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	1ad3      	subs	r3, r2, r3
 8001360:	2b02      	cmp	r3, #2
 8001362:	d914      	bls.n	800138e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	689b      	ldr	r3, [r3, #8]
 800136a:	f003 0301 	and.w	r3, r3, #1
 800136e:	2b01      	cmp	r3, #1
 8001370:	d10d      	bne.n	800138e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001376:	f043 0210 	orr.w	r2, r3, #16
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001382:	f043 0201 	orr.w	r2, r3, #1
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800138a:	2301      	movs	r3, #1
 800138c:	e007      	b.n	800139e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	689b      	ldr	r3, [r3, #8]
 8001394:	f003 0301 	and.w	r3, r3, #1
 8001398:	2b01      	cmp	r3, #1
 800139a:	d0dc      	beq.n	8001356 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800139c:	2300      	movs	r3, #0
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3710      	adds	r7, #16
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
	...

080013a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b085      	sub	sp, #20
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	f003 0307 	and.w	r3, r3, #7
 80013b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013b8:	4b0c      	ldr	r3, [pc, #48]	; (80013ec <__NVIC_SetPriorityGrouping+0x44>)
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013be:	68ba      	ldr	r2, [r7, #8]
 80013c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013c4:	4013      	ands	r3, r2
 80013c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013da:	4a04      	ldr	r2, [pc, #16]	; (80013ec <__NVIC_SetPriorityGrouping+0x44>)
 80013dc:	68bb      	ldr	r3, [r7, #8]
 80013de:	60d3      	str	r3, [r2, #12]
}
 80013e0:	bf00      	nop
 80013e2:	3714      	adds	r7, #20
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bc80      	pop	{r7}
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	e000ed00 	.word	0xe000ed00

080013f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013f4:	4b04      	ldr	r3, [pc, #16]	; (8001408 <__NVIC_GetPriorityGrouping+0x18>)
 80013f6:	68db      	ldr	r3, [r3, #12]
 80013f8:	0a1b      	lsrs	r3, r3, #8
 80013fa:	f003 0307 	and.w	r3, r3, #7
}
 80013fe:	4618      	mov	r0, r3
 8001400:	46bd      	mov	sp, r7
 8001402:	bc80      	pop	{r7}
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	e000ed00 	.word	0xe000ed00

0800140c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
 8001412:	4603      	mov	r3, r0
 8001414:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001416:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800141a:	2b00      	cmp	r3, #0
 800141c:	db0b      	blt.n	8001436 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800141e:	79fb      	ldrb	r3, [r7, #7]
 8001420:	f003 021f 	and.w	r2, r3, #31
 8001424:	4906      	ldr	r1, [pc, #24]	; (8001440 <__NVIC_EnableIRQ+0x34>)
 8001426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800142a:	095b      	lsrs	r3, r3, #5
 800142c:	2001      	movs	r0, #1
 800142e:	fa00 f202 	lsl.w	r2, r0, r2
 8001432:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001436:	bf00      	nop
 8001438:	370c      	adds	r7, #12
 800143a:	46bd      	mov	sp, r7
 800143c:	bc80      	pop	{r7}
 800143e:	4770      	bx	lr
 8001440:	e000e100 	.word	0xe000e100

08001444 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	4603      	mov	r3, r0
 800144c:	6039      	str	r1, [r7, #0]
 800144e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001450:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001454:	2b00      	cmp	r3, #0
 8001456:	db0a      	blt.n	800146e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	b2da      	uxtb	r2, r3
 800145c:	490c      	ldr	r1, [pc, #48]	; (8001490 <__NVIC_SetPriority+0x4c>)
 800145e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001462:	0112      	lsls	r2, r2, #4
 8001464:	b2d2      	uxtb	r2, r2
 8001466:	440b      	add	r3, r1
 8001468:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800146c:	e00a      	b.n	8001484 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	b2da      	uxtb	r2, r3
 8001472:	4908      	ldr	r1, [pc, #32]	; (8001494 <__NVIC_SetPriority+0x50>)
 8001474:	79fb      	ldrb	r3, [r7, #7]
 8001476:	f003 030f 	and.w	r3, r3, #15
 800147a:	3b04      	subs	r3, #4
 800147c:	0112      	lsls	r2, r2, #4
 800147e:	b2d2      	uxtb	r2, r2
 8001480:	440b      	add	r3, r1
 8001482:	761a      	strb	r2, [r3, #24]
}
 8001484:	bf00      	nop
 8001486:	370c      	adds	r7, #12
 8001488:	46bd      	mov	sp, r7
 800148a:	bc80      	pop	{r7}
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	e000e100 	.word	0xe000e100
 8001494:	e000ed00 	.word	0xe000ed00

08001498 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001498:	b480      	push	{r7}
 800149a:	b089      	sub	sp, #36	; 0x24
 800149c:	af00      	add	r7, sp, #0
 800149e:	60f8      	str	r0, [r7, #12]
 80014a0:	60b9      	str	r1, [r7, #8]
 80014a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	f003 0307 	and.w	r3, r3, #7
 80014aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014ac:	69fb      	ldr	r3, [r7, #28]
 80014ae:	f1c3 0307 	rsb	r3, r3, #7
 80014b2:	2b04      	cmp	r3, #4
 80014b4:	bf28      	it	cs
 80014b6:	2304      	movcs	r3, #4
 80014b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	3304      	adds	r3, #4
 80014be:	2b06      	cmp	r3, #6
 80014c0:	d902      	bls.n	80014c8 <NVIC_EncodePriority+0x30>
 80014c2:	69fb      	ldr	r3, [r7, #28]
 80014c4:	3b03      	subs	r3, #3
 80014c6:	e000      	b.n	80014ca <NVIC_EncodePriority+0x32>
 80014c8:	2300      	movs	r3, #0
 80014ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80014d0:	69bb      	ldr	r3, [r7, #24]
 80014d2:	fa02 f303 	lsl.w	r3, r2, r3
 80014d6:	43da      	mvns	r2, r3
 80014d8:	68bb      	ldr	r3, [r7, #8]
 80014da:	401a      	ands	r2, r3
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014e0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	fa01 f303 	lsl.w	r3, r1, r3
 80014ea:	43d9      	mvns	r1, r3
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014f0:	4313      	orrs	r3, r2
         );
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3724      	adds	r7, #36	; 0x24
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bc80      	pop	{r7}
 80014fa:	4770      	bx	lr

080014fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	3b01      	subs	r3, #1
 8001508:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800150c:	d301      	bcc.n	8001512 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800150e:	2301      	movs	r3, #1
 8001510:	e00f      	b.n	8001532 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001512:	4a0a      	ldr	r2, [pc, #40]	; (800153c <SysTick_Config+0x40>)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	3b01      	subs	r3, #1
 8001518:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800151a:	210f      	movs	r1, #15
 800151c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001520:	f7ff ff90 	bl	8001444 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001524:	4b05      	ldr	r3, [pc, #20]	; (800153c <SysTick_Config+0x40>)
 8001526:	2200      	movs	r2, #0
 8001528:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800152a:	4b04      	ldr	r3, [pc, #16]	; (800153c <SysTick_Config+0x40>)
 800152c:	2207      	movs	r2, #7
 800152e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001530:	2300      	movs	r3, #0
}
 8001532:	4618      	mov	r0, r3
 8001534:	3708      	adds	r7, #8
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	e000e010 	.word	0xe000e010

08001540 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001548:	6878      	ldr	r0, [r7, #4]
 800154a:	f7ff ff2d 	bl	80013a8 <__NVIC_SetPriorityGrouping>
}
 800154e:	bf00      	nop
 8001550:	3708      	adds	r7, #8
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}

08001556 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001556:	b580      	push	{r7, lr}
 8001558:	b086      	sub	sp, #24
 800155a:	af00      	add	r7, sp, #0
 800155c:	4603      	mov	r3, r0
 800155e:	60b9      	str	r1, [r7, #8]
 8001560:	607a      	str	r2, [r7, #4]
 8001562:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001564:	2300      	movs	r3, #0
 8001566:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001568:	f7ff ff42 	bl	80013f0 <__NVIC_GetPriorityGrouping>
 800156c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800156e:	687a      	ldr	r2, [r7, #4]
 8001570:	68b9      	ldr	r1, [r7, #8]
 8001572:	6978      	ldr	r0, [r7, #20]
 8001574:	f7ff ff90 	bl	8001498 <NVIC_EncodePriority>
 8001578:	4602      	mov	r2, r0
 800157a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800157e:	4611      	mov	r1, r2
 8001580:	4618      	mov	r0, r3
 8001582:	f7ff ff5f 	bl	8001444 <__NVIC_SetPriority>
}
 8001586:	bf00      	nop
 8001588:	3718      	adds	r7, #24
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}

0800158e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800158e:	b580      	push	{r7, lr}
 8001590:	b082      	sub	sp, #8
 8001592:	af00      	add	r7, sp, #0
 8001594:	4603      	mov	r3, r0
 8001596:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001598:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800159c:	4618      	mov	r0, r3
 800159e:	f7ff ff35 	bl	800140c <__NVIC_EnableIRQ>
}
 80015a2:	bf00      	nop
 80015a4:	3708      	adds	r7, #8
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}

080015aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015aa:	b580      	push	{r7, lr}
 80015ac:	b082      	sub	sp, #8
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015b2:	6878      	ldr	r0, [r7, #4]
 80015b4:	f7ff ffa2 	bl	80014fc <SysTick_Config>
 80015b8:	4603      	mov	r3, r0
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3708      	adds	r7, #8
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
	...

080015c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b08b      	sub	sp, #44	; 0x2c
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
 80015cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015ce:	2300      	movs	r3, #0
 80015d0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80015d2:	2300      	movs	r3, #0
 80015d4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015d6:	e169      	b.n	80018ac <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80015d8:	2201      	movs	r2, #1
 80015da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015dc:	fa02 f303 	lsl.w	r3, r2, r3
 80015e0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	69fa      	ldr	r2, [r7, #28]
 80015e8:	4013      	ands	r3, r2
 80015ea:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80015ec:	69ba      	ldr	r2, [r7, #24]
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	429a      	cmp	r2, r3
 80015f2:	f040 8158 	bne.w	80018a6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	4a9a      	ldr	r2, [pc, #616]	; (8001864 <HAL_GPIO_Init+0x2a0>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d05e      	beq.n	80016be <HAL_GPIO_Init+0xfa>
 8001600:	4a98      	ldr	r2, [pc, #608]	; (8001864 <HAL_GPIO_Init+0x2a0>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d875      	bhi.n	80016f2 <HAL_GPIO_Init+0x12e>
 8001606:	4a98      	ldr	r2, [pc, #608]	; (8001868 <HAL_GPIO_Init+0x2a4>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d058      	beq.n	80016be <HAL_GPIO_Init+0xfa>
 800160c:	4a96      	ldr	r2, [pc, #600]	; (8001868 <HAL_GPIO_Init+0x2a4>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d86f      	bhi.n	80016f2 <HAL_GPIO_Init+0x12e>
 8001612:	4a96      	ldr	r2, [pc, #600]	; (800186c <HAL_GPIO_Init+0x2a8>)
 8001614:	4293      	cmp	r3, r2
 8001616:	d052      	beq.n	80016be <HAL_GPIO_Init+0xfa>
 8001618:	4a94      	ldr	r2, [pc, #592]	; (800186c <HAL_GPIO_Init+0x2a8>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d869      	bhi.n	80016f2 <HAL_GPIO_Init+0x12e>
 800161e:	4a94      	ldr	r2, [pc, #592]	; (8001870 <HAL_GPIO_Init+0x2ac>)
 8001620:	4293      	cmp	r3, r2
 8001622:	d04c      	beq.n	80016be <HAL_GPIO_Init+0xfa>
 8001624:	4a92      	ldr	r2, [pc, #584]	; (8001870 <HAL_GPIO_Init+0x2ac>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d863      	bhi.n	80016f2 <HAL_GPIO_Init+0x12e>
 800162a:	4a92      	ldr	r2, [pc, #584]	; (8001874 <HAL_GPIO_Init+0x2b0>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d046      	beq.n	80016be <HAL_GPIO_Init+0xfa>
 8001630:	4a90      	ldr	r2, [pc, #576]	; (8001874 <HAL_GPIO_Init+0x2b0>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d85d      	bhi.n	80016f2 <HAL_GPIO_Init+0x12e>
 8001636:	2b12      	cmp	r3, #18
 8001638:	d82a      	bhi.n	8001690 <HAL_GPIO_Init+0xcc>
 800163a:	2b12      	cmp	r3, #18
 800163c:	d859      	bhi.n	80016f2 <HAL_GPIO_Init+0x12e>
 800163e:	a201      	add	r2, pc, #4	; (adr r2, 8001644 <HAL_GPIO_Init+0x80>)
 8001640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001644:	080016bf 	.word	0x080016bf
 8001648:	08001699 	.word	0x08001699
 800164c:	080016ab 	.word	0x080016ab
 8001650:	080016ed 	.word	0x080016ed
 8001654:	080016f3 	.word	0x080016f3
 8001658:	080016f3 	.word	0x080016f3
 800165c:	080016f3 	.word	0x080016f3
 8001660:	080016f3 	.word	0x080016f3
 8001664:	080016f3 	.word	0x080016f3
 8001668:	080016f3 	.word	0x080016f3
 800166c:	080016f3 	.word	0x080016f3
 8001670:	080016f3 	.word	0x080016f3
 8001674:	080016f3 	.word	0x080016f3
 8001678:	080016f3 	.word	0x080016f3
 800167c:	080016f3 	.word	0x080016f3
 8001680:	080016f3 	.word	0x080016f3
 8001684:	080016f3 	.word	0x080016f3
 8001688:	080016a1 	.word	0x080016a1
 800168c:	080016b5 	.word	0x080016b5
 8001690:	4a79      	ldr	r2, [pc, #484]	; (8001878 <HAL_GPIO_Init+0x2b4>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d013      	beq.n	80016be <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001696:	e02c      	b.n	80016f2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	68db      	ldr	r3, [r3, #12]
 800169c:	623b      	str	r3, [r7, #32]
          break;
 800169e:	e029      	b.n	80016f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	68db      	ldr	r3, [r3, #12]
 80016a4:	3304      	adds	r3, #4
 80016a6:	623b      	str	r3, [r7, #32]
          break;
 80016a8:	e024      	b.n	80016f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	68db      	ldr	r3, [r3, #12]
 80016ae:	3308      	adds	r3, #8
 80016b0:	623b      	str	r3, [r7, #32]
          break;
 80016b2:	e01f      	b.n	80016f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	68db      	ldr	r3, [r3, #12]
 80016b8:	330c      	adds	r3, #12
 80016ba:	623b      	str	r3, [r7, #32]
          break;
 80016bc:	e01a      	b.n	80016f4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d102      	bne.n	80016cc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80016c6:	2304      	movs	r3, #4
 80016c8:	623b      	str	r3, [r7, #32]
          break;
 80016ca:	e013      	b.n	80016f4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d105      	bne.n	80016e0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016d4:	2308      	movs	r3, #8
 80016d6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	69fa      	ldr	r2, [r7, #28]
 80016dc:	611a      	str	r2, [r3, #16]
          break;
 80016de:	e009      	b.n	80016f4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016e0:	2308      	movs	r3, #8
 80016e2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	69fa      	ldr	r2, [r7, #28]
 80016e8:	615a      	str	r2, [r3, #20]
          break;
 80016ea:	e003      	b.n	80016f4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80016ec:	2300      	movs	r3, #0
 80016ee:	623b      	str	r3, [r7, #32]
          break;
 80016f0:	e000      	b.n	80016f4 <HAL_GPIO_Init+0x130>
          break;
 80016f2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80016f4:	69bb      	ldr	r3, [r7, #24]
 80016f6:	2bff      	cmp	r3, #255	; 0xff
 80016f8:	d801      	bhi.n	80016fe <HAL_GPIO_Init+0x13a>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	e001      	b.n	8001702 <HAL_GPIO_Init+0x13e>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	3304      	adds	r3, #4
 8001702:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001704:	69bb      	ldr	r3, [r7, #24]
 8001706:	2bff      	cmp	r3, #255	; 0xff
 8001708:	d802      	bhi.n	8001710 <HAL_GPIO_Init+0x14c>
 800170a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800170c:	009b      	lsls	r3, r3, #2
 800170e:	e002      	b.n	8001716 <HAL_GPIO_Init+0x152>
 8001710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001712:	3b08      	subs	r3, #8
 8001714:	009b      	lsls	r3, r3, #2
 8001716:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	210f      	movs	r1, #15
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	fa01 f303 	lsl.w	r3, r1, r3
 8001724:	43db      	mvns	r3, r3
 8001726:	401a      	ands	r2, r3
 8001728:	6a39      	ldr	r1, [r7, #32]
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	fa01 f303 	lsl.w	r3, r1, r3
 8001730:	431a      	orrs	r2, r3
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800173e:	2b00      	cmp	r3, #0
 8001740:	f000 80b1 	beq.w	80018a6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001744:	4b4d      	ldr	r3, [pc, #308]	; (800187c <HAL_GPIO_Init+0x2b8>)
 8001746:	699b      	ldr	r3, [r3, #24]
 8001748:	4a4c      	ldr	r2, [pc, #304]	; (800187c <HAL_GPIO_Init+0x2b8>)
 800174a:	f043 0301 	orr.w	r3, r3, #1
 800174e:	6193      	str	r3, [r2, #24]
 8001750:	4b4a      	ldr	r3, [pc, #296]	; (800187c <HAL_GPIO_Init+0x2b8>)
 8001752:	699b      	ldr	r3, [r3, #24]
 8001754:	f003 0301 	and.w	r3, r3, #1
 8001758:	60bb      	str	r3, [r7, #8]
 800175a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800175c:	4a48      	ldr	r2, [pc, #288]	; (8001880 <HAL_GPIO_Init+0x2bc>)
 800175e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001760:	089b      	lsrs	r3, r3, #2
 8001762:	3302      	adds	r3, #2
 8001764:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001768:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800176a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800176c:	f003 0303 	and.w	r3, r3, #3
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	220f      	movs	r2, #15
 8001774:	fa02 f303 	lsl.w	r3, r2, r3
 8001778:	43db      	mvns	r3, r3
 800177a:	68fa      	ldr	r2, [r7, #12]
 800177c:	4013      	ands	r3, r2
 800177e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	4a40      	ldr	r2, [pc, #256]	; (8001884 <HAL_GPIO_Init+0x2c0>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d013      	beq.n	80017b0 <HAL_GPIO_Init+0x1ec>
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	4a3f      	ldr	r2, [pc, #252]	; (8001888 <HAL_GPIO_Init+0x2c4>)
 800178c:	4293      	cmp	r3, r2
 800178e:	d00d      	beq.n	80017ac <HAL_GPIO_Init+0x1e8>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	4a3e      	ldr	r2, [pc, #248]	; (800188c <HAL_GPIO_Init+0x2c8>)
 8001794:	4293      	cmp	r3, r2
 8001796:	d007      	beq.n	80017a8 <HAL_GPIO_Init+0x1e4>
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	4a3d      	ldr	r2, [pc, #244]	; (8001890 <HAL_GPIO_Init+0x2cc>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d101      	bne.n	80017a4 <HAL_GPIO_Init+0x1e0>
 80017a0:	2303      	movs	r3, #3
 80017a2:	e006      	b.n	80017b2 <HAL_GPIO_Init+0x1ee>
 80017a4:	2304      	movs	r3, #4
 80017a6:	e004      	b.n	80017b2 <HAL_GPIO_Init+0x1ee>
 80017a8:	2302      	movs	r3, #2
 80017aa:	e002      	b.n	80017b2 <HAL_GPIO_Init+0x1ee>
 80017ac:	2301      	movs	r3, #1
 80017ae:	e000      	b.n	80017b2 <HAL_GPIO_Init+0x1ee>
 80017b0:	2300      	movs	r3, #0
 80017b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017b4:	f002 0203 	and.w	r2, r2, #3
 80017b8:	0092      	lsls	r2, r2, #2
 80017ba:	4093      	lsls	r3, r2
 80017bc:	68fa      	ldr	r2, [r7, #12]
 80017be:	4313      	orrs	r3, r2
 80017c0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80017c2:	492f      	ldr	r1, [pc, #188]	; (8001880 <HAL_GPIO_Init+0x2bc>)
 80017c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c6:	089b      	lsrs	r3, r3, #2
 80017c8:	3302      	adds	r3, #2
 80017ca:	68fa      	ldr	r2, [r7, #12]
 80017cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d006      	beq.n	80017ea <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80017dc:	4b2d      	ldr	r3, [pc, #180]	; (8001894 <HAL_GPIO_Init+0x2d0>)
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	492c      	ldr	r1, [pc, #176]	; (8001894 <HAL_GPIO_Init+0x2d0>)
 80017e2:	69bb      	ldr	r3, [r7, #24]
 80017e4:	4313      	orrs	r3, r2
 80017e6:	600b      	str	r3, [r1, #0]
 80017e8:	e006      	b.n	80017f8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80017ea:	4b2a      	ldr	r3, [pc, #168]	; (8001894 <HAL_GPIO_Init+0x2d0>)
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	69bb      	ldr	r3, [r7, #24]
 80017f0:	43db      	mvns	r3, r3
 80017f2:	4928      	ldr	r1, [pc, #160]	; (8001894 <HAL_GPIO_Init+0x2d0>)
 80017f4:	4013      	ands	r3, r2
 80017f6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001800:	2b00      	cmp	r3, #0
 8001802:	d006      	beq.n	8001812 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001804:	4b23      	ldr	r3, [pc, #140]	; (8001894 <HAL_GPIO_Init+0x2d0>)
 8001806:	685a      	ldr	r2, [r3, #4]
 8001808:	4922      	ldr	r1, [pc, #136]	; (8001894 <HAL_GPIO_Init+0x2d0>)
 800180a:	69bb      	ldr	r3, [r7, #24]
 800180c:	4313      	orrs	r3, r2
 800180e:	604b      	str	r3, [r1, #4]
 8001810:	e006      	b.n	8001820 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001812:	4b20      	ldr	r3, [pc, #128]	; (8001894 <HAL_GPIO_Init+0x2d0>)
 8001814:	685a      	ldr	r2, [r3, #4]
 8001816:	69bb      	ldr	r3, [r7, #24]
 8001818:	43db      	mvns	r3, r3
 800181a:	491e      	ldr	r1, [pc, #120]	; (8001894 <HAL_GPIO_Init+0x2d0>)
 800181c:	4013      	ands	r3, r2
 800181e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001828:	2b00      	cmp	r3, #0
 800182a:	d006      	beq.n	800183a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800182c:	4b19      	ldr	r3, [pc, #100]	; (8001894 <HAL_GPIO_Init+0x2d0>)
 800182e:	689a      	ldr	r2, [r3, #8]
 8001830:	4918      	ldr	r1, [pc, #96]	; (8001894 <HAL_GPIO_Init+0x2d0>)
 8001832:	69bb      	ldr	r3, [r7, #24]
 8001834:	4313      	orrs	r3, r2
 8001836:	608b      	str	r3, [r1, #8]
 8001838:	e006      	b.n	8001848 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800183a:	4b16      	ldr	r3, [pc, #88]	; (8001894 <HAL_GPIO_Init+0x2d0>)
 800183c:	689a      	ldr	r2, [r3, #8]
 800183e:	69bb      	ldr	r3, [r7, #24]
 8001840:	43db      	mvns	r3, r3
 8001842:	4914      	ldr	r1, [pc, #80]	; (8001894 <HAL_GPIO_Init+0x2d0>)
 8001844:	4013      	ands	r3, r2
 8001846:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001850:	2b00      	cmp	r3, #0
 8001852:	d021      	beq.n	8001898 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001854:	4b0f      	ldr	r3, [pc, #60]	; (8001894 <HAL_GPIO_Init+0x2d0>)
 8001856:	68da      	ldr	r2, [r3, #12]
 8001858:	490e      	ldr	r1, [pc, #56]	; (8001894 <HAL_GPIO_Init+0x2d0>)
 800185a:	69bb      	ldr	r3, [r7, #24]
 800185c:	4313      	orrs	r3, r2
 800185e:	60cb      	str	r3, [r1, #12]
 8001860:	e021      	b.n	80018a6 <HAL_GPIO_Init+0x2e2>
 8001862:	bf00      	nop
 8001864:	10320000 	.word	0x10320000
 8001868:	10310000 	.word	0x10310000
 800186c:	10220000 	.word	0x10220000
 8001870:	10210000 	.word	0x10210000
 8001874:	10120000 	.word	0x10120000
 8001878:	10110000 	.word	0x10110000
 800187c:	40021000 	.word	0x40021000
 8001880:	40010000 	.word	0x40010000
 8001884:	40010800 	.word	0x40010800
 8001888:	40010c00 	.word	0x40010c00
 800188c:	40011000 	.word	0x40011000
 8001890:	40011400 	.word	0x40011400
 8001894:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001898:	4b0b      	ldr	r3, [pc, #44]	; (80018c8 <HAL_GPIO_Init+0x304>)
 800189a:	68da      	ldr	r2, [r3, #12]
 800189c:	69bb      	ldr	r3, [r7, #24]
 800189e:	43db      	mvns	r3, r3
 80018a0:	4909      	ldr	r1, [pc, #36]	; (80018c8 <HAL_GPIO_Init+0x304>)
 80018a2:	4013      	ands	r3, r2
 80018a4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80018a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a8:	3301      	adds	r3, #1
 80018aa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b2:	fa22 f303 	lsr.w	r3, r2, r3
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	f47f ae8e 	bne.w	80015d8 <HAL_GPIO_Init+0x14>
  }
}
 80018bc:	bf00      	nop
 80018be:	bf00      	nop
 80018c0:	372c      	adds	r7, #44	; 0x2c
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bc80      	pop	{r7}
 80018c6:	4770      	bx	lr
 80018c8:	40010400 	.word	0x40010400

080018cc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b085      	sub	sp, #20
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
 80018d4:	460b      	mov	r3, r1
 80018d6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	689a      	ldr	r2, [r3, #8]
 80018dc:	887b      	ldrh	r3, [r7, #2]
 80018de:	4013      	ands	r3, r2
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d002      	beq.n	80018ea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80018e4:	2301      	movs	r3, #1
 80018e6:	73fb      	strb	r3, [r7, #15]
 80018e8:	e001      	b.n	80018ee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80018ea:	2300      	movs	r3, #0
 80018ec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80018ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	3714      	adds	r7, #20
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bc80      	pop	{r7}
 80018f8:	4770      	bx	lr

080018fa <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018fa:	b480      	push	{r7}
 80018fc:	b083      	sub	sp, #12
 80018fe:	af00      	add	r7, sp, #0
 8001900:	6078      	str	r0, [r7, #4]
 8001902:	460b      	mov	r3, r1
 8001904:	807b      	strh	r3, [r7, #2]
 8001906:	4613      	mov	r3, r2
 8001908:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800190a:	787b      	ldrb	r3, [r7, #1]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d003      	beq.n	8001918 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001910:	887a      	ldrh	r2, [r7, #2]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001916:	e003      	b.n	8001920 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001918:	887b      	ldrh	r3, [r7, #2]
 800191a:	041a      	lsls	r2, r3, #16
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	611a      	str	r2, [r3, #16]
}
 8001920:	bf00      	nop
 8001922:	370c      	adds	r7, #12
 8001924:	46bd      	mov	sp, r7
 8001926:	bc80      	pop	{r7}
 8001928:	4770      	bx	lr

0800192a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800192a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800192c:	b08b      	sub	sp, #44	; 0x2c
 800192e:	af06      	add	r7, sp, #24
 8001930:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d101      	bne.n	800193c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001938:	2301      	movs	r3, #1
 800193a:	e0fd      	b.n	8001b38 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001942:	b2db      	uxtb	r3, r3
 8001944:	2b00      	cmp	r3, #0
 8001946:	d106      	bne.n	8001956 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2200      	movs	r2, #0
 800194c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001950:	6878      	ldr	r0, [r7, #4]
 8001952:	f006 fa1d 	bl	8007d90 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2203      	movs	r2, #3
 800195a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4618      	mov	r0, r3
 8001964:	f002 fa4c 	bl	8003e00 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	603b      	str	r3, [r7, #0]
 800196e:	687e      	ldr	r6, [r7, #4]
 8001970:	466d      	mov	r5, sp
 8001972:	f106 0410 	add.w	r4, r6, #16
 8001976:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001978:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800197a:	6823      	ldr	r3, [r4, #0]
 800197c:	602b      	str	r3, [r5, #0]
 800197e:	1d33      	adds	r3, r6, #4
 8001980:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001982:	6838      	ldr	r0, [r7, #0]
 8001984:	f002 fa16 	bl	8003db4 <USB_CoreInit>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d005      	beq.n	800199a <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2202      	movs	r2, #2
 8001992:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	e0ce      	b.n	8001b38 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	2100      	movs	r1, #0
 80019a0:	4618      	mov	r0, r3
 80019a2:	f002 fa47 	bl	8003e34 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019a6:	2300      	movs	r3, #0
 80019a8:	73fb      	strb	r3, [r7, #15]
 80019aa:	e04c      	b.n	8001a46 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80019ac:	7bfb      	ldrb	r3, [r7, #15]
 80019ae:	6879      	ldr	r1, [r7, #4]
 80019b0:	1c5a      	adds	r2, r3, #1
 80019b2:	4613      	mov	r3, r2
 80019b4:	009b      	lsls	r3, r3, #2
 80019b6:	4413      	add	r3, r2
 80019b8:	00db      	lsls	r3, r3, #3
 80019ba:	440b      	add	r3, r1
 80019bc:	3301      	adds	r3, #1
 80019be:	2201      	movs	r2, #1
 80019c0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80019c2:	7bfb      	ldrb	r3, [r7, #15]
 80019c4:	6879      	ldr	r1, [r7, #4]
 80019c6:	1c5a      	adds	r2, r3, #1
 80019c8:	4613      	mov	r3, r2
 80019ca:	009b      	lsls	r3, r3, #2
 80019cc:	4413      	add	r3, r2
 80019ce:	00db      	lsls	r3, r3, #3
 80019d0:	440b      	add	r3, r1
 80019d2:	7bfa      	ldrb	r2, [r7, #15]
 80019d4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80019d6:	7bfa      	ldrb	r2, [r7, #15]
 80019d8:	7bfb      	ldrb	r3, [r7, #15]
 80019da:	b298      	uxth	r0, r3
 80019dc:	6879      	ldr	r1, [r7, #4]
 80019de:	4613      	mov	r3, r2
 80019e0:	009b      	lsls	r3, r3, #2
 80019e2:	4413      	add	r3, r2
 80019e4:	00db      	lsls	r3, r3, #3
 80019e6:	440b      	add	r3, r1
 80019e8:	3336      	adds	r3, #54	; 0x36
 80019ea:	4602      	mov	r2, r0
 80019ec:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80019ee:	7bfb      	ldrb	r3, [r7, #15]
 80019f0:	6879      	ldr	r1, [r7, #4]
 80019f2:	1c5a      	adds	r2, r3, #1
 80019f4:	4613      	mov	r3, r2
 80019f6:	009b      	lsls	r3, r3, #2
 80019f8:	4413      	add	r3, r2
 80019fa:	00db      	lsls	r3, r3, #3
 80019fc:	440b      	add	r3, r1
 80019fe:	3303      	adds	r3, #3
 8001a00:	2200      	movs	r2, #0
 8001a02:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001a04:	7bfa      	ldrb	r2, [r7, #15]
 8001a06:	6879      	ldr	r1, [r7, #4]
 8001a08:	4613      	mov	r3, r2
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	4413      	add	r3, r2
 8001a0e:	00db      	lsls	r3, r3, #3
 8001a10:	440b      	add	r3, r1
 8001a12:	3338      	adds	r3, #56	; 0x38
 8001a14:	2200      	movs	r2, #0
 8001a16:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001a18:	7bfa      	ldrb	r2, [r7, #15]
 8001a1a:	6879      	ldr	r1, [r7, #4]
 8001a1c:	4613      	mov	r3, r2
 8001a1e:	009b      	lsls	r3, r3, #2
 8001a20:	4413      	add	r3, r2
 8001a22:	00db      	lsls	r3, r3, #3
 8001a24:	440b      	add	r3, r1
 8001a26:	333c      	adds	r3, #60	; 0x3c
 8001a28:	2200      	movs	r2, #0
 8001a2a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001a2c:	7bfa      	ldrb	r2, [r7, #15]
 8001a2e:	6879      	ldr	r1, [r7, #4]
 8001a30:	4613      	mov	r3, r2
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	4413      	add	r3, r2
 8001a36:	00db      	lsls	r3, r3, #3
 8001a38:	440b      	add	r3, r1
 8001a3a:	3340      	adds	r3, #64	; 0x40
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a40:	7bfb      	ldrb	r3, [r7, #15]
 8001a42:	3301      	adds	r3, #1
 8001a44:	73fb      	strb	r3, [r7, #15]
 8001a46:	7bfa      	ldrb	r2, [r7, #15]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d3ad      	bcc.n	80019ac <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a50:	2300      	movs	r3, #0
 8001a52:	73fb      	strb	r3, [r7, #15]
 8001a54:	e044      	b.n	8001ae0 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001a56:	7bfa      	ldrb	r2, [r7, #15]
 8001a58:	6879      	ldr	r1, [r7, #4]
 8001a5a:	4613      	mov	r3, r2
 8001a5c:	009b      	lsls	r3, r3, #2
 8001a5e:	4413      	add	r3, r2
 8001a60:	00db      	lsls	r3, r3, #3
 8001a62:	440b      	add	r3, r1
 8001a64:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001a68:	2200      	movs	r2, #0
 8001a6a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001a6c:	7bfa      	ldrb	r2, [r7, #15]
 8001a6e:	6879      	ldr	r1, [r7, #4]
 8001a70:	4613      	mov	r3, r2
 8001a72:	009b      	lsls	r3, r3, #2
 8001a74:	4413      	add	r3, r2
 8001a76:	00db      	lsls	r3, r3, #3
 8001a78:	440b      	add	r3, r1
 8001a7a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001a7e:	7bfa      	ldrb	r2, [r7, #15]
 8001a80:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001a82:	7bfa      	ldrb	r2, [r7, #15]
 8001a84:	6879      	ldr	r1, [r7, #4]
 8001a86:	4613      	mov	r3, r2
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	4413      	add	r3, r2
 8001a8c:	00db      	lsls	r3, r3, #3
 8001a8e:	440b      	add	r3, r1
 8001a90:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001a94:	2200      	movs	r2, #0
 8001a96:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001a98:	7bfa      	ldrb	r2, [r7, #15]
 8001a9a:	6879      	ldr	r1, [r7, #4]
 8001a9c:	4613      	mov	r3, r2
 8001a9e:	009b      	lsls	r3, r3, #2
 8001aa0:	4413      	add	r3, r2
 8001aa2:	00db      	lsls	r3, r3, #3
 8001aa4:	440b      	add	r3, r1
 8001aa6:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001aaa:	2200      	movs	r2, #0
 8001aac:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001aae:	7bfa      	ldrb	r2, [r7, #15]
 8001ab0:	6879      	ldr	r1, [r7, #4]
 8001ab2:	4613      	mov	r3, r2
 8001ab4:	009b      	lsls	r3, r3, #2
 8001ab6:	4413      	add	r3, r2
 8001ab8:	00db      	lsls	r3, r3, #3
 8001aba:	440b      	add	r3, r1
 8001abc:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001ac4:	7bfa      	ldrb	r2, [r7, #15]
 8001ac6:	6879      	ldr	r1, [r7, #4]
 8001ac8:	4613      	mov	r3, r2
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	4413      	add	r3, r2
 8001ace:	00db      	lsls	r3, r3, #3
 8001ad0:	440b      	add	r3, r1
 8001ad2:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ada:	7bfb      	ldrb	r3, [r7, #15]
 8001adc:	3301      	adds	r3, #1
 8001ade:	73fb      	strb	r3, [r7, #15]
 8001ae0:	7bfa      	ldrb	r2, [r7, #15]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	d3b5      	bcc.n	8001a56 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	603b      	str	r3, [r7, #0]
 8001af0:	687e      	ldr	r6, [r7, #4]
 8001af2:	466d      	mov	r5, sp
 8001af4:	f106 0410 	add.w	r4, r6, #16
 8001af8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001afa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001afc:	6823      	ldr	r3, [r4, #0]
 8001afe:	602b      	str	r3, [r5, #0]
 8001b00:	1d33      	adds	r3, r6, #4
 8001b02:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b04:	6838      	ldr	r0, [r7, #0]
 8001b06:	f002 f9a1 	bl	8003e4c <USB_DevInit>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d005      	beq.n	8001b1c <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2202      	movs	r2, #2
 8001b14:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	e00d      	b.n	8001b38 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2200      	movs	r2, #0
 8001b20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2201      	movs	r2, #1
 8001b28:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4618      	mov	r0, r3
 8001b32:	f004 fb12 	bl	800615a <USB_DevDisconnect>

  return HAL_OK;
 8001b36:	2300      	movs	r3, #0
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	3714      	adds	r7, #20
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001b40 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b082      	sub	sp, #8
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d101      	bne.n	8001b56 <HAL_PCD_Start+0x16>
 8001b52:	2302      	movs	r3, #2
 8001b54:	e016      	b.n	8001b84 <HAL_PCD_Start+0x44>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2201      	movs	r2, #1
 8001b5a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4618      	mov	r0, r3
 8001b64:	f002 f936 	bl	8003dd4 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001b68:	2101      	movs	r1, #1
 8001b6a:	6878      	ldr	r0, [r7, #4]
 8001b6c:	f006 fb83 	bl	8008276 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4618      	mov	r0, r3
 8001b76:	f004 fae6 	bl	8006146 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001b82:	2300      	movs	r3, #0
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	3708      	adds	r7, #8
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}

08001b8c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b088      	sub	sp, #32
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f004 fae8 	bl	800616e <USB_ReadInterrupts>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ba4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ba8:	d102      	bne.n	8001bb0 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f000 fb61 	bl	8002272 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f004 fada 	bl	800616e <USB_ReadInterrupts>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bc4:	d112      	bne.n	8001bec <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001bce:	b29a      	uxth	r2, r3
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001bd8:	b292      	uxth	r2, r2
 8001bda:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f006 f951 	bl	8007e86 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001be4:	2100      	movs	r1, #0
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	f000 f925 	bl	8001e36 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f004 fabc 	bl	800616e <USB_ReadInterrupts>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bfc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001c00:	d10b      	bne.n	8001c1a <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c0a:	b29a      	uxth	r2, r3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001c14:	b292      	uxth	r2, r2
 8001c16:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f004 faa5 	bl	800616e <USB_ReadInterrupts>
 8001c24:	4603      	mov	r3, r0
 8001c26:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c2e:	d10b      	bne.n	8001c48 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c38:	b29a      	uxth	r2, r3
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001c42:	b292      	uxth	r2, r2
 8001c44:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f004 fa8e 	bl	800616e <USB_ReadInterrupts>
 8001c52:	4603      	mov	r3, r0
 8001c54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c5c:	d126      	bne.n	8001cac <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001c66:	b29a      	uxth	r2, r3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f022 0204 	bic.w	r2, r2, #4
 8001c70:	b292      	uxth	r2, r2
 8001c72:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001c7e:	b29a      	uxth	r2, r3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f022 0208 	bic.w	r2, r2, #8
 8001c88:	b292      	uxth	r2, r2
 8001c8a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	f006 f932 	bl	8007ef8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c9c:	b29a      	uxth	r2, r3
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001ca6:	b292      	uxth	r2, r2
 8001ca8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f004 fa5c 	bl	800616e <USB_ReadInterrupts>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001cbc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001cc0:	f040 8084 	bne.w	8001dcc <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	77fb      	strb	r3, [r7, #31]
 8001cc8:	e011      	b.n	8001cee <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	461a      	mov	r2, r3
 8001cd0:	7ffb      	ldrb	r3, [r7, #31]
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	441a      	add	r2, r3
 8001cd6:	7ffb      	ldrb	r3, [r7, #31]
 8001cd8:	8812      	ldrh	r2, [r2, #0]
 8001cda:	b292      	uxth	r2, r2
 8001cdc:	005b      	lsls	r3, r3, #1
 8001cde:	f107 0120 	add.w	r1, r7, #32
 8001ce2:	440b      	add	r3, r1
 8001ce4:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8001ce8:	7ffb      	ldrb	r3, [r7, #31]
 8001cea:	3301      	adds	r3, #1
 8001cec:	77fb      	strb	r3, [r7, #31]
 8001cee:	7ffb      	ldrb	r3, [r7, #31]
 8001cf0:	2b07      	cmp	r3, #7
 8001cf2:	d9ea      	bls.n	8001cca <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001cfc:	b29a      	uxth	r2, r3
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f042 0201 	orr.w	r2, r2, #1
 8001d06:	b292      	uxth	r2, r2
 8001d08:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001d14:	b29a      	uxth	r2, r3
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f022 0201 	bic.w	r2, r2, #1
 8001d1e:	b292      	uxth	r2, r2
 8001d20:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001d24:	bf00      	nop
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d2e:	b29b      	uxth	r3, r3
 8001d30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d0f6      	beq.n	8001d26 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d40:	b29a      	uxth	r2, r3
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d4a:	b292      	uxth	r2, r2
 8001d4c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001d50:	2300      	movs	r3, #0
 8001d52:	77fb      	strb	r3, [r7, #31]
 8001d54:	e010      	b.n	8001d78 <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001d56:	7ffb      	ldrb	r3, [r7, #31]
 8001d58:	687a      	ldr	r2, [r7, #4]
 8001d5a:	6812      	ldr	r2, [r2, #0]
 8001d5c:	4611      	mov	r1, r2
 8001d5e:	7ffa      	ldrb	r2, [r7, #31]
 8001d60:	0092      	lsls	r2, r2, #2
 8001d62:	440a      	add	r2, r1
 8001d64:	005b      	lsls	r3, r3, #1
 8001d66:	f107 0120 	add.w	r1, r7, #32
 8001d6a:	440b      	add	r3, r1
 8001d6c:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8001d70:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001d72:	7ffb      	ldrb	r3, [r7, #31]
 8001d74:	3301      	adds	r3, #1
 8001d76:	77fb      	strb	r3, [r7, #31]
 8001d78:	7ffb      	ldrb	r3, [r7, #31]
 8001d7a:	2b07      	cmp	r3, #7
 8001d7c:	d9eb      	bls.n	8001d56 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001d86:	b29a      	uxth	r2, r3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f042 0208 	orr.w	r2, r2, #8
 8001d90:	b292      	uxth	r2, r2
 8001d92:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d9e:	b29a      	uxth	r2, r3
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001da8:	b292      	uxth	r2, r2
 8001daa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001db6:	b29a      	uxth	r2, r3
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f042 0204 	orr.w	r2, r2, #4
 8001dc0:	b292      	uxth	r2, r2
 8001dc2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f006 f87c 	bl	8007ec4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f004 f9cc 	bl	800616e <USB_ReadInterrupts>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ddc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001de0:	d10e      	bne.n	8001e00 <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001dea:	b29a      	uxth	r2, r3
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001df4:	b292      	uxth	r2, r2
 8001df6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f006 f835 	bl	8007e6a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4618      	mov	r0, r3
 8001e06:	f004 f9b2 	bl	800616e <USB_ReadInterrupts>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e14:	d10b      	bne.n	8001e2e <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e1e:	b29a      	uxth	r2, r3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e28:	b292      	uxth	r2, r2
 8001e2a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001e2e:	bf00      	nop
 8001e30:	3720      	adds	r7, #32
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}

08001e36 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001e36:	b580      	push	{r7, lr}
 8001e38:	b082      	sub	sp, #8
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	6078      	str	r0, [r7, #4]
 8001e3e:	460b      	mov	r3, r1
 8001e40:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d101      	bne.n	8001e50 <HAL_PCD_SetAddress+0x1a>
 8001e4c:	2302      	movs	r3, #2
 8001e4e:	e013      	b.n	8001e78 <HAL_PCD_SetAddress+0x42>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2201      	movs	r2, #1
 8001e54:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	78fa      	ldrb	r2, [r7, #3]
 8001e5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	78fa      	ldrb	r2, [r7, #3]
 8001e66:	4611      	mov	r1, r2
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f004 f959 	bl	8006120 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2200      	movs	r2, #0
 8001e72:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001e76:	2300      	movs	r3, #0
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	3708      	adds	r7, #8
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}

08001e80 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b084      	sub	sp, #16
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	4608      	mov	r0, r1
 8001e8a:	4611      	mov	r1, r2
 8001e8c:	461a      	mov	r2, r3
 8001e8e:	4603      	mov	r3, r0
 8001e90:	70fb      	strb	r3, [r7, #3]
 8001e92:	460b      	mov	r3, r1
 8001e94:	803b      	strh	r3, [r7, #0]
 8001e96:	4613      	mov	r3, r2
 8001e98:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001e9e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	da0e      	bge.n	8001ec4 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ea6:	78fb      	ldrb	r3, [r7, #3]
 8001ea8:	f003 0307 	and.w	r3, r3, #7
 8001eac:	1c5a      	adds	r2, r3, #1
 8001eae:	4613      	mov	r3, r2
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	4413      	add	r3, r2
 8001eb4:	00db      	lsls	r3, r3, #3
 8001eb6:	687a      	ldr	r2, [r7, #4]
 8001eb8:	4413      	add	r3, r2
 8001eba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	705a      	strb	r2, [r3, #1]
 8001ec2:	e00e      	b.n	8001ee2 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ec4:	78fb      	ldrb	r3, [r7, #3]
 8001ec6:	f003 0207 	and.w	r2, r3, #7
 8001eca:	4613      	mov	r3, r2
 8001ecc:	009b      	lsls	r3, r3, #2
 8001ece:	4413      	add	r3, r2
 8001ed0:	00db      	lsls	r3, r3, #3
 8001ed2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001ed6:	687a      	ldr	r2, [r7, #4]
 8001ed8:	4413      	add	r3, r2
 8001eda:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001ee2:	78fb      	ldrb	r3, [r7, #3]
 8001ee4:	f003 0307 	and.w	r3, r3, #7
 8001ee8:	b2da      	uxtb	r2, r3
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001eee:	883a      	ldrh	r2, [r7, #0]
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	78ba      	ldrb	r2, [r7, #2]
 8001ef8:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	785b      	ldrb	r3, [r3, #1]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d004      	beq.n	8001f0c <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	781b      	ldrb	r3, [r3, #0]
 8001f06:	b29a      	uxth	r2, r3
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001f0c:	78bb      	ldrb	r3, [r7, #2]
 8001f0e:	2b02      	cmp	r3, #2
 8001f10:	d102      	bne.n	8001f18 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	2200      	movs	r2, #0
 8001f16:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	d101      	bne.n	8001f26 <HAL_PCD_EP_Open+0xa6>
 8001f22:	2302      	movs	r3, #2
 8001f24:	e00e      	b.n	8001f44 <HAL_PCD_EP_Open+0xc4>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2201      	movs	r2, #1
 8001f2a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	68f9      	ldr	r1, [r7, #12]
 8001f34:	4618      	mov	r0, r3
 8001f36:	f001 ffa9 	bl	8003e8c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001f42:	7afb      	ldrb	r3, [r7, #11]
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	3710      	adds	r7, #16
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}

08001f4c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b084      	sub	sp, #16
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
 8001f54:	460b      	mov	r3, r1
 8001f56:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001f58:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	da0e      	bge.n	8001f7e <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f60:	78fb      	ldrb	r3, [r7, #3]
 8001f62:	f003 0307 	and.w	r3, r3, #7
 8001f66:	1c5a      	adds	r2, r3, #1
 8001f68:	4613      	mov	r3, r2
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	4413      	add	r3, r2
 8001f6e:	00db      	lsls	r3, r3, #3
 8001f70:	687a      	ldr	r2, [r7, #4]
 8001f72:	4413      	add	r3, r2
 8001f74:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	2201      	movs	r2, #1
 8001f7a:	705a      	strb	r2, [r3, #1]
 8001f7c:	e00e      	b.n	8001f9c <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f7e:	78fb      	ldrb	r3, [r7, #3]
 8001f80:	f003 0207 	and.w	r2, r3, #7
 8001f84:	4613      	mov	r3, r2
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	4413      	add	r3, r2
 8001f8a:	00db      	lsls	r3, r3, #3
 8001f8c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001f90:	687a      	ldr	r2, [r7, #4]
 8001f92:	4413      	add	r3, r2
 8001f94:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001f9c:	78fb      	ldrb	r3, [r7, #3]
 8001f9e:	f003 0307 	and.w	r3, r3, #7
 8001fa2:	b2da      	uxtb	r2, r3
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d101      	bne.n	8001fb6 <HAL_PCD_EP_Close+0x6a>
 8001fb2:	2302      	movs	r3, #2
 8001fb4:	e00e      	b.n	8001fd4 <HAL_PCD_EP_Close+0x88>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2201      	movs	r2, #1
 8001fba:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	68f9      	ldr	r1, [r7, #12]
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f002 facb 	bl	8004560 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001fd2:	2300      	movs	r3, #0
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3710      	adds	r7, #16
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}

08001fdc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b086      	sub	sp, #24
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	60f8      	str	r0, [r7, #12]
 8001fe4:	607a      	str	r2, [r7, #4]
 8001fe6:	603b      	str	r3, [r7, #0]
 8001fe8:	460b      	mov	r3, r1
 8001fea:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001fec:	7afb      	ldrb	r3, [r7, #11]
 8001fee:	f003 0207 	and.w	r2, r3, #7
 8001ff2:	4613      	mov	r3, r2
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	4413      	add	r3, r2
 8001ff8:	00db      	lsls	r3, r3, #3
 8001ffa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001ffe:	68fa      	ldr	r2, [r7, #12]
 8002000:	4413      	add	r3, r2
 8002002:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	687a      	ldr	r2, [r7, #4]
 8002008:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	683a      	ldr	r2, [r7, #0]
 800200e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	2200      	movs	r2, #0
 8002014:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	2200      	movs	r2, #0
 800201a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800201c:	7afb      	ldrb	r3, [r7, #11]
 800201e:	f003 0307 	and.w	r3, r3, #7
 8002022:	b2da      	uxtb	r2, r3
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002028:	7afb      	ldrb	r3, [r7, #11]
 800202a:	f003 0307 	and.w	r3, r3, #7
 800202e:	2b00      	cmp	r3, #0
 8002030:	d106      	bne.n	8002040 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	6979      	ldr	r1, [r7, #20]
 8002038:	4618      	mov	r0, r3
 800203a:	f002 fc7d 	bl	8004938 <USB_EPStartXfer>
 800203e:	e005      	b.n	800204c <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	6979      	ldr	r1, [r7, #20]
 8002046:	4618      	mov	r0, r3
 8002048:	f002 fc76 	bl	8004938 <USB_EPStartXfer>
  }

  return HAL_OK;
 800204c:	2300      	movs	r3, #0
}
 800204e:	4618      	mov	r0, r3
 8002050:	3718      	adds	r7, #24
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}

08002056 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002056:	b480      	push	{r7}
 8002058:	b083      	sub	sp, #12
 800205a:	af00      	add	r7, sp, #0
 800205c:	6078      	str	r0, [r7, #4]
 800205e:	460b      	mov	r3, r1
 8002060:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002062:	78fb      	ldrb	r3, [r7, #3]
 8002064:	f003 0207 	and.w	r2, r3, #7
 8002068:	6879      	ldr	r1, [r7, #4]
 800206a:	4613      	mov	r3, r2
 800206c:	009b      	lsls	r3, r3, #2
 800206e:	4413      	add	r3, r2
 8002070:	00db      	lsls	r3, r3, #3
 8002072:	440b      	add	r3, r1
 8002074:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8002078:	681b      	ldr	r3, [r3, #0]
}
 800207a:	4618      	mov	r0, r3
 800207c:	370c      	adds	r7, #12
 800207e:	46bd      	mov	sp, r7
 8002080:	bc80      	pop	{r7}
 8002082:	4770      	bx	lr

08002084 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b086      	sub	sp, #24
 8002088:	af00      	add	r7, sp, #0
 800208a:	60f8      	str	r0, [r7, #12]
 800208c:	607a      	str	r2, [r7, #4]
 800208e:	603b      	str	r3, [r7, #0]
 8002090:	460b      	mov	r3, r1
 8002092:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002094:	7afb      	ldrb	r3, [r7, #11]
 8002096:	f003 0307 	and.w	r3, r3, #7
 800209a:	1c5a      	adds	r2, r3, #1
 800209c:	4613      	mov	r3, r2
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	4413      	add	r3, r2
 80020a2:	00db      	lsls	r3, r3, #3
 80020a4:	68fa      	ldr	r2, [r7, #12]
 80020a6:	4413      	add	r3, r2
 80020a8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	687a      	ldr	r2, [r7, #4]
 80020ae:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	683a      	ldr	r2, [r7, #0]
 80020b4:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	2201      	movs	r2, #1
 80020ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	683a      	ldr	r2, [r7, #0]
 80020c2:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	2200      	movs	r2, #0
 80020c8:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	2201      	movs	r2, #1
 80020ce:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80020d0:	7afb      	ldrb	r3, [r7, #11]
 80020d2:	f003 0307 	and.w	r3, r3, #7
 80020d6:	b2da      	uxtb	r2, r3
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80020dc:	7afb      	ldrb	r3, [r7, #11]
 80020de:	f003 0307 	and.w	r3, r3, #7
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d106      	bne.n	80020f4 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	6979      	ldr	r1, [r7, #20]
 80020ec:	4618      	mov	r0, r3
 80020ee:	f002 fc23 	bl	8004938 <USB_EPStartXfer>
 80020f2:	e005      	b.n	8002100 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	6979      	ldr	r1, [r7, #20]
 80020fa:	4618      	mov	r0, r3
 80020fc:	f002 fc1c 	bl	8004938 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002100:	2300      	movs	r3, #0
}
 8002102:	4618      	mov	r0, r3
 8002104:	3718      	adds	r7, #24
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}

0800210a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800210a:	b580      	push	{r7, lr}
 800210c:	b084      	sub	sp, #16
 800210e:	af00      	add	r7, sp, #0
 8002110:	6078      	str	r0, [r7, #4]
 8002112:	460b      	mov	r3, r1
 8002114:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002116:	78fb      	ldrb	r3, [r7, #3]
 8002118:	f003 0207 	and.w	r2, r3, #7
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	429a      	cmp	r2, r3
 8002122:	d901      	bls.n	8002128 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	e04c      	b.n	80021c2 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002128:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800212c:	2b00      	cmp	r3, #0
 800212e:	da0e      	bge.n	800214e <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002130:	78fb      	ldrb	r3, [r7, #3]
 8002132:	f003 0307 	and.w	r3, r3, #7
 8002136:	1c5a      	adds	r2, r3, #1
 8002138:	4613      	mov	r3, r2
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	4413      	add	r3, r2
 800213e:	00db      	lsls	r3, r3, #3
 8002140:	687a      	ldr	r2, [r7, #4]
 8002142:	4413      	add	r3, r2
 8002144:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	2201      	movs	r2, #1
 800214a:	705a      	strb	r2, [r3, #1]
 800214c:	e00c      	b.n	8002168 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800214e:	78fa      	ldrb	r2, [r7, #3]
 8002150:	4613      	mov	r3, r2
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	4413      	add	r3, r2
 8002156:	00db      	lsls	r3, r3, #3
 8002158:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800215c:	687a      	ldr	r2, [r7, #4]
 800215e:	4413      	add	r3, r2
 8002160:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	2200      	movs	r2, #0
 8002166:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	2201      	movs	r2, #1
 800216c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800216e:	78fb      	ldrb	r3, [r7, #3]
 8002170:	f003 0307 	and.w	r3, r3, #7
 8002174:	b2da      	uxtb	r2, r3
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002180:	2b01      	cmp	r3, #1
 8002182:	d101      	bne.n	8002188 <HAL_PCD_EP_SetStall+0x7e>
 8002184:	2302      	movs	r3, #2
 8002186:	e01c      	b.n	80021c2 <HAL_PCD_EP_SetStall+0xb8>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2201      	movs	r2, #1
 800218c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	68f9      	ldr	r1, [r7, #12]
 8002196:	4618      	mov	r0, r3
 8002198:	f003 fec5 	bl	8005f26 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800219c:	78fb      	ldrb	r3, [r7, #3]
 800219e:	f003 0307 	and.w	r3, r3, #7
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d108      	bne.n	80021b8 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80021b0:	4619      	mov	r1, r3
 80021b2:	4610      	mov	r0, r2
 80021b4:	f003 ffea 	bl	800618c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2200      	movs	r2, #0
 80021bc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80021c0:	2300      	movs	r3, #0
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3710      	adds	r7, #16
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}

080021ca <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80021ca:	b580      	push	{r7, lr}
 80021cc:	b084      	sub	sp, #16
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	6078      	str	r0, [r7, #4]
 80021d2:	460b      	mov	r3, r1
 80021d4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80021d6:	78fb      	ldrb	r3, [r7, #3]
 80021d8:	f003 020f 	and.w	r2, r3, #15
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d901      	bls.n	80021e8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	e040      	b.n	800226a <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80021e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	da0e      	bge.n	800220e <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021f0:	78fb      	ldrb	r3, [r7, #3]
 80021f2:	f003 0307 	and.w	r3, r3, #7
 80021f6:	1c5a      	adds	r2, r3, #1
 80021f8:	4613      	mov	r3, r2
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	4413      	add	r3, r2
 80021fe:	00db      	lsls	r3, r3, #3
 8002200:	687a      	ldr	r2, [r7, #4]
 8002202:	4413      	add	r3, r2
 8002204:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	2201      	movs	r2, #1
 800220a:	705a      	strb	r2, [r3, #1]
 800220c:	e00e      	b.n	800222c <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800220e:	78fb      	ldrb	r3, [r7, #3]
 8002210:	f003 0207 	and.w	r2, r3, #7
 8002214:	4613      	mov	r3, r2
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	4413      	add	r3, r2
 800221a:	00db      	lsls	r3, r3, #3
 800221c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002220:	687a      	ldr	r2, [r7, #4]
 8002222:	4413      	add	r3, r2
 8002224:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	2200      	movs	r2, #0
 800222a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	2200      	movs	r2, #0
 8002230:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002232:	78fb      	ldrb	r3, [r7, #3]
 8002234:	f003 0307 	and.w	r3, r3, #7
 8002238:	b2da      	uxtb	r2, r3
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002244:	2b01      	cmp	r3, #1
 8002246:	d101      	bne.n	800224c <HAL_PCD_EP_ClrStall+0x82>
 8002248:	2302      	movs	r3, #2
 800224a:	e00e      	b.n	800226a <HAL_PCD_EP_ClrStall+0xa0>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2201      	movs	r2, #1
 8002250:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	68f9      	ldr	r1, [r7, #12]
 800225a:	4618      	mov	r0, r3
 800225c:	f003 feb3 	bl	8005fc6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2200      	movs	r2, #0
 8002264:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002268:	2300      	movs	r3, #0
}
 800226a:	4618      	mov	r0, r3
 800226c:	3710      	adds	r7, #16
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}

08002272 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002272:	b580      	push	{r7, lr}
 8002274:	b08e      	sub	sp, #56	; 0x38
 8002276:	af00      	add	r7, sp, #0
 8002278:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800227a:	e2ec      	b.n	8002856 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002284:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002286:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002288:	b2db      	uxtb	r3, r3
 800228a:	f003 030f 	and.w	r3, r3, #15
 800228e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8002292:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002296:	2b00      	cmp	r3, #0
 8002298:	f040 8161 	bne.w	800255e <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800229c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800229e:	f003 0310 	and.w	r3, r3, #16
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d152      	bne.n	800234c <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	881b      	ldrh	r3, [r3, #0]
 80022ac:	b29b      	uxth	r3, r3
 80022ae:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80022b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022b6:	81fb      	strh	r3, [r7, #14]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	89fb      	ldrh	r3, [r7, #14]
 80022be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80022c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80022c6:	b29b      	uxth	r3, r3
 80022c8:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	3328      	adds	r3, #40	; 0x28
 80022ce:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022d8:	b29b      	uxth	r3, r3
 80022da:	461a      	mov	r2, r3
 80022dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	00db      	lsls	r3, r3, #3
 80022e2:	4413      	add	r3, r2
 80022e4:	3302      	adds	r3, #2
 80022e6:	005b      	lsls	r3, r3, #1
 80022e8:	687a      	ldr	r2, [r7, #4]
 80022ea:	6812      	ldr	r2, [r2, #0]
 80022ec:	4413      	add	r3, r2
 80022ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80022f2:	881b      	ldrh	r3, [r3, #0]
 80022f4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80022f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fa:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80022fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fe:	695a      	ldr	r2, [r3, #20]
 8002300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002302:	69db      	ldr	r3, [r3, #28]
 8002304:	441a      	add	r2, r3
 8002306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002308:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800230a:	2100      	movs	r1, #0
 800230c:	6878      	ldr	r0, [r7, #4]
 800230e:	f005 fd92 	bl	8007e36 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002318:	b2db      	uxtb	r3, r3
 800231a:	2b00      	cmp	r3, #0
 800231c:	f000 829b 	beq.w	8002856 <PCD_EP_ISR_Handler+0x5e4>
 8002320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002322:	699b      	ldr	r3, [r3, #24]
 8002324:	2b00      	cmp	r3, #0
 8002326:	f040 8296 	bne.w	8002856 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002330:	b2db      	uxtb	r3, r3
 8002332:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002336:	b2da      	uxtb	r2, r3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	b292      	uxth	r2, r2
 800233e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2200      	movs	r2, #0
 8002346:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800234a:	e284      	b.n	8002856 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002352:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	881b      	ldrh	r3, [r3, #0]
 800235a:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800235c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800235e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002362:	2b00      	cmp	r3, #0
 8002364:	d034      	beq.n	80023d0 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800236e:	b29b      	uxth	r3, r3
 8002370:	461a      	mov	r2, r3
 8002372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	00db      	lsls	r3, r3, #3
 8002378:	4413      	add	r3, r2
 800237a:	3306      	adds	r3, #6
 800237c:	005b      	lsls	r3, r3, #1
 800237e:	687a      	ldr	r2, [r7, #4]
 8002380:	6812      	ldr	r2, [r2, #0]
 8002382:	4413      	add	r3, r2
 8002384:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002388:	881b      	ldrh	r3, [r3, #0]
 800238a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800238e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002390:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6818      	ldr	r0, [r3, #0]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800239c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80023a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a2:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80023a4:	b29b      	uxth	r3, r3
 80023a6:	f003 ff41 	bl	800622c <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	881b      	ldrh	r3, [r3, #0]
 80023b0:	b29a      	uxth	r2, r3
 80023b2:	f640 738f 	movw	r3, #3983	; 0xf8f
 80023b6:	4013      	ands	r3, r2
 80023b8:	823b      	strh	r3, [r7, #16]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	8a3a      	ldrh	r2, [r7, #16]
 80023c0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80023c4:	b292      	uxth	r2, r2
 80023c6:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	f005 fd07 	bl	8007ddc <HAL_PCD_SetupStageCallback>
 80023ce:	e242      	b.n	8002856 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80023d0:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	f280 823e 	bge.w	8002856 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	881b      	ldrh	r3, [r3, #0]
 80023e0:	b29a      	uxth	r2, r3
 80023e2:	f640 738f 	movw	r3, #3983	; 0xf8f
 80023e6:	4013      	ands	r3, r2
 80023e8:	83bb      	strh	r3, [r7, #28]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	8bba      	ldrh	r2, [r7, #28]
 80023f0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80023f4:	b292      	uxth	r2, r2
 80023f6:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002400:	b29b      	uxth	r3, r3
 8002402:	461a      	mov	r2, r3
 8002404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	00db      	lsls	r3, r3, #3
 800240a:	4413      	add	r3, r2
 800240c:	3306      	adds	r3, #6
 800240e:	005b      	lsls	r3, r3, #1
 8002410:	687a      	ldr	r2, [r7, #4]
 8002412:	6812      	ldr	r2, [r2, #0]
 8002414:	4413      	add	r3, r2
 8002416:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800241a:	881b      	ldrh	r3, [r3, #0]
 800241c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002422:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002426:	69db      	ldr	r3, [r3, #28]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d019      	beq.n	8002460 <PCD_EP_ISR_Handler+0x1ee>
 800242c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242e:	695b      	ldr	r3, [r3, #20]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d015      	beq.n	8002460 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6818      	ldr	r0, [r3, #0]
 8002438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800243a:	6959      	ldr	r1, [r3, #20]
 800243c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800243e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002442:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002444:	b29b      	uxth	r3, r3
 8002446:	f003 fef1 	bl	800622c <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800244a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244c:	695a      	ldr	r2, [r3, #20]
 800244e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002450:	69db      	ldr	r3, [r3, #28]
 8002452:	441a      	add	r2, r3
 8002454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002456:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002458:	2100      	movs	r1, #0
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f005 fcd0 	bl	8007e00 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	881b      	ldrh	r3, [r3, #0]
 8002466:	b29b      	uxth	r3, r3
 8002468:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800246c:	2b00      	cmp	r3, #0
 800246e:	f040 81f2 	bne.w	8002856 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	61bb      	str	r3, [r7, #24]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002480:	b29b      	uxth	r3, r3
 8002482:	461a      	mov	r2, r3
 8002484:	69bb      	ldr	r3, [r7, #24]
 8002486:	4413      	add	r3, r2
 8002488:	61bb      	str	r3, [r7, #24]
 800248a:	69bb      	ldr	r3, [r7, #24]
 800248c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002490:	617b      	str	r3, [r7, #20]
 8002492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002494:	691b      	ldr	r3, [r3, #16]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d112      	bne.n	80024c0 <PCD_EP_ISR_Handler+0x24e>
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	881b      	ldrh	r3, [r3, #0]
 800249e:	b29b      	uxth	r3, r3
 80024a0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80024a4:	b29a      	uxth	r2, r3
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	801a      	strh	r2, [r3, #0]
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	881b      	ldrh	r3, [r3, #0]
 80024ae:	b29b      	uxth	r3, r3
 80024b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024b8:	b29a      	uxth	r2, r3
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	801a      	strh	r2, [r3, #0]
 80024be:	e02f      	b.n	8002520 <PCD_EP_ISR_Handler+0x2ae>
 80024c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c2:	691b      	ldr	r3, [r3, #16]
 80024c4:	2b3e      	cmp	r3, #62	; 0x3e
 80024c6:	d813      	bhi.n	80024f0 <PCD_EP_ISR_Handler+0x27e>
 80024c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ca:	691b      	ldr	r3, [r3, #16]
 80024cc:	085b      	lsrs	r3, r3, #1
 80024ce:	633b      	str	r3, [r7, #48]	; 0x30
 80024d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d2:	691b      	ldr	r3, [r3, #16]
 80024d4:	f003 0301 	and.w	r3, r3, #1
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d002      	beq.n	80024e2 <PCD_EP_ISR_Handler+0x270>
 80024dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024de:	3301      	adds	r3, #1
 80024e0:	633b      	str	r3, [r7, #48]	; 0x30
 80024e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024e4:	b29b      	uxth	r3, r3
 80024e6:	029b      	lsls	r3, r3, #10
 80024e8:	b29a      	uxth	r2, r3
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	801a      	strh	r2, [r3, #0]
 80024ee:	e017      	b.n	8002520 <PCD_EP_ISR_Handler+0x2ae>
 80024f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f2:	691b      	ldr	r3, [r3, #16]
 80024f4:	095b      	lsrs	r3, r3, #5
 80024f6:	633b      	str	r3, [r7, #48]	; 0x30
 80024f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fa:	691b      	ldr	r3, [r3, #16]
 80024fc:	f003 031f 	and.w	r3, r3, #31
 8002500:	2b00      	cmp	r3, #0
 8002502:	d102      	bne.n	800250a <PCD_EP_ISR_Handler+0x298>
 8002504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002506:	3b01      	subs	r3, #1
 8002508:	633b      	str	r3, [r7, #48]	; 0x30
 800250a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800250c:	b29b      	uxth	r3, r3
 800250e:	029b      	lsls	r3, r3, #10
 8002510:	b29b      	uxth	r3, r3
 8002512:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002516:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800251a:	b29a      	uxth	r2, r3
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	881b      	ldrh	r3, [r3, #0]
 8002526:	b29b      	uxth	r3, r3
 8002528:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800252c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002530:	827b      	strh	r3, [r7, #18]
 8002532:	8a7b      	ldrh	r3, [r7, #18]
 8002534:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002538:	827b      	strh	r3, [r7, #18]
 800253a:	8a7b      	ldrh	r3, [r7, #18]
 800253c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002540:	827b      	strh	r3, [r7, #18]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	8a7b      	ldrh	r3, [r7, #18]
 8002548:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800254c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002550:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002554:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002558:	b29b      	uxth	r3, r3
 800255a:	8013      	strh	r3, [r2, #0]
 800255c:	e17b      	b.n	8002856 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	461a      	mov	r2, r3
 8002564:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002568:	009b      	lsls	r3, r3, #2
 800256a:	4413      	add	r3, r2
 800256c:	881b      	ldrh	r3, [r3, #0]
 800256e:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002570:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002574:	2b00      	cmp	r3, #0
 8002576:	f280 80ea 	bge.w	800274e <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	461a      	mov	r2, r3
 8002580:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002584:	009b      	lsls	r3, r3, #2
 8002586:	4413      	add	r3, r2
 8002588:	881b      	ldrh	r3, [r3, #0]
 800258a:	b29a      	uxth	r2, r3
 800258c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002590:	4013      	ands	r3, r2
 8002592:	853b      	strh	r3, [r7, #40]	; 0x28
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	461a      	mov	r2, r3
 800259a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	4413      	add	r3, r2
 80025a2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80025a4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80025a8:	b292      	uxth	r2, r2
 80025aa:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80025ac:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80025b0:	4613      	mov	r3, r2
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	4413      	add	r3, r2
 80025b6:	00db      	lsls	r3, r3, #3
 80025b8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80025bc:	687a      	ldr	r2, [r7, #4]
 80025be:	4413      	add	r3, r2
 80025c0:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80025c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c4:	7b1b      	ldrb	r3, [r3, #12]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d122      	bne.n	8002610 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025d2:	b29b      	uxth	r3, r3
 80025d4:	461a      	mov	r2, r3
 80025d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d8:	781b      	ldrb	r3, [r3, #0]
 80025da:	00db      	lsls	r3, r3, #3
 80025dc:	4413      	add	r3, r2
 80025de:	3306      	adds	r3, #6
 80025e0:	005b      	lsls	r3, r3, #1
 80025e2:	687a      	ldr	r2, [r7, #4]
 80025e4:	6812      	ldr	r2, [r2, #0]
 80025e6:	4413      	add	r3, r2
 80025e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80025ec:	881b      	ldrh	r3, [r3, #0]
 80025ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025f2:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80025f4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	f000 8087 	beq.w	800270a <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6818      	ldr	r0, [r3, #0]
 8002600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002602:	6959      	ldr	r1, [r3, #20]
 8002604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002606:	88da      	ldrh	r2, [r3, #6]
 8002608:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800260a:	f003 fe0f 	bl	800622c <USB_ReadPMA>
 800260e:	e07c      	b.n	800270a <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002612:	78db      	ldrb	r3, [r3, #3]
 8002614:	2b02      	cmp	r3, #2
 8002616:	d108      	bne.n	800262a <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002618:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800261a:	461a      	mov	r2, r3
 800261c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f000 f927 	bl	8002872 <HAL_PCD_EP_DB_Receive>
 8002624:	4603      	mov	r3, r0
 8002626:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002628:	e06f      	b.n	800270a <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	461a      	mov	r2, r3
 8002630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002632:	781b      	ldrb	r3, [r3, #0]
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	4413      	add	r3, r2
 8002638:	881b      	ldrh	r3, [r3, #0]
 800263a:	b29b      	uxth	r3, r3
 800263c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002640:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002644:	847b      	strh	r3, [r7, #34]	; 0x22
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	461a      	mov	r2, r3
 800264c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264e:	781b      	ldrb	r3, [r3, #0]
 8002650:	009b      	lsls	r3, r3, #2
 8002652:	441a      	add	r2, r3
 8002654:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002656:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800265a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800265e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002662:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002666:	b29b      	uxth	r3, r3
 8002668:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	461a      	mov	r2, r3
 8002670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	4413      	add	r3, r2
 8002678:	881b      	ldrh	r3, [r3, #0]
 800267a:	b29b      	uxth	r3, r3
 800267c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002680:	2b00      	cmp	r3, #0
 8002682:	d021      	beq.n	80026c8 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800268c:	b29b      	uxth	r3, r3
 800268e:	461a      	mov	r2, r3
 8002690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	00db      	lsls	r3, r3, #3
 8002696:	4413      	add	r3, r2
 8002698:	3302      	adds	r3, #2
 800269a:	005b      	lsls	r3, r3, #1
 800269c:	687a      	ldr	r2, [r7, #4]
 800269e:	6812      	ldr	r2, [r2, #0]
 80026a0:	4413      	add	r3, r2
 80026a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80026a6:	881b      	ldrh	r3, [r3, #0]
 80026a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026ac:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80026ae:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d02a      	beq.n	800270a <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6818      	ldr	r0, [r3, #0]
 80026b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ba:	6959      	ldr	r1, [r3, #20]
 80026bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026be:	891a      	ldrh	r2, [r3, #8]
 80026c0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80026c2:	f003 fdb3 	bl	800622c <USB_ReadPMA>
 80026c6:	e020      	b.n	800270a <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026d0:	b29b      	uxth	r3, r3
 80026d2:	461a      	mov	r2, r3
 80026d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d6:	781b      	ldrb	r3, [r3, #0]
 80026d8:	00db      	lsls	r3, r3, #3
 80026da:	4413      	add	r3, r2
 80026dc:	3306      	adds	r3, #6
 80026de:	005b      	lsls	r3, r3, #1
 80026e0:	687a      	ldr	r2, [r7, #4]
 80026e2:	6812      	ldr	r2, [r2, #0]
 80026e4:	4413      	add	r3, r2
 80026e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80026ea:	881b      	ldrh	r3, [r3, #0]
 80026ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026f0:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80026f2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d008      	beq.n	800270a <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6818      	ldr	r0, [r3, #0]
 80026fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fe:	6959      	ldr	r1, [r3, #20]
 8002700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002702:	895a      	ldrh	r2, [r3, #10]
 8002704:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002706:	f003 fd91 	bl	800622c <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800270a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800270c:	69da      	ldr	r2, [r3, #28]
 800270e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002710:	441a      	add	r2, r3
 8002712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002714:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002718:	695a      	ldr	r2, [r3, #20]
 800271a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800271c:	441a      	add	r2, r3
 800271e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002720:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002724:	699b      	ldr	r3, [r3, #24]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d004      	beq.n	8002734 <PCD_EP_ISR_Handler+0x4c2>
 800272a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800272c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272e:	691b      	ldr	r3, [r3, #16]
 8002730:	429a      	cmp	r2, r3
 8002732:	d206      	bcs.n	8002742 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002736:	781b      	ldrb	r3, [r3, #0]
 8002738:	4619      	mov	r1, r3
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f005 fb60 	bl	8007e00 <HAL_PCD_DataOutStageCallback>
 8002740:	e005      	b.n	800274e <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002748:	4618      	mov	r0, r3
 800274a:	f002 f8f5 	bl	8004938 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800274e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002750:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002754:	2b00      	cmp	r3, #0
 8002756:	d07e      	beq.n	8002856 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8002758:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800275c:	1c5a      	adds	r2, r3, #1
 800275e:	4613      	mov	r3, r2
 8002760:	009b      	lsls	r3, r3, #2
 8002762:	4413      	add	r3, r2
 8002764:	00db      	lsls	r3, r3, #3
 8002766:	687a      	ldr	r2, [r7, #4]
 8002768:	4413      	add	r3, r2
 800276a:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	461a      	mov	r2, r3
 8002772:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	4413      	add	r3, r2
 800277a:	881b      	ldrh	r3, [r3, #0]
 800277c:	b29b      	uxth	r3, r3
 800277e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002782:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002786:	843b      	strh	r3, [r7, #32]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	461a      	mov	r2, r3
 800278e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002792:	009b      	lsls	r3, r3, #2
 8002794:	441a      	add	r2, r3
 8002796:	8c3b      	ldrh	r3, [r7, #32]
 8002798:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800279c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027a0:	b29b      	uxth	r3, r3
 80027a2:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80027a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a6:	78db      	ldrb	r3, [r3, #3]
 80027a8:	2b03      	cmp	r3, #3
 80027aa:	d00c      	beq.n	80027c6 <PCD_EP_ISR_Handler+0x554>
 80027ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ae:	78db      	ldrb	r3, [r3, #3]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d008      	beq.n	80027c6 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80027b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b6:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80027b8:	2b02      	cmp	r3, #2
 80027ba:	d146      	bne.n	800284a <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80027bc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80027be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d141      	bne.n	800284a <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027ce:	b29b      	uxth	r3, r3
 80027d0:	461a      	mov	r2, r3
 80027d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d4:	781b      	ldrb	r3, [r3, #0]
 80027d6:	00db      	lsls	r3, r3, #3
 80027d8:	4413      	add	r3, r2
 80027da:	3302      	adds	r3, #2
 80027dc:	005b      	lsls	r3, r3, #1
 80027de:	687a      	ldr	r2, [r7, #4]
 80027e0:	6812      	ldr	r2, [r2, #0]
 80027e2:	4413      	add	r3, r2
 80027e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80027e8:	881b      	ldrh	r3, [r3, #0]
 80027ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027ee:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80027f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f2:	699a      	ldr	r2, [r3, #24]
 80027f4:	8bfb      	ldrh	r3, [r7, #30]
 80027f6:	429a      	cmp	r2, r3
 80027f8:	d906      	bls.n	8002808 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 80027fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027fc:	699a      	ldr	r2, [r3, #24]
 80027fe:	8bfb      	ldrh	r3, [r7, #30]
 8002800:	1ad2      	subs	r2, r2, r3
 8002802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002804:	619a      	str	r2, [r3, #24]
 8002806:	e002      	b.n	800280e <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8002808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800280a:	2200      	movs	r2, #0
 800280c:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 800280e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002810:	699b      	ldr	r3, [r3, #24]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d106      	bne.n	8002824 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002818:	781b      	ldrb	r3, [r3, #0]
 800281a:	4619      	mov	r1, r3
 800281c:	6878      	ldr	r0, [r7, #4]
 800281e:	f005 fb0a 	bl	8007e36 <HAL_PCD_DataInStageCallback>
 8002822:	e018      	b.n	8002856 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8002824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002826:	695a      	ldr	r2, [r3, #20]
 8002828:	8bfb      	ldrh	r3, [r7, #30]
 800282a:	441a      	add	r2, r3
 800282c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800282e:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8002830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002832:	69da      	ldr	r2, [r3, #28]
 8002834:	8bfb      	ldrh	r3, [r7, #30]
 8002836:	441a      	add	r2, r3
 8002838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283a:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002842:	4618      	mov	r0, r3
 8002844:	f002 f878 	bl	8004938 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8002848:	e005      	b.n	8002856 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800284a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800284c:	461a      	mov	r2, r3
 800284e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002850:	6878      	ldr	r0, [r7, #4]
 8002852:	f000 f91b 	bl	8002a8c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800285e:	b29b      	uxth	r3, r3
 8002860:	b21b      	sxth	r3, r3
 8002862:	2b00      	cmp	r3, #0
 8002864:	f6ff ad0a 	blt.w	800227c <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002868:	2300      	movs	r3, #0
}
 800286a:	4618      	mov	r0, r3
 800286c:	3738      	adds	r7, #56	; 0x38
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}

08002872 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002872:	b580      	push	{r7, lr}
 8002874:	b088      	sub	sp, #32
 8002876:	af00      	add	r7, sp, #0
 8002878:	60f8      	str	r0, [r7, #12]
 800287a:	60b9      	str	r1, [r7, #8]
 800287c:	4613      	mov	r3, r2
 800287e:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002880:	88fb      	ldrh	r3, [r7, #6]
 8002882:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002886:	2b00      	cmp	r3, #0
 8002888:	d07e      	beq.n	8002988 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002892:	b29b      	uxth	r3, r3
 8002894:	461a      	mov	r2, r3
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	781b      	ldrb	r3, [r3, #0]
 800289a:	00db      	lsls	r3, r3, #3
 800289c:	4413      	add	r3, r2
 800289e:	3302      	adds	r3, #2
 80028a0:	005b      	lsls	r3, r3, #1
 80028a2:	68fa      	ldr	r2, [r7, #12]
 80028a4:	6812      	ldr	r2, [r2, #0]
 80028a6:	4413      	add	r3, r2
 80028a8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80028ac:	881b      	ldrh	r3, [r3, #0]
 80028ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028b2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	699a      	ldr	r2, [r3, #24]
 80028b8:	8b7b      	ldrh	r3, [r7, #26]
 80028ba:	429a      	cmp	r2, r3
 80028bc:	d306      	bcc.n	80028cc <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	699a      	ldr	r2, [r3, #24]
 80028c2:	8b7b      	ldrh	r3, [r7, #26]
 80028c4:	1ad2      	subs	r2, r2, r3
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	619a      	str	r2, [r3, #24]
 80028ca:	e002      	b.n	80028d2 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	2200      	movs	r2, #0
 80028d0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	699b      	ldr	r3, [r3, #24]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d123      	bne.n	8002922 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	461a      	mov	r2, r3
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	781b      	ldrb	r3, [r3, #0]
 80028e4:	009b      	lsls	r3, r3, #2
 80028e6:	4413      	add	r3, r2
 80028e8:	881b      	ldrh	r3, [r3, #0]
 80028ea:	b29b      	uxth	r3, r3
 80028ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80028f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028f4:	833b      	strh	r3, [r7, #24]
 80028f6:	8b3b      	ldrh	r3, [r7, #24]
 80028f8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80028fc:	833b      	strh	r3, [r7, #24]
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	461a      	mov	r2, r3
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	441a      	add	r2, r3
 800290c:	8b3b      	ldrh	r3, [r7, #24]
 800290e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002912:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002916:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800291a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800291e:	b29b      	uxth	r3, r3
 8002920:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002922:	88fb      	ldrh	r3, [r7, #6]
 8002924:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002928:	2b00      	cmp	r3, #0
 800292a:	d01f      	beq.n	800296c <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	461a      	mov	r2, r3
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	781b      	ldrb	r3, [r3, #0]
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	4413      	add	r3, r2
 800293a:	881b      	ldrh	r3, [r3, #0]
 800293c:	b29b      	uxth	r3, r3
 800293e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002942:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002946:	82fb      	strh	r3, [r7, #22]
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	461a      	mov	r2, r3
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	781b      	ldrb	r3, [r3, #0]
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	441a      	add	r2, r3
 8002956:	8afb      	ldrh	r3, [r7, #22]
 8002958:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800295c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002960:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002964:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002968:	b29b      	uxth	r3, r3
 800296a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800296c:	8b7b      	ldrh	r3, [r7, #26]
 800296e:	2b00      	cmp	r3, #0
 8002970:	f000 8087 	beq.w	8002a82 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	6818      	ldr	r0, [r3, #0]
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	6959      	ldr	r1, [r3, #20]
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	891a      	ldrh	r2, [r3, #8]
 8002980:	8b7b      	ldrh	r3, [r7, #26]
 8002982:	f003 fc53 	bl	800622c <USB_ReadPMA>
 8002986:	e07c      	b.n	8002a82 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002990:	b29b      	uxth	r3, r3
 8002992:	461a      	mov	r2, r3
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	781b      	ldrb	r3, [r3, #0]
 8002998:	00db      	lsls	r3, r3, #3
 800299a:	4413      	add	r3, r2
 800299c:	3306      	adds	r3, #6
 800299e:	005b      	lsls	r3, r3, #1
 80029a0:	68fa      	ldr	r2, [r7, #12]
 80029a2:	6812      	ldr	r2, [r2, #0]
 80029a4:	4413      	add	r3, r2
 80029a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80029aa:	881b      	ldrh	r3, [r3, #0]
 80029ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029b0:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	699a      	ldr	r2, [r3, #24]
 80029b6:	8b7b      	ldrh	r3, [r7, #26]
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d306      	bcc.n	80029ca <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	699a      	ldr	r2, [r3, #24]
 80029c0:	8b7b      	ldrh	r3, [r7, #26]
 80029c2:	1ad2      	subs	r2, r2, r3
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	619a      	str	r2, [r3, #24]
 80029c8:	e002      	b.n	80029d0 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	2200      	movs	r2, #0
 80029ce:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	699b      	ldr	r3, [r3, #24]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d123      	bne.n	8002a20 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	461a      	mov	r2, r3
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	781b      	ldrb	r3, [r3, #0]
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	4413      	add	r3, r2
 80029e6:	881b      	ldrh	r3, [r3, #0]
 80029e8:	b29b      	uxth	r3, r3
 80029ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80029ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029f2:	83fb      	strh	r3, [r7, #30]
 80029f4:	8bfb      	ldrh	r3, [r7, #30]
 80029f6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80029fa:	83fb      	strh	r3, [r7, #30]
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	461a      	mov	r2, r3
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	781b      	ldrb	r3, [r3, #0]
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	441a      	add	r2, r3
 8002a0a:	8bfb      	ldrh	r3, [r7, #30]
 8002a0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002a20:	88fb      	ldrh	r3, [r7, #6]
 8002a22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d11f      	bne.n	8002a6a <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	461a      	mov	r2, r3
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	781b      	ldrb	r3, [r3, #0]
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	4413      	add	r3, r2
 8002a38:	881b      	ldrh	r3, [r3, #0]
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a44:	83bb      	strh	r3, [r7, #28]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	461a      	mov	r2, r3
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	441a      	add	r2, r3
 8002a54:	8bbb      	ldrh	r3, [r7, #28]
 8002a56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a62:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002a66:	b29b      	uxth	r3, r3
 8002a68:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002a6a:	8b7b      	ldrh	r3, [r7, #26]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d008      	beq.n	8002a82 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	6818      	ldr	r0, [r3, #0]
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	6959      	ldr	r1, [r3, #20]
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	895a      	ldrh	r2, [r3, #10]
 8002a7c:	8b7b      	ldrh	r3, [r7, #26]
 8002a7e:	f003 fbd5 	bl	800622c <USB_ReadPMA>
    }
  }

  return count;
 8002a82:	8b7b      	ldrh	r3, [r7, #26]
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	3720      	adds	r7, #32
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}

08002a8c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b0a2      	sub	sp, #136	; 0x88
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	60f8      	str	r0, [r7, #12]
 8002a94:	60b9      	str	r1, [r7, #8]
 8002a96:	4613      	mov	r3, r2
 8002a98:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002a9a:	88fb      	ldrh	r3, [r7, #6]
 8002a9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	f000 81c7 	beq.w	8002e34 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002aae:	b29b      	uxth	r3, r3
 8002ab0:	461a      	mov	r2, r3
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	781b      	ldrb	r3, [r3, #0]
 8002ab6:	00db      	lsls	r3, r3, #3
 8002ab8:	4413      	add	r3, r2
 8002aba:	3302      	adds	r3, #2
 8002abc:	005b      	lsls	r3, r3, #1
 8002abe:	68fa      	ldr	r2, [r7, #12]
 8002ac0:	6812      	ldr	r2, [r2, #0]
 8002ac2:	4413      	add	r3, r2
 8002ac4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002ac8:	881b      	ldrh	r3, [r3, #0]
 8002aca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ace:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	699a      	ldr	r2, [r3, #24]
 8002ad6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002ada:	429a      	cmp	r2, r3
 8002adc:	d907      	bls.n	8002aee <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	699a      	ldr	r2, [r3, #24]
 8002ae2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002ae6:	1ad2      	subs	r2, r2, r3
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	619a      	str	r2, [r3, #24]
 8002aec:	e002      	b.n	8002af4 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	2200      	movs	r2, #0
 8002af2:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	699b      	ldr	r3, [r3, #24]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	f040 80b9 	bne.w	8002c70 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	785b      	ldrb	r3, [r3, #1]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d126      	bne.n	8002b54 <HAL_PCD_EP_DB_Transmit+0xc8>
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b14:	b29b      	uxth	r3, r3
 8002b16:	461a      	mov	r2, r3
 8002b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b1a:	4413      	add	r3, r2
 8002b1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	781b      	ldrb	r3, [r3, #0]
 8002b22:	011a      	lsls	r2, r3, #4
 8002b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b26:	4413      	add	r3, r2
 8002b28:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002b2c:	627b      	str	r3, [r7, #36]	; 0x24
 8002b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b30:	881b      	ldrh	r3, [r3, #0]
 8002b32:	b29b      	uxth	r3, r3
 8002b34:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002b38:	b29a      	uxth	r2, r3
 8002b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b3c:	801a      	strh	r2, [r3, #0]
 8002b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b40:	881b      	ldrh	r3, [r3, #0]
 8002b42:	b29b      	uxth	r3, r3
 8002b44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b4c:	b29a      	uxth	r2, r3
 8002b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b50:	801a      	strh	r2, [r3, #0]
 8002b52:	e01a      	b.n	8002b8a <HAL_PCD_EP_DB_Transmit+0xfe>
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	785b      	ldrb	r3, [r3, #1]
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d116      	bne.n	8002b8a <HAL_PCD_EP_DB_Transmit+0xfe>
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	633b      	str	r3, [r7, #48]	; 0x30
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b6a:	b29b      	uxth	r3, r3
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b70:	4413      	add	r3, r2
 8002b72:	633b      	str	r3, [r7, #48]	; 0x30
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	781b      	ldrb	r3, [r3, #0]
 8002b78:	011a      	lsls	r2, r3, #4
 8002b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b7c:	4413      	add	r3, r2
 8002b7e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002b82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b86:	2200      	movs	r2, #0
 8002b88:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	623b      	str	r3, [r7, #32]
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	785b      	ldrb	r3, [r3, #1]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d126      	bne.n	8002be6 <HAL_PCD_EP_DB_Transmit+0x15a>
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	61bb      	str	r3, [r7, #24]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ba6:	b29b      	uxth	r3, r3
 8002ba8:	461a      	mov	r2, r3
 8002baa:	69bb      	ldr	r3, [r7, #24]
 8002bac:	4413      	add	r3, r2
 8002bae:	61bb      	str	r3, [r7, #24]
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	781b      	ldrb	r3, [r3, #0]
 8002bb4:	011a      	lsls	r2, r3, #4
 8002bb6:	69bb      	ldr	r3, [r7, #24]
 8002bb8:	4413      	add	r3, r2
 8002bba:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002bbe:	617b      	str	r3, [r7, #20]
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	881b      	ldrh	r3, [r3, #0]
 8002bc4:	b29b      	uxth	r3, r3
 8002bc6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002bca:	b29a      	uxth	r2, r3
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	801a      	strh	r2, [r3, #0]
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	881b      	ldrh	r3, [r3, #0]
 8002bd4:	b29b      	uxth	r3, r3
 8002bd6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002bda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002bde:	b29a      	uxth	r2, r3
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	801a      	strh	r2, [r3, #0]
 8002be4:	e017      	b.n	8002c16 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	785b      	ldrb	r3, [r3, #1]
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d113      	bne.n	8002c16 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bf6:	b29b      	uxth	r3, r3
 8002bf8:	461a      	mov	r2, r3
 8002bfa:	6a3b      	ldr	r3, [r7, #32]
 8002bfc:	4413      	add	r3, r2
 8002bfe:	623b      	str	r3, [r7, #32]
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	781b      	ldrb	r3, [r3, #0]
 8002c04:	011a      	lsls	r2, r3, #4
 8002c06:	6a3b      	ldr	r3, [r7, #32]
 8002c08:	4413      	add	r3, r2
 8002c0a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002c0e:	61fb      	str	r3, [r7, #28]
 8002c10:	69fb      	ldr	r3, [r7, #28]
 8002c12:	2200      	movs	r2, #0
 8002c14:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	781b      	ldrb	r3, [r3, #0]
 8002c1a:	4619      	mov	r1, r3
 8002c1c:	68f8      	ldr	r0, [r7, #12]
 8002c1e:	f005 f90a 	bl	8007e36 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002c22:	88fb      	ldrh	r3, [r7, #6]
 8002c24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	f000 82d4 	beq.w	80031d6 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	461a      	mov	r2, r3
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	009b      	lsls	r3, r3, #2
 8002c3a:	4413      	add	r3, r2
 8002c3c:	881b      	ldrh	r3, [r3, #0]
 8002c3e:	b29b      	uxth	r3, r3
 8002c40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c48:	827b      	strh	r3, [r7, #18]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	461a      	mov	r2, r3
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	781b      	ldrb	r3, [r3, #0]
 8002c54:	009b      	lsls	r3, r3, #2
 8002c56:	441a      	add	r2, r3
 8002c58:	8a7b      	ldrh	r3, [r7, #18]
 8002c5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c62:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	8013      	strh	r3, [r2, #0]
 8002c6e:	e2b2      	b.n	80031d6 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002c70:	88fb      	ldrh	r3, [r7, #6]
 8002c72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d021      	beq.n	8002cbe <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	461a      	mov	r2, r3
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	781b      	ldrb	r3, [r3, #0]
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	4413      	add	r3, r2
 8002c88:	881b      	ldrh	r3, [r3, #0]
 8002c8a:	b29b      	uxth	r3, r3
 8002c8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c94:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	461a      	mov	r2, r3
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	781b      	ldrb	r3, [r3, #0]
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	441a      	add	r2, r3
 8002ca6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002caa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002cae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002cb2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002cb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cba:	b29b      	uxth	r3, r3
 8002cbc:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	f040 8286 	bne.w	80031d6 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	695a      	ldr	r2, [r3, #20]
 8002cce:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002cd2:	441a      	add	r2, r3
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	69da      	ldr	r2, [r3, #28]
 8002cdc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002ce0:	441a      	add	r2, r3
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	6a1a      	ldr	r2, [r3, #32]
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	691b      	ldr	r3, [r3, #16]
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	d309      	bcc.n	8002d06 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	691b      	ldr	r3, [r3, #16]
 8002cf6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	6a1a      	ldr	r2, [r3, #32]
 8002cfc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002cfe:	1ad2      	subs	r2, r2, r3
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	621a      	str	r2, [r3, #32]
 8002d04:	e015      	b.n	8002d32 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	6a1b      	ldr	r3, [r3, #32]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d107      	bne.n	8002d1e <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8002d0e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002d12:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	2200      	movs	r2, #0
 8002d18:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002d1c:	e009      	b.n	8002d32 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	2200      	movs	r2, #0
 8002d22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	6a1b      	ldr	r3, [r3, #32]
 8002d2a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	785b      	ldrb	r3, [r3, #1]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d155      	bne.n	8002de6 <HAL_PCD_EP_DB_Transmit+0x35a>
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d48:	b29b      	uxth	r3, r3
 8002d4a:	461a      	mov	r2, r3
 8002d4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d4e:	4413      	add	r3, r2
 8002d50:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	781b      	ldrb	r3, [r3, #0]
 8002d56:	011a      	lsls	r2, r3, #4
 8002d58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d5a:	4413      	add	r3, r2
 8002d5c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002d60:	637b      	str	r3, [r7, #52]	; 0x34
 8002d62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d112      	bne.n	8002d8e <HAL_PCD_EP_DB_Transmit+0x302>
 8002d68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d6a:	881b      	ldrh	r3, [r3, #0]
 8002d6c:	b29b      	uxth	r3, r3
 8002d6e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002d72:	b29a      	uxth	r2, r3
 8002d74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d76:	801a      	strh	r2, [r3, #0]
 8002d78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d7a:	881b      	ldrh	r3, [r3, #0]
 8002d7c:	b29b      	uxth	r3, r3
 8002d7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d86:	b29a      	uxth	r2, r3
 8002d88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d8a:	801a      	strh	r2, [r3, #0]
 8002d8c:	e047      	b.n	8002e1e <HAL_PCD_EP_DB_Transmit+0x392>
 8002d8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d90:	2b3e      	cmp	r3, #62	; 0x3e
 8002d92:	d811      	bhi.n	8002db8 <HAL_PCD_EP_DB_Transmit+0x32c>
 8002d94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d96:	085b      	lsrs	r3, r3, #1
 8002d98:	64bb      	str	r3, [r7, #72]	; 0x48
 8002d9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d9c:	f003 0301 	and.w	r3, r3, #1
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d002      	beq.n	8002daa <HAL_PCD_EP_DB_Transmit+0x31e>
 8002da4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002da6:	3301      	adds	r3, #1
 8002da8:	64bb      	str	r3, [r7, #72]	; 0x48
 8002daa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002dac:	b29b      	uxth	r3, r3
 8002dae:	029b      	lsls	r3, r3, #10
 8002db0:	b29a      	uxth	r2, r3
 8002db2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002db4:	801a      	strh	r2, [r3, #0]
 8002db6:	e032      	b.n	8002e1e <HAL_PCD_EP_DB_Transmit+0x392>
 8002db8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002dba:	095b      	lsrs	r3, r3, #5
 8002dbc:	64bb      	str	r3, [r7, #72]	; 0x48
 8002dbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002dc0:	f003 031f 	and.w	r3, r3, #31
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d102      	bne.n	8002dce <HAL_PCD_EP_DB_Transmit+0x342>
 8002dc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002dca:	3b01      	subs	r3, #1
 8002dcc:	64bb      	str	r3, [r7, #72]	; 0x48
 8002dce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002dd0:	b29b      	uxth	r3, r3
 8002dd2:	029b      	lsls	r3, r3, #10
 8002dd4:	b29b      	uxth	r3, r3
 8002dd6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002dda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002dde:	b29a      	uxth	r2, r3
 8002de0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002de2:	801a      	strh	r2, [r3, #0]
 8002de4:	e01b      	b.n	8002e1e <HAL_PCD_EP_DB_Transmit+0x392>
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	785b      	ldrb	r3, [r3, #1]
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d117      	bne.n	8002e1e <HAL_PCD_EP_DB_Transmit+0x392>
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	643b      	str	r3, [r7, #64]	; 0x40
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002dfc:	b29b      	uxth	r3, r3
 8002dfe:	461a      	mov	r2, r3
 8002e00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e02:	4413      	add	r3, r2
 8002e04:	643b      	str	r3, [r7, #64]	; 0x40
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	781b      	ldrb	r3, [r3, #0]
 8002e0a:	011a      	lsls	r2, r3, #4
 8002e0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e0e:	4413      	add	r3, r2
 8002e10:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002e14:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e18:	b29a      	uxth	r2, r3
 8002e1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e1c:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	6818      	ldr	r0, [r3, #0]
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	6959      	ldr	r1, [r3, #20]
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	891a      	ldrh	r2, [r3, #8]
 8002e2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e2c:	b29b      	uxth	r3, r3
 8002e2e:	f003 f9b8 	bl	80061a2 <USB_WritePMA>
 8002e32:	e1d0      	b.n	80031d6 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e3c:	b29b      	uxth	r3, r3
 8002e3e:	461a      	mov	r2, r3
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	781b      	ldrb	r3, [r3, #0]
 8002e44:	00db      	lsls	r3, r3, #3
 8002e46:	4413      	add	r3, r2
 8002e48:	3306      	adds	r3, #6
 8002e4a:	005b      	lsls	r3, r3, #1
 8002e4c:	68fa      	ldr	r2, [r7, #12]
 8002e4e:	6812      	ldr	r2, [r2, #0]
 8002e50:	4413      	add	r3, r2
 8002e52:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002e56:	881b      	ldrh	r3, [r3, #0]
 8002e58:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e5c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	699a      	ldr	r2, [r3, #24]
 8002e64:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d307      	bcc.n	8002e7c <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	699a      	ldr	r2, [r3, #24]
 8002e70:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002e74:	1ad2      	subs	r2, r2, r3
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	619a      	str	r2, [r3, #24]
 8002e7a:	e002      	b.n	8002e82 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	699b      	ldr	r3, [r3, #24]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	f040 80c4 	bne.w	8003014 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	785b      	ldrb	r3, [r3, #1]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d126      	bne.n	8002ee2 <HAL_PCD_EP_DB_Transmit+0x456>
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ea2:	b29b      	uxth	r3, r3
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ea8:	4413      	add	r3, r2
 8002eaa:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	781b      	ldrb	r3, [r3, #0]
 8002eb0:	011a      	lsls	r2, r3, #4
 8002eb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002eb4:	4413      	add	r3, r2
 8002eb6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002eba:	66bb      	str	r3, [r7, #104]	; 0x68
 8002ebc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ebe:	881b      	ldrh	r3, [r3, #0]
 8002ec0:	b29b      	uxth	r3, r3
 8002ec2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002ec6:	b29a      	uxth	r2, r3
 8002ec8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002eca:	801a      	strh	r2, [r3, #0]
 8002ecc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ece:	881b      	ldrh	r3, [r3, #0]
 8002ed0:	b29b      	uxth	r3, r3
 8002ed2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ed6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002eda:	b29a      	uxth	r2, r3
 8002edc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ede:	801a      	strh	r2, [r3, #0]
 8002ee0:	e01a      	b.n	8002f18 <HAL_PCD_EP_DB_Transmit+0x48c>
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	785b      	ldrb	r3, [r3, #1]
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d116      	bne.n	8002f18 <HAL_PCD_EP_DB_Transmit+0x48c>
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	677b      	str	r3, [r7, #116]	; 0x74
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ef8:	b29b      	uxth	r3, r3
 8002efa:	461a      	mov	r2, r3
 8002efc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002efe:	4413      	add	r3, r2
 8002f00:	677b      	str	r3, [r7, #116]	; 0x74
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	781b      	ldrb	r3, [r3, #0]
 8002f06:	011a      	lsls	r2, r3, #4
 8002f08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f0a:	4413      	add	r3, r2
 8002f0c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002f10:	673b      	str	r3, [r7, #112]	; 0x70
 8002f12:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f14:	2200      	movs	r2, #0
 8002f16:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	67bb      	str	r3, [r7, #120]	; 0x78
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	785b      	ldrb	r3, [r3, #1]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d12f      	bne.n	8002f86 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f36:	b29b      	uxth	r3, r3
 8002f38:	461a      	mov	r2, r3
 8002f3a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002f3e:	4413      	add	r3, r2
 8002f40:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	781b      	ldrb	r3, [r3, #0]
 8002f48:	011a      	lsls	r2, r3, #4
 8002f4a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002f4e:	4413      	add	r3, r2
 8002f50:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002f54:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002f58:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002f5c:	881b      	ldrh	r3, [r3, #0]
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002f64:	b29a      	uxth	r2, r3
 8002f66:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002f6a:	801a      	strh	r2, [r3, #0]
 8002f6c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002f70:	881b      	ldrh	r3, [r3, #0]
 8002f72:	b29b      	uxth	r3, r3
 8002f74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f7c:	b29a      	uxth	r2, r3
 8002f7e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002f82:	801a      	strh	r2, [r3, #0]
 8002f84:	e017      	b.n	8002fb6 <HAL_PCD_EP_DB_Transmit+0x52a>
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	785b      	ldrb	r3, [r3, #1]
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d113      	bne.n	8002fb6 <HAL_PCD_EP_DB_Transmit+0x52a>
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f96:	b29b      	uxth	r3, r3
 8002f98:	461a      	mov	r2, r3
 8002f9a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f9c:	4413      	add	r3, r2
 8002f9e:	67bb      	str	r3, [r7, #120]	; 0x78
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	781b      	ldrb	r3, [r3, #0]
 8002fa4:	011a      	lsls	r2, r3, #4
 8002fa6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002fa8:	4413      	add	r3, r2
 8002faa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002fae:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002fb0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	781b      	ldrb	r3, [r3, #0]
 8002fba:	4619      	mov	r1, r3
 8002fbc:	68f8      	ldr	r0, [r7, #12]
 8002fbe:	f004 ff3a 	bl	8007e36 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002fc2:	88fb      	ldrh	r3, [r7, #6]
 8002fc4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	f040 8104 	bne.w	80031d6 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	461a      	mov	r2, r3
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	781b      	ldrb	r3, [r3, #0]
 8002fd8:	009b      	lsls	r3, r3, #2
 8002fda:	4413      	add	r3, r2
 8002fdc:	881b      	ldrh	r3, [r3, #0]
 8002fde:	b29b      	uxth	r3, r3
 8002fe0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fe4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fe8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	461a      	mov	r2, r3
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	781b      	ldrb	r3, [r3, #0]
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	441a      	add	r2, r3
 8002ffa:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002ffe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003002:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003006:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800300a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800300e:	b29b      	uxth	r3, r3
 8003010:	8013      	strh	r3, [r2, #0]
 8003012:	e0e0      	b.n	80031d6 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003014:	88fb      	ldrh	r3, [r7, #6]
 8003016:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800301a:	2b00      	cmp	r3, #0
 800301c:	d121      	bne.n	8003062 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	461a      	mov	r2, r3
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	781b      	ldrb	r3, [r3, #0]
 8003028:	009b      	lsls	r3, r3, #2
 800302a:	4413      	add	r3, r2
 800302c:	881b      	ldrh	r3, [r3, #0]
 800302e:	b29b      	uxth	r3, r3
 8003030:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003034:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003038:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	461a      	mov	r2, r3
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	781b      	ldrb	r3, [r3, #0]
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	441a      	add	r2, r3
 800304a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800304e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003052:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003056:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800305a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800305e:	b29b      	uxth	r3, r3
 8003060:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003068:	2b01      	cmp	r3, #1
 800306a:	f040 80b4 	bne.w	80031d6 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	695a      	ldr	r2, [r3, #20]
 8003072:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003076:	441a      	add	r2, r3
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	69da      	ldr	r2, [r3, #28]
 8003080:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003084:	441a      	add	r2, r3
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	6a1a      	ldr	r2, [r3, #32]
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	691b      	ldr	r3, [r3, #16]
 8003092:	429a      	cmp	r2, r3
 8003094:	d309      	bcc.n	80030aa <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	691b      	ldr	r3, [r3, #16]
 800309a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	6a1a      	ldr	r2, [r3, #32]
 80030a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030a2:	1ad2      	subs	r2, r2, r3
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	621a      	str	r2, [r3, #32]
 80030a8:	e015      	b.n	80030d6 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	6a1b      	ldr	r3, [r3, #32]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d107      	bne.n	80030c2 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 80030b2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80030b6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	2200      	movs	r2, #0
 80030bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80030c0:	e009      	b.n	80030d6 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	6a1b      	ldr	r3, [r3, #32]
 80030c6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	2200      	movs	r2, #0
 80030cc:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	2200      	movs	r2, #0
 80030d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	667b      	str	r3, [r7, #100]	; 0x64
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	785b      	ldrb	r3, [r3, #1]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d155      	bne.n	8003190 <HAL_PCD_EP_DB_Transmit+0x704>
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030f2:	b29b      	uxth	r3, r3
 80030f4:	461a      	mov	r2, r3
 80030f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030f8:	4413      	add	r3, r2
 80030fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	781b      	ldrb	r3, [r3, #0]
 8003100:	011a      	lsls	r2, r3, #4
 8003102:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003104:	4413      	add	r3, r2
 8003106:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800310a:	65bb      	str	r3, [r7, #88]	; 0x58
 800310c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800310e:	2b00      	cmp	r3, #0
 8003110:	d112      	bne.n	8003138 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8003112:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003114:	881b      	ldrh	r3, [r3, #0]
 8003116:	b29b      	uxth	r3, r3
 8003118:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800311c:	b29a      	uxth	r2, r3
 800311e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003120:	801a      	strh	r2, [r3, #0]
 8003122:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003124:	881b      	ldrh	r3, [r3, #0]
 8003126:	b29b      	uxth	r3, r3
 8003128:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800312c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003130:	b29a      	uxth	r2, r3
 8003132:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003134:	801a      	strh	r2, [r3, #0]
 8003136:	e044      	b.n	80031c2 <HAL_PCD_EP_DB_Transmit+0x736>
 8003138:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800313a:	2b3e      	cmp	r3, #62	; 0x3e
 800313c:	d811      	bhi.n	8003162 <HAL_PCD_EP_DB_Transmit+0x6d6>
 800313e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003140:	085b      	lsrs	r3, r3, #1
 8003142:	657b      	str	r3, [r7, #84]	; 0x54
 8003144:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003146:	f003 0301 	and.w	r3, r3, #1
 800314a:	2b00      	cmp	r3, #0
 800314c:	d002      	beq.n	8003154 <HAL_PCD_EP_DB_Transmit+0x6c8>
 800314e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003150:	3301      	adds	r3, #1
 8003152:	657b      	str	r3, [r7, #84]	; 0x54
 8003154:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003156:	b29b      	uxth	r3, r3
 8003158:	029b      	lsls	r3, r3, #10
 800315a:	b29a      	uxth	r2, r3
 800315c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800315e:	801a      	strh	r2, [r3, #0]
 8003160:	e02f      	b.n	80031c2 <HAL_PCD_EP_DB_Transmit+0x736>
 8003162:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003164:	095b      	lsrs	r3, r3, #5
 8003166:	657b      	str	r3, [r7, #84]	; 0x54
 8003168:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800316a:	f003 031f 	and.w	r3, r3, #31
 800316e:	2b00      	cmp	r3, #0
 8003170:	d102      	bne.n	8003178 <HAL_PCD_EP_DB_Transmit+0x6ec>
 8003172:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003174:	3b01      	subs	r3, #1
 8003176:	657b      	str	r3, [r7, #84]	; 0x54
 8003178:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800317a:	b29b      	uxth	r3, r3
 800317c:	029b      	lsls	r3, r3, #10
 800317e:	b29b      	uxth	r3, r3
 8003180:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003184:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003188:	b29a      	uxth	r2, r3
 800318a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800318c:	801a      	strh	r2, [r3, #0]
 800318e:	e018      	b.n	80031c2 <HAL_PCD_EP_DB_Transmit+0x736>
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	785b      	ldrb	r3, [r3, #1]
 8003194:	2b01      	cmp	r3, #1
 8003196:	d114      	bne.n	80031c2 <HAL_PCD_EP_DB_Transmit+0x736>
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031a0:	b29b      	uxth	r3, r3
 80031a2:	461a      	mov	r2, r3
 80031a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80031a6:	4413      	add	r3, r2
 80031a8:	667b      	str	r3, [r7, #100]	; 0x64
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	781b      	ldrb	r3, [r3, #0]
 80031ae:	011a      	lsls	r2, r3, #4
 80031b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80031b2:	4413      	add	r3, r2
 80031b4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80031b8:	663b      	str	r3, [r7, #96]	; 0x60
 80031ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031bc:	b29a      	uxth	r2, r3
 80031be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80031c0:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	6818      	ldr	r0, [r3, #0]
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	6959      	ldr	r1, [r3, #20]
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	895a      	ldrh	r2, [r3, #10]
 80031ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031d0:	b29b      	uxth	r3, r3
 80031d2:	f002 ffe6 	bl	80061a2 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	461a      	mov	r2, r3
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	781b      	ldrb	r3, [r3, #0]
 80031e0:	009b      	lsls	r3, r3, #2
 80031e2:	4413      	add	r3, r2
 80031e4:	881b      	ldrh	r3, [r3, #0]
 80031e6:	b29b      	uxth	r3, r3
 80031e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031f0:	823b      	strh	r3, [r7, #16]
 80031f2:	8a3b      	ldrh	r3, [r7, #16]
 80031f4:	f083 0310 	eor.w	r3, r3, #16
 80031f8:	823b      	strh	r3, [r7, #16]
 80031fa:	8a3b      	ldrh	r3, [r7, #16]
 80031fc:	f083 0320 	eor.w	r3, r3, #32
 8003200:	823b      	strh	r3, [r7, #16]
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	461a      	mov	r2, r3
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	781b      	ldrb	r3, [r3, #0]
 800320c:	009b      	lsls	r3, r3, #2
 800320e:	441a      	add	r2, r3
 8003210:	8a3b      	ldrh	r3, [r7, #16]
 8003212:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003216:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800321a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800321e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003222:	b29b      	uxth	r3, r3
 8003224:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003226:	2300      	movs	r3, #0
}
 8003228:	4618      	mov	r0, r3
 800322a:	3788      	adds	r7, #136	; 0x88
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}

08003230 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003230:	b480      	push	{r7}
 8003232:	b087      	sub	sp, #28
 8003234:	af00      	add	r7, sp, #0
 8003236:	60f8      	str	r0, [r7, #12]
 8003238:	607b      	str	r3, [r7, #4]
 800323a:	460b      	mov	r3, r1
 800323c:	817b      	strh	r3, [r7, #10]
 800323e:	4613      	mov	r3, r2
 8003240:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003242:	897b      	ldrh	r3, [r7, #10]
 8003244:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003248:	b29b      	uxth	r3, r3
 800324a:	2b00      	cmp	r3, #0
 800324c:	d00b      	beq.n	8003266 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800324e:	897b      	ldrh	r3, [r7, #10]
 8003250:	f003 0307 	and.w	r3, r3, #7
 8003254:	1c5a      	adds	r2, r3, #1
 8003256:	4613      	mov	r3, r2
 8003258:	009b      	lsls	r3, r3, #2
 800325a:	4413      	add	r3, r2
 800325c:	00db      	lsls	r3, r3, #3
 800325e:	68fa      	ldr	r2, [r7, #12]
 8003260:	4413      	add	r3, r2
 8003262:	617b      	str	r3, [r7, #20]
 8003264:	e009      	b.n	800327a <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003266:	897a      	ldrh	r2, [r7, #10]
 8003268:	4613      	mov	r3, r2
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	4413      	add	r3, r2
 800326e:	00db      	lsls	r3, r3, #3
 8003270:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003274:	68fa      	ldr	r2, [r7, #12]
 8003276:	4413      	add	r3, r2
 8003278:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800327a:	893b      	ldrh	r3, [r7, #8]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d107      	bne.n	8003290 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	2200      	movs	r2, #0
 8003284:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	b29a      	uxth	r2, r3
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	80da      	strh	r2, [r3, #6]
 800328e:	e00b      	b.n	80032a8 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	2201      	movs	r2, #1
 8003294:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	b29a      	uxth	r2, r3
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	0c1b      	lsrs	r3, r3, #16
 80032a2:	b29a      	uxth	r2, r3
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80032a8:	2300      	movs	r3, #0
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	371c      	adds	r7, #28
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bc80      	pop	{r7}
 80032b2:	4770      	bx	lr

080032b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b086      	sub	sp, #24
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d101      	bne.n	80032c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e26c      	b.n	80037a0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0301 	and.w	r3, r3, #1
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	f000 8087 	beq.w	80033e2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80032d4:	4b92      	ldr	r3, [pc, #584]	; (8003520 <HAL_RCC_OscConfig+0x26c>)
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	f003 030c 	and.w	r3, r3, #12
 80032dc:	2b04      	cmp	r3, #4
 80032de:	d00c      	beq.n	80032fa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80032e0:	4b8f      	ldr	r3, [pc, #572]	; (8003520 <HAL_RCC_OscConfig+0x26c>)
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	f003 030c 	and.w	r3, r3, #12
 80032e8:	2b08      	cmp	r3, #8
 80032ea:	d112      	bne.n	8003312 <HAL_RCC_OscConfig+0x5e>
 80032ec:	4b8c      	ldr	r3, [pc, #560]	; (8003520 <HAL_RCC_OscConfig+0x26c>)
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032f8:	d10b      	bne.n	8003312 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032fa:	4b89      	ldr	r3, [pc, #548]	; (8003520 <HAL_RCC_OscConfig+0x26c>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003302:	2b00      	cmp	r3, #0
 8003304:	d06c      	beq.n	80033e0 <HAL_RCC_OscConfig+0x12c>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d168      	bne.n	80033e0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e246      	b.n	80037a0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800331a:	d106      	bne.n	800332a <HAL_RCC_OscConfig+0x76>
 800331c:	4b80      	ldr	r3, [pc, #512]	; (8003520 <HAL_RCC_OscConfig+0x26c>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a7f      	ldr	r2, [pc, #508]	; (8003520 <HAL_RCC_OscConfig+0x26c>)
 8003322:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003326:	6013      	str	r3, [r2, #0]
 8003328:	e02e      	b.n	8003388 <HAL_RCC_OscConfig+0xd4>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d10c      	bne.n	800334c <HAL_RCC_OscConfig+0x98>
 8003332:	4b7b      	ldr	r3, [pc, #492]	; (8003520 <HAL_RCC_OscConfig+0x26c>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a7a      	ldr	r2, [pc, #488]	; (8003520 <HAL_RCC_OscConfig+0x26c>)
 8003338:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800333c:	6013      	str	r3, [r2, #0]
 800333e:	4b78      	ldr	r3, [pc, #480]	; (8003520 <HAL_RCC_OscConfig+0x26c>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a77      	ldr	r2, [pc, #476]	; (8003520 <HAL_RCC_OscConfig+0x26c>)
 8003344:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003348:	6013      	str	r3, [r2, #0]
 800334a:	e01d      	b.n	8003388 <HAL_RCC_OscConfig+0xd4>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003354:	d10c      	bne.n	8003370 <HAL_RCC_OscConfig+0xbc>
 8003356:	4b72      	ldr	r3, [pc, #456]	; (8003520 <HAL_RCC_OscConfig+0x26c>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a71      	ldr	r2, [pc, #452]	; (8003520 <HAL_RCC_OscConfig+0x26c>)
 800335c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003360:	6013      	str	r3, [r2, #0]
 8003362:	4b6f      	ldr	r3, [pc, #444]	; (8003520 <HAL_RCC_OscConfig+0x26c>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a6e      	ldr	r2, [pc, #440]	; (8003520 <HAL_RCC_OscConfig+0x26c>)
 8003368:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800336c:	6013      	str	r3, [r2, #0]
 800336e:	e00b      	b.n	8003388 <HAL_RCC_OscConfig+0xd4>
 8003370:	4b6b      	ldr	r3, [pc, #428]	; (8003520 <HAL_RCC_OscConfig+0x26c>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a6a      	ldr	r2, [pc, #424]	; (8003520 <HAL_RCC_OscConfig+0x26c>)
 8003376:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800337a:	6013      	str	r3, [r2, #0]
 800337c:	4b68      	ldr	r3, [pc, #416]	; (8003520 <HAL_RCC_OscConfig+0x26c>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a67      	ldr	r2, [pc, #412]	; (8003520 <HAL_RCC_OscConfig+0x26c>)
 8003382:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003386:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d013      	beq.n	80033b8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003390:	f7fd fb84 	bl	8000a9c <HAL_GetTick>
 8003394:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003396:	e008      	b.n	80033aa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003398:	f7fd fb80 	bl	8000a9c <HAL_GetTick>
 800339c:	4602      	mov	r2, r0
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	1ad3      	subs	r3, r2, r3
 80033a2:	2b64      	cmp	r3, #100	; 0x64
 80033a4:	d901      	bls.n	80033aa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80033a6:	2303      	movs	r3, #3
 80033a8:	e1fa      	b.n	80037a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033aa:	4b5d      	ldr	r3, [pc, #372]	; (8003520 <HAL_RCC_OscConfig+0x26c>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d0f0      	beq.n	8003398 <HAL_RCC_OscConfig+0xe4>
 80033b6:	e014      	b.n	80033e2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033b8:	f7fd fb70 	bl	8000a9c <HAL_GetTick>
 80033bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033be:	e008      	b.n	80033d2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033c0:	f7fd fb6c 	bl	8000a9c <HAL_GetTick>
 80033c4:	4602      	mov	r2, r0
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	2b64      	cmp	r3, #100	; 0x64
 80033cc:	d901      	bls.n	80033d2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80033ce:	2303      	movs	r3, #3
 80033d0:	e1e6      	b.n	80037a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033d2:	4b53      	ldr	r3, [pc, #332]	; (8003520 <HAL_RCC_OscConfig+0x26c>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d1f0      	bne.n	80033c0 <HAL_RCC_OscConfig+0x10c>
 80033de:	e000      	b.n	80033e2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 0302 	and.w	r3, r3, #2
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d063      	beq.n	80034b6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80033ee:	4b4c      	ldr	r3, [pc, #304]	; (8003520 <HAL_RCC_OscConfig+0x26c>)
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	f003 030c 	and.w	r3, r3, #12
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d00b      	beq.n	8003412 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80033fa:	4b49      	ldr	r3, [pc, #292]	; (8003520 <HAL_RCC_OscConfig+0x26c>)
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	f003 030c 	and.w	r3, r3, #12
 8003402:	2b08      	cmp	r3, #8
 8003404:	d11c      	bne.n	8003440 <HAL_RCC_OscConfig+0x18c>
 8003406:	4b46      	ldr	r3, [pc, #280]	; (8003520 <HAL_RCC_OscConfig+0x26c>)
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800340e:	2b00      	cmp	r3, #0
 8003410:	d116      	bne.n	8003440 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003412:	4b43      	ldr	r3, [pc, #268]	; (8003520 <HAL_RCC_OscConfig+0x26c>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 0302 	and.w	r3, r3, #2
 800341a:	2b00      	cmp	r3, #0
 800341c:	d005      	beq.n	800342a <HAL_RCC_OscConfig+0x176>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	691b      	ldr	r3, [r3, #16]
 8003422:	2b01      	cmp	r3, #1
 8003424:	d001      	beq.n	800342a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e1ba      	b.n	80037a0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800342a:	4b3d      	ldr	r3, [pc, #244]	; (8003520 <HAL_RCC_OscConfig+0x26c>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	695b      	ldr	r3, [r3, #20]
 8003436:	00db      	lsls	r3, r3, #3
 8003438:	4939      	ldr	r1, [pc, #228]	; (8003520 <HAL_RCC_OscConfig+0x26c>)
 800343a:	4313      	orrs	r3, r2
 800343c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800343e:	e03a      	b.n	80034b6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	691b      	ldr	r3, [r3, #16]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d020      	beq.n	800348a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003448:	4b36      	ldr	r3, [pc, #216]	; (8003524 <HAL_RCC_OscConfig+0x270>)
 800344a:	2201      	movs	r2, #1
 800344c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800344e:	f7fd fb25 	bl	8000a9c <HAL_GetTick>
 8003452:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003454:	e008      	b.n	8003468 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003456:	f7fd fb21 	bl	8000a9c <HAL_GetTick>
 800345a:	4602      	mov	r2, r0
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	1ad3      	subs	r3, r2, r3
 8003460:	2b02      	cmp	r3, #2
 8003462:	d901      	bls.n	8003468 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003464:	2303      	movs	r3, #3
 8003466:	e19b      	b.n	80037a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003468:	4b2d      	ldr	r3, [pc, #180]	; (8003520 <HAL_RCC_OscConfig+0x26c>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 0302 	and.w	r3, r3, #2
 8003470:	2b00      	cmp	r3, #0
 8003472:	d0f0      	beq.n	8003456 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003474:	4b2a      	ldr	r3, [pc, #168]	; (8003520 <HAL_RCC_OscConfig+0x26c>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	695b      	ldr	r3, [r3, #20]
 8003480:	00db      	lsls	r3, r3, #3
 8003482:	4927      	ldr	r1, [pc, #156]	; (8003520 <HAL_RCC_OscConfig+0x26c>)
 8003484:	4313      	orrs	r3, r2
 8003486:	600b      	str	r3, [r1, #0]
 8003488:	e015      	b.n	80034b6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800348a:	4b26      	ldr	r3, [pc, #152]	; (8003524 <HAL_RCC_OscConfig+0x270>)
 800348c:	2200      	movs	r2, #0
 800348e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003490:	f7fd fb04 	bl	8000a9c <HAL_GetTick>
 8003494:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003496:	e008      	b.n	80034aa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003498:	f7fd fb00 	bl	8000a9c <HAL_GetTick>
 800349c:	4602      	mov	r2, r0
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	2b02      	cmp	r3, #2
 80034a4:	d901      	bls.n	80034aa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80034a6:	2303      	movs	r3, #3
 80034a8:	e17a      	b.n	80037a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034aa:	4b1d      	ldr	r3, [pc, #116]	; (8003520 <HAL_RCC_OscConfig+0x26c>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 0302 	and.w	r3, r3, #2
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d1f0      	bne.n	8003498 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 0308 	and.w	r3, r3, #8
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d03a      	beq.n	8003538 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	699b      	ldr	r3, [r3, #24]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d019      	beq.n	80034fe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034ca:	4b17      	ldr	r3, [pc, #92]	; (8003528 <HAL_RCC_OscConfig+0x274>)
 80034cc:	2201      	movs	r2, #1
 80034ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034d0:	f7fd fae4 	bl	8000a9c <HAL_GetTick>
 80034d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034d6:	e008      	b.n	80034ea <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034d8:	f7fd fae0 	bl	8000a9c <HAL_GetTick>
 80034dc:	4602      	mov	r2, r0
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	1ad3      	subs	r3, r2, r3
 80034e2:	2b02      	cmp	r3, #2
 80034e4:	d901      	bls.n	80034ea <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80034e6:	2303      	movs	r3, #3
 80034e8:	e15a      	b.n	80037a0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034ea:	4b0d      	ldr	r3, [pc, #52]	; (8003520 <HAL_RCC_OscConfig+0x26c>)
 80034ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ee:	f003 0302 	and.w	r3, r3, #2
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d0f0      	beq.n	80034d8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80034f6:	2001      	movs	r0, #1
 80034f8:	f000 fac4 	bl	8003a84 <RCC_Delay>
 80034fc:	e01c      	b.n	8003538 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034fe:	4b0a      	ldr	r3, [pc, #40]	; (8003528 <HAL_RCC_OscConfig+0x274>)
 8003500:	2200      	movs	r2, #0
 8003502:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003504:	f7fd faca 	bl	8000a9c <HAL_GetTick>
 8003508:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800350a:	e00f      	b.n	800352c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800350c:	f7fd fac6 	bl	8000a9c <HAL_GetTick>
 8003510:	4602      	mov	r2, r0
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	1ad3      	subs	r3, r2, r3
 8003516:	2b02      	cmp	r3, #2
 8003518:	d908      	bls.n	800352c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800351a:	2303      	movs	r3, #3
 800351c:	e140      	b.n	80037a0 <HAL_RCC_OscConfig+0x4ec>
 800351e:	bf00      	nop
 8003520:	40021000 	.word	0x40021000
 8003524:	42420000 	.word	0x42420000
 8003528:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800352c:	4b9e      	ldr	r3, [pc, #632]	; (80037a8 <HAL_RCC_OscConfig+0x4f4>)
 800352e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003530:	f003 0302 	and.w	r3, r3, #2
 8003534:	2b00      	cmp	r3, #0
 8003536:	d1e9      	bne.n	800350c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 0304 	and.w	r3, r3, #4
 8003540:	2b00      	cmp	r3, #0
 8003542:	f000 80a6 	beq.w	8003692 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003546:	2300      	movs	r3, #0
 8003548:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800354a:	4b97      	ldr	r3, [pc, #604]	; (80037a8 <HAL_RCC_OscConfig+0x4f4>)
 800354c:	69db      	ldr	r3, [r3, #28]
 800354e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003552:	2b00      	cmp	r3, #0
 8003554:	d10d      	bne.n	8003572 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003556:	4b94      	ldr	r3, [pc, #592]	; (80037a8 <HAL_RCC_OscConfig+0x4f4>)
 8003558:	69db      	ldr	r3, [r3, #28]
 800355a:	4a93      	ldr	r2, [pc, #588]	; (80037a8 <HAL_RCC_OscConfig+0x4f4>)
 800355c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003560:	61d3      	str	r3, [r2, #28]
 8003562:	4b91      	ldr	r3, [pc, #580]	; (80037a8 <HAL_RCC_OscConfig+0x4f4>)
 8003564:	69db      	ldr	r3, [r3, #28]
 8003566:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800356a:	60bb      	str	r3, [r7, #8]
 800356c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800356e:	2301      	movs	r3, #1
 8003570:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003572:	4b8e      	ldr	r3, [pc, #568]	; (80037ac <HAL_RCC_OscConfig+0x4f8>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800357a:	2b00      	cmp	r3, #0
 800357c:	d118      	bne.n	80035b0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800357e:	4b8b      	ldr	r3, [pc, #556]	; (80037ac <HAL_RCC_OscConfig+0x4f8>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a8a      	ldr	r2, [pc, #552]	; (80037ac <HAL_RCC_OscConfig+0x4f8>)
 8003584:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003588:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800358a:	f7fd fa87 	bl	8000a9c <HAL_GetTick>
 800358e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003590:	e008      	b.n	80035a4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003592:	f7fd fa83 	bl	8000a9c <HAL_GetTick>
 8003596:	4602      	mov	r2, r0
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	1ad3      	subs	r3, r2, r3
 800359c:	2b64      	cmp	r3, #100	; 0x64
 800359e:	d901      	bls.n	80035a4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80035a0:	2303      	movs	r3, #3
 80035a2:	e0fd      	b.n	80037a0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035a4:	4b81      	ldr	r3, [pc, #516]	; (80037ac <HAL_RCC_OscConfig+0x4f8>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d0f0      	beq.n	8003592 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	68db      	ldr	r3, [r3, #12]
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d106      	bne.n	80035c6 <HAL_RCC_OscConfig+0x312>
 80035b8:	4b7b      	ldr	r3, [pc, #492]	; (80037a8 <HAL_RCC_OscConfig+0x4f4>)
 80035ba:	6a1b      	ldr	r3, [r3, #32]
 80035bc:	4a7a      	ldr	r2, [pc, #488]	; (80037a8 <HAL_RCC_OscConfig+0x4f4>)
 80035be:	f043 0301 	orr.w	r3, r3, #1
 80035c2:	6213      	str	r3, [r2, #32]
 80035c4:	e02d      	b.n	8003622 <HAL_RCC_OscConfig+0x36e>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	68db      	ldr	r3, [r3, #12]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d10c      	bne.n	80035e8 <HAL_RCC_OscConfig+0x334>
 80035ce:	4b76      	ldr	r3, [pc, #472]	; (80037a8 <HAL_RCC_OscConfig+0x4f4>)
 80035d0:	6a1b      	ldr	r3, [r3, #32]
 80035d2:	4a75      	ldr	r2, [pc, #468]	; (80037a8 <HAL_RCC_OscConfig+0x4f4>)
 80035d4:	f023 0301 	bic.w	r3, r3, #1
 80035d8:	6213      	str	r3, [r2, #32]
 80035da:	4b73      	ldr	r3, [pc, #460]	; (80037a8 <HAL_RCC_OscConfig+0x4f4>)
 80035dc:	6a1b      	ldr	r3, [r3, #32]
 80035de:	4a72      	ldr	r2, [pc, #456]	; (80037a8 <HAL_RCC_OscConfig+0x4f4>)
 80035e0:	f023 0304 	bic.w	r3, r3, #4
 80035e4:	6213      	str	r3, [r2, #32]
 80035e6:	e01c      	b.n	8003622 <HAL_RCC_OscConfig+0x36e>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	68db      	ldr	r3, [r3, #12]
 80035ec:	2b05      	cmp	r3, #5
 80035ee:	d10c      	bne.n	800360a <HAL_RCC_OscConfig+0x356>
 80035f0:	4b6d      	ldr	r3, [pc, #436]	; (80037a8 <HAL_RCC_OscConfig+0x4f4>)
 80035f2:	6a1b      	ldr	r3, [r3, #32]
 80035f4:	4a6c      	ldr	r2, [pc, #432]	; (80037a8 <HAL_RCC_OscConfig+0x4f4>)
 80035f6:	f043 0304 	orr.w	r3, r3, #4
 80035fa:	6213      	str	r3, [r2, #32]
 80035fc:	4b6a      	ldr	r3, [pc, #424]	; (80037a8 <HAL_RCC_OscConfig+0x4f4>)
 80035fe:	6a1b      	ldr	r3, [r3, #32]
 8003600:	4a69      	ldr	r2, [pc, #420]	; (80037a8 <HAL_RCC_OscConfig+0x4f4>)
 8003602:	f043 0301 	orr.w	r3, r3, #1
 8003606:	6213      	str	r3, [r2, #32]
 8003608:	e00b      	b.n	8003622 <HAL_RCC_OscConfig+0x36e>
 800360a:	4b67      	ldr	r3, [pc, #412]	; (80037a8 <HAL_RCC_OscConfig+0x4f4>)
 800360c:	6a1b      	ldr	r3, [r3, #32]
 800360e:	4a66      	ldr	r2, [pc, #408]	; (80037a8 <HAL_RCC_OscConfig+0x4f4>)
 8003610:	f023 0301 	bic.w	r3, r3, #1
 8003614:	6213      	str	r3, [r2, #32]
 8003616:	4b64      	ldr	r3, [pc, #400]	; (80037a8 <HAL_RCC_OscConfig+0x4f4>)
 8003618:	6a1b      	ldr	r3, [r3, #32]
 800361a:	4a63      	ldr	r2, [pc, #396]	; (80037a8 <HAL_RCC_OscConfig+0x4f4>)
 800361c:	f023 0304 	bic.w	r3, r3, #4
 8003620:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	68db      	ldr	r3, [r3, #12]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d015      	beq.n	8003656 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800362a:	f7fd fa37 	bl	8000a9c <HAL_GetTick>
 800362e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003630:	e00a      	b.n	8003648 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003632:	f7fd fa33 	bl	8000a9c <HAL_GetTick>
 8003636:	4602      	mov	r2, r0
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	1ad3      	subs	r3, r2, r3
 800363c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003640:	4293      	cmp	r3, r2
 8003642:	d901      	bls.n	8003648 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003644:	2303      	movs	r3, #3
 8003646:	e0ab      	b.n	80037a0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003648:	4b57      	ldr	r3, [pc, #348]	; (80037a8 <HAL_RCC_OscConfig+0x4f4>)
 800364a:	6a1b      	ldr	r3, [r3, #32]
 800364c:	f003 0302 	and.w	r3, r3, #2
 8003650:	2b00      	cmp	r3, #0
 8003652:	d0ee      	beq.n	8003632 <HAL_RCC_OscConfig+0x37e>
 8003654:	e014      	b.n	8003680 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003656:	f7fd fa21 	bl	8000a9c <HAL_GetTick>
 800365a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800365c:	e00a      	b.n	8003674 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800365e:	f7fd fa1d 	bl	8000a9c <HAL_GetTick>
 8003662:	4602      	mov	r2, r0
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	1ad3      	subs	r3, r2, r3
 8003668:	f241 3288 	movw	r2, #5000	; 0x1388
 800366c:	4293      	cmp	r3, r2
 800366e:	d901      	bls.n	8003674 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003670:	2303      	movs	r3, #3
 8003672:	e095      	b.n	80037a0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003674:	4b4c      	ldr	r3, [pc, #304]	; (80037a8 <HAL_RCC_OscConfig+0x4f4>)
 8003676:	6a1b      	ldr	r3, [r3, #32]
 8003678:	f003 0302 	and.w	r3, r3, #2
 800367c:	2b00      	cmp	r3, #0
 800367e:	d1ee      	bne.n	800365e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003680:	7dfb      	ldrb	r3, [r7, #23]
 8003682:	2b01      	cmp	r3, #1
 8003684:	d105      	bne.n	8003692 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003686:	4b48      	ldr	r3, [pc, #288]	; (80037a8 <HAL_RCC_OscConfig+0x4f4>)
 8003688:	69db      	ldr	r3, [r3, #28]
 800368a:	4a47      	ldr	r2, [pc, #284]	; (80037a8 <HAL_RCC_OscConfig+0x4f4>)
 800368c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003690:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	69db      	ldr	r3, [r3, #28]
 8003696:	2b00      	cmp	r3, #0
 8003698:	f000 8081 	beq.w	800379e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800369c:	4b42      	ldr	r3, [pc, #264]	; (80037a8 <HAL_RCC_OscConfig+0x4f4>)
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	f003 030c 	and.w	r3, r3, #12
 80036a4:	2b08      	cmp	r3, #8
 80036a6:	d061      	beq.n	800376c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	69db      	ldr	r3, [r3, #28]
 80036ac:	2b02      	cmp	r3, #2
 80036ae:	d146      	bne.n	800373e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036b0:	4b3f      	ldr	r3, [pc, #252]	; (80037b0 <HAL_RCC_OscConfig+0x4fc>)
 80036b2:	2200      	movs	r2, #0
 80036b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036b6:	f7fd f9f1 	bl	8000a9c <HAL_GetTick>
 80036ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036bc:	e008      	b.n	80036d0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036be:	f7fd f9ed 	bl	8000a9c <HAL_GetTick>
 80036c2:	4602      	mov	r2, r0
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	1ad3      	subs	r3, r2, r3
 80036c8:	2b02      	cmp	r3, #2
 80036ca:	d901      	bls.n	80036d0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80036cc:	2303      	movs	r3, #3
 80036ce:	e067      	b.n	80037a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036d0:	4b35      	ldr	r3, [pc, #212]	; (80037a8 <HAL_RCC_OscConfig+0x4f4>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d1f0      	bne.n	80036be <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6a1b      	ldr	r3, [r3, #32]
 80036e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036e4:	d108      	bne.n	80036f8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80036e6:	4b30      	ldr	r3, [pc, #192]	; (80037a8 <HAL_RCC_OscConfig+0x4f4>)
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	492d      	ldr	r1, [pc, #180]	; (80037a8 <HAL_RCC_OscConfig+0x4f4>)
 80036f4:	4313      	orrs	r3, r2
 80036f6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036f8:	4b2b      	ldr	r3, [pc, #172]	; (80037a8 <HAL_RCC_OscConfig+0x4f4>)
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6a19      	ldr	r1, [r3, #32]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003708:	430b      	orrs	r3, r1
 800370a:	4927      	ldr	r1, [pc, #156]	; (80037a8 <HAL_RCC_OscConfig+0x4f4>)
 800370c:	4313      	orrs	r3, r2
 800370e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003710:	4b27      	ldr	r3, [pc, #156]	; (80037b0 <HAL_RCC_OscConfig+0x4fc>)
 8003712:	2201      	movs	r2, #1
 8003714:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003716:	f7fd f9c1 	bl	8000a9c <HAL_GetTick>
 800371a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800371c:	e008      	b.n	8003730 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800371e:	f7fd f9bd 	bl	8000a9c <HAL_GetTick>
 8003722:	4602      	mov	r2, r0
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	1ad3      	subs	r3, r2, r3
 8003728:	2b02      	cmp	r3, #2
 800372a:	d901      	bls.n	8003730 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800372c:	2303      	movs	r3, #3
 800372e:	e037      	b.n	80037a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003730:	4b1d      	ldr	r3, [pc, #116]	; (80037a8 <HAL_RCC_OscConfig+0x4f4>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003738:	2b00      	cmp	r3, #0
 800373a:	d0f0      	beq.n	800371e <HAL_RCC_OscConfig+0x46a>
 800373c:	e02f      	b.n	800379e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800373e:	4b1c      	ldr	r3, [pc, #112]	; (80037b0 <HAL_RCC_OscConfig+0x4fc>)
 8003740:	2200      	movs	r2, #0
 8003742:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003744:	f7fd f9aa 	bl	8000a9c <HAL_GetTick>
 8003748:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800374a:	e008      	b.n	800375e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800374c:	f7fd f9a6 	bl	8000a9c <HAL_GetTick>
 8003750:	4602      	mov	r2, r0
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	2b02      	cmp	r3, #2
 8003758:	d901      	bls.n	800375e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800375a:	2303      	movs	r3, #3
 800375c:	e020      	b.n	80037a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800375e:	4b12      	ldr	r3, [pc, #72]	; (80037a8 <HAL_RCC_OscConfig+0x4f4>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003766:	2b00      	cmp	r3, #0
 8003768:	d1f0      	bne.n	800374c <HAL_RCC_OscConfig+0x498>
 800376a:	e018      	b.n	800379e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	69db      	ldr	r3, [r3, #28]
 8003770:	2b01      	cmp	r3, #1
 8003772:	d101      	bne.n	8003778 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	e013      	b.n	80037a0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003778:	4b0b      	ldr	r3, [pc, #44]	; (80037a8 <HAL_RCC_OscConfig+0x4f4>)
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6a1b      	ldr	r3, [r3, #32]
 8003788:	429a      	cmp	r2, r3
 800378a:	d106      	bne.n	800379a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003796:	429a      	cmp	r2, r3
 8003798:	d001      	beq.n	800379e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e000      	b.n	80037a0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800379e:	2300      	movs	r3, #0
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	3718      	adds	r7, #24
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}
 80037a8:	40021000 	.word	0x40021000
 80037ac:	40007000 	.word	0x40007000
 80037b0:	42420060 	.word	0x42420060

080037b4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b084      	sub	sp, #16
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
 80037bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d101      	bne.n	80037c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	e0d0      	b.n	800396a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80037c8:	4b6a      	ldr	r3, [pc, #424]	; (8003974 <HAL_RCC_ClockConfig+0x1c0>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 0307 	and.w	r3, r3, #7
 80037d0:	683a      	ldr	r2, [r7, #0]
 80037d2:	429a      	cmp	r2, r3
 80037d4:	d910      	bls.n	80037f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037d6:	4b67      	ldr	r3, [pc, #412]	; (8003974 <HAL_RCC_ClockConfig+0x1c0>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f023 0207 	bic.w	r2, r3, #7
 80037de:	4965      	ldr	r1, [pc, #404]	; (8003974 <HAL_RCC_ClockConfig+0x1c0>)
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	4313      	orrs	r3, r2
 80037e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037e6:	4b63      	ldr	r3, [pc, #396]	; (8003974 <HAL_RCC_ClockConfig+0x1c0>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 0307 	and.w	r3, r3, #7
 80037ee:	683a      	ldr	r2, [r7, #0]
 80037f0:	429a      	cmp	r2, r3
 80037f2:	d001      	beq.n	80037f8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	e0b8      	b.n	800396a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 0302 	and.w	r3, r3, #2
 8003800:	2b00      	cmp	r3, #0
 8003802:	d020      	beq.n	8003846 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 0304 	and.w	r3, r3, #4
 800380c:	2b00      	cmp	r3, #0
 800380e:	d005      	beq.n	800381c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003810:	4b59      	ldr	r3, [pc, #356]	; (8003978 <HAL_RCC_ClockConfig+0x1c4>)
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	4a58      	ldr	r2, [pc, #352]	; (8003978 <HAL_RCC_ClockConfig+0x1c4>)
 8003816:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800381a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 0308 	and.w	r3, r3, #8
 8003824:	2b00      	cmp	r3, #0
 8003826:	d005      	beq.n	8003834 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003828:	4b53      	ldr	r3, [pc, #332]	; (8003978 <HAL_RCC_ClockConfig+0x1c4>)
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	4a52      	ldr	r2, [pc, #328]	; (8003978 <HAL_RCC_ClockConfig+0x1c4>)
 800382e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003832:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003834:	4b50      	ldr	r3, [pc, #320]	; (8003978 <HAL_RCC_ClockConfig+0x1c4>)
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	494d      	ldr	r1, [pc, #308]	; (8003978 <HAL_RCC_ClockConfig+0x1c4>)
 8003842:	4313      	orrs	r3, r2
 8003844:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 0301 	and.w	r3, r3, #1
 800384e:	2b00      	cmp	r3, #0
 8003850:	d040      	beq.n	80038d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	2b01      	cmp	r3, #1
 8003858:	d107      	bne.n	800386a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800385a:	4b47      	ldr	r3, [pc, #284]	; (8003978 <HAL_RCC_ClockConfig+0x1c4>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003862:	2b00      	cmp	r3, #0
 8003864:	d115      	bne.n	8003892 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	e07f      	b.n	800396a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	2b02      	cmp	r3, #2
 8003870:	d107      	bne.n	8003882 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003872:	4b41      	ldr	r3, [pc, #260]	; (8003978 <HAL_RCC_ClockConfig+0x1c4>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800387a:	2b00      	cmp	r3, #0
 800387c:	d109      	bne.n	8003892 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	e073      	b.n	800396a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003882:	4b3d      	ldr	r3, [pc, #244]	; (8003978 <HAL_RCC_ClockConfig+0x1c4>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 0302 	and.w	r3, r3, #2
 800388a:	2b00      	cmp	r3, #0
 800388c:	d101      	bne.n	8003892 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e06b      	b.n	800396a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003892:	4b39      	ldr	r3, [pc, #228]	; (8003978 <HAL_RCC_ClockConfig+0x1c4>)
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	f023 0203 	bic.w	r2, r3, #3
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	4936      	ldr	r1, [pc, #216]	; (8003978 <HAL_RCC_ClockConfig+0x1c4>)
 80038a0:	4313      	orrs	r3, r2
 80038a2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038a4:	f7fd f8fa 	bl	8000a9c <HAL_GetTick>
 80038a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038aa:	e00a      	b.n	80038c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038ac:	f7fd f8f6 	bl	8000a9c <HAL_GetTick>
 80038b0:	4602      	mov	r2, r0
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	1ad3      	subs	r3, r2, r3
 80038b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d901      	bls.n	80038c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80038be:	2303      	movs	r3, #3
 80038c0:	e053      	b.n	800396a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038c2:	4b2d      	ldr	r3, [pc, #180]	; (8003978 <HAL_RCC_ClockConfig+0x1c4>)
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	f003 020c 	and.w	r2, r3, #12
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d1eb      	bne.n	80038ac <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80038d4:	4b27      	ldr	r3, [pc, #156]	; (8003974 <HAL_RCC_ClockConfig+0x1c0>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f003 0307 	and.w	r3, r3, #7
 80038dc:	683a      	ldr	r2, [r7, #0]
 80038de:	429a      	cmp	r2, r3
 80038e0:	d210      	bcs.n	8003904 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038e2:	4b24      	ldr	r3, [pc, #144]	; (8003974 <HAL_RCC_ClockConfig+0x1c0>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f023 0207 	bic.w	r2, r3, #7
 80038ea:	4922      	ldr	r1, [pc, #136]	; (8003974 <HAL_RCC_ClockConfig+0x1c0>)
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	4313      	orrs	r3, r2
 80038f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038f2:	4b20      	ldr	r3, [pc, #128]	; (8003974 <HAL_RCC_ClockConfig+0x1c0>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 0307 	and.w	r3, r3, #7
 80038fa:	683a      	ldr	r2, [r7, #0]
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d001      	beq.n	8003904 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003900:	2301      	movs	r3, #1
 8003902:	e032      	b.n	800396a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 0304 	and.w	r3, r3, #4
 800390c:	2b00      	cmp	r3, #0
 800390e:	d008      	beq.n	8003922 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003910:	4b19      	ldr	r3, [pc, #100]	; (8003978 <HAL_RCC_ClockConfig+0x1c4>)
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	68db      	ldr	r3, [r3, #12]
 800391c:	4916      	ldr	r1, [pc, #88]	; (8003978 <HAL_RCC_ClockConfig+0x1c4>)
 800391e:	4313      	orrs	r3, r2
 8003920:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 0308 	and.w	r3, r3, #8
 800392a:	2b00      	cmp	r3, #0
 800392c:	d009      	beq.n	8003942 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800392e:	4b12      	ldr	r3, [pc, #72]	; (8003978 <HAL_RCC_ClockConfig+0x1c4>)
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	691b      	ldr	r3, [r3, #16]
 800393a:	00db      	lsls	r3, r3, #3
 800393c:	490e      	ldr	r1, [pc, #56]	; (8003978 <HAL_RCC_ClockConfig+0x1c4>)
 800393e:	4313      	orrs	r3, r2
 8003940:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003942:	f000 f821 	bl	8003988 <HAL_RCC_GetSysClockFreq>
 8003946:	4602      	mov	r2, r0
 8003948:	4b0b      	ldr	r3, [pc, #44]	; (8003978 <HAL_RCC_ClockConfig+0x1c4>)
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	091b      	lsrs	r3, r3, #4
 800394e:	f003 030f 	and.w	r3, r3, #15
 8003952:	490a      	ldr	r1, [pc, #40]	; (800397c <HAL_RCC_ClockConfig+0x1c8>)
 8003954:	5ccb      	ldrb	r3, [r1, r3]
 8003956:	fa22 f303 	lsr.w	r3, r2, r3
 800395a:	4a09      	ldr	r2, [pc, #36]	; (8003980 <HAL_RCC_ClockConfig+0x1cc>)
 800395c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800395e:	4b09      	ldr	r3, [pc, #36]	; (8003984 <HAL_RCC_ClockConfig+0x1d0>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4618      	mov	r0, r3
 8003964:	f7fd f858 	bl	8000a18 <HAL_InitTick>

  return HAL_OK;
 8003968:	2300      	movs	r3, #0
}
 800396a:	4618      	mov	r0, r3
 800396c:	3710      	adds	r7, #16
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}
 8003972:	bf00      	nop
 8003974:	40022000 	.word	0x40022000
 8003978:	40021000 	.word	0x40021000
 800397c:	08008ca4 	.word	0x08008ca4
 8003980:	20000090 	.word	0x20000090
 8003984:	20000094 	.word	0x20000094

08003988 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003988:	b490      	push	{r4, r7}
 800398a:	b08a      	sub	sp, #40	; 0x28
 800398c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800398e:	4b2a      	ldr	r3, [pc, #168]	; (8003a38 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003990:	1d3c      	adds	r4, r7, #4
 8003992:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003994:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003998:	f240 2301 	movw	r3, #513	; 0x201
 800399c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800399e:	2300      	movs	r3, #0
 80039a0:	61fb      	str	r3, [r7, #28]
 80039a2:	2300      	movs	r3, #0
 80039a4:	61bb      	str	r3, [r7, #24]
 80039a6:	2300      	movs	r3, #0
 80039a8:	627b      	str	r3, [r7, #36]	; 0x24
 80039aa:	2300      	movs	r3, #0
 80039ac:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80039ae:	2300      	movs	r3, #0
 80039b0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80039b2:	4b22      	ldr	r3, [pc, #136]	; (8003a3c <HAL_RCC_GetSysClockFreq+0xb4>)
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80039b8:	69fb      	ldr	r3, [r7, #28]
 80039ba:	f003 030c 	and.w	r3, r3, #12
 80039be:	2b04      	cmp	r3, #4
 80039c0:	d002      	beq.n	80039c8 <HAL_RCC_GetSysClockFreq+0x40>
 80039c2:	2b08      	cmp	r3, #8
 80039c4:	d003      	beq.n	80039ce <HAL_RCC_GetSysClockFreq+0x46>
 80039c6:	e02d      	b.n	8003a24 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80039c8:	4b1d      	ldr	r3, [pc, #116]	; (8003a40 <HAL_RCC_GetSysClockFreq+0xb8>)
 80039ca:	623b      	str	r3, [r7, #32]
      break;
 80039cc:	e02d      	b.n	8003a2a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80039ce:	69fb      	ldr	r3, [r7, #28]
 80039d0:	0c9b      	lsrs	r3, r3, #18
 80039d2:	f003 030f 	and.w	r3, r3, #15
 80039d6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80039da:	4413      	add	r3, r2
 80039dc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80039e0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80039e2:	69fb      	ldr	r3, [r7, #28]
 80039e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d013      	beq.n	8003a14 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80039ec:	4b13      	ldr	r3, [pc, #76]	; (8003a3c <HAL_RCC_GetSysClockFreq+0xb4>)
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	0c5b      	lsrs	r3, r3, #17
 80039f2:	f003 0301 	and.w	r3, r3, #1
 80039f6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80039fa:	4413      	add	r3, r2
 80039fc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003a00:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	4a0e      	ldr	r2, [pc, #56]	; (8003a40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a06:	fb02 f203 	mul.w	r2, r2, r3
 8003a0a:	69bb      	ldr	r3, [r7, #24]
 8003a0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a10:	627b      	str	r3, [r7, #36]	; 0x24
 8003a12:	e004      	b.n	8003a1e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	4a0b      	ldr	r2, [pc, #44]	; (8003a44 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003a18:	fb02 f303 	mul.w	r3, r2, r3
 8003a1c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a20:	623b      	str	r3, [r7, #32]
      break;
 8003a22:	e002      	b.n	8003a2a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003a24:	4b06      	ldr	r3, [pc, #24]	; (8003a40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a26:	623b      	str	r3, [r7, #32]
      break;
 8003a28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a2a:	6a3b      	ldr	r3, [r7, #32]
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	3728      	adds	r7, #40	; 0x28
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bc90      	pop	{r4, r7}
 8003a34:	4770      	bx	lr
 8003a36:	bf00      	nop
 8003a38:	08008c3c 	.word	0x08008c3c
 8003a3c:	40021000 	.word	0x40021000
 8003a40:	007a1200 	.word	0x007a1200
 8003a44:	003d0900 	.word	0x003d0900

08003a48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a4c:	4b02      	ldr	r3, [pc, #8]	; (8003a58 <HAL_RCC_GetHCLKFreq+0x10>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bc80      	pop	{r7}
 8003a56:	4770      	bx	lr
 8003a58:	20000090 	.word	0x20000090

08003a5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003a60:	f7ff fff2 	bl	8003a48 <HAL_RCC_GetHCLKFreq>
 8003a64:	4602      	mov	r2, r0
 8003a66:	4b05      	ldr	r3, [pc, #20]	; (8003a7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	0adb      	lsrs	r3, r3, #11
 8003a6c:	f003 0307 	and.w	r3, r3, #7
 8003a70:	4903      	ldr	r1, [pc, #12]	; (8003a80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a72:	5ccb      	ldrb	r3, [r1, r3]
 8003a74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	bd80      	pop	{r7, pc}
 8003a7c:	40021000 	.word	0x40021000
 8003a80:	08008cb4 	.word	0x08008cb4

08003a84 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b085      	sub	sp, #20
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003a8c:	4b0a      	ldr	r3, [pc, #40]	; (8003ab8 <RCC_Delay+0x34>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a0a      	ldr	r2, [pc, #40]	; (8003abc <RCC_Delay+0x38>)
 8003a92:	fba2 2303 	umull	r2, r3, r2, r3
 8003a96:	0a5b      	lsrs	r3, r3, #9
 8003a98:	687a      	ldr	r2, [r7, #4]
 8003a9a:	fb02 f303 	mul.w	r3, r2, r3
 8003a9e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003aa0:	bf00      	nop
  }
  while (Delay --);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	1e5a      	subs	r2, r3, #1
 8003aa6:	60fa      	str	r2, [r7, #12]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d1f9      	bne.n	8003aa0 <RCC_Delay+0x1c>
}
 8003aac:	bf00      	nop
 8003aae:	bf00      	nop
 8003ab0:	3714      	adds	r7, #20
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bc80      	pop	{r7}
 8003ab6:	4770      	bx	lr
 8003ab8:	20000090 	.word	0x20000090
 8003abc:	10624dd3 	.word	0x10624dd3

08003ac0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b086      	sub	sp, #24
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	613b      	str	r3, [r7, #16]
 8003acc:	2300      	movs	r3, #0
 8003ace:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 0301 	and.w	r3, r3, #1
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d07d      	beq.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003adc:	2300      	movs	r3, #0
 8003ade:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ae0:	4b4f      	ldr	r3, [pc, #316]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ae2:	69db      	ldr	r3, [r3, #28]
 8003ae4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d10d      	bne.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003aec:	4b4c      	ldr	r3, [pc, #304]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003aee:	69db      	ldr	r3, [r3, #28]
 8003af0:	4a4b      	ldr	r2, [pc, #300]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003af2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003af6:	61d3      	str	r3, [r2, #28]
 8003af8:	4b49      	ldr	r3, [pc, #292]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003afa:	69db      	ldr	r3, [r3, #28]
 8003afc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b00:	60bb      	str	r3, [r7, #8]
 8003b02:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b04:	2301      	movs	r3, #1
 8003b06:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b08:	4b46      	ldr	r3, [pc, #280]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d118      	bne.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b14:	4b43      	ldr	r3, [pc, #268]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a42      	ldr	r2, [pc, #264]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b1e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b20:	f7fc ffbc 	bl	8000a9c <HAL_GetTick>
 8003b24:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b26:	e008      	b.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b28:	f7fc ffb8 	bl	8000a9c <HAL_GetTick>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	1ad3      	subs	r3, r2, r3
 8003b32:	2b64      	cmp	r3, #100	; 0x64
 8003b34:	d901      	bls.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003b36:	2303      	movs	r3, #3
 8003b38:	e06d      	b.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b3a:	4b3a      	ldr	r3, [pc, #232]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d0f0      	beq.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003b46:	4b36      	ldr	r3, [pc, #216]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b48:	6a1b      	ldr	r3, [r3, #32]
 8003b4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b4e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d02e      	beq.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b5e:	68fa      	ldr	r2, [r7, #12]
 8003b60:	429a      	cmp	r2, r3
 8003b62:	d027      	beq.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b64:	4b2e      	ldr	r3, [pc, #184]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b66:	6a1b      	ldr	r3, [r3, #32]
 8003b68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b6c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b6e:	4b2e      	ldr	r3, [pc, #184]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003b70:	2201      	movs	r2, #1
 8003b72:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b74:	4b2c      	ldr	r3, [pc, #176]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003b76:	2200      	movs	r2, #0
 8003b78:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003b7a:	4a29      	ldr	r2, [pc, #164]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	f003 0301 	and.w	r3, r3, #1
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d014      	beq.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b8a:	f7fc ff87 	bl	8000a9c <HAL_GetTick>
 8003b8e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b90:	e00a      	b.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b92:	f7fc ff83 	bl	8000a9c <HAL_GetTick>
 8003b96:	4602      	mov	r2, r0
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	1ad3      	subs	r3, r2, r3
 8003b9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d901      	bls.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003ba4:	2303      	movs	r3, #3
 8003ba6:	e036      	b.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ba8:	4b1d      	ldr	r3, [pc, #116]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003baa:	6a1b      	ldr	r3, [r3, #32]
 8003bac:	f003 0302 	and.w	r3, r3, #2
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d0ee      	beq.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003bb4:	4b1a      	ldr	r3, [pc, #104]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bb6:	6a1b      	ldr	r3, [r3, #32]
 8003bb8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	4917      	ldr	r1, [pc, #92]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003bc6:	7dfb      	ldrb	r3, [r7, #23]
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	d105      	bne.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bcc:	4b14      	ldr	r3, [pc, #80]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bce:	69db      	ldr	r3, [r3, #28]
 8003bd0:	4a13      	ldr	r2, [pc, #76]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bd2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bd6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f003 0302 	and.w	r3, r3, #2
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d008      	beq.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003be4:	4b0e      	ldr	r3, [pc, #56]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	490b      	ldr	r1, [pc, #44]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 0310 	and.w	r3, r3, #16
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d008      	beq.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003c02:	4b07      	ldr	r3, [pc, #28]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	68db      	ldr	r3, [r3, #12]
 8003c0e:	4904      	ldr	r1, [pc, #16]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c10:	4313      	orrs	r3, r2
 8003c12:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003c14:	2300      	movs	r3, #0
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3718      	adds	r7, #24
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}
 8003c1e:	bf00      	nop
 8003c20:	40021000 	.word	0x40021000
 8003c24:	40007000 	.word	0x40007000
 8003c28:	42420440 	.word	0x42420440

08003c2c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003c2c:	b590      	push	{r4, r7, lr}
 8003c2e:	b08d      	sub	sp, #52	; 0x34
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003c34:	4b5a      	ldr	r3, [pc, #360]	; (8003da0 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8003c36:	f107 040c 	add.w	r4, r7, #12
 8003c3a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003c3c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003c40:	f240 2301 	movw	r3, #513	; 0x201
 8003c44:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003c46:	2300      	movs	r3, #0
 8003c48:	627b      	str	r3, [r7, #36]	; 0x24
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c4e:	2300      	movs	r3, #0
 8003c50:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003c52:	2300      	movs	r3, #0
 8003c54:	61fb      	str	r3, [r7, #28]
 8003c56:	2300      	movs	r3, #0
 8003c58:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2b10      	cmp	r3, #16
 8003c5e:	d00a      	beq.n	8003c76 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2b10      	cmp	r3, #16
 8003c64:	f200 8091 	bhi.w	8003d8a <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	d04c      	beq.n	8003d08 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2b02      	cmp	r3, #2
 8003c72:	d07c      	beq.n	8003d6e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003c74:	e089      	b.n	8003d8a <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      temp_reg = RCC->CFGR;
 8003c76:	4b4b      	ldr	r3, [pc, #300]	; (8003da4 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003c7c:	4b49      	ldr	r3, [pc, #292]	; (8003da4 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	f000 8082 	beq.w	8003d8e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003c8a:	69fb      	ldr	r3, [r7, #28]
 8003c8c:	0c9b      	lsrs	r3, r3, #18
 8003c8e:	f003 030f 	and.w	r3, r3, #15
 8003c92:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003c96:	4413      	add	r3, r2
 8003c98:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003c9c:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003c9e:	69fb      	ldr	r3, [r7, #28]
 8003ca0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d018      	beq.n	8003cda <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003ca8:	4b3e      	ldr	r3, [pc, #248]	; (8003da4 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	0c5b      	lsrs	r3, r3, #17
 8003cae:	f003 0301 	and.w	r3, r3, #1
 8003cb2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003cb6:	4413      	add	r3, r2
 8003cb8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003cbc:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003cbe:	69fb      	ldr	r3, [r7, #28]
 8003cc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d00d      	beq.n	8003ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003cc8:	4a37      	ldr	r2, [pc, #220]	; (8003da8 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8003cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ccc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003cd0:	6a3b      	ldr	r3, [r7, #32]
 8003cd2:	fb02 f303 	mul.w	r3, r2, r3
 8003cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cd8:	e004      	b.n	8003ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003cda:	6a3b      	ldr	r3, [r7, #32]
 8003cdc:	4a33      	ldr	r2, [pc, #204]	; (8003dac <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 8003cde:	fb02 f303 	mul.w	r3, r2, r3
 8003ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003ce4:	4b2f      	ldr	r3, [pc, #188]	; (8003da4 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003cf0:	d102      	bne.n	8003cf8 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 8003cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cf4:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003cf6:	e04a      	b.n	8003d8e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = (pllclk * 2) / 3;
 8003cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cfa:	005b      	lsls	r3, r3, #1
 8003cfc:	4a2c      	ldr	r2, [pc, #176]	; (8003db0 <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 8003cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8003d02:	085b      	lsrs	r3, r3, #1
 8003d04:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003d06:	e042      	b.n	8003d8e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      temp_reg = RCC->BDCR;
 8003d08:	4b26      	ldr	r3, [pc, #152]	; (8003da4 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003d0a:	6a1b      	ldr	r3, [r3, #32]
 8003d0c:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003d0e:	69fb      	ldr	r3, [r7, #28]
 8003d10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d18:	d108      	bne.n	8003d2c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8003d1a:	69fb      	ldr	r3, [r7, #28]
 8003d1c:	f003 0302 	and.w	r3, r3, #2
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d003      	beq.n	8003d2c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 8003d24:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d28:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d2a:	e01f      	b.n	8003d6c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003d2c:	69fb      	ldr	r3, [r7, #28]
 8003d2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d36:	d109      	bne.n	8003d4c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8003d38:	4b1a      	ldr	r3, [pc, #104]	; (8003da4 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d3c:	f003 0302 	and.w	r3, r3, #2
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d003      	beq.n	8003d4c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 8003d44:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003d48:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d4a:	e00f      	b.n	8003d6c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003d4c:	69fb      	ldr	r3, [r7, #28]
 8003d4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d52:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d56:	d11c      	bne.n	8003d92 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8003d58:	4b12      	ldr	r3, [pc, #72]	; (8003da4 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d016      	beq.n	8003d92 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        frequency = HSE_VALUE / 128U;
 8003d64:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003d68:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003d6a:	e012      	b.n	8003d92 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8003d6c:	e011      	b.n	8003d92 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003d6e:	f7ff fe75 	bl	8003a5c <HAL_RCC_GetPCLK2Freq>
 8003d72:	4602      	mov	r2, r0
 8003d74:	4b0b      	ldr	r3, [pc, #44]	; (8003da4 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	0b9b      	lsrs	r3, r3, #14
 8003d7a:	f003 0303 	and.w	r3, r3, #3
 8003d7e:	3301      	adds	r3, #1
 8003d80:	005b      	lsls	r3, r3, #1
 8003d82:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d86:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003d88:	e004      	b.n	8003d94 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8003d8a:	bf00      	nop
 8003d8c:	e002      	b.n	8003d94 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8003d8e:	bf00      	nop
 8003d90:	e000      	b.n	8003d94 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8003d92:	bf00      	nop
    }
  }
  return (frequency);
 8003d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	3734      	adds	r7, #52	; 0x34
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd90      	pop	{r4, r7, pc}
 8003d9e:	bf00      	nop
 8003da0:	08008c4c 	.word	0x08008c4c
 8003da4:	40021000 	.word	0x40021000
 8003da8:	007a1200 	.word	0x007a1200
 8003dac:	003d0900 	.word	0x003d0900
 8003db0:	aaaaaaab 	.word	0xaaaaaaab

08003db4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003db4:	b084      	sub	sp, #16
 8003db6:	b480      	push	{r7}
 8003db8:	b083      	sub	sp, #12
 8003dba:	af00      	add	r7, sp, #0
 8003dbc:	6078      	str	r0, [r7, #4]
 8003dbe:	f107 0014 	add.w	r0, r7, #20
 8003dc2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003dc6:	2300      	movs	r3, #0
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	370c      	adds	r7, #12
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bc80      	pop	{r7}
 8003dd0:	b004      	add	sp, #16
 8003dd2:	4770      	bx	lr

08003dd4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b085      	sub	sp, #20
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2200      	movs	r2, #0
 8003de0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003de4:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003de8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	b29a      	uxth	r2, r3
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003df4:	2300      	movs	r3, #0
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3714      	adds	r7, #20
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bc80      	pop	{r7}
 8003dfe:	4770      	bx	lr

08003e00 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b085      	sub	sp, #20
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003e08:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003e0c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003e14:	b29a      	uxth	r2, r3
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	b29b      	uxth	r3, r3
 8003e1a:	43db      	mvns	r3, r3
 8003e1c:	b29b      	uxth	r3, r3
 8003e1e:	4013      	ands	r3, r2
 8003e20:	b29a      	uxth	r2, r3
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003e28:	2300      	movs	r3, #0
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3714      	adds	r7, #20
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bc80      	pop	{r7}
 8003e32:	4770      	bx	lr

08003e34 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b083      	sub	sp, #12
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
 8003e3c:	460b      	mov	r3, r1
 8003e3e:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003e40:	2300      	movs	r3, #0
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	370c      	adds	r7, #12
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bc80      	pop	{r7}
 8003e4a:	4770      	bx	lr

08003e4c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003e4c:	b084      	sub	sp, #16
 8003e4e:	b480      	push	{r7}
 8003e50:	b083      	sub	sp, #12
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	6078      	str	r0, [r7, #4]
 8003e56:	f107 0014 	add.w	r0, r7, #20
 8003e5a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2201      	movs	r2, #1
 8003e62:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2200      	movs	r2, #0
 8003e72:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003e7e:	2300      	movs	r3, #0
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	370c      	adds	r7, #12
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bc80      	pop	{r7}
 8003e88:	b004      	add	sp, #16
 8003e8a:	4770      	bx	lr

08003e8c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b09b      	sub	sp, #108	; 0x6c
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
 8003e94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8003e96:	2300      	movs	r3, #0
 8003e98:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003e9c:	687a      	ldr	r2, [r7, #4]
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	781b      	ldrb	r3, [r3, #0]
 8003ea2:	009b      	lsls	r3, r3, #2
 8003ea4:	4413      	add	r3, r2
 8003ea6:	881b      	ldrh	r3, [r3, #0]
 8003ea8:	b29b      	uxth	r3, r3
 8003eaa:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8003eae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003eb2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	78db      	ldrb	r3, [r3, #3]
 8003eba:	2b03      	cmp	r3, #3
 8003ebc:	d81f      	bhi.n	8003efe <USB_ActivateEndpoint+0x72>
 8003ebe:	a201      	add	r2, pc, #4	; (adr r2, 8003ec4 <USB_ActivateEndpoint+0x38>)
 8003ec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ec4:	08003ed5 	.word	0x08003ed5
 8003ec8:	08003ef1 	.word	0x08003ef1
 8003ecc:	08003f07 	.word	0x08003f07
 8003ed0:	08003ee3 	.word	0x08003ee3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003ed4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003ed8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003edc:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003ee0:	e012      	b.n	8003f08 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8003ee2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003ee6:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8003eea:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003eee:	e00b      	b.n	8003f08 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003ef0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003ef4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003ef8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003efc:	e004      	b.n	8003f08 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8003f04:	e000      	b.n	8003f08 <USB_ActivateEndpoint+0x7c>
      break;
 8003f06:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8003f08:	687a      	ldr	r2, [r7, #4]
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	781b      	ldrb	r3, [r3, #0]
 8003f0e:	009b      	lsls	r3, r3, #2
 8003f10:	441a      	add	r2, r3
 8003f12:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003f16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f26:	b29b      	uxth	r3, r3
 8003f28:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003f2a:	687a      	ldr	r2, [r7, #4]
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	781b      	ldrb	r3, [r3, #0]
 8003f30:	009b      	lsls	r3, r3, #2
 8003f32:	4413      	add	r3, r2
 8003f34:	881b      	ldrh	r3, [r3, #0]
 8003f36:	b29b      	uxth	r3, r3
 8003f38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f40:	b29a      	uxth	r2, r3
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	781b      	ldrb	r3, [r3, #0]
 8003f46:	b29b      	uxth	r3, r3
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8003f4e:	687a      	ldr	r2, [r7, #4]
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	781b      	ldrb	r3, [r3, #0]
 8003f54:	009b      	lsls	r3, r3, #2
 8003f56:	441a      	add	r2, r3
 8003f58:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8003f5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f6c:	b29b      	uxth	r3, r3
 8003f6e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	7b1b      	ldrb	r3, [r3, #12]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	f040 8149 	bne.w	800420c <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	785b      	ldrb	r3, [r3, #1]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	f000 8084 	beq.w	800408c <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	617b      	str	r3, [r7, #20]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f8e:	b29b      	uxth	r3, r3
 8003f90:	461a      	mov	r2, r3
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	4413      	add	r3, r2
 8003f96:	617b      	str	r3, [r7, #20]
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	781b      	ldrb	r3, [r3, #0]
 8003f9c:	011a      	lsls	r2, r3, #4
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	4413      	add	r3, r2
 8003fa2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003fa6:	613b      	str	r3, [r7, #16]
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	88db      	ldrh	r3, [r3, #6]
 8003fac:	085b      	lsrs	r3, r3, #1
 8003fae:	b29b      	uxth	r3, r3
 8003fb0:	005b      	lsls	r3, r3, #1
 8003fb2:	b29a      	uxth	r2, r3
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003fb8:	687a      	ldr	r2, [r7, #4]
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	781b      	ldrb	r3, [r3, #0]
 8003fbe:	009b      	lsls	r3, r3, #2
 8003fc0:	4413      	add	r3, r2
 8003fc2:	881b      	ldrh	r3, [r3, #0]
 8003fc4:	81fb      	strh	r3, [r7, #14]
 8003fc6:	89fb      	ldrh	r3, [r7, #14]
 8003fc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d01b      	beq.n	8004008 <USB_ActivateEndpoint+0x17c>
 8003fd0:	687a      	ldr	r2, [r7, #4]
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	781b      	ldrb	r3, [r3, #0]
 8003fd6:	009b      	lsls	r3, r3, #2
 8003fd8:	4413      	add	r3, r2
 8003fda:	881b      	ldrh	r3, [r3, #0]
 8003fdc:	b29b      	uxth	r3, r3
 8003fde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fe2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fe6:	81bb      	strh	r3, [r7, #12]
 8003fe8:	687a      	ldr	r2, [r7, #4]
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	781b      	ldrb	r3, [r3, #0]
 8003fee:	009b      	lsls	r3, r3, #2
 8003ff0:	441a      	add	r2, r3
 8003ff2:	89bb      	ldrh	r3, [r7, #12]
 8003ff4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ff8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ffc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004000:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004004:	b29b      	uxth	r3, r3
 8004006:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	78db      	ldrb	r3, [r3, #3]
 800400c:	2b01      	cmp	r3, #1
 800400e:	d020      	beq.n	8004052 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004010:	687a      	ldr	r2, [r7, #4]
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	781b      	ldrb	r3, [r3, #0]
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	4413      	add	r3, r2
 800401a:	881b      	ldrh	r3, [r3, #0]
 800401c:	b29b      	uxth	r3, r3
 800401e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004022:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004026:	813b      	strh	r3, [r7, #8]
 8004028:	893b      	ldrh	r3, [r7, #8]
 800402a:	f083 0320 	eor.w	r3, r3, #32
 800402e:	813b      	strh	r3, [r7, #8]
 8004030:	687a      	ldr	r2, [r7, #4]
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	781b      	ldrb	r3, [r3, #0]
 8004036:	009b      	lsls	r3, r3, #2
 8004038:	441a      	add	r2, r3
 800403a:	893b      	ldrh	r3, [r7, #8]
 800403c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004040:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004044:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004048:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800404c:	b29b      	uxth	r3, r3
 800404e:	8013      	strh	r3, [r2, #0]
 8004050:	e27f      	b.n	8004552 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004052:	687a      	ldr	r2, [r7, #4]
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	781b      	ldrb	r3, [r3, #0]
 8004058:	009b      	lsls	r3, r3, #2
 800405a:	4413      	add	r3, r2
 800405c:	881b      	ldrh	r3, [r3, #0]
 800405e:	b29b      	uxth	r3, r3
 8004060:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004064:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004068:	817b      	strh	r3, [r7, #10]
 800406a:	687a      	ldr	r2, [r7, #4]
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	781b      	ldrb	r3, [r3, #0]
 8004070:	009b      	lsls	r3, r3, #2
 8004072:	441a      	add	r2, r3
 8004074:	897b      	ldrh	r3, [r7, #10]
 8004076:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800407a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800407e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004082:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004086:	b29b      	uxth	r3, r3
 8004088:	8013      	strh	r3, [r2, #0]
 800408a:	e262      	b.n	8004552 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004096:	b29b      	uxth	r3, r3
 8004098:	461a      	mov	r2, r3
 800409a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800409c:	4413      	add	r3, r2
 800409e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	781b      	ldrb	r3, [r3, #0]
 80040a4:	011a      	lsls	r2, r3, #4
 80040a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040a8:	4413      	add	r3, r2
 80040aa:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80040ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	88db      	ldrh	r3, [r3, #6]
 80040b4:	085b      	lsrs	r3, r3, #1
 80040b6:	b29b      	uxth	r3, r3
 80040b8:	005b      	lsls	r3, r3, #1
 80040ba:	b29a      	uxth	r2, r3
 80040bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040be:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	627b      	str	r3, [r7, #36]	; 0x24
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040ca:	b29b      	uxth	r3, r3
 80040cc:	461a      	mov	r2, r3
 80040ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d0:	4413      	add	r3, r2
 80040d2:	627b      	str	r3, [r7, #36]	; 0x24
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	781b      	ldrb	r3, [r3, #0]
 80040d8:	011a      	lsls	r2, r3, #4
 80040da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040dc:	4413      	add	r3, r2
 80040de:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80040e2:	623b      	str	r3, [r7, #32]
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	691b      	ldr	r3, [r3, #16]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d112      	bne.n	8004112 <USB_ActivateEndpoint+0x286>
 80040ec:	6a3b      	ldr	r3, [r7, #32]
 80040ee:	881b      	ldrh	r3, [r3, #0]
 80040f0:	b29b      	uxth	r3, r3
 80040f2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80040f6:	b29a      	uxth	r2, r3
 80040f8:	6a3b      	ldr	r3, [r7, #32]
 80040fa:	801a      	strh	r2, [r3, #0]
 80040fc:	6a3b      	ldr	r3, [r7, #32]
 80040fe:	881b      	ldrh	r3, [r3, #0]
 8004100:	b29b      	uxth	r3, r3
 8004102:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004106:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800410a:	b29a      	uxth	r2, r3
 800410c:	6a3b      	ldr	r3, [r7, #32]
 800410e:	801a      	strh	r2, [r3, #0]
 8004110:	e02f      	b.n	8004172 <USB_ActivateEndpoint+0x2e6>
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	691b      	ldr	r3, [r3, #16]
 8004116:	2b3e      	cmp	r3, #62	; 0x3e
 8004118:	d813      	bhi.n	8004142 <USB_ActivateEndpoint+0x2b6>
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	691b      	ldr	r3, [r3, #16]
 800411e:	085b      	lsrs	r3, r3, #1
 8004120:	663b      	str	r3, [r7, #96]	; 0x60
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	691b      	ldr	r3, [r3, #16]
 8004126:	f003 0301 	and.w	r3, r3, #1
 800412a:	2b00      	cmp	r3, #0
 800412c:	d002      	beq.n	8004134 <USB_ActivateEndpoint+0x2a8>
 800412e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004130:	3301      	adds	r3, #1
 8004132:	663b      	str	r3, [r7, #96]	; 0x60
 8004134:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004136:	b29b      	uxth	r3, r3
 8004138:	029b      	lsls	r3, r3, #10
 800413a:	b29a      	uxth	r2, r3
 800413c:	6a3b      	ldr	r3, [r7, #32]
 800413e:	801a      	strh	r2, [r3, #0]
 8004140:	e017      	b.n	8004172 <USB_ActivateEndpoint+0x2e6>
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	691b      	ldr	r3, [r3, #16]
 8004146:	095b      	lsrs	r3, r3, #5
 8004148:	663b      	str	r3, [r7, #96]	; 0x60
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	691b      	ldr	r3, [r3, #16]
 800414e:	f003 031f 	and.w	r3, r3, #31
 8004152:	2b00      	cmp	r3, #0
 8004154:	d102      	bne.n	800415c <USB_ActivateEndpoint+0x2d0>
 8004156:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004158:	3b01      	subs	r3, #1
 800415a:	663b      	str	r3, [r7, #96]	; 0x60
 800415c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800415e:	b29b      	uxth	r3, r3
 8004160:	029b      	lsls	r3, r3, #10
 8004162:	b29b      	uxth	r3, r3
 8004164:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004168:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800416c:	b29a      	uxth	r2, r3
 800416e:	6a3b      	ldr	r3, [r7, #32]
 8004170:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004172:	687a      	ldr	r2, [r7, #4]
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	781b      	ldrb	r3, [r3, #0]
 8004178:	009b      	lsls	r3, r3, #2
 800417a:	4413      	add	r3, r2
 800417c:	881b      	ldrh	r3, [r3, #0]
 800417e:	83fb      	strh	r3, [r7, #30]
 8004180:	8bfb      	ldrh	r3, [r7, #30]
 8004182:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004186:	2b00      	cmp	r3, #0
 8004188:	d01b      	beq.n	80041c2 <USB_ActivateEndpoint+0x336>
 800418a:	687a      	ldr	r2, [r7, #4]
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	781b      	ldrb	r3, [r3, #0]
 8004190:	009b      	lsls	r3, r3, #2
 8004192:	4413      	add	r3, r2
 8004194:	881b      	ldrh	r3, [r3, #0]
 8004196:	b29b      	uxth	r3, r3
 8004198:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800419c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041a0:	83bb      	strh	r3, [r7, #28]
 80041a2:	687a      	ldr	r2, [r7, #4]
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	781b      	ldrb	r3, [r3, #0]
 80041a8:	009b      	lsls	r3, r3, #2
 80041aa:	441a      	add	r2, r3
 80041ac:	8bbb      	ldrh	r3, [r7, #28]
 80041ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80041ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041be:	b29b      	uxth	r3, r3
 80041c0:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80041c2:	687a      	ldr	r2, [r7, #4]
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	781b      	ldrb	r3, [r3, #0]
 80041c8:	009b      	lsls	r3, r3, #2
 80041ca:	4413      	add	r3, r2
 80041cc:	881b      	ldrh	r3, [r3, #0]
 80041ce:	b29b      	uxth	r3, r3
 80041d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80041d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041d8:	837b      	strh	r3, [r7, #26]
 80041da:	8b7b      	ldrh	r3, [r7, #26]
 80041dc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80041e0:	837b      	strh	r3, [r7, #26]
 80041e2:	8b7b      	ldrh	r3, [r7, #26]
 80041e4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80041e8:	837b      	strh	r3, [r7, #26]
 80041ea:	687a      	ldr	r2, [r7, #4]
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	781b      	ldrb	r3, [r3, #0]
 80041f0:	009b      	lsls	r3, r3, #2
 80041f2:	441a      	add	r2, r3
 80041f4:	8b7b      	ldrh	r3, [r7, #26]
 80041f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004202:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004206:	b29b      	uxth	r3, r3
 8004208:	8013      	strh	r3, [r2, #0]
 800420a:	e1a2      	b.n	8004552 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 800420c:	687a      	ldr	r2, [r7, #4]
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	781b      	ldrb	r3, [r3, #0]
 8004212:	009b      	lsls	r3, r3, #2
 8004214:	4413      	add	r3, r2
 8004216:	881b      	ldrh	r3, [r3, #0]
 8004218:	b29b      	uxth	r3, r3
 800421a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800421e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004222:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8004226:	687a      	ldr	r2, [r7, #4]
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	781b      	ldrb	r3, [r3, #0]
 800422c:	009b      	lsls	r3, r3, #2
 800422e:	441a      	add	r2, r3
 8004230:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8004234:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004238:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800423c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004240:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004244:	b29b      	uxth	r3, r3
 8004246:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	65bb      	str	r3, [r7, #88]	; 0x58
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004252:	b29b      	uxth	r3, r3
 8004254:	461a      	mov	r2, r3
 8004256:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004258:	4413      	add	r3, r2
 800425a:	65bb      	str	r3, [r7, #88]	; 0x58
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	781b      	ldrb	r3, [r3, #0]
 8004260:	011a      	lsls	r2, r3, #4
 8004262:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004264:	4413      	add	r3, r2
 8004266:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800426a:	657b      	str	r3, [r7, #84]	; 0x54
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	891b      	ldrh	r3, [r3, #8]
 8004270:	085b      	lsrs	r3, r3, #1
 8004272:	b29b      	uxth	r3, r3
 8004274:	005b      	lsls	r3, r3, #1
 8004276:	b29a      	uxth	r2, r3
 8004278:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800427a:	801a      	strh	r2, [r3, #0]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	653b      	str	r3, [r7, #80]	; 0x50
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004286:	b29b      	uxth	r3, r3
 8004288:	461a      	mov	r2, r3
 800428a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800428c:	4413      	add	r3, r2
 800428e:	653b      	str	r3, [r7, #80]	; 0x50
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	781b      	ldrb	r3, [r3, #0]
 8004294:	011a      	lsls	r2, r3, #4
 8004296:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004298:	4413      	add	r3, r2
 800429a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800429e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	895b      	ldrh	r3, [r3, #10]
 80042a4:	085b      	lsrs	r3, r3, #1
 80042a6:	b29b      	uxth	r3, r3
 80042a8:	005b      	lsls	r3, r3, #1
 80042aa:	b29a      	uxth	r2, r3
 80042ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042ae:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	785b      	ldrb	r3, [r3, #1]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	f040 8091 	bne.w	80043dc <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80042ba:	687a      	ldr	r2, [r7, #4]
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	781b      	ldrb	r3, [r3, #0]
 80042c0:	009b      	lsls	r3, r3, #2
 80042c2:	4413      	add	r3, r2
 80042c4:	881b      	ldrh	r3, [r3, #0]
 80042c6:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80042c8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80042ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d01b      	beq.n	800430a <USB_ActivateEndpoint+0x47e>
 80042d2:	687a      	ldr	r2, [r7, #4]
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	781b      	ldrb	r3, [r3, #0]
 80042d8:	009b      	lsls	r3, r3, #2
 80042da:	4413      	add	r3, r2
 80042dc:	881b      	ldrh	r3, [r3, #0]
 80042de:	b29b      	uxth	r3, r3
 80042e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042e8:	877b      	strh	r3, [r7, #58]	; 0x3a
 80042ea:	687a      	ldr	r2, [r7, #4]
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	781b      	ldrb	r3, [r3, #0]
 80042f0:	009b      	lsls	r3, r3, #2
 80042f2:	441a      	add	r2, r3
 80042f4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80042f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004302:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004306:	b29b      	uxth	r3, r3
 8004308:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800430a:	687a      	ldr	r2, [r7, #4]
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	781b      	ldrb	r3, [r3, #0]
 8004310:	009b      	lsls	r3, r3, #2
 8004312:	4413      	add	r3, r2
 8004314:	881b      	ldrh	r3, [r3, #0]
 8004316:	873b      	strh	r3, [r7, #56]	; 0x38
 8004318:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800431a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800431e:	2b00      	cmp	r3, #0
 8004320:	d01b      	beq.n	800435a <USB_ActivateEndpoint+0x4ce>
 8004322:	687a      	ldr	r2, [r7, #4]
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	781b      	ldrb	r3, [r3, #0]
 8004328:	009b      	lsls	r3, r3, #2
 800432a:	4413      	add	r3, r2
 800432c:	881b      	ldrh	r3, [r3, #0]
 800432e:	b29b      	uxth	r3, r3
 8004330:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004334:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004338:	86fb      	strh	r3, [r7, #54]	; 0x36
 800433a:	687a      	ldr	r2, [r7, #4]
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	781b      	ldrb	r3, [r3, #0]
 8004340:	009b      	lsls	r3, r3, #2
 8004342:	441a      	add	r2, r3
 8004344:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004346:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800434a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800434e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004352:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004356:	b29b      	uxth	r3, r3
 8004358:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800435a:	687a      	ldr	r2, [r7, #4]
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	781b      	ldrb	r3, [r3, #0]
 8004360:	009b      	lsls	r3, r3, #2
 8004362:	4413      	add	r3, r2
 8004364:	881b      	ldrh	r3, [r3, #0]
 8004366:	b29b      	uxth	r3, r3
 8004368:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800436c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004370:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004372:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004374:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004378:	86bb      	strh	r3, [r7, #52]	; 0x34
 800437a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800437c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004380:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004382:	687a      	ldr	r2, [r7, #4]
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	781b      	ldrb	r3, [r3, #0]
 8004388:	009b      	lsls	r3, r3, #2
 800438a:	441a      	add	r2, r3
 800438c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800438e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004392:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004396:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800439a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800439e:	b29b      	uxth	r3, r3
 80043a0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80043a2:	687a      	ldr	r2, [r7, #4]
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	781b      	ldrb	r3, [r3, #0]
 80043a8:	009b      	lsls	r3, r3, #2
 80043aa:	4413      	add	r3, r2
 80043ac:	881b      	ldrh	r3, [r3, #0]
 80043ae:	b29b      	uxth	r3, r3
 80043b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043b8:	867b      	strh	r3, [r7, #50]	; 0x32
 80043ba:	687a      	ldr	r2, [r7, #4]
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	781b      	ldrb	r3, [r3, #0]
 80043c0:	009b      	lsls	r3, r3, #2
 80043c2:	441a      	add	r2, r3
 80043c4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80043c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043d6:	b29b      	uxth	r3, r3
 80043d8:	8013      	strh	r3, [r2, #0]
 80043da:	e0ba      	b.n	8004552 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80043dc:	687a      	ldr	r2, [r7, #4]
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	781b      	ldrb	r3, [r3, #0]
 80043e2:	009b      	lsls	r3, r3, #2
 80043e4:	4413      	add	r3, r2
 80043e6:	881b      	ldrh	r3, [r3, #0]
 80043e8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80043ec:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80043f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d01d      	beq.n	8004434 <USB_ActivateEndpoint+0x5a8>
 80043f8:	687a      	ldr	r2, [r7, #4]
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	781b      	ldrb	r3, [r3, #0]
 80043fe:	009b      	lsls	r3, r3, #2
 8004400:	4413      	add	r3, r2
 8004402:	881b      	ldrh	r3, [r3, #0]
 8004404:	b29b      	uxth	r3, r3
 8004406:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800440a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800440e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8004412:	687a      	ldr	r2, [r7, #4]
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	781b      	ldrb	r3, [r3, #0]
 8004418:	009b      	lsls	r3, r3, #2
 800441a:	441a      	add	r2, r3
 800441c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004420:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004424:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004428:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800442c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004430:	b29b      	uxth	r3, r3
 8004432:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004434:	687a      	ldr	r2, [r7, #4]
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	781b      	ldrb	r3, [r3, #0]
 800443a:	009b      	lsls	r3, r3, #2
 800443c:	4413      	add	r3, r2
 800443e:	881b      	ldrh	r3, [r3, #0]
 8004440:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004444:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004448:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800444c:	2b00      	cmp	r3, #0
 800444e:	d01d      	beq.n	800448c <USB_ActivateEndpoint+0x600>
 8004450:	687a      	ldr	r2, [r7, #4]
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	781b      	ldrb	r3, [r3, #0]
 8004456:	009b      	lsls	r3, r3, #2
 8004458:	4413      	add	r3, r2
 800445a:	881b      	ldrh	r3, [r3, #0]
 800445c:	b29b      	uxth	r3, r3
 800445e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004462:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004466:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800446a:	687a      	ldr	r2, [r7, #4]
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	781b      	ldrb	r3, [r3, #0]
 8004470:	009b      	lsls	r3, r3, #2
 8004472:	441a      	add	r2, r3
 8004474:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004478:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800447c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004480:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004484:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004488:	b29b      	uxth	r3, r3
 800448a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	78db      	ldrb	r3, [r3, #3]
 8004490:	2b01      	cmp	r3, #1
 8004492:	d024      	beq.n	80044de <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004494:	687a      	ldr	r2, [r7, #4]
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	781b      	ldrb	r3, [r3, #0]
 800449a:	009b      	lsls	r3, r3, #2
 800449c:	4413      	add	r3, r2
 800449e:	881b      	ldrh	r3, [r3, #0]
 80044a0:	b29b      	uxth	r3, r3
 80044a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044aa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80044ae:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80044b2:	f083 0320 	eor.w	r3, r3, #32
 80044b6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80044ba:	687a      	ldr	r2, [r7, #4]
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	781b      	ldrb	r3, [r3, #0]
 80044c0:	009b      	lsls	r3, r3, #2
 80044c2:	441a      	add	r2, r3
 80044c4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80044c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044d8:	b29b      	uxth	r3, r3
 80044da:	8013      	strh	r3, [r2, #0]
 80044dc:	e01d      	b.n	800451a <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80044de:	687a      	ldr	r2, [r7, #4]
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	781b      	ldrb	r3, [r3, #0]
 80044e4:	009b      	lsls	r3, r3, #2
 80044e6:	4413      	add	r3, r2
 80044e8:	881b      	ldrh	r3, [r3, #0]
 80044ea:	b29b      	uxth	r3, r3
 80044ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044f4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80044f8:	687a      	ldr	r2, [r7, #4]
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	781b      	ldrb	r3, [r3, #0]
 80044fe:	009b      	lsls	r3, r3, #2
 8004500:	441a      	add	r2, r3
 8004502:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004506:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800450a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800450e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004512:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004516:	b29b      	uxth	r3, r3
 8004518:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800451a:	687a      	ldr	r2, [r7, #4]
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	781b      	ldrb	r3, [r3, #0]
 8004520:	009b      	lsls	r3, r3, #2
 8004522:	4413      	add	r3, r2
 8004524:	881b      	ldrh	r3, [r3, #0]
 8004526:	b29b      	uxth	r3, r3
 8004528:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800452c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004530:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004532:	687a      	ldr	r2, [r7, #4]
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	781b      	ldrb	r3, [r3, #0]
 8004538:	009b      	lsls	r3, r3, #2
 800453a:	441a      	add	r2, r3
 800453c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800453e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004542:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004546:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800454a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800454e:	b29b      	uxth	r3, r3
 8004550:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8004552:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8004556:	4618      	mov	r0, r3
 8004558:	376c      	adds	r7, #108	; 0x6c
 800455a:	46bd      	mov	sp, r7
 800455c:	bc80      	pop	{r7}
 800455e:	4770      	bx	lr

08004560 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004560:	b480      	push	{r7}
 8004562:	b08d      	sub	sp, #52	; 0x34
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
 8004568:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	7b1b      	ldrb	r3, [r3, #12]
 800456e:	2b00      	cmp	r3, #0
 8004570:	f040 808e 	bne.w	8004690 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	785b      	ldrb	r3, [r3, #1]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d044      	beq.n	8004606 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800457c:	687a      	ldr	r2, [r7, #4]
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	781b      	ldrb	r3, [r3, #0]
 8004582:	009b      	lsls	r3, r3, #2
 8004584:	4413      	add	r3, r2
 8004586:	881b      	ldrh	r3, [r3, #0]
 8004588:	81bb      	strh	r3, [r7, #12]
 800458a:	89bb      	ldrh	r3, [r7, #12]
 800458c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004590:	2b00      	cmp	r3, #0
 8004592:	d01b      	beq.n	80045cc <USB_DeactivateEndpoint+0x6c>
 8004594:	687a      	ldr	r2, [r7, #4]
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	781b      	ldrb	r3, [r3, #0]
 800459a:	009b      	lsls	r3, r3, #2
 800459c:	4413      	add	r3, r2
 800459e:	881b      	ldrh	r3, [r3, #0]
 80045a0:	b29b      	uxth	r3, r3
 80045a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045aa:	817b      	strh	r3, [r7, #10]
 80045ac:	687a      	ldr	r2, [r7, #4]
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	781b      	ldrb	r3, [r3, #0]
 80045b2:	009b      	lsls	r3, r3, #2
 80045b4:	441a      	add	r2, r3
 80045b6:	897b      	ldrh	r3, [r7, #10]
 80045b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045c4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80045c8:	b29b      	uxth	r3, r3
 80045ca:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80045cc:	687a      	ldr	r2, [r7, #4]
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	781b      	ldrb	r3, [r3, #0]
 80045d2:	009b      	lsls	r3, r3, #2
 80045d4:	4413      	add	r3, r2
 80045d6:	881b      	ldrh	r3, [r3, #0]
 80045d8:	b29b      	uxth	r3, r3
 80045da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045e2:	813b      	strh	r3, [r7, #8]
 80045e4:	687a      	ldr	r2, [r7, #4]
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	781b      	ldrb	r3, [r3, #0]
 80045ea:	009b      	lsls	r3, r3, #2
 80045ec:	441a      	add	r2, r3
 80045ee:	893b      	ldrh	r3, [r7, #8]
 80045f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004600:	b29b      	uxth	r3, r3
 8004602:	8013      	strh	r3, [r2, #0]
 8004604:	e192      	b.n	800492c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004606:	687a      	ldr	r2, [r7, #4]
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	781b      	ldrb	r3, [r3, #0]
 800460c:	009b      	lsls	r3, r3, #2
 800460e:	4413      	add	r3, r2
 8004610:	881b      	ldrh	r3, [r3, #0]
 8004612:	827b      	strh	r3, [r7, #18]
 8004614:	8a7b      	ldrh	r3, [r7, #18]
 8004616:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800461a:	2b00      	cmp	r3, #0
 800461c:	d01b      	beq.n	8004656 <USB_DeactivateEndpoint+0xf6>
 800461e:	687a      	ldr	r2, [r7, #4]
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	781b      	ldrb	r3, [r3, #0]
 8004624:	009b      	lsls	r3, r3, #2
 8004626:	4413      	add	r3, r2
 8004628:	881b      	ldrh	r3, [r3, #0]
 800462a:	b29b      	uxth	r3, r3
 800462c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004630:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004634:	823b      	strh	r3, [r7, #16]
 8004636:	687a      	ldr	r2, [r7, #4]
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	781b      	ldrb	r3, [r3, #0]
 800463c:	009b      	lsls	r3, r3, #2
 800463e:	441a      	add	r2, r3
 8004640:	8a3b      	ldrh	r3, [r7, #16]
 8004642:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004646:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800464a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800464e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004652:	b29b      	uxth	r3, r3
 8004654:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004656:	687a      	ldr	r2, [r7, #4]
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	781b      	ldrb	r3, [r3, #0]
 800465c:	009b      	lsls	r3, r3, #2
 800465e:	4413      	add	r3, r2
 8004660:	881b      	ldrh	r3, [r3, #0]
 8004662:	b29b      	uxth	r3, r3
 8004664:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004668:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800466c:	81fb      	strh	r3, [r7, #14]
 800466e:	687a      	ldr	r2, [r7, #4]
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	781b      	ldrb	r3, [r3, #0]
 8004674:	009b      	lsls	r3, r3, #2
 8004676:	441a      	add	r2, r3
 8004678:	89fb      	ldrh	r3, [r7, #14]
 800467a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800467e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004682:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004686:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800468a:	b29b      	uxth	r3, r3
 800468c:	8013      	strh	r3, [r2, #0]
 800468e:	e14d      	b.n	800492c <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	785b      	ldrb	r3, [r3, #1]
 8004694:	2b00      	cmp	r3, #0
 8004696:	f040 80a5 	bne.w	80047e4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800469a:	687a      	ldr	r2, [r7, #4]
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	781b      	ldrb	r3, [r3, #0]
 80046a0:	009b      	lsls	r3, r3, #2
 80046a2:	4413      	add	r3, r2
 80046a4:	881b      	ldrh	r3, [r3, #0]
 80046a6:	843b      	strh	r3, [r7, #32]
 80046a8:	8c3b      	ldrh	r3, [r7, #32]
 80046aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d01b      	beq.n	80046ea <USB_DeactivateEndpoint+0x18a>
 80046b2:	687a      	ldr	r2, [r7, #4]
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	781b      	ldrb	r3, [r3, #0]
 80046b8:	009b      	lsls	r3, r3, #2
 80046ba:	4413      	add	r3, r2
 80046bc:	881b      	ldrh	r3, [r3, #0]
 80046be:	b29b      	uxth	r3, r3
 80046c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046c8:	83fb      	strh	r3, [r7, #30]
 80046ca:	687a      	ldr	r2, [r7, #4]
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	781b      	ldrb	r3, [r3, #0]
 80046d0:	009b      	lsls	r3, r3, #2
 80046d2:	441a      	add	r2, r3
 80046d4:	8bfb      	ldrh	r3, [r7, #30]
 80046d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046de:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80046e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046e6:	b29b      	uxth	r3, r3
 80046e8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80046ea:	687a      	ldr	r2, [r7, #4]
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	781b      	ldrb	r3, [r3, #0]
 80046f0:	009b      	lsls	r3, r3, #2
 80046f2:	4413      	add	r3, r2
 80046f4:	881b      	ldrh	r3, [r3, #0]
 80046f6:	83bb      	strh	r3, [r7, #28]
 80046f8:	8bbb      	ldrh	r3, [r7, #28]
 80046fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d01b      	beq.n	800473a <USB_DeactivateEndpoint+0x1da>
 8004702:	687a      	ldr	r2, [r7, #4]
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	781b      	ldrb	r3, [r3, #0]
 8004708:	009b      	lsls	r3, r3, #2
 800470a:	4413      	add	r3, r2
 800470c:	881b      	ldrh	r3, [r3, #0]
 800470e:	b29b      	uxth	r3, r3
 8004710:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004714:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004718:	837b      	strh	r3, [r7, #26]
 800471a:	687a      	ldr	r2, [r7, #4]
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	781b      	ldrb	r3, [r3, #0]
 8004720:	009b      	lsls	r3, r3, #2
 8004722:	441a      	add	r2, r3
 8004724:	8b7b      	ldrh	r3, [r7, #26]
 8004726:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800472a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800472e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004732:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004736:	b29b      	uxth	r3, r3
 8004738:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800473a:	687a      	ldr	r2, [r7, #4]
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	781b      	ldrb	r3, [r3, #0]
 8004740:	009b      	lsls	r3, r3, #2
 8004742:	4413      	add	r3, r2
 8004744:	881b      	ldrh	r3, [r3, #0]
 8004746:	b29b      	uxth	r3, r3
 8004748:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800474c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004750:	833b      	strh	r3, [r7, #24]
 8004752:	687a      	ldr	r2, [r7, #4]
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	781b      	ldrb	r3, [r3, #0]
 8004758:	009b      	lsls	r3, r3, #2
 800475a:	441a      	add	r2, r3
 800475c:	8b3b      	ldrh	r3, [r7, #24]
 800475e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004762:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004766:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800476a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800476e:	b29b      	uxth	r3, r3
 8004770:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004772:	687a      	ldr	r2, [r7, #4]
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	781b      	ldrb	r3, [r3, #0]
 8004778:	009b      	lsls	r3, r3, #2
 800477a:	4413      	add	r3, r2
 800477c:	881b      	ldrh	r3, [r3, #0]
 800477e:	b29b      	uxth	r3, r3
 8004780:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004784:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004788:	82fb      	strh	r3, [r7, #22]
 800478a:	687a      	ldr	r2, [r7, #4]
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	781b      	ldrb	r3, [r3, #0]
 8004790:	009b      	lsls	r3, r3, #2
 8004792:	441a      	add	r2, r3
 8004794:	8afb      	ldrh	r3, [r7, #22]
 8004796:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800479a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800479e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047a6:	b29b      	uxth	r3, r3
 80047a8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80047aa:	687a      	ldr	r2, [r7, #4]
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	781b      	ldrb	r3, [r3, #0]
 80047b0:	009b      	lsls	r3, r3, #2
 80047b2:	4413      	add	r3, r2
 80047b4:	881b      	ldrh	r3, [r3, #0]
 80047b6:	b29b      	uxth	r3, r3
 80047b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047c0:	82bb      	strh	r3, [r7, #20]
 80047c2:	687a      	ldr	r2, [r7, #4]
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	781b      	ldrb	r3, [r3, #0]
 80047c8:	009b      	lsls	r3, r3, #2
 80047ca:	441a      	add	r2, r3
 80047cc:	8abb      	ldrh	r3, [r7, #20]
 80047ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047de:	b29b      	uxth	r3, r3
 80047e0:	8013      	strh	r3, [r2, #0]
 80047e2:	e0a3      	b.n	800492c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80047e4:	687a      	ldr	r2, [r7, #4]
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	781b      	ldrb	r3, [r3, #0]
 80047ea:	009b      	lsls	r3, r3, #2
 80047ec:	4413      	add	r3, r2
 80047ee:	881b      	ldrh	r3, [r3, #0]
 80047f0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80047f2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80047f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d01b      	beq.n	8004834 <USB_DeactivateEndpoint+0x2d4>
 80047fc:	687a      	ldr	r2, [r7, #4]
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	781b      	ldrb	r3, [r3, #0]
 8004802:	009b      	lsls	r3, r3, #2
 8004804:	4413      	add	r3, r2
 8004806:	881b      	ldrh	r3, [r3, #0]
 8004808:	b29b      	uxth	r3, r3
 800480a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800480e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004812:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004814:	687a      	ldr	r2, [r7, #4]
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	781b      	ldrb	r3, [r3, #0]
 800481a:	009b      	lsls	r3, r3, #2
 800481c:	441a      	add	r2, r3
 800481e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004820:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004824:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004828:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800482c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004830:	b29b      	uxth	r3, r3
 8004832:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004834:	687a      	ldr	r2, [r7, #4]
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	781b      	ldrb	r3, [r3, #0]
 800483a:	009b      	lsls	r3, r3, #2
 800483c:	4413      	add	r3, r2
 800483e:	881b      	ldrh	r3, [r3, #0]
 8004840:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004842:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004844:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004848:	2b00      	cmp	r3, #0
 800484a:	d01b      	beq.n	8004884 <USB_DeactivateEndpoint+0x324>
 800484c:	687a      	ldr	r2, [r7, #4]
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	781b      	ldrb	r3, [r3, #0]
 8004852:	009b      	lsls	r3, r3, #2
 8004854:	4413      	add	r3, r2
 8004856:	881b      	ldrh	r3, [r3, #0]
 8004858:	b29b      	uxth	r3, r3
 800485a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800485e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004862:	853b      	strh	r3, [r7, #40]	; 0x28
 8004864:	687a      	ldr	r2, [r7, #4]
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	781b      	ldrb	r3, [r3, #0]
 800486a:	009b      	lsls	r3, r3, #2
 800486c:	441a      	add	r2, r3
 800486e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004870:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004874:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004878:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800487c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004880:	b29b      	uxth	r3, r3
 8004882:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004884:	687a      	ldr	r2, [r7, #4]
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	781b      	ldrb	r3, [r3, #0]
 800488a:	009b      	lsls	r3, r3, #2
 800488c:	4413      	add	r3, r2
 800488e:	881b      	ldrh	r3, [r3, #0]
 8004890:	b29b      	uxth	r3, r3
 8004892:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004896:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800489a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800489c:	687a      	ldr	r2, [r7, #4]
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	781b      	ldrb	r3, [r3, #0]
 80048a2:	009b      	lsls	r3, r3, #2
 80048a4:	441a      	add	r2, r3
 80048a6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80048a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80048b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048b8:	b29b      	uxth	r3, r3
 80048ba:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80048bc:	687a      	ldr	r2, [r7, #4]
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	781b      	ldrb	r3, [r3, #0]
 80048c2:	009b      	lsls	r3, r3, #2
 80048c4:	4413      	add	r3, r2
 80048c6:	881b      	ldrh	r3, [r3, #0]
 80048c8:	b29b      	uxth	r3, r3
 80048ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048d2:	84bb      	strh	r3, [r7, #36]	; 0x24
 80048d4:	687a      	ldr	r2, [r7, #4]
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	781b      	ldrb	r3, [r3, #0]
 80048da:	009b      	lsls	r3, r3, #2
 80048dc:	441a      	add	r2, r3
 80048de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80048e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048f0:	b29b      	uxth	r3, r3
 80048f2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80048f4:	687a      	ldr	r2, [r7, #4]
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	781b      	ldrb	r3, [r3, #0]
 80048fa:	009b      	lsls	r3, r3, #2
 80048fc:	4413      	add	r3, r2
 80048fe:	881b      	ldrh	r3, [r3, #0]
 8004900:	b29b      	uxth	r3, r3
 8004902:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004906:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800490a:	847b      	strh	r3, [r7, #34]	; 0x22
 800490c:	687a      	ldr	r2, [r7, #4]
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	781b      	ldrb	r3, [r3, #0]
 8004912:	009b      	lsls	r3, r3, #2
 8004914:	441a      	add	r2, r3
 8004916:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004918:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800491c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004920:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004924:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004928:	b29b      	uxth	r3, r3
 800492a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800492c:	2300      	movs	r3, #0
}
 800492e:	4618      	mov	r0, r3
 8004930:	3734      	adds	r7, #52	; 0x34
 8004932:	46bd      	mov	sp, r7
 8004934:	bc80      	pop	{r7}
 8004936:	4770      	bx	lr

08004938 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b0cc      	sub	sp, #304	; 0x130
 800493c:	af00      	add	r7, sp, #0
 800493e:	1d3b      	adds	r3, r7, #4
 8004940:	6018      	str	r0, [r3, #0]
 8004942:	463b      	mov	r3, r7
 8004944:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004946:	463b      	mov	r3, r7
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	785b      	ldrb	r3, [r3, #1]
 800494c:	2b01      	cmp	r3, #1
 800494e:	f040 872e 	bne.w	80057ae <USB_EPStartXfer+0xe76>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004952:	463b      	mov	r3, r7
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	699a      	ldr	r2, [r3, #24]
 8004958:	463b      	mov	r3, r7
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	691b      	ldr	r3, [r3, #16]
 800495e:	429a      	cmp	r2, r3
 8004960:	d905      	bls.n	800496e <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8004962:	463b      	mov	r3, r7
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	691b      	ldr	r3, [r3, #16]
 8004968:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800496c:	e004      	b.n	8004978 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 800496e:	463b      	mov	r3, r7
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	699b      	ldr	r3, [r3, #24]
 8004974:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004978:	463b      	mov	r3, r7
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	7b1b      	ldrb	r3, [r3, #12]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d134      	bne.n	80049ec <USB_EPStartXfer+0xb4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004982:	463b      	mov	r3, r7
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	6959      	ldr	r1, [r3, #20]
 8004988:	463b      	mov	r3, r7
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	88da      	ldrh	r2, [r3, #6]
 800498e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004992:	b29b      	uxth	r3, r3
 8004994:	1d38      	adds	r0, r7, #4
 8004996:	6800      	ldr	r0, [r0, #0]
 8004998:	f001 fc03 	bl	80061a2 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800499c:	f107 0310 	add.w	r3, r7, #16
 80049a0:	1d3a      	adds	r2, r7, #4
 80049a2:	6812      	ldr	r2, [r2, #0]
 80049a4:	601a      	str	r2, [r3, #0]
 80049a6:	1d3b      	adds	r3, r7, #4
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049ae:	b29b      	uxth	r3, r3
 80049b0:	4619      	mov	r1, r3
 80049b2:	f107 0310 	add.w	r3, r7, #16
 80049b6:	f107 0210 	add.w	r2, r7, #16
 80049ba:	6812      	ldr	r2, [r2, #0]
 80049bc:	440a      	add	r2, r1
 80049be:	601a      	str	r2, [r3, #0]
 80049c0:	463b      	mov	r3, r7
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	781b      	ldrb	r3, [r3, #0]
 80049c6:	011a      	lsls	r2, r3, #4
 80049c8:	f107 0310 	add.w	r3, r7, #16
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4413      	add	r3, r2
 80049d0:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80049d4:	f107 030c 	add.w	r3, r7, #12
 80049d8:	601a      	str	r2, [r3, #0]
 80049da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80049de:	b29a      	uxth	r2, r3
 80049e0:	f107 030c 	add.w	r3, r7, #12
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	801a      	strh	r2, [r3, #0]
 80049e8:	f000 beac 	b.w	8005744 <USB_EPStartXfer+0xe0c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80049ec:	463b      	mov	r3, r7
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	78db      	ldrb	r3, [r3, #3]
 80049f2:	2b02      	cmp	r3, #2
 80049f4:	f040 838c 	bne.w	8005110 <USB_EPStartXfer+0x7d8>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80049f8:	463b      	mov	r3, r7
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	6a1a      	ldr	r2, [r3, #32]
 80049fe:	463b      	mov	r3, r7
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	691b      	ldr	r3, [r3, #16]
 8004a04:	429a      	cmp	r2, r3
 8004a06:	f240 8330 	bls.w	800506a <USB_EPStartXfer+0x732>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8004a0a:	1d3b      	adds	r3, r7, #4
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	463b      	mov	r3, r7
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	781b      	ldrb	r3, [r3, #0]
 8004a14:	009b      	lsls	r3, r3, #2
 8004a16:	4413      	add	r3, r2
 8004a18:	881b      	ldrh	r3, [r3, #0]
 8004a1a:	b29b      	uxth	r3, r3
 8004a1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a24:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8004a28:	1d3b      	adds	r3, r7, #4
 8004a2a:	681a      	ldr	r2, [r3, #0]
 8004a2c:	463b      	mov	r3, r7
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	781b      	ldrb	r3, [r3, #0]
 8004a32:	009b      	lsls	r3, r3, #2
 8004a34:	441a      	add	r2, r3
 8004a36:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004a3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a42:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004a46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a4a:	b29b      	uxth	r3, r3
 8004a4c:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004a4e:	463b      	mov	r3, r7
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	6a1a      	ldr	r2, [r3, #32]
 8004a54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a58:	1ad2      	subs	r2, r2, r3
 8004a5a:	463b      	mov	r3, r7
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004a60:	1d3b      	adds	r3, r7, #4
 8004a62:	681a      	ldr	r2, [r3, #0]
 8004a64:	463b      	mov	r3, r7
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	781b      	ldrb	r3, [r3, #0]
 8004a6a:	009b      	lsls	r3, r3, #2
 8004a6c:	4413      	add	r3, r2
 8004a6e:	881b      	ldrh	r3, [r3, #0]
 8004a70:	b29b      	uxth	r3, r3
 8004a72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	f000 819e 	beq.w	8004db8 <USB_EPStartXfer+0x480>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004a7c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004a80:	1d3a      	adds	r2, r7, #4
 8004a82:	6812      	ldr	r2, [r2, #0]
 8004a84:	601a      	str	r2, [r3, #0]
 8004a86:	463b      	mov	r3, r7
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	785b      	ldrb	r3, [r3, #1]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d17a      	bne.n	8004b86 <USB_EPStartXfer+0x24e>
 8004a90:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004a94:	1d3a      	adds	r2, r7, #4
 8004a96:	6812      	ldr	r2, [r2, #0]
 8004a98:	601a      	str	r2, [r3, #0]
 8004a9a:	1d3b      	adds	r3, r7, #4
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004aa2:	b29b      	uxth	r3, r3
 8004aa4:	4619      	mov	r1, r3
 8004aa6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004aaa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004aae:	6812      	ldr	r2, [r2, #0]
 8004ab0:	440a      	add	r2, r1
 8004ab2:	601a      	str	r2, [r3, #0]
 8004ab4:	463b      	mov	r3, r7
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	781b      	ldrb	r3, [r3, #0]
 8004aba:	011a      	lsls	r2, r3, #4
 8004abc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4413      	add	r3, r2
 8004ac4:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8004ac8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004acc:	601a      	str	r2, [r3, #0]
 8004ace:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d11a      	bne.n	8004b0c <USB_EPStartXfer+0x1d4>
 8004ad6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	881b      	ldrh	r3, [r3, #0]
 8004ade:	b29b      	uxth	r3, r3
 8004ae0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004ae4:	b29a      	uxth	r2, r3
 8004ae6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	801a      	strh	r2, [r3, #0]
 8004aee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	881b      	ldrh	r3, [r3, #0]
 8004af6:	b29b      	uxth	r3, r3
 8004af8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004afc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b00:	b29a      	uxth	r2, r3
 8004b02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	801a      	strh	r2, [r3, #0]
 8004b0a:	e062      	b.n	8004bd2 <USB_EPStartXfer+0x29a>
 8004b0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b10:	2b3e      	cmp	r3, #62	; 0x3e
 8004b12:	d819      	bhi.n	8004b48 <USB_EPStartXfer+0x210>
 8004b14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b18:	085b      	lsrs	r3, r3, #1
 8004b1a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004b1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b22:	f003 0301 	and.w	r3, r3, #1
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d004      	beq.n	8004b34 <USB_EPStartXfer+0x1fc>
 8004b2a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004b2e:	3301      	adds	r3, #1
 8004b30:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004b34:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004b38:	b29b      	uxth	r3, r3
 8004b3a:	029b      	lsls	r3, r3, #10
 8004b3c:	b29a      	uxth	r2, r3
 8004b3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	801a      	strh	r2, [r3, #0]
 8004b46:	e044      	b.n	8004bd2 <USB_EPStartXfer+0x29a>
 8004b48:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b4c:	095b      	lsrs	r3, r3, #5
 8004b4e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004b52:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b56:	f003 031f 	and.w	r3, r3, #31
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d104      	bne.n	8004b68 <USB_EPStartXfer+0x230>
 8004b5e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004b62:	3b01      	subs	r3, #1
 8004b64:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004b68:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004b6c:	b29b      	uxth	r3, r3
 8004b6e:	029b      	lsls	r3, r3, #10
 8004b70:	b29b      	uxth	r3, r3
 8004b72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b7a:	b29a      	uxth	r2, r3
 8004b7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	801a      	strh	r2, [r3, #0]
 8004b84:	e025      	b.n	8004bd2 <USB_EPStartXfer+0x29a>
 8004b86:	463b      	mov	r3, r7
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	785b      	ldrb	r3, [r3, #1]
 8004b8c:	2b01      	cmp	r3, #1
 8004b8e:	d120      	bne.n	8004bd2 <USB_EPStartXfer+0x29a>
 8004b90:	1d3b      	adds	r3, r7, #4
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b98:	b29b      	uxth	r3, r3
 8004b9a:	4619      	mov	r1, r3
 8004b9c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004ba0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004ba4:	6812      	ldr	r2, [r2, #0]
 8004ba6:	440a      	add	r2, r1
 8004ba8:	601a      	str	r2, [r3, #0]
 8004baa:	463b      	mov	r3, r7
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	781b      	ldrb	r3, [r3, #0]
 8004bb0:	011a      	lsls	r2, r3, #4
 8004bb2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4413      	add	r3, r2
 8004bba:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8004bbe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004bc2:	601a      	str	r2, [r3, #0]
 8004bc4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004bc8:	b29a      	uxth	r2, r3
 8004bca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004bd2:	463b      	mov	r3, r7
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	895b      	ldrh	r3, [r3, #10]
 8004bd8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004bdc:	463b      	mov	r3, r7
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	6959      	ldr	r1, [r3, #20]
 8004be2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004be6:	b29b      	uxth	r3, r3
 8004be8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004bec:	1d38      	adds	r0, r7, #4
 8004bee:	6800      	ldr	r0, [r0, #0]
 8004bf0:	f001 fad7 	bl	80061a2 <USB_WritePMA>
            ep->xfer_buff += len;
 8004bf4:	463b      	mov	r3, r7
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	695a      	ldr	r2, [r3, #20]
 8004bfa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004bfe:	441a      	add	r2, r3
 8004c00:	463b      	mov	r3, r7
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004c06:	463b      	mov	r3, r7
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	6a1a      	ldr	r2, [r3, #32]
 8004c0c:	463b      	mov	r3, r7
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	691b      	ldr	r3, [r3, #16]
 8004c12:	429a      	cmp	r2, r3
 8004c14:	d909      	bls.n	8004c2a <USB_EPStartXfer+0x2f2>
            {
              ep->xfer_len_db -= len;
 8004c16:	463b      	mov	r3, r7
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	6a1a      	ldr	r2, [r3, #32]
 8004c1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c20:	1ad2      	subs	r2, r2, r3
 8004c22:	463b      	mov	r3, r7
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	621a      	str	r2, [r3, #32]
 8004c28:	e008      	b.n	8004c3c <USB_EPStartXfer+0x304>
            }
            else
            {
              len = ep->xfer_len_db;
 8004c2a:	463b      	mov	r3, r7
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	6a1b      	ldr	r3, [r3, #32]
 8004c30:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8004c34:	463b      	mov	r3, r7
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004c3c:	463b      	mov	r3, r7
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	785b      	ldrb	r3, [r3, #1]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d17a      	bne.n	8004d3c <USB_EPStartXfer+0x404>
 8004c46:	f107 0318 	add.w	r3, r7, #24
 8004c4a:	1d3a      	adds	r2, r7, #4
 8004c4c:	6812      	ldr	r2, [r2, #0]
 8004c4e:	601a      	str	r2, [r3, #0]
 8004c50:	1d3b      	adds	r3, r7, #4
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c58:	b29b      	uxth	r3, r3
 8004c5a:	4619      	mov	r1, r3
 8004c5c:	f107 0318 	add.w	r3, r7, #24
 8004c60:	f107 0218 	add.w	r2, r7, #24
 8004c64:	6812      	ldr	r2, [r2, #0]
 8004c66:	440a      	add	r2, r1
 8004c68:	601a      	str	r2, [r3, #0]
 8004c6a:	463b      	mov	r3, r7
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	781b      	ldrb	r3, [r3, #0]
 8004c70:	011a      	lsls	r2, r3, #4
 8004c72:	f107 0318 	add.w	r3, r7, #24
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4413      	add	r3, r2
 8004c7a:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004c7e:	f107 0314 	add.w	r3, r7, #20
 8004c82:	601a      	str	r2, [r3, #0]
 8004c84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d11a      	bne.n	8004cc2 <USB_EPStartXfer+0x38a>
 8004c8c:	f107 0314 	add.w	r3, r7, #20
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	881b      	ldrh	r3, [r3, #0]
 8004c94:	b29b      	uxth	r3, r3
 8004c96:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004c9a:	b29a      	uxth	r2, r3
 8004c9c:	f107 0314 	add.w	r3, r7, #20
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	801a      	strh	r2, [r3, #0]
 8004ca4:	f107 0314 	add.w	r3, r7, #20
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	881b      	ldrh	r3, [r3, #0]
 8004cac:	b29b      	uxth	r3, r3
 8004cae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004cb2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004cb6:	b29a      	uxth	r2, r3
 8004cb8:	f107 0314 	add.w	r3, r7, #20
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	801a      	strh	r2, [r3, #0]
 8004cc0:	e067      	b.n	8004d92 <USB_EPStartXfer+0x45a>
 8004cc2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004cc6:	2b3e      	cmp	r3, #62	; 0x3e
 8004cc8:	d819      	bhi.n	8004cfe <USB_EPStartXfer+0x3c6>
 8004cca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004cce:	085b      	lsrs	r3, r3, #1
 8004cd0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004cd4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004cd8:	f003 0301 	and.w	r3, r3, #1
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d004      	beq.n	8004cea <USB_EPStartXfer+0x3b2>
 8004ce0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004ce4:	3301      	adds	r3, #1
 8004ce6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004cea:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004cee:	b29b      	uxth	r3, r3
 8004cf0:	029b      	lsls	r3, r3, #10
 8004cf2:	b29a      	uxth	r2, r3
 8004cf4:	f107 0314 	add.w	r3, r7, #20
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	801a      	strh	r2, [r3, #0]
 8004cfc:	e049      	b.n	8004d92 <USB_EPStartXfer+0x45a>
 8004cfe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d02:	095b      	lsrs	r3, r3, #5
 8004d04:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004d08:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d0c:	f003 031f 	and.w	r3, r3, #31
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d104      	bne.n	8004d1e <USB_EPStartXfer+0x3e6>
 8004d14:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004d18:	3b01      	subs	r3, #1
 8004d1a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004d1e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004d22:	b29b      	uxth	r3, r3
 8004d24:	029b      	lsls	r3, r3, #10
 8004d26:	b29b      	uxth	r3, r3
 8004d28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d30:	b29a      	uxth	r2, r3
 8004d32:	f107 0314 	add.w	r3, r7, #20
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	801a      	strh	r2, [r3, #0]
 8004d3a:	e02a      	b.n	8004d92 <USB_EPStartXfer+0x45a>
 8004d3c:	463b      	mov	r3, r7
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	785b      	ldrb	r3, [r3, #1]
 8004d42:	2b01      	cmp	r3, #1
 8004d44:	d125      	bne.n	8004d92 <USB_EPStartXfer+0x45a>
 8004d46:	f107 0320 	add.w	r3, r7, #32
 8004d4a:	1d3a      	adds	r2, r7, #4
 8004d4c:	6812      	ldr	r2, [r2, #0]
 8004d4e:	601a      	str	r2, [r3, #0]
 8004d50:	1d3b      	adds	r3, r7, #4
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d58:	b29b      	uxth	r3, r3
 8004d5a:	4619      	mov	r1, r3
 8004d5c:	f107 0320 	add.w	r3, r7, #32
 8004d60:	f107 0220 	add.w	r2, r7, #32
 8004d64:	6812      	ldr	r2, [r2, #0]
 8004d66:	440a      	add	r2, r1
 8004d68:	601a      	str	r2, [r3, #0]
 8004d6a:	463b      	mov	r3, r7
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	781b      	ldrb	r3, [r3, #0]
 8004d70:	011a      	lsls	r2, r3, #4
 8004d72:	f107 0320 	add.w	r3, r7, #32
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4413      	add	r3, r2
 8004d7a:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004d7e:	f107 031c 	add.w	r3, r7, #28
 8004d82:	601a      	str	r2, [r3, #0]
 8004d84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d88:	b29a      	uxth	r2, r3
 8004d8a:	f107 031c 	add.w	r3, r7, #28
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004d92:	463b      	mov	r3, r7
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	891b      	ldrh	r3, [r3, #8]
 8004d98:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004d9c:	463b      	mov	r3, r7
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	6959      	ldr	r1, [r3, #20]
 8004da2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004da6:	b29b      	uxth	r3, r3
 8004da8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004dac:	1d38      	adds	r0, r7, #4
 8004dae:	6800      	ldr	r0, [r0, #0]
 8004db0:	f001 f9f7 	bl	80061a2 <USB_WritePMA>
 8004db4:	f000 bcc6 	b.w	8005744 <USB_EPStartXfer+0xe0c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004db8:	463b      	mov	r3, r7
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	785b      	ldrb	r3, [r3, #1]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d164      	bne.n	8004e8c <USB_EPStartXfer+0x554>
 8004dc2:	1d3b      	adds	r3, r7, #4
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	64bb      	str	r3, [r7, #72]	; 0x48
 8004dc8:	1d3b      	adds	r3, r7, #4
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004dd0:	b29b      	uxth	r3, r3
 8004dd2:	461a      	mov	r2, r3
 8004dd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004dd6:	4413      	add	r3, r2
 8004dd8:	64bb      	str	r3, [r7, #72]	; 0x48
 8004dda:	463b      	mov	r3, r7
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	781b      	ldrb	r3, [r3, #0]
 8004de0:	011a      	lsls	r2, r3, #4
 8004de2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004de4:	4413      	add	r3, r2
 8004de6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004dea:	647b      	str	r3, [r7, #68]	; 0x44
 8004dec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d112      	bne.n	8004e1a <USB_EPStartXfer+0x4e2>
 8004df4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004df6:	881b      	ldrh	r3, [r3, #0]
 8004df8:	b29b      	uxth	r3, r3
 8004dfa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004dfe:	b29a      	uxth	r2, r3
 8004e00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e02:	801a      	strh	r2, [r3, #0]
 8004e04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e06:	881b      	ldrh	r3, [r3, #0]
 8004e08:	b29b      	uxth	r3, r3
 8004e0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e12:	b29a      	uxth	r2, r3
 8004e14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e16:	801a      	strh	r2, [r3, #0]
 8004e18:	e057      	b.n	8004eca <USB_EPStartXfer+0x592>
 8004e1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e1e:	2b3e      	cmp	r3, #62	; 0x3e
 8004e20:	d817      	bhi.n	8004e52 <USB_EPStartXfer+0x51a>
 8004e22:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e26:	085b      	lsrs	r3, r3, #1
 8004e28:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004e2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e30:	f003 0301 	and.w	r3, r3, #1
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d004      	beq.n	8004e42 <USB_EPStartXfer+0x50a>
 8004e38:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004e3c:	3301      	adds	r3, #1
 8004e3e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004e42:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004e46:	b29b      	uxth	r3, r3
 8004e48:	029b      	lsls	r3, r3, #10
 8004e4a:	b29a      	uxth	r2, r3
 8004e4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e4e:	801a      	strh	r2, [r3, #0]
 8004e50:	e03b      	b.n	8004eca <USB_EPStartXfer+0x592>
 8004e52:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e56:	095b      	lsrs	r3, r3, #5
 8004e58:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004e5c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e60:	f003 031f 	and.w	r3, r3, #31
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d104      	bne.n	8004e72 <USB_EPStartXfer+0x53a>
 8004e68:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004e6c:	3b01      	subs	r3, #1
 8004e6e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004e72:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004e76:	b29b      	uxth	r3, r3
 8004e78:	029b      	lsls	r3, r3, #10
 8004e7a:	b29b      	uxth	r3, r3
 8004e7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e84:	b29a      	uxth	r2, r3
 8004e86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e88:	801a      	strh	r2, [r3, #0]
 8004e8a:	e01e      	b.n	8004eca <USB_EPStartXfer+0x592>
 8004e8c:	463b      	mov	r3, r7
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	785b      	ldrb	r3, [r3, #1]
 8004e92:	2b01      	cmp	r3, #1
 8004e94:	d119      	bne.n	8004eca <USB_EPStartXfer+0x592>
 8004e96:	1d3b      	adds	r3, r7, #4
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	653b      	str	r3, [r7, #80]	; 0x50
 8004e9c:	1d3b      	adds	r3, r7, #4
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ea4:	b29b      	uxth	r3, r3
 8004ea6:	461a      	mov	r2, r3
 8004ea8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004eaa:	4413      	add	r3, r2
 8004eac:	653b      	str	r3, [r7, #80]	; 0x50
 8004eae:	463b      	mov	r3, r7
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	781b      	ldrb	r3, [r3, #0]
 8004eb4:	011a      	lsls	r2, r3, #4
 8004eb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004eb8:	4413      	add	r3, r2
 8004eba:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004ebe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ec0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ec4:	b29a      	uxth	r2, r3
 8004ec6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ec8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004eca:	463b      	mov	r3, r7
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	891b      	ldrh	r3, [r3, #8]
 8004ed0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004ed4:	463b      	mov	r3, r7
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	6959      	ldr	r1, [r3, #20]
 8004eda:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ede:	b29b      	uxth	r3, r3
 8004ee0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004ee4:	1d38      	adds	r0, r7, #4
 8004ee6:	6800      	ldr	r0, [r0, #0]
 8004ee8:	f001 f95b 	bl	80061a2 <USB_WritePMA>
            ep->xfer_buff += len;
 8004eec:	463b      	mov	r3, r7
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	695a      	ldr	r2, [r3, #20]
 8004ef2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ef6:	441a      	add	r2, r3
 8004ef8:	463b      	mov	r3, r7
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004efe:	463b      	mov	r3, r7
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	6a1a      	ldr	r2, [r3, #32]
 8004f04:	463b      	mov	r3, r7
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	691b      	ldr	r3, [r3, #16]
 8004f0a:	429a      	cmp	r2, r3
 8004f0c:	d909      	bls.n	8004f22 <USB_EPStartXfer+0x5ea>
            {
              ep->xfer_len_db -= len;
 8004f0e:	463b      	mov	r3, r7
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	6a1a      	ldr	r2, [r3, #32]
 8004f14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f18:	1ad2      	subs	r2, r2, r3
 8004f1a:	463b      	mov	r3, r7
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	621a      	str	r2, [r3, #32]
 8004f20:	e008      	b.n	8004f34 <USB_EPStartXfer+0x5fc>
            }
            else
            {
              len = ep->xfer_len_db;
 8004f22:	463b      	mov	r3, r7
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	6a1b      	ldr	r3, [r3, #32]
 8004f28:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8004f2c:	463b      	mov	r3, r7
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	2200      	movs	r2, #0
 8004f32:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004f34:	1d3b      	adds	r3, r7, #4
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	643b      	str	r3, [r7, #64]	; 0x40
 8004f3a:	463b      	mov	r3, r7
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	785b      	ldrb	r3, [r3, #1]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d164      	bne.n	800500e <USB_EPStartXfer+0x6d6>
 8004f44:	1d3b      	adds	r3, r7, #4
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	63bb      	str	r3, [r7, #56]	; 0x38
 8004f4a:	1d3b      	adds	r3, r7, #4
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f52:	b29b      	uxth	r3, r3
 8004f54:	461a      	mov	r2, r3
 8004f56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f58:	4413      	add	r3, r2
 8004f5a:	63bb      	str	r3, [r7, #56]	; 0x38
 8004f5c:	463b      	mov	r3, r7
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	781b      	ldrb	r3, [r3, #0]
 8004f62:	011a      	lsls	r2, r3, #4
 8004f64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f66:	4413      	add	r3, r2
 8004f68:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004f6c:	637b      	str	r3, [r7, #52]	; 0x34
 8004f6e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d112      	bne.n	8004f9c <USB_EPStartXfer+0x664>
 8004f76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f78:	881b      	ldrh	r3, [r3, #0]
 8004f7a:	b29b      	uxth	r3, r3
 8004f7c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004f80:	b29a      	uxth	r2, r3
 8004f82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f84:	801a      	strh	r2, [r3, #0]
 8004f86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f88:	881b      	ldrh	r3, [r3, #0]
 8004f8a:	b29b      	uxth	r3, r3
 8004f8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f94:	b29a      	uxth	r2, r3
 8004f96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f98:	801a      	strh	r2, [r3, #0]
 8004f9a:	e054      	b.n	8005046 <USB_EPStartXfer+0x70e>
 8004f9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fa0:	2b3e      	cmp	r3, #62	; 0x3e
 8004fa2:	d817      	bhi.n	8004fd4 <USB_EPStartXfer+0x69c>
 8004fa4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fa8:	085b      	lsrs	r3, r3, #1
 8004faa:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004fae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fb2:	f003 0301 	and.w	r3, r3, #1
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d004      	beq.n	8004fc4 <USB_EPStartXfer+0x68c>
 8004fba:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004fbe:	3301      	adds	r3, #1
 8004fc0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004fc4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004fc8:	b29b      	uxth	r3, r3
 8004fca:	029b      	lsls	r3, r3, #10
 8004fcc:	b29a      	uxth	r2, r3
 8004fce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fd0:	801a      	strh	r2, [r3, #0]
 8004fd2:	e038      	b.n	8005046 <USB_EPStartXfer+0x70e>
 8004fd4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fd8:	095b      	lsrs	r3, r3, #5
 8004fda:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004fde:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fe2:	f003 031f 	and.w	r3, r3, #31
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d104      	bne.n	8004ff4 <USB_EPStartXfer+0x6bc>
 8004fea:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004fee:	3b01      	subs	r3, #1
 8004ff0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004ff4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004ff8:	b29b      	uxth	r3, r3
 8004ffa:	029b      	lsls	r3, r3, #10
 8004ffc:	b29b      	uxth	r3, r3
 8004ffe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005002:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005006:	b29a      	uxth	r2, r3
 8005008:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800500a:	801a      	strh	r2, [r3, #0]
 800500c:	e01b      	b.n	8005046 <USB_EPStartXfer+0x70e>
 800500e:	463b      	mov	r3, r7
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	785b      	ldrb	r3, [r3, #1]
 8005014:	2b01      	cmp	r3, #1
 8005016:	d116      	bne.n	8005046 <USB_EPStartXfer+0x70e>
 8005018:	1d3b      	adds	r3, r7, #4
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005020:	b29b      	uxth	r3, r3
 8005022:	461a      	mov	r2, r3
 8005024:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005026:	4413      	add	r3, r2
 8005028:	643b      	str	r3, [r7, #64]	; 0x40
 800502a:	463b      	mov	r3, r7
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	781b      	ldrb	r3, [r3, #0]
 8005030:	011a      	lsls	r2, r3, #4
 8005032:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005034:	4413      	add	r3, r2
 8005036:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800503a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800503c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005040:	b29a      	uxth	r2, r3
 8005042:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005044:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005046:	463b      	mov	r3, r7
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	895b      	ldrh	r3, [r3, #10]
 800504c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005050:	463b      	mov	r3, r7
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	6959      	ldr	r1, [r3, #20]
 8005056:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800505a:	b29b      	uxth	r3, r3
 800505c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005060:	1d38      	adds	r0, r7, #4
 8005062:	6800      	ldr	r0, [r0, #0]
 8005064:	f001 f89d 	bl	80061a2 <USB_WritePMA>
 8005068:	e36c      	b.n	8005744 <USB_EPStartXfer+0xe0c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800506a:	463b      	mov	r3, r7
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	6a1b      	ldr	r3, [r3, #32]
 8005070:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8005074:	1d3b      	adds	r3, r7, #4
 8005076:	681a      	ldr	r2, [r3, #0]
 8005078:	463b      	mov	r3, r7
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	781b      	ldrb	r3, [r3, #0]
 800507e:	009b      	lsls	r3, r3, #2
 8005080:	4413      	add	r3, r2
 8005082:	881b      	ldrh	r3, [r3, #0]
 8005084:	b29b      	uxth	r3, r3
 8005086:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800508a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800508e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005092:	1d3b      	adds	r3, r7, #4
 8005094:	681a      	ldr	r2, [r3, #0]
 8005096:	463b      	mov	r3, r7
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	781b      	ldrb	r3, [r3, #0]
 800509c:	009b      	lsls	r3, r3, #2
 800509e:	441a      	add	r2, r3
 80050a0:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80050a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050b4:	b29b      	uxth	r3, r3
 80050b6:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80050b8:	1d3b      	adds	r3, r7, #4
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80050be:	1d3b      	adds	r3, r7, #4
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050c6:	b29b      	uxth	r3, r3
 80050c8:	461a      	mov	r2, r3
 80050ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80050cc:	4413      	add	r3, r2
 80050ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 80050d0:	463b      	mov	r3, r7
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	781b      	ldrb	r3, [r3, #0]
 80050d6:	011a      	lsls	r2, r3, #4
 80050d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80050da:	4413      	add	r3, r2
 80050dc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80050e0:	65bb      	str	r3, [r7, #88]	; 0x58
 80050e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050e6:	b29a      	uxth	r2, r3
 80050e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80050ea:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80050ec:	463b      	mov	r3, r7
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	891b      	ldrh	r3, [r3, #8]
 80050f2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80050f6:	463b      	mov	r3, r7
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	6959      	ldr	r1, [r3, #20]
 80050fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005100:	b29b      	uxth	r3, r3
 8005102:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005106:	1d38      	adds	r0, r7, #4
 8005108:	6800      	ldr	r0, [r0, #0]
 800510a:	f001 f84a 	bl	80061a2 <USB_WritePMA>
 800510e:	e319      	b.n	8005744 <USB_EPStartXfer+0xe0c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8005110:	1d3b      	adds	r3, r7, #4
 8005112:	681a      	ldr	r2, [r3, #0]
 8005114:	463b      	mov	r3, r7
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	781b      	ldrb	r3, [r3, #0]
 800511a:	009b      	lsls	r3, r3, #2
 800511c:	4413      	add	r3, r2
 800511e:	881b      	ldrh	r3, [r3, #0]
 8005120:	b29b      	uxth	r3, r3
 8005122:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005126:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800512a:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 800512e:	1d3b      	adds	r3, r7, #4
 8005130:	681a      	ldr	r2, [r3, #0]
 8005132:	463b      	mov	r3, r7
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	781b      	ldrb	r3, [r3, #0]
 8005138:	009b      	lsls	r3, r3, #2
 800513a:	441a      	add	r2, r3
 800513c:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8005140:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005144:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005148:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800514c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005150:	b29b      	uxth	r3, r3
 8005152:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005154:	463b      	mov	r3, r7
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	6a1a      	ldr	r2, [r3, #32]
 800515a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800515e:	1ad2      	subs	r2, r2, r3
 8005160:	463b      	mov	r3, r7
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005166:	1d3b      	adds	r3, r7, #4
 8005168:	681a      	ldr	r2, [r3, #0]
 800516a:	463b      	mov	r3, r7
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	781b      	ldrb	r3, [r3, #0]
 8005170:	009b      	lsls	r3, r3, #2
 8005172:	4413      	add	r3, r2
 8005174:	881b      	ldrh	r3, [r3, #0]
 8005176:	b29b      	uxth	r3, r3
 8005178:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800517c:	2b00      	cmp	r3, #0
 800517e:	f000 8162 	beq.w	8005446 <USB_EPStartXfer+0xb0e>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005182:	1d3b      	adds	r3, r7, #4
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800518a:	463b      	mov	r3, r7
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	785b      	ldrb	r3, [r3, #1]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d164      	bne.n	800525e <USB_EPStartXfer+0x926>
 8005194:	1d3b      	adds	r3, r7, #4
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	67bb      	str	r3, [r7, #120]	; 0x78
 800519a:	1d3b      	adds	r3, r7, #4
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051a2:	b29b      	uxth	r3, r3
 80051a4:	461a      	mov	r2, r3
 80051a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80051a8:	4413      	add	r3, r2
 80051aa:	67bb      	str	r3, [r7, #120]	; 0x78
 80051ac:	463b      	mov	r3, r7
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	781b      	ldrb	r3, [r3, #0]
 80051b2:	011a      	lsls	r2, r3, #4
 80051b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80051b6:	4413      	add	r3, r2
 80051b8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80051bc:	677b      	str	r3, [r7, #116]	; 0x74
 80051be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d112      	bne.n	80051ec <USB_EPStartXfer+0x8b4>
 80051c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80051c8:	881b      	ldrh	r3, [r3, #0]
 80051ca:	b29b      	uxth	r3, r3
 80051cc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80051d0:	b29a      	uxth	r2, r3
 80051d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80051d4:	801a      	strh	r2, [r3, #0]
 80051d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80051d8:	881b      	ldrh	r3, [r3, #0]
 80051da:	b29b      	uxth	r3, r3
 80051dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051e4:	b29a      	uxth	r2, r3
 80051e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80051e8:	801a      	strh	r2, [r3, #0]
 80051ea:	e057      	b.n	800529c <USB_EPStartXfer+0x964>
 80051ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051f0:	2b3e      	cmp	r3, #62	; 0x3e
 80051f2:	d817      	bhi.n	8005224 <USB_EPStartXfer+0x8ec>
 80051f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051f8:	085b      	lsrs	r3, r3, #1
 80051fa:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80051fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005202:	f003 0301 	and.w	r3, r3, #1
 8005206:	2b00      	cmp	r3, #0
 8005208:	d004      	beq.n	8005214 <USB_EPStartXfer+0x8dc>
 800520a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800520e:	3301      	adds	r3, #1
 8005210:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005214:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005218:	b29b      	uxth	r3, r3
 800521a:	029b      	lsls	r3, r3, #10
 800521c:	b29a      	uxth	r2, r3
 800521e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005220:	801a      	strh	r2, [r3, #0]
 8005222:	e03b      	b.n	800529c <USB_EPStartXfer+0x964>
 8005224:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005228:	095b      	lsrs	r3, r3, #5
 800522a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800522e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005232:	f003 031f 	and.w	r3, r3, #31
 8005236:	2b00      	cmp	r3, #0
 8005238:	d104      	bne.n	8005244 <USB_EPStartXfer+0x90c>
 800523a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800523e:	3b01      	subs	r3, #1
 8005240:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005244:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005248:	b29b      	uxth	r3, r3
 800524a:	029b      	lsls	r3, r3, #10
 800524c:	b29b      	uxth	r3, r3
 800524e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005252:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005256:	b29a      	uxth	r2, r3
 8005258:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800525a:	801a      	strh	r2, [r3, #0]
 800525c:	e01e      	b.n	800529c <USB_EPStartXfer+0x964>
 800525e:	463b      	mov	r3, r7
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	785b      	ldrb	r3, [r3, #1]
 8005264:	2b01      	cmp	r3, #1
 8005266:	d119      	bne.n	800529c <USB_EPStartXfer+0x964>
 8005268:	1d3b      	adds	r3, r7, #4
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005270:	b29b      	uxth	r3, r3
 8005272:	461a      	mov	r2, r3
 8005274:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005278:	4413      	add	r3, r2
 800527a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800527e:	463b      	mov	r3, r7
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	781b      	ldrb	r3, [r3, #0]
 8005284:	011a      	lsls	r2, r3, #4
 8005286:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800528a:	4413      	add	r3, r2
 800528c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005290:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005292:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005296:	b29a      	uxth	r2, r3
 8005298:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800529a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800529c:	463b      	mov	r3, r7
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	895b      	ldrh	r3, [r3, #10]
 80052a2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80052a6:	463b      	mov	r3, r7
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	6959      	ldr	r1, [r3, #20]
 80052ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052b0:	b29b      	uxth	r3, r3
 80052b2:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80052b6:	1d38      	adds	r0, r7, #4
 80052b8:	6800      	ldr	r0, [r0, #0]
 80052ba:	f000 ff72 	bl	80061a2 <USB_WritePMA>
          ep->xfer_buff += len;
 80052be:	463b      	mov	r3, r7
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	695a      	ldr	r2, [r3, #20]
 80052c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052c8:	441a      	add	r2, r3
 80052ca:	463b      	mov	r3, r7
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80052d0:	463b      	mov	r3, r7
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	6a1a      	ldr	r2, [r3, #32]
 80052d6:	463b      	mov	r3, r7
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	691b      	ldr	r3, [r3, #16]
 80052dc:	429a      	cmp	r2, r3
 80052de:	d909      	bls.n	80052f4 <USB_EPStartXfer+0x9bc>
          {
            ep->xfer_len_db -= len;
 80052e0:	463b      	mov	r3, r7
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	6a1a      	ldr	r2, [r3, #32]
 80052e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052ea:	1ad2      	subs	r2, r2, r3
 80052ec:	463b      	mov	r3, r7
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	621a      	str	r2, [r3, #32]
 80052f2:	e008      	b.n	8005306 <USB_EPStartXfer+0x9ce>
          }
          else
          {
            len = ep->xfer_len_db;
 80052f4:	463b      	mov	r3, r7
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	6a1b      	ldr	r3, [r3, #32]
 80052fa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80052fe:	463b      	mov	r3, r7
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	2200      	movs	r2, #0
 8005304:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8005306:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800530a:	2b00      	cmp	r3, #0
 800530c:	f000 821a 	beq.w	8005744 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005310:	463b      	mov	r3, r7
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	785b      	ldrb	r3, [r3, #1]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d164      	bne.n	80053e4 <USB_EPStartXfer+0xaac>
 800531a:	1d3b      	adds	r3, r7, #4
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005320:	1d3b      	adds	r3, r7, #4
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005328:	b29b      	uxth	r3, r3
 800532a:	461a      	mov	r2, r3
 800532c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800532e:	4413      	add	r3, r2
 8005330:	66bb      	str	r3, [r7, #104]	; 0x68
 8005332:	463b      	mov	r3, r7
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	781b      	ldrb	r3, [r3, #0]
 8005338:	011a      	lsls	r2, r3, #4
 800533a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800533c:	4413      	add	r3, r2
 800533e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005342:	667b      	str	r3, [r7, #100]	; 0x64
 8005344:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005348:	2b00      	cmp	r3, #0
 800534a:	d112      	bne.n	8005372 <USB_EPStartXfer+0xa3a>
 800534c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800534e:	881b      	ldrh	r3, [r3, #0]
 8005350:	b29b      	uxth	r3, r3
 8005352:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005356:	b29a      	uxth	r2, r3
 8005358:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800535a:	801a      	strh	r2, [r3, #0]
 800535c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800535e:	881b      	ldrh	r3, [r3, #0]
 8005360:	b29b      	uxth	r3, r3
 8005362:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005366:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800536a:	b29a      	uxth	r2, r3
 800536c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800536e:	801a      	strh	r2, [r3, #0]
 8005370:	e057      	b.n	8005422 <USB_EPStartXfer+0xaea>
 8005372:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005376:	2b3e      	cmp	r3, #62	; 0x3e
 8005378:	d817      	bhi.n	80053aa <USB_EPStartXfer+0xa72>
 800537a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800537e:	085b      	lsrs	r3, r3, #1
 8005380:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005384:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005388:	f003 0301 	and.w	r3, r3, #1
 800538c:	2b00      	cmp	r3, #0
 800538e:	d004      	beq.n	800539a <USB_EPStartXfer+0xa62>
 8005390:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005394:	3301      	adds	r3, #1
 8005396:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800539a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800539e:	b29b      	uxth	r3, r3
 80053a0:	029b      	lsls	r3, r3, #10
 80053a2:	b29a      	uxth	r2, r3
 80053a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80053a6:	801a      	strh	r2, [r3, #0]
 80053a8:	e03b      	b.n	8005422 <USB_EPStartXfer+0xaea>
 80053aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053ae:	095b      	lsrs	r3, r3, #5
 80053b0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80053b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053b8:	f003 031f 	and.w	r3, r3, #31
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d104      	bne.n	80053ca <USB_EPStartXfer+0xa92>
 80053c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053c4:	3b01      	subs	r3, #1
 80053c6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80053ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053ce:	b29b      	uxth	r3, r3
 80053d0:	029b      	lsls	r3, r3, #10
 80053d2:	b29b      	uxth	r3, r3
 80053d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053dc:	b29a      	uxth	r2, r3
 80053de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80053e0:	801a      	strh	r2, [r3, #0]
 80053e2:	e01e      	b.n	8005422 <USB_EPStartXfer+0xaea>
 80053e4:	463b      	mov	r3, r7
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	785b      	ldrb	r3, [r3, #1]
 80053ea:	2b01      	cmp	r3, #1
 80053ec:	d119      	bne.n	8005422 <USB_EPStartXfer+0xaea>
 80053ee:	1d3b      	adds	r3, r7, #4
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	673b      	str	r3, [r7, #112]	; 0x70
 80053f4:	1d3b      	adds	r3, r7, #4
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053fc:	b29b      	uxth	r3, r3
 80053fe:	461a      	mov	r2, r3
 8005400:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005402:	4413      	add	r3, r2
 8005404:	673b      	str	r3, [r7, #112]	; 0x70
 8005406:	463b      	mov	r3, r7
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	781b      	ldrb	r3, [r3, #0]
 800540c:	011a      	lsls	r2, r3, #4
 800540e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005410:	4413      	add	r3, r2
 8005412:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005416:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005418:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800541c:	b29a      	uxth	r2, r3
 800541e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005420:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005422:	463b      	mov	r3, r7
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	891b      	ldrh	r3, [r3, #8]
 8005428:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800542c:	463b      	mov	r3, r7
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	6959      	ldr	r1, [r3, #20]
 8005432:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005436:	b29b      	uxth	r3, r3
 8005438:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800543c:	1d38      	adds	r0, r7, #4
 800543e:	6800      	ldr	r0, [r0, #0]
 8005440:	f000 feaf 	bl	80061a2 <USB_WritePMA>
 8005444:	e17e      	b.n	8005744 <USB_EPStartXfer+0xe0c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005446:	463b      	mov	r3, r7
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	785b      	ldrb	r3, [r3, #1]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d16f      	bne.n	8005530 <USB_EPStartXfer+0xbf8>
 8005450:	1d3b      	adds	r3, r7, #4
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005458:	1d3b      	adds	r3, r7, #4
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005460:	b29b      	uxth	r3, r3
 8005462:	461a      	mov	r2, r3
 8005464:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005468:	4413      	add	r3, r2
 800546a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800546e:	463b      	mov	r3, r7
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	781b      	ldrb	r3, [r3, #0]
 8005474:	011a      	lsls	r2, r3, #4
 8005476:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800547a:	4413      	add	r3, r2
 800547c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005480:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005484:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005488:	2b00      	cmp	r3, #0
 800548a:	d116      	bne.n	80054ba <USB_EPStartXfer+0xb82>
 800548c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005490:	881b      	ldrh	r3, [r3, #0]
 8005492:	b29b      	uxth	r3, r3
 8005494:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005498:	b29a      	uxth	r2, r3
 800549a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800549e:	801a      	strh	r2, [r3, #0]
 80054a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80054a4:	881b      	ldrh	r3, [r3, #0]
 80054a6:	b29b      	uxth	r3, r3
 80054a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054b0:	b29a      	uxth	r2, r3
 80054b2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80054b6:	801a      	strh	r2, [r3, #0]
 80054b8:	e05f      	b.n	800557a <USB_EPStartXfer+0xc42>
 80054ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054be:	2b3e      	cmp	r3, #62	; 0x3e
 80054c0:	d818      	bhi.n	80054f4 <USB_EPStartXfer+0xbbc>
 80054c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054c6:	085b      	lsrs	r3, r3, #1
 80054c8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80054cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054d0:	f003 0301 	and.w	r3, r3, #1
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d004      	beq.n	80054e2 <USB_EPStartXfer+0xbaa>
 80054d8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80054dc:	3301      	adds	r3, #1
 80054de:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80054e2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80054e6:	b29b      	uxth	r3, r3
 80054e8:	029b      	lsls	r3, r3, #10
 80054ea:	b29a      	uxth	r2, r3
 80054ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80054f0:	801a      	strh	r2, [r3, #0]
 80054f2:	e042      	b.n	800557a <USB_EPStartXfer+0xc42>
 80054f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054f8:	095b      	lsrs	r3, r3, #5
 80054fa:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80054fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005502:	f003 031f 	and.w	r3, r3, #31
 8005506:	2b00      	cmp	r3, #0
 8005508:	d104      	bne.n	8005514 <USB_EPStartXfer+0xbdc>
 800550a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800550e:	3b01      	subs	r3, #1
 8005510:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005514:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005518:	b29b      	uxth	r3, r3
 800551a:	029b      	lsls	r3, r3, #10
 800551c:	b29b      	uxth	r3, r3
 800551e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005522:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005526:	b29a      	uxth	r2, r3
 8005528:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800552c:	801a      	strh	r2, [r3, #0]
 800552e:	e024      	b.n	800557a <USB_EPStartXfer+0xc42>
 8005530:	463b      	mov	r3, r7
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	785b      	ldrb	r3, [r3, #1]
 8005536:	2b01      	cmp	r3, #1
 8005538:	d11f      	bne.n	800557a <USB_EPStartXfer+0xc42>
 800553a:	1d3b      	adds	r3, r7, #4
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005542:	1d3b      	adds	r3, r7, #4
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800554a:	b29b      	uxth	r3, r3
 800554c:	461a      	mov	r2, r3
 800554e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005552:	4413      	add	r3, r2
 8005554:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005558:	463b      	mov	r3, r7
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	781b      	ldrb	r3, [r3, #0]
 800555e:	011a      	lsls	r2, r3, #4
 8005560:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005564:	4413      	add	r3, r2
 8005566:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800556a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800556e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005572:	b29a      	uxth	r2, r3
 8005574:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005578:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800557a:	463b      	mov	r3, r7
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	891b      	ldrh	r3, [r3, #8]
 8005580:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005584:	463b      	mov	r3, r7
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	6959      	ldr	r1, [r3, #20]
 800558a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800558e:	b29b      	uxth	r3, r3
 8005590:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005594:	1d38      	adds	r0, r7, #4
 8005596:	6800      	ldr	r0, [r0, #0]
 8005598:	f000 fe03 	bl	80061a2 <USB_WritePMA>
          ep->xfer_buff += len;
 800559c:	463b      	mov	r3, r7
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	695a      	ldr	r2, [r3, #20]
 80055a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055a6:	441a      	add	r2, r3
 80055a8:	463b      	mov	r3, r7
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80055ae:	463b      	mov	r3, r7
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	6a1a      	ldr	r2, [r3, #32]
 80055b4:	463b      	mov	r3, r7
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	691b      	ldr	r3, [r3, #16]
 80055ba:	429a      	cmp	r2, r3
 80055bc:	d909      	bls.n	80055d2 <USB_EPStartXfer+0xc9a>
          {
            ep->xfer_len_db -= len;
 80055be:	463b      	mov	r3, r7
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	6a1a      	ldr	r2, [r3, #32]
 80055c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055c8:	1ad2      	subs	r2, r2, r3
 80055ca:	463b      	mov	r3, r7
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	621a      	str	r2, [r3, #32]
 80055d0:	e008      	b.n	80055e4 <USB_EPStartXfer+0xcac>
          }
          else
          {
            len = ep->xfer_len_db;
 80055d2:	463b      	mov	r3, r7
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	6a1b      	ldr	r3, [r3, #32]
 80055d8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80055dc:	463b      	mov	r3, r7
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	2200      	movs	r2, #0
 80055e2:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80055e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	f000 80ab 	beq.w	8005744 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80055ee:	1d3b      	adds	r3, r7, #4
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80055f6:	463b      	mov	r3, r7
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	785b      	ldrb	r3, [r3, #1]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d16f      	bne.n	80056e0 <USB_EPStartXfer+0xda8>
 8005600:	1d3b      	adds	r3, r7, #4
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005608:	1d3b      	adds	r3, r7, #4
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005610:	b29b      	uxth	r3, r3
 8005612:	461a      	mov	r2, r3
 8005614:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005618:	4413      	add	r3, r2
 800561a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800561e:	463b      	mov	r3, r7
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	781b      	ldrb	r3, [r3, #0]
 8005624:	011a      	lsls	r2, r3, #4
 8005626:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800562a:	4413      	add	r3, r2
 800562c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005630:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005634:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005638:	2b00      	cmp	r3, #0
 800563a:	d116      	bne.n	800566a <USB_EPStartXfer+0xd32>
 800563c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005640:	881b      	ldrh	r3, [r3, #0]
 8005642:	b29b      	uxth	r3, r3
 8005644:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005648:	b29a      	uxth	r2, r3
 800564a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800564e:	801a      	strh	r2, [r3, #0]
 8005650:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005654:	881b      	ldrh	r3, [r3, #0]
 8005656:	b29b      	uxth	r3, r3
 8005658:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800565c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005660:	b29a      	uxth	r2, r3
 8005662:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005666:	801a      	strh	r2, [r3, #0]
 8005668:	e05b      	b.n	8005722 <USB_EPStartXfer+0xdea>
 800566a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800566e:	2b3e      	cmp	r3, #62	; 0x3e
 8005670:	d818      	bhi.n	80056a4 <USB_EPStartXfer+0xd6c>
 8005672:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005676:	085b      	lsrs	r3, r3, #1
 8005678:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800567c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005680:	f003 0301 	and.w	r3, r3, #1
 8005684:	2b00      	cmp	r3, #0
 8005686:	d004      	beq.n	8005692 <USB_EPStartXfer+0xd5a>
 8005688:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800568c:	3301      	adds	r3, #1
 800568e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005692:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005696:	b29b      	uxth	r3, r3
 8005698:	029b      	lsls	r3, r3, #10
 800569a:	b29a      	uxth	r2, r3
 800569c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80056a0:	801a      	strh	r2, [r3, #0]
 80056a2:	e03e      	b.n	8005722 <USB_EPStartXfer+0xdea>
 80056a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056a8:	095b      	lsrs	r3, r3, #5
 80056aa:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80056ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056b2:	f003 031f 	and.w	r3, r3, #31
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d104      	bne.n	80056c4 <USB_EPStartXfer+0xd8c>
 80056ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80056be:	3b01      	subs	r3, #1
 80056c0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80056c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80056c8:	b29b      	uxth	r3, r3
 80056ca:	029b      	lsls	r3, r3, #10
 80056cc:	b29b      	uxth	r3, r3
 80056ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056d6:	b29a      	uxth	r2, r3
 80056d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80056dc:	801a      	strh	r2, [r3, #0]
 80056de:	e020      	b.n	8005722 <USB_EPStartXfer+0xdea>
 80056e0:	463b      	mov	r3, r7
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	785b      	ldrb	r3, [r3, #1]
 80056e6:	2b01      	cmp	r3, #1
 80056e8:	d11b      	bne.n	8005722 <USB_EPStartXfer+0xdea>
 80056ea:	1d3b      	adds	r3, r7, #4
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056f2:	b29b      	uxth	r3, r3
 80056f4:	461a      	mov	r2, r3
 80056f6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80056fa:	4413      	add	r3, r2
 80056fc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005700:	463b      	mov	r3, r7
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	781b      	ldrb	r3, [r3, #0]
 8005706:	011a      	lsls	r2, r3, #4
 8005708:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800570c:	4413      	add	r3, r2
 800570e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005712:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005716:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800571a:	b29a      	uxth	r2, r3
 800571c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005720:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005722:	463b      	mov	r3, r7
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	895b      	ldrh	r3, [r3, #10]
 8005728:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800572c:	463b      	mov	r3, r7
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	6959      	ldr	r1, [r3, #20]
 8005732:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005736:	b29b      	uxth	r3, r3
 8005738:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800573c:	1d38      	adds	r0, r7, #4
 800573e:	6800      	ldr	r0, [r0, #0]
 8005740:	f000 fd2f 	bl	80061a2 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005744:	1d3b      	adds	r3, r7, #4
 8005746:	681a      	ldr	r2, [r3, #0]
 8005748:	463b      	mov	r3, r7
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	781b      	ldrb	r3, [r3, #0]
 800574e:	009b      	lsls	r3, r3, #2
 8005750:	4413      	add	r3, r2
 8005752:	881b      	ldrh	r3, [r3, #0]
 8005754:	b29b      	uxth	r3, r3
 8005756:	f107 020a 	add.w	r2, r7, #10
 800575a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800575e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005762:	8013      	strh	r3, [r2, #0]
 8005764:	f107 030a 	add.w	r3, r7, #10
 8005768:	f107 020a 	add.w	r2, r7, #10
 800576c:	8812      	ldrh	r2, [r2, #0]
 800576e:	f082 0210 	eor.w	r2, r2, #16
 8005772:	801a      	strh	r2, [r3, #0]
 8005774:	f107 030a 	add.w	r3, r7, #10
 8005778:	f107 020a 	add.w	r2, r7, #10
 800577c:	8812      	ldrh	r2, [r2, #0]
 800577e:	f082 0220 	eor.w	r2, r2, #32
 8005782:	801a      	strh	r2, [r3, #0]
 8005784:	1d3b      	adds	r3, r7, #4
 8005786:	681a      	ldr	r2, [r3, #0]
 8005788:	463b      	mov	r3, r7
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	781b      	ldrb	r3, [r3, #0]
 800578e:	009b      	lsls	r3, r3, #2
 8005790:	441a      	add	r2, r3
 8005792:	f107 030a 	add.w	r3, r7, #10
 8005796:	881b      	ldrh	r3, [r3, #0]
 8005798:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800579c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057a8:	b29b      	uxth	r3, r3
 80057aa:	8013      	strh	r3, [r2, #0]
 80057ac:	e3b5      	b.n	8005f1a <USB_EPStartXfer+0x15e2>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80057ae:	463b      	mov	r3, r7
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	7b1b      	ldrb	r3, [r3, #12]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	f040 8090 	bne.w	80058da <USB_EPStartXfer+0xfa2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80057ba:	463b      	mov	r3, r7
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	699a      	ldr	r2, [r3, #24]
 80057c0:	463b      	mov	r3, r7
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	691b      	ldr	r3, [r3, #16]
 80057c6:	429a      	cmp	r2, r3
 80057c8:	d90e      	bls.n	80057e8 <USB_EPStartXfer+0xeb0>
      {
        len = ep->maxpacket;
 80057ca:	463b      	mov	r3, r7
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	691b      	ldr	r3, [r3, #16]
 80057d0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 80057d4:	463b      	mov	r3, r7
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	699a      	ldr	r2, [r3, #24]
 80057da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057de:	1ad2      	subs	r2, r2, r3
 80057e0:	463b      	mov	r3, r7
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	619a      	str	r2, [r3, #24]
 80057e6:	e008      	b.n	80057fa <USB_EPStartXfer+0xec2>
      }
      else
      {
        len = ep->xfer_len;
 80057e8:	463b      	mov	r3, r7
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	699b      	ldr	r3, [r3, #24]
 80057ee:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 80057f2:	463b      	mov	r3, r7
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	2200      	movs	r2, #0
 80057f8:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80057fa:	1d3b      	adds	r3, r7, #4
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005802:	1d3b      	adds	r3, r7, #4
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800580a:	b29b      	uxth	r3, r3
 800580c:	461a      	mov	r2, r3
 800580e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005812:	4413      	add	r3, r2
 8005814:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005818:	463b      	mov	r3, r7
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	781b      	ldrb	r3, [r3, #0]
 800581e:	011a      	lsls	r2, r3, #4
 8005820:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005824:	4413      	add	r3, r2
 8005826:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800582a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800582e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005832:	2b00      	cmp	r3, #0
 8005834:	d116      	bne.n	8005864 <USB_EPStartXfer+0xf2c>
 8005836:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800583a:	881b      	ldrh	r3, [r3, #0]
 800583c:	b29b      	uxth	r3, r3
 800583e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005842:	b29a      	uxth	r2, r3
 8005844:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005848:	801a      	strh	r2, [r3, #0]
 800584a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800584e:	881b      	ldrh	r3, [r3, #0]
 8005850:	b29b      	uxth	r3, r3
 8005852:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005856:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800585a:	b29a      	uxth	r2, r3
 800585c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005860:	801a      	strh	r2, [r3, #0]
 8005862:	e32c      	b.n	8005ebe <USB_EPStartXfer+0x1586>
 8005864:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005868:	2b3e      	cmp	r3, #62	; 0x3e
 800586a:	d818      	bhi.n	800589e <USB_EPStartXfer+0xf66>
 800586c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005870:	085b      	lsrs	r3, r3, #1
 8005872:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005876:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800587a:	f003 0301 	and.w	r3, r3, #1
 800587e:	2b00      	cmp	r3, #0
 8005880:	d004      	beq.n	800588c <USB_EPStartXfer+0xf54>
 8005882:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005886:	3301      	adds	r3, #1
 8005888:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800588c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005890:	b29b      	uxth	r3, r3
 8005892:	029b      	lsls	r3, r3, #10
 8005894:	b29a      	uxth	r2, r3
 8005896:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800589a:	801a      	strh	r2, [r3, #0]
 800589c:	e30f      	b.n	8005ebe <USB_EPStartXfer+0x1586>
 800589e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058a2:	095b      	lsrs	r3, r3, #5
 80058a4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80058a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058ac:	f003 031f 	and.w	r3, r3, #31
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d104      	bne.n	80058be <USB_EPStartXfer+0xf86>
 80058b4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80058b8:	3b01      	subs	r3, #1
 80058ba:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80058be:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80058c2:	b29b      	uxth	r3, r3
 80058c4:	029b      	lsls	r3, r3, #10
 80058c6:	b29b      	uxth	r3, r3
 80058c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058d0:	b29a      	uxth	r2, r3
 80058d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80058d6:	801a      	strh	r2, [r3, #0]
 80058d8:	e2f1      	b.n	8005ebe <USB_EPStartXfer+0x1586>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80058da:	463b      	mov	r3, r7
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	78db      	ldrb	r3, [r3, #3]
 80058e0:	2b02      	cmp	r3, #2
 80058e2:	f040 818f 	bne.w	8005c04 <USB_EPStartXfer+0x12cc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80058e6:	463b      	mov	r3, r7
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	785b      	ldrb	r3, [r3, #1]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d175      	bne.n	80059dc <USB_EPStartXfer+0x10a4>
 80058f0:	1d3b      	adds	r3, r7, #4
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80058f8:	1d3b      	adds	r3, r7, #4
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005900:	b29b      	uxth	r3, r3
 8005902:	461a      	mov	r2, r3
 8005904:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005908:	4413      	add	r3, r2
 800590a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800590e:	463b      	mov	r3, r7
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	781b      	ldrb	r3, [r3, #0]
 8005914:	011a      	lsls	r2, r3, #4
 8005916:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800591a:	4413      	add	r3, r2
 800591c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005920:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005924:	463b      	mov	r3, r7
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	691b      	ldr	r3, [r3, #16]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d116      	bne.n	800595c <USB_EPStartXfer+0x1024>
 800592e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005932:	881b      	ldrh	r3, [r3, #0]
 8005934:	b29b      	uxth	r3, r3
 8005936:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800593a:	b29a      	uxth	r2, r3
 800593c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005940:	801a      	strh	r2, [r3, #0]
 8005942:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005946:	881b      	ldrh	r3, [r3, #0]
 8005948:	b29b      	uxth	r3, r3
 800594a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800594e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005952:	b29a      	uxth	r2, r3
 8005954:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005958:	801a      	strh	r2, [r3, #0]
 800595a:	e065      	b.n	8005a28 <USB_EPStartXfer+0x10f0>
 800595c:	463b      	mov	r3, r7
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	691b      	ldr	r3, [r3, #16]
 8005962:	2b3e      	cmp	r3, #62	; 0x3e
 8005964:	d81a      	bhi.n	800599c <USB_EPStartXfer+0x1064>
 8005966:	463b      	mov	r3, r7
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	691b      	ldr	r3, [r3, #16]
 800596c:	085b      	lsrs	r3, r3, #1
 800596e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005972:	463b      	mov	r3, r7
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	691b      	ldr	r3, [r3, #16]
 8005978:	f003 0301 	and.w	r3, r3, #1
 800597c:	2b00      	cmp	r3, #0
 800597e:	d004      	beq.n	800598a <USB_EPStartXfer+0x1052>
 8005980:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005984:	3301      	adds	r3, #1
 8005986:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800598a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800598e:	b29b      	uxth	r3, r3
 8005990:	029b      	lsls	r3, r3, #10
 8005992:	b29a      	uxth	r2, r3
 8005994:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005998:	801a      	strh	r2, [r3, #0]
 800599a:	e045      	b.n	8005a28 <USB_EPStartXfer+0x10f0>
 800599c:	463b      	mov	r3, r7
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	691b      	ldr	r3, [r3, #16]
 80059a2:	095b      	lsrs	r3, r3, #5
 80059a4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80059a8:	463b      	mov	r3, r7
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	691b      	ldr	r3, [r3, #16]
 80059ae:	f003 031f 	and.w	r3, r3, #31
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d104      	bne.n	80059c0 <USB_EPStartXfer+0x1088>
 80059b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059ba:	3b01      	subs	r3, #1
 80059bc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80059c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059c4:	b29b      	uxth	r3, r3
 80059c6:	029b      	lsls	r3, r3, #10
 80059c8:	b29b      	uxth	r3, r3
 80059ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059d2:	b29a      	uxth	r2, r3
 80059d4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80059d8:	801a      	strh	r2, [r3, #0]
 80059da:	e025      	b.n	8005a28 <USB_EPStartXfer+0x10f0>
 80059dc:	463b      	mov	r3, r7
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	785b      	ldrb	r3, [r3, #1]
 80059e2:	2b01      	cmp	r3, #1
 80059e4:	d120      	bne.n	8005a28 <USB_EPStartXfer+0x10f0>
 80059e6:	1d3b      	adds	r3, r7, #4
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80059ee:	1d3b      	adds	r3, r7, #4
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059f6:	b29b      	uxth	r3, r3
 80059f8:	461a      	mov	r2, r3
 80059fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80059fe:	4413      	add	r3, r2
 8005a00:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005a04:	463b      	mov	r3, r7
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	781b      	ldrb	r3, [r3, #0]
 8005a0a:	011a      	lsls	r2, r3, #4
 8005a0c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005a10:	4413      	add	r3, r2
 8005a12:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005a16:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005a1a:	463b      	mov	r3, r7
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	691b      	ldr	r3, [r3, #16]
 8005a20:	b29a      	uxth	r2, r3
 8005a22:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005a26:	801a      	strh	r2, [r3, #0]
 8005a28:	1d3b      	adds	r3, r7, #4
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005a30:	463b      	mov	r3, r7
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	785b      	ldrb	r3, [r3, #1]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d175      	bne.n	8005b26 <USB_EPStartXfer+0x11ee>
 8005a3a:	1d3b      	adds	r3, r7, #4
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005a42:	1d3b      	adds	r3, r7, #4
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a4a:	b29b      	uxth	r3, r3
 8005a4c:	461a      	mov	r2, r3
 8005a4e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005a52:	4413      	add	r3, r2
 8005a54:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005a58:	463b      	mov	r3, r7
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	781b      	ldrb	r3, [r3, #0]
 8005a5e:	011a      	lsls	r2, r3, #4
 8005a60:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005a64:	4413      	add	r3, r2
 8005a66:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005a6a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005a6e:	463b      	mov	r3, r7
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	691b      	ldr	r3, [r3, #16]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d116      	bne.n	8005aa6 <USB_EPStartXfer+0x116e>
 8005a78:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005a7c:	881b      	ldrh	r3, [r3, #0]
 8005a7e:	b29b      	uxth	r3, r3
 8005a80:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005a84:	b29a      	uxth	r2, r3
 8005a86:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005a8a:	801a      	strh	r2, [r3, #0]
 8005a8c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005a90:	881b      	ldrh	r3, [r3, #0]
 8005a92:	b29b      	uxth	r3, r3
 8005a94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a9c:	b29a      	uxth	r2, r3
 8005a9e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005aa2:	801a      	strh	r2, [r3, #0]
 8005aa4:	e061      	b.n	8005b6a <USB_EPStartXfer+0x1232>
 8005aa6:	463b      	mov	r3, r7
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	691b      	ldr	r3, [r3, #16]
 8005aac:	2b3e      	cmp	r3, #62	; 0x3e
 8005aae:	d81a      	bhi.n	8005ae6 <USB_EPStartXfer+0x11ae>
 8005ab0:	463b      	mov	r3, r7
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	691b      	ldr	r3, [r3, #16]
 8005ab6:	085b      	lsrs	r3, r3, #1
 8005ab8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005abc:	463b      	mov	r3, r7
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	691b      	ldr	r3, [r3, #16]
 8005ac2:	f003 0301 	and.w	r3, r3, #1
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d004      	beq.n	8005ad4 <USB_EPStartXfer+0x119c>
 8005aca:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005ace:	3301      	adds	r3, #1
 8005ad0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005ad4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005ad8:	b29b      	uxth	r3, r3
 8005ada:	029b      	lsls	r3, r3, #10
 8005adc:	b29a      	uxth	r2, r3
 8005ade:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005ae2:	801a      	strh	r2, [r3, #0]
 8005ae4:	e041      	b.n	8005b6a <USB_EPStartXfer+0x1232>
 8005ae6:	463b      	mov	r3, r7
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	691b      	ldr	r3, [r3, #16]
 8005aec:	095b      	lsrs	r3, r3, #5
 8005aee:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005af2:	463b      	mov	r3, r7
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	691b      	ldr	r3, [r3, #16]
 8005af8:	f003 031f 	and.w	r3, r3, #31
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d104      	bne.n	8005b0a <USB_EPStartXfer+0x11d2>
 8005b00:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005b04:	3b01      	subs	r3, #1
 8005b06:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005b0a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005b0e:	b29b      	uxth	r3, r3
 8005b10:	029b      	lsls	r3, r3, #10
 8005b12:	b29b      	uxth	r3, r3
 8005b14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b1c:	b29a      	uxth	r2, r3
 8005b1e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005b22:	801a      	strh	r2, [r3, #0]
 8005b24:	e021      	b.n	8005b6a <USB_EPStartXfer+0x1232>
 8005b26:	463b      	mov	r3, r7
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	785b      	ldrb	r3, [r3, #1]
 8005b2c:	2b01      	cmp	r3, #1
 8005b2e:	d11c      	bne.n	8005b6a <USB_EPStartXfer+0x1232>
 8005b30:	1d3b      	adds	r3, r7, #4
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b38:	b29b      	uxth	r3, r3
 8005b3a:	461a      	mov	r2, r3
 8005b3c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005b40:	4413      	add	r3, r2
 8005b42:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005b46:	463b      	mov	r3, r7
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	781b      	ldrb	r3, [r3, #0]
 8005b4c:	011a      	lsls	r2, r3, #4
 8005b4e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005b52:	4413      	add	r3, r2
 8005b54:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005b58:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005b5c:	463b      	mov	r3, r7
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	691b      	ldr	r3, [r3, #16]
 8005b62:	b29a      	uxth	r2, r3
 8005b64:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005b68:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005b6a:	463b      	mov	r3, r7
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	69db      	ldr	r3, [r3, #28]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	f000 81a4 	beq.w	8005ebe <USB_EPStartXfer+0x1586>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005b76:	1d3b      	adds	r3, r7, #4
 8005b78:	681a      	ldr	r2, [r3, #0]
 8005b7a:	463b      	mov	r3, r7
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	781b      	ldrb	r3, [r3, #0]
 8005b80:	009b      	lsls	r3, r3, #2
 8005b82:	4413      	add	r3, r2
 8005b84:	881b      	ldrh	r3, [r3, #0]
 8005b86:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005b8a:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8005b8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d005      	beq.n	8005ba2 <USB_EPStartXfer+0x126a>
 8005b96:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8005b9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d10d      	bne.n	8005bbe <USB_EPStartXfer+0x1286>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005ba2:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8005ba6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	f040 8187 	bne.w	8005ebe <USB_EPStartXfer+0x1586>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005bb0:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8005bb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	f040 8180 	bne.w	8005ebe <USB_EPStartXfer+0x1586>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8005bbe:	1d3b      	adds	r3, r7, #4
 8005bc0:	681a      	ldr	r2, [r3, #0]
 8005bc2:	463b      	mov	r3, r7
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	781b      	ldrb	r3, [r3, #0]
 8005bc8:	009b      	lsls	r3, r3, #2
 8005bca:	4413      	add	r3, r2
 8005bcc:	881b      	ldrh	r3, [r3, #0]
 8005bce:	b29b      	uxth	r3, r3
 8005bd0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bd8:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8005bdc:	1d3b      	adds	r3, r7, #4
 8005bde:	681a      	ldr	r2, [r3, #0]
 8005be0:	463b      	mov	r3, r7
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	781b      	ldrb	r3, [r3, #0]
 8005be6:	009b      	lsls	r3, r3, #2
 8005be8:	441a      	add	r2, r3
 8005bea:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8005bee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bf2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bf6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bfa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005bfe:	b29b      	uxth	r3, r3
 8005c00:	8013      	strh	r3, [r2, #0]
 8005c02:	e15c      	b.n	8005ebe <USB_EPStartXfer+0x1586>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005c04:	463b      	mov	r3, r7
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	78db      	ldrb	r3, [r3, #3]
 8005c0a:	2b01      	cmp	r3, #1
 8005c0c:	f040 8155 	bne.w	8005eba <USB_EPStartXfer+0x1582>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8005c10:	463b      	mov	r3, r7
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	699a      	ldr	r2, [r3, #24]
 8005c16:	463b      	mov	r3, r7
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	691b      	ldr	r3, [r3, #16]
 8005c1c:	429a      	cmp	r2, r3
 8005c1e:	d90e      	bls.n	8005c3e <USB_EPStartXfer+0x1306>
        {
          len = ep->maxpacket;
 8005c20:	463b      	mov	r3, r7
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	691b      	ldr	r3, [r3, #16]
 8005c26:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8005c2a:	463b      	mov	r3, r7
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	699a      	ldr	r2, [r3, #24]
 8005c30:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c34:	1ad2      	subs	r2, r2, r3
 8005c36:	463b      	mov	r3, r7
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	619a      	str	r2, [r3, #24]
 8005c3c:	e008      	b.n	8005c50 <USB_EPStartXfer+0x1318>
        }
        else
        {
          len = ep->xfer_len;
 8005c3e:	463b      	mov	r3, r7
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	699b      	ldr	r3, [r3, #24]
 8005c44:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8005c48:	463b      	mov	r3, r7
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005c50:	463b      	mov	r3, r7
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	785b      	ldrb	r3, [r3, #1]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d16f      	bne.n	8005d3a <USB_EPStartXfer+0x1402>
 8005c5a:	1d3b      	adds	r3, r7, #4
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005c62:	1d3b      	adds	r3, r7, #4
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c6a:	b29b      	uxth	r3, r3
 8005c6c:	461a      	mov	r2, r3
 8005c6e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005c72:	4413      	add	r3, r2
 8005c74:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005c78:	463b      	mov	r3, r7
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	781b      	ldrb	r3, [r3, #0]
 8005c7e:	011a      	lsls	r2, r3, #4
 8005c80:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005c84:	4413      	add	r3, r2
 8005c86:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005c8a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005c8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d116      	bne.n	8005cc4 <USB_EPStartXfer+0x138c>
 8005c96:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005c9a:	881b      	ldrh	r3, [r3, #0]
 8005c9c:	b29b      	uxth	r3, r3
 8005c9e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005ca2:	b29a      	uxth	r2, r3
 8005ca4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005ca8:	801a      	strh	r2, [r3, #0]
 8005caa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005cae:	881b      	ldrh	r3, [r3, #0]
 8005cb0:	b29b      	uxth	r3, r3
 8005cb2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cb6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cba:	b29a      	uxth	r2, r3
 8005cbc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005cc0:	801a      	strh	r2, [r3, #0]
 8005cc2:	e05f      	b.n	8005d84 <USB_EPStartXfer+0x144c>
 8005cc4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cc8:	2b3e      	cmp	r3, #62	; 0x3e
 8005cca:	d818      	bhi.n	8005cfe <USB_EPStartXfer+0x13c6>
 8005ccc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cd0:	085b      	lsrs	r3, r3, #1
 8005cd2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005cd6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cda:	f003 0301 	and.w	r3, r3, #1
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d004      	beq.n	8005cec <USB_EPStartXfer+0x13b4>
 8005ce2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ce6:	3301      	adds	r3, #1
 8005ce8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005cec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005cf0:	b29b      	uxth	r3, r3
 8005cf2:	029b      	lsls	r3, r3, #10
 8005cf4:	b29a      	uxth	r2, r3
 8005cf6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005cfa:	801a      	strh	r2, [r3, #0]
 8005cfc:	e042      	b.n	8005d84 <USB_EPStartXfer+0x144c>
 8005cfe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d02:	095b      	lsrs	r3, r3, #5
 8005d04:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005d08:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d0c:	f003 031f 	and.w	r3, r3, #31
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d104      	bne.n	8005d1e <USB_EPStartXfer+0x13e6>
 8005d14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d18:	3b01      	subs	r3, #1
 8005d1a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005d1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d22:	b29b      	uxth	r3, r3
 8005d24:	029b      	lsls	r3, r3, #10
 8005d26:	b29b      	uxth	r3, r3
 8005d28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d30:	b29a      	uxth	r2, r3
 8005d32:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005d36:	801a      	strh	r2, [r3, #0]
 8005d38:	e024      	b.n	8005d84 <USB_EPStartXfer+0x144c>
 8005d3a:	463b      	mov	r3, r7
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	785b      	ldrb	r3, [r3, #1]
 8005d40:	2b01      	cmp	r3, #1
 8005d42:	d11f      	bne.n	8005d84 <USB_EPStartXfer+0x144c>
 8005d44:	1d3b      	adds	r3, r7, #4
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005d4c:	1d3b      	adds	r3, r7, #4
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d54:	b29b      	uxth	r3, r3
 8005d56:	461a      	mov	r2, r3
 8005d58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d5c:	4413      	add	r3, r2
 8005d5e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005d62:	463b      	mov	r3, r7
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	781b      	ldrb	r3, [r3, #0]
 8005d68:	011a      	lsls	r2, r3, #4
 8005d6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d6e:	4413      	add	r3, r2
 8005d70:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005d74:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005d78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d7c:	b29a      	uxth	r2, r3
 8005d7e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005d82:	801a      	strh	r2, [r3, #0]
 8005d84:	1d3b      	adds	r3, r7, #4
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005d8c:	463b      	mov	r3, r7
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	785b      	ldrb	r3, [r3, #1]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d16f      	bne.n	8005e76 <USB_EPStartXfer+0x153e>
 8005d96:	1d3b      	adds	r3, r7, #4
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005d9e:	1d3b      	adds	r3, r7, #4
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005da6:	b29b      	uxth	r3, r3
 8005da8:	461a      	mov	r2, r3
 8005daa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005dae:	4413      	add	r3, r2
 8005db0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005db4:	463b      	mov	r3, r7
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	781b      	ldrb	r3, [r3, #0]
 8005dba:	011a      	lsls	r2, r3, #4
 8005dbc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005dc0:	4413      	add	r3, r2
 8005dc2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005dc6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005dca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d116      	bne.n	8005e00 <USB_EPStartXfer+0x14c8>
 8005dd2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005dd6:	881b      	ldrh	r3, [r3, #0]
 8005dd8:	b29b      	uxth	r3, r3
 8005dda:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005dde:	b29a      	uxth	r2, r3
 8005de0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005de4:	801a      	strh	r2, [r3, #0]
 8005de6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005dea:	881b      	ldrh	r3, [r3, #0]
 8005dec:	b29b      	uxth	r3, r3
 8005dee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005df2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005df6:	b29a      	uxth	r2, r3
 8005df8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005dfc:	801a      	strh	r2, [r3, #0]
 8005dfe:	e05e      	b.n	8005ebe <USB_EPStartXfer+0x1586>
 8005e00:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e04:	2b3e      	cmp	r3, #62	; 0x3e
 8005e06:	d818      	bhi.n	8005e3a <USB_EPStartXfer+0x1502>
 8005e08:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e0c:	085b      	lsrs	r3, r3, #1
 8005e0e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005e12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e16:	f003 0301 	and.w	r3, r3, #1
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d004      	beq.n	8005e28 <USB_EPStartXfer+0x14f0>
 8005e1e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005e22:	3301      	adds	r3, #1
 8005e24:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005e28:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005e2c:	b29b      	uxth	r3, r3
 8005e2e:	029b      	lsls	r3, r3, #10
 8005e30:	b29a      	uxth	r2, r3
 8005e32:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005e36:	801a      	strh	r2, [r3, #0]
 8005e38:	e041      	b.n	8005ebe <USB_EPStartXfer+0x1586>
 8005e3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e3e:	095b      	lsrs	r3, r3, #5
 8005e40:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005e44:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e48:	f003 031f 	and.w	r3, r3, #31
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d104      	bne.n	8005e5a <USB_EPStartXfer+0x1522>
 8005e50:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005e54:	3b01      	subs	r3, #1
 8005e56:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005e5a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005e5e:	b29b      	uxth	r3, r3
 8005e60:	029b      	lsls	r3, r3, #10
 8005e62:	b29b      	uxth	r3, r3
 8005e64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e6c:	b29a      	uxth	r2, r3
 8005e6e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005e72:	801a      	strh	r2, [r3, #0]
 8005e74:	e023      	b.n	8005ebe <USB_EPStartXfer+0x1586>
 8005e76:	463b      	mov	r3, r7
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	785b      	ldrb	r3, [r3, #1]
 8005e7c:	2b01      	cmp	r3, #1
 8005e7e:	d11e      	bne.n	8005ebe <USB_EPStartXfer+0x1586>
 8005e80:	1d3b      	adds	r3, r7, #4
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e88:	b29b      	uxth	r3, r3
 8005e8a:	461a      	mov	r2, r3
 8005e8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e90:	4413      	add	r3, r2
 8005e92:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005e96:	463b      	mov	r3, r7
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	781b      	ldrb	r3, [r3, #0]
 8005e9c:	011a      	lsls	r2, r3, #4
 8005e9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ea2:	4413      	add	r3, r2
 8005ea4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005ea8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005eac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005eb0:	b29a      	uxth	r2, r3
 8005eb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005eb6:	801a      	strh	r2, [r3, #0]
 8005eb8:	e001      	b.n	8005ebe <USB_EPStartXfer+0x1586>
      }
      else
      {
        return HAL_ERROR;
 8005eba:	2301      	movs	r3, #1
 8005ebc:	e02e      	b.n	8005f1c <USB_EPStartXfer+0x15e4>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005ebe:	1d3b      	adds	r3, r7, #4
 8005ec0:	681a      	ldr	r2, [r3, #0]
 8005ec2:	463b      	mov	r3, r7
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	781b      	ldrb	r3, [r3, #0]
 8005ec8:	009b      	lsls	r3, r3, #2
 8005eca:	4413      	add	r3, r2
 8005ecc:	881b      	ldrh	r3, [r3, #0]
 8005ece:	b29b      	uxth	r3, r3
 8005ed0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ed4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ed8:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8005edc:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8005ee0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005ee4:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8005ee8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8005eec:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005ef0:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8005ef4:	1d3b      	adds	r3, r7, #4
 8005ef6:	681a      	ldr	r2, [r3, #0]
 8005ef8:	463b      	mov	r3, r7
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	781b      	ldrb	r3, [r3, #0]
 8005efe:	009b      	lsls	r3, r3, #2
 8005f00:	441a      	add	r2, r3
 8005f02:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8005f06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f16:	b29b      	uxth	r3, r3
 8005f18:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005f1a:	2300      	movs	r3, #0
}
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bd80      	pop	{r7, pc}

08005f26 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005f26:	b480      	push	{r7}
 8005f28:	b085      	sub	sp, #20
 8005f2a:	af00      	add	r7, sp, #0
 8005f2c:	6078      	str	r0, [r7, #4]
 8005f2e:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	785b      	ldrb	r3, [r3, #1]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d020      	beq.n	8005f7a <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005f38:	687a      	ldr	r2, [r7, #4]
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	781b      	ldrb	r3, [r3, #0]
 8005f3e:	009b      	lsls	r3, r3, #2
 8005f40:	4413      	add	r3, r2
 8005f42:	881b      	ldrh	r3, [r3, #0]
 8005f44:	b29b      	uxth	r3, r3
 8005f46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f4e:	81bb      	strh	r3, [r7, #12]
 8005f50:	89bb      	ldrh	r3, [r7, #12]
 8005f52:	f083 0310 	eor.w	r3, r3, #16
 8005f56:	81bb      	strh	r3, [r7, #12]
 8005f58:	687a      	ldr	r2, [r7, #4]
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	781b      	ldrb	r3, [r3, #0]
 8005f5e:	009b      	lsls	r3, r3, #2
 8005f60:	441a      	add	r2, r3
 8005f62:	89bb      	ldrh	r3, [r7, #12]
 8005f64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f74:	b29b      	uxth	r3, r3
 8005f76:	8013      	strh	r3, [r2, #0]
 8005f78:	e01f      	b.n	8005fba <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005f7a:	687a      	ldr	r2, [r7, #4]
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	781b      	ldrb	r3, [r3, #0]
 8005f80:	009b      	lsls	r3, r3, #2
 8005f82:	4413      	add	r3, r2
 8005f84:	881b      	ldrh	r3, [r3, #0]
 8005f86:	b29b      	uxth	r3, r3
 8005f88:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f90:	81fb      	strh	r3, [r7, #14]
 8005f92:	89fb      	ldrh	r3, [r7, #14]
 8005f94:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005f98:	81fb      	strh	r3, [r7, #14]
 8005f9a:	687a      	ldr	r2, [r7, #4]
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	781b      	ldrb	r3, [r3, #0]
 8005fa0:	009b      	lsls	r3, r3, #2
 8005fa2:	441a      	add	r2, r3
 8005fa4:	89fb      	ldrh	r3, [r7, #14]
 8005fa6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005faa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fb6:	b29b      	uxth	r3, r3
 8005fb8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005fba:	2300      	movs	r3, #0
}
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	3714      	adds	r7, #20
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	bc80      	pop	{r7}
 8005fc4:	4770      	bx	lr

08005fc6 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005fc6:	b480      	push	{r7}
 8005fc8:	b087      	sub	sp, #28
 8005fca:	af00      	add	r7, sp, #0
 8005fcc:	6078      	str	r0, [r7, #4]
 8005fce:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	7b1b      	ldrb	r3, [r3, #12]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	f040 809d 	bne.w	8006114 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	785b      	ldrb	r3, [r3, #1]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d04c      	beq.n	800607c <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005fe2:	687a      	ldr	r2, [r7, #4]
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	781b      	ldrb	r3, [r3, #0]
 8005fe8:	009b      	lsls	r3, r3, #2
 8005fea:	4413      	add	r3, r2
 8005fec:	881b      	ldrh	r3, [r3, #0]
 8005fee:	823b      	strh	r3, [r7, #16]
 8005ff0:	8a3b      	ldrh	r3, [r7, #16]
 8005ff2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d01b      	beq.n	8006032 <USB_EPClearStall+0x6c>
 8005ffa:	687a      	ldr	r2, [r7, #4]
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	781b      	ldrb	r3, [r3, #0]
 8006000:	009b      	lsls	r3, r3, #2
 8006002:	4413      	add	r3, r2
 8006004:	881b      	ldrh	r3, [r3, #0]
 8006006:	b29b      	uxth	r3, r3
 8006008:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800600c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006010:	81fb      	strh	r3, [r7, #14]
 8006012:	687a      	ldr	r2, [r7, #4]
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	781b      	ldrb	r3, [r3, #0]
 8006018:	009b      	lsls	r3, r3, #2
 800601a:	441a      	add	r2, r3
 800601c:	89fb      	ldrh	r3, [r7, #14]
 800601e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006022:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006026:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800602a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800602e:	b29b      	uxth	r3, r3
 8006030:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	78db      	ldrb	r3, [r3, #3]
 8006036:	2b01      	cmp	r3, #1
 8006038:	d06c      	beq.n	8006114 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800603a:	687a      	ldr	r2, [r7, #4]
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	781b      	ldrb	r3, [r3, #0]
 8006040:	009b      	lsls	r3, r3, #2
 8006042:	4413      	add	r3, r2
 8006044:	881b      	ldrh	r3, [r3, #0]
 8006046:	b29b      	uxth	r3, r3
 8006048:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800604c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006050:	81bb      	strh	r3, [r7, #12]
 8006052:	89bb      	ldrh	r3, [r7, #12]
 8006054:	f083 0320 	eor.w	r3, r3, #32
 8006058:	81bb      	strh	r3, [r7, #12]
 800605a:	687a      	ldr	r2, [r7, #4]
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	781b      	ldrb	r3, [r3, #0]
 8006060:	009b      	lsls	r3, r3, #2
 8006062:	441a      	add	r2, r3
 8006064:	89bb      	ldrh	r3, [r7, #12]
 8006066:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800606a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800606e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006072:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006076:	b29b      	uxth	r3, r3
 8006078:	8013      	strh	r3, [r2, #0]
 800607a:	e04b      	b.n	8006114 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800607c:	687a      	ldr	r2, [r7, #4]
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	781b      	ldrb	r3, [r3, #0]
 8006082:	009b      	lsls	r3, r3, #2
 8006084:	4413      	add	r3, r2
 8006086:	881b      	ldrh	r3, [r3, #0]
 8006088:	82fb      	strh	r3, [r7, #22]
 800608a:	8afb      	ldrh	r3, [r7, #22]
 800608c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006090:	2b00      	cmp	r3, #0
 8006092:	d01b      	beq.n	80060cc <USB_EPClearStall+0x106>
 8006094:	687a      	ldr	r2, [r7, #4]
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	781b      	ldrb	r3, [r3, #0]
 800609a:	009b      	lsls	r3, r3, #2
 800609c:	4413      	add	r3, r2
 800609e:	881b      	ldrh	r3, [r3, #0]
 80060a0:	b29b      	uxth	r3, r3
 80060a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060aa:	82bb      	strh	r3, [r7, #20]
 80060ac:	687a      	ldr	r2, [r7, #4]
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	781b      	ldrb	r3, [r3, #0]
 80060b2:	009b      	lsls	r3, r3, #2
 80060b4:	441a      	add	r2, r3
 80060b6:	8abb      	ldrh	r3, [r7, #20]
 80060b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80060c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060c8:	b29b      	uxth	r3, r3
 80060ca:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80060cc:	687a      	ldr	r2, [r7, #4]
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	781b      	ldrb	r3, [r3, #0]
 80060d2:	009b      	lsls	r3, r3, #2
 80060d4:	4413      	add	r3, r2
 80060d6:	881b      	ldrh	r3, [r3, #0]
 80060d8:	b29b      	uxth	r3, r3
 80060da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80060de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060e2:	827b      	strh	r3, [r7, #18]
 80060e4:	8a7b      	ldrh	r3, [r7, #18]
 80060e6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80060ea:	827b      	strh	r3, [r7, #18]
 80060ec:	8a7b      	ldrh	r3, [r7, #18]
 80060ee:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80060f2:	827b      	strh	r3, [r7, #18]
 80060f4:	687a      	ldr	r2, [r7, #4]
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	781b      	ldrb	r3, [r3, #0]
 80060fa:	009b      	lsls	r3, r3, #2
 80060fc:	441a      	add	r2, r3
 80060fe:	8a7b      	ldrh	r3, [r7, #18]
 8006100:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006104:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006108:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800610c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006110:	b29b      	uxth	r3, r3
 8006112:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006114:	2300      	movs	r3, #0
}
 8006116:	4618      	mov	r0, r3
 8006118:	371c      	adds	r7, #28
 800611a:	46bd      	mov	sp, r7
 800611c:	bc80      	pop	{r7}
 800611e:	4770      	bx	lr

08006120 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006120:	b480      	push	{r7}
 8006122:	b083      	sub	sp, #12
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
 8006128:	460b      	mov	r3, r1
 800612a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800612c:	78fb      	ldrb	r3, [r7, #3]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d103      	bne.n	800613a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2280      	movs	r2, #128	; 0x80
 8006136:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800613a:	2300      	movs	r3, #0
}
 800613c:	4618      	mov	r0, r3
 800613e:	370c      	adds	r7, #12
 8006140:	46bd      	mov	sp, r7
 8006142:	bc80      	pop	{r7}
 8006144:	4770      	bx	lr

08006146 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006146:	b480      	push	{r7}
 8006148:	b083      	sub	sp, #12
 800614a:	af00      	add	r7, sp, #0
 800614c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800614e:	2300      	movs	r3, #0
}
 8006150:	4618      	mov	r0, r3
 8006152:	370c      	adds	r7, #12
 8006154:	46bd      	mov	sp, r7
 8006156:	bc80      	pop	{r7}
 8006158:	4770      	bx	lr

0800615a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800615a:	b480      	push	{r7}
 800615c:	b083      	sub	sp, #12
 800615e:	af00      	add	r7, sp, #0
 8006160:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006162:	2300      	movs	r3, #0
}
 8006164:	4618      	mov	r0, r3
 8006166:	370c      	adds	r7, #12
 8006168:	46bd      	mov	sp, r7
 800616a:	bc80      	pop	{r7}
 800616c:	4770      	bx	lr

0800616e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800616e:	b480      	push	{r7}
 8006170:	b085      	sub	sp, #20
 8006172:	af00      	add	r7, sp, #0
 8006174:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800617c:	b29b      	uxth	r3, r3
 800617e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006180:	68fb      	ldr	r3, [r7, #12]
}
 8006182:	4618      	mov	r0, r3
 8006184:	3714      	adds	r7, #20
 8006186:	46bd      	mov	sp, r7
 8006188:	bc80      	pop	{r7}
 800618a:	4770      	bx	lr

0800618c <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800618c:	b480      	push	{r7}
 800618e:	b083      	sub	sp, #12
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
 8006194:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006196:	2300      	movs	r3, #0
}
 8006198:	4618      	mov	r0, r3
 800619a:	370c      	adds	r7, #12
 800619c:	46bd      	mov	sp, r7
 800619e:	bc80      	pop	{r7}
 80061a0:	4770      	bx	lr

080061a2 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80061a2:	b480      	push	{r7}
 80061a4:	b08d      	sub	sp, #52	; 0x34
 80061a6:	af00      	add	r7, sp, #0
 80061a8:	60f8      	str	r0, [r7, #12]
 80061aa:	60b9      	str	r1, [r7, #8]
 80061ac:	4611      	mov	r1, r2
 80061ae:	461a      	mov	r2, r3
 80061b0:	460b      	mov	r3, r1
 80061b2:	80fb      	strh	r3, [r7, #6]
 80061b4:	4613      	mov	r3, r2
 80061b6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80061b8:	88bb      	ldrh	r3, [r7, #4]
 80061ba:	3301      	adds	r3, #1
 80061bc:	085b      	lsrs	r3, r3, #1
 80061be:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80061c8:	88fb      	ldrh	r3, [r7, #6]
 80061ca:	005a      	lsls	r2, r3, #1
 80061cc:	69fb      	ldr	r3, [r7, #28]
 80061ce:	4413      	add	r3, r2
 80061d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80061d4:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80061d6:	6a3b      	ldr	r3, [r7, #32]
 80061d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80061da:	e01e      	b.n	800621a <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 80061dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061de:	781b      	ldrb	r3, [r3, #0]
 80061e0:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80061e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e4:	3301      	adds	r3, #1
 80061e6:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80061e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ea:	781b      	ldrb	r3, [r3, #0]
 80061ec:	b29b      	uxth	r3, r3
 80061ee:	021b      	lsls	r3, r3, #8
 80061f0:	b29b      	uxth	r3, r3
 80061f2:	461a      	mov	r2, r3
 80061f4:	69bb      	ldr	r3, [r7, #24]
 80061f6:	4313      	orrs	r3, r2
 80061f8:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80061fa:	697b      	ldr	r3, [r7, #20]
 80061fc:	b29a      	uxth	r2, r3
 80061fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006200:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006204:	3302      	adds	r3, #2
 8006206:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8006208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800620a:	3302      	adds	r3, #2
 800620c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800620e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006210:	3301      	adds	r3, #1
 8006212:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8006214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006216:	3b01      	subs	r3, #1
 8006218:	62fb      	str	r3, [r7, #44]	; 0x2c
 800621a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800621c:	2b00      	cmp	r3, #0
 800621e:	d1dd      	bne.n	80061dc <USB_WritePMA+0x3a>
  }
}
 8006220:	bf00      	nop
 8006222:	bf00      	nop
 8006224:	3734      	adds	r7, #52	; 0x34
 8006226:	46bd      	mov	sp, r7
 8006228:	bc80      	pop	{r7}
 800622a:	4770      	bx	lr

0800622c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800622c:	b480      	push	{r7}
 800622e:	b08b      	sub	sp, #44	; 0x2c
 8006230:	af00      	add	r7, sp, #0
 8006232:	60f8      	str	r0, [r7, #12]
 8006234:	60b9      	str	r1, [r7, #8]
 8006236:	4611      	mov	r1, r2
 8006238:	461a      	mov	r2, r3
 800623a:	460b      	mov	r3, r1
 800623c:	80fb      	strh	r3, [r7, #6]
 800623e:	4613      	mov	r3, r2
 8006240:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006242:	88bb      	ldrh	r3, [r7, #4]
 8006244:	085b      	lsrs	r3, r3, #1
 8006246:	b29b      	uxth	r3, r3
 8006248:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006252:	88fb      	ldrh	r3, [r7, #6]
 8006254:	005a      	lsls	r2, r3, #1
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	4413      	add	r3, r2
 800625a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800625e:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8006260:	69bb      	ldr	r3, [r7, #24]
 8006262:	627b      	str	r3, [r7, #36]	; 0x24
 8006264:	e01b      	b.n	800629e <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8006266:	6a3b      	ldr	r3, [r7, #32]
 8006268:	881b      	ldrh	r3, [r3, #0]
 800626a:	b29b      	uxth	r3, r3
 800626c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800626e:	6a3b      	ldr	r3, [r7, #32]
 8006270:	3302      	adds	r3, #2
 8006272:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006274:	693b      	ldr	r3, [r7, #16]
 8006276:	b2da      	uxtb	r2, r3
 8006278:	69fb      	ldr	r3, [r7, #28]
 800627a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800627c:	69fb      	ldr	r3, [r7, #28]
 800627e:	3301      	adds	r3, #1
 8006280:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8006282:	693b      	ldr	r3, [r7, #16]
 8006284:	0a1b      	lsrs	r3, r3, #8
 8006286:	b2da      	uxtb	r2, r3
 8006288:	69fb      	ldr	r3, [r7, #28]
 800628a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800628c:	69fb      	ldr	r3, [r7, #28]
 800628e:	3301      	adds	r3, #1
 8006290:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006292:	6a3b      	ldr	r3, [r7, #32]
 8006294:	3302      	adds	r3, #2
 8006296:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8006298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800629a:	3b01      	subs	r3, #1
 800629c:	627b      	str	r3, [r7, #36]	; 0x24
 800629e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d1e0      	bne.n	8006266 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80062a4:	88bb      	ldrh	r3, [r7, #4]
 80062a6:	f003 0301 	and.w	r3, r3, #1
 80062aa:	b29b      	uxth	r3, r3
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d007      	beq.n	80062c0 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 80062b0:	6a3b      	ldr	r3, [r7, #32]
 80062b2:	881b      	ldrh	r3, [r3, #0]
 80062b4:	b29b      	uxth	r3, r3
 80062b6:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80062b8:	693b      	ldr	r3, [r7, #16]
 80062ba:	b2da      	uxtb	r2, r3
 80062bc:	69fb      	ldr	r3, [r7, #28]
 80062be:	701a      	strb	r2, [r3, #0]
  }
}
 80062c0:	bf00      	nop
 80062c2:	372c      	adds	r7, #44	; 0x2c
 80062c4:	46bd      	mov	sp, r7
 80062c6:	bc80      	pop	{r7}
 80062c8:	4770      	bx	lr

080062ca <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80062ca:	b580      	push	{r7, lr}
 80062cc:	b084      	sub	sp, #16
 80062ce:	af00      	add	r7, sp, #0
 80062d0:	6078      	str	r0, [r7, #4]
 80062d2:	460b      	mov	r3, r1
 80062d4:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80062d6:	2300      	movs	r3, #0
 80062d8:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	7c1b      	ldrb	r3, [r3, #16]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d115      	bne.n	800630e <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80062e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80062e6:	2202      	movs	r2, #2
 80062e8:	2181      	movs	r1, #129	; 0x81
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	f001 fe87 	bl	8007ffe <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2201      	movs	r2, #1
 80062f4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80062f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80062fa:	2202      	movs	r2, #2
 80062fc:	2101      	movs	r1, #1
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	f001 fe7d 	bl	8007ffe <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2201      	movs	r2, #1
 8006308:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800630c:	e012      	b.n	8006334 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800630e:	2340      	movs	r3, #64	; 0x40
 8006310:	2202      	movs	r2, #2
 8006312:	2181      	movs	r1, #129	; 0x81
 8006314:	6878      	ldr	r0, [r7, #4]
 8006316:	f001 fe72 	bl	8007ffe <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2201      	movs	r2, #1
 800631e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006320:	2340      	movs	r3, #64	; 0x40
 8006322:	2202      	movs	r2, #2
 8006324:	2101      	movs	r1, #1
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	f001 fe69 	bl	8007ffe <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2201      	movs	r2, #1
 8006330:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006334:	2308      	movs	r3, #8
 8006336:	2203      	movs	r2, #3
 8006338:	2182      	movs	r1, #130	; 0x82
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	f001 fe5f 	bl	8007ffe <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2201      	movs	r2, #1
 8006344:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006346:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800634a:	f001 ff7f 	bl	800824c <USBD_static_malloc>
 800634e:	4602      	mov	r2, r0
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800635c:	2b00      	cmp	r3, #0
 800635e:	d102      	bne.n	8006366 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8006360:	2301      	movs	r3, #1
 8006362:	73fb      	strb	r3, [r7, #15]
 8006364:	e026      	b.n	80063b4 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800636c:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	2200      	movs	r2, #0
 800637c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	2200      	movs	r2, #0
 8006384:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	7c1b      	ldrb	r3, [r3, #16]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d109      	bne.n	80063a4 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006396:	f44f 7300 	mov.w	r3, #512	; 0x200
 800639a:	2101      	movs	r1, #1
 800639c:	6878      	ldr	r0, [r7, #4]
 800639e:	f001 ff1f 	bl	80081e0 <USBD_LL_PrepareReceive>
 80063a2:	e007      	b.n	80063b4 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80063a4:	68bb      	ldr	r3, [r7, #8]
 80063a6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80063aa:	2340      	movs	r3, #64	; 0x40
 80063ac:	2101      	movs	r1, #1
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f001 ff16 	bl	80081e0 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80063b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	3710      	adds	r7, #16
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bd80      	pop	{r7, pc}

080063be <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80063be:	b580      	push	{r7, lr}
 80063c0:	b084      	sub	sp, #16
 80063c2:	af00      	add	r7, sp, #0
 80063c4:	6078      	str	r0, [r7, #4]
 80063c6:	460b      	mov	r3, r1
 80063c8:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80063ca:	2300      	movs	r3, #0
 80063cc:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80063ce:	2181      	movs	r1, #129	; 0x81
 80063d0:	6878      	ldr	r0, [r7, #4]
 80063d2:	f001 fe3a 	bl	800804a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2200      	movs	r2, #0
 80063da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80063dc:	2101      	movs	r1, #1
 80063de:	6878      	ldr	r0, [r7, #4]
 80063e0:	f001 fe33 	bl	800804a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2200      	movs	r2, #0
 80063e8:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80063ec:	2182      	movs	r1, #130	; 0x82
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	f001 fe2b 	bl	800804a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2200      	movs	r2, #0
 80063f8:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006400:	2b00      	cmp	r3, #0
 8006402:	d00e      	beq.n	8006422 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800640a:	685b      	ldr	r3, [r3, #4]
 800640c:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006414:	4618      	mov	r0, r3
 8006416:	f001 ff25 	bl	8008264 <USBD_static_free>
    pdev->pClassData = NULL;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2200      	movs	r2, #0
 800641e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8006422:	7bfb      	ldrb	r3, [r7, #15]
}
 8006424:	4618      	mov	r0, r3
 8006426:	3710      	adds	r7, #16
 8006428:	46bd      	mov	sp, r7
 800642a:	bd80      	pop	{r7, pc}

0800642c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b086      	sub	sp, #24
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
 8006434:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800643c:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800643e:	2300      	movs	r3, #0
 8006440:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006442:	2300      	movs	r3, #0
 8006444:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8006446:	2300      	movs	r3, #0
 8006448:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	781b      	ldrb	r3, [r3, #0]
 800644e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006452:	2b00      	cmp	r3, #0
 8006454:	d039      	beq.n	80064ca <USBD_CDC_Setup+0x9e>
 8006456:	2b20      	cmp	r3, #32
 8006458:	d17f      	bne.n	800655a <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	88db      	ldrh	r3, [r3, #6]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d029      	beq.n	80064b6 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	781b      	ldrb	r3, [r3, #0]
 8006466:	b25b      	sxtb	r3, r3
 8006468:	2b00      	cmp	r3, #0
 800646a:	da11      	bge.n	8006490 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006472:	689b      	ldr	r3, [r3, #8]
 8006474:	683a      	ldr	r2, [r7, #0]
 8006476:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8006478:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800647a:	683a      	ldr	r2, [r7, #0]
 800647c:	88d2      	ldrh	r2, [r2, #6]
 800647e:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006480:	6939      	ldr	r1, [r7, #16]
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	88db      	ldrh	r3, [r3, #6]
 8006486:	461a      	mov	r2, r3
 8006488:	6878      	ldr	r0, [r7, #4]
 800648a:	f001 fa0a 	bl	80078a2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800648e:	e06b      	b.n	8006568 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	785a      	ldrb	r2, [r3, #1]
 8006494:	693b      	ldr	r3, [r7, #16]
 8006496:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	88db      	ldrh	r3, [r3, #6]
 800649e:	b2da      	uxtb	r2, r3
 80064a0:	693b      	ldr	r3, [r7, #16]
 80064a2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80064a6:	6939      	ldr	r1, [r7, #16]
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	88db      	ldrh	r3, [r3, #6]
 80064ac:	461a      	mov	r2, r3
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f001 fa25 	bl	80078fe <USBD_CtlPrepareRx>
      break;
 80064b4:	e058      	b.n	8006568 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80064bc:	689b      	ldr	r3, [r3, #8]
 80064be:	683a      	ldr	r2, [r7, #0]
 80064c0:	7850      	ldrb	r0, [r2, #1]
 80064c2:	2200      	movs	r2, #0
 80064c4:	6839      	ldr	r1, [r7, #0]
 80064c6:	4798      	blx	r3
      break;
 80064c8:	e04e      	b.n	8006568 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	785b      	ldrb	r3, [r3, #1]
 80064ce:	2b0b      	cmp	r3, #11
 80064d0:	d02e      	beq.n	8006530 <USBD_CDC_Setup+0x104>
 80064d2:	2b0b      	cmp	r3, #11
 80064d4:	dc38      	bgt.n	8006548 <USBD_CDC_Setup+0x11c>
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d002      	beq.n	80064e0 <USBD_CDC_Setup+0xb4>
 80064da:	2b0a      	cmp	r3, #10
 80064dc:	d014      	beq.n	8006508 <USBD_CDC_Setup+0xdc>
 80064de:	e033      	b.n	8006548 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064e6:	2b03      	cmp	r3, #3
 80064e8:	d107      	bne.n	80064fa <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80064ea:	f107 030c 	add.w	r3, r7, #12
 80064ee:	2202      	movs	r2, #2
 80064f0:	4619      	mov	r1, r3
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f001 f9d5 	bl	80078a2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80064f8:	e02e      	b.n	8006558 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80064fa:	6839      	ldr	r1, [r7, #0]
 80064fc:	6878      	ldr	r0, [r7, #4]
 80064fe:	f001 f966 	bl	80077ce <USBD_CtlError>
            ret = USBD_FAIL;
 8006502:	2302      	movs	r3, #2
 8006504:	75fb      	strb	r3, [r7, #23]
          break;
 8006506:	e027      	b.n	8006558 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800650e:	2b03      	cmp	r3, #3
 8006510:	d107      	bne.n	8006522 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8006512:	f107 030f 	add.w	r3, r7, #15
 8006516:	2201      	movs	r2, #1
 8006518:	4619      	mov	r1, r3
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f001 f9c1 	bl	80078a2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006520:	e01a      	b.n	8006558 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006522:	6839      	ldr	r1, [r7, #0]
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	f001 f952 	bl	80077ce <USBD_CtlError>
            ret = USBD_FAIL;
 800652a:	2302      	movs	r3, #2
 800652c:	75fb      	strb	r3, [r7, #23]
          break;
 800652e:	e013      	b.n	8006558 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006536:	2b03      	cmp	r3, #3
 8006538:	d00d      	beq.n	8006556 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800653a:	6839      	ldr	r1, [r7, #0]
 800653c:	6878      	ldr	r0, [r7, #4]
 800653e:	f001 f946 	bl	80077ce <USBD_CtlError>
            ret = USBD_FAIL;
 8006542:	2302      	movs	r3, #2
 8006544:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006546:	e006      	b.n	8006556 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8006548:	6839      	ldr	r1, [r7, #0]
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f001 f93f 	bl	80077ce <USBD_CtlError>
          ret = USBD_FAIL;
 8006550:	2302      	movs	r3, #2
 8006552:	75fb      	strb	r3, [r7, #23]
          break;
 8006554:	e000      	b.n	8006558 <USBD_CDC_Setup+0x12c>
          break;
 8006556:	bf00      	nop
      }
      break;
 8006558:	e006      	b.n	8006568 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800655a:	6839      	ldr	r1, [r7, #0]
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	f001 f936 	bl	80077ce <USBD_CtlError>
      ret = USBD_FAIL;
 8006562:	2302      	movs	r3, #2
 8006564:	75fb      	strb	r3, [r7, #23]
      break;
 8006566:	bf00      	nop
  }

  return ret;
 8006568:	7dfb      	ldrb	r3, [r7, #23]
}
 800656a:	4618      	mov	r0, r3
 800656c:	3718      	adds	r7, #24
 800656e:	46bd      	mov	sp, r7
 8006570:	bd80      	pop	{r7, pc}

08006572 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006572:	b580      	push	{r7, lr}
 8006574:	b084      	sub	sp, #16
 8006576:	af00      	add	r7, sp, #0
 8006578:	6078      	str	r0, [r7, #4]
 800657a:	460b      	mov	r3, r1
 800657c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006584:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800658c:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006594:	2b00      	cmp	r3, #0
 8006596:	d03a      	beq.n	800660e <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006598:	78fa      	ldrb	r2, [r7, #3]
 800659a:	6879      	ldr	r1, [r7, #4]
 800659c:	4613      	mov	r3, r2
 800659e:	009b      	lsls	r3, r3, #2
 80065a0:	4413      	add	r3, r2
 80065a2:	009b      	lsls	r3, r3, #2
 80065a4:	440b      	add	r3, r1
 80065a6:	331c      	adds	r3, #28
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d029      	beq.n	8006602 <USBD_CDC_DataIn+0x90>
 80065ae:	78fa      	ldrb	r2, [r7, #3]
 80065b0:	6879      	ldr	r1, [r7, #4]
 80065b2:	4613      	mov	r3, r2
 80065b4:	009b      	lsls	r3, r3, #2
 80065b6:	4413      	add	r3, r2
 80065b8:	009b      	lsls	r3, r3, #2
 80065ba:	440b      	add	r3, r1
 80065bc:	331c      	adds	r3, #28
 80065be:	681a      	ldr	r2, [r3, #0]
 80065c0:	78f9      	ldrb	r1, [r7, #3]
 80065c2:	68b8      	ldr	r0, [r7, #8]
 80065c4:	460b      	mov	r3, r1
 80065c6:	009b      	lsls	r3, r3, #2
 80065c8:	440b      	add	r3, r1
 80065ca:	00db      	lsls	r3, r3, #3
 80065cc:	4403      	add	r3, r0
 80065ce:	3338      	adds	r3, #56	; 0x38
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	fbb2 f1f3 	udiv	r1, r2, r3
 80065d6:	fb03 f301 	mul.w	r3, r3, r1
 80065da:	1ad3      	subs	r3, r2, r3
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d110      	bne.n	8006602 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80065e0:	78fa      	ldrb	r2, [r7, #3]
 80065e2:	6879      	ldr	r1, [r7, #4]
 80065e4:	4613      	mov	r3, r2
 80065e6:	009b      	lsls	r3, r3, #2
 80065e8:	4413      	add	r3, r2
 80065ea:	009b      	lsls	r3, r3, #2
 80065ec:	440b      	add	r3, r1
 80065ee:	331c      	adds	r3, #28
 80065f0:	2200      	movs	r2, #0
 80065f2:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80065f4:	78f9      	ldrb	r1, [r7, #3]
 80065f6:	2300      	movs	r3, #0
 80065f8:	2200      	movs	r2, #0
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f001 fdcd 	bl	800819a <USBD_LL_Transmit>
 8006600:	e003      	b.n	800660a <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	2200      	movs	r2, #0
 8006606:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800660a:	2300      	movs	r3, #0
 800660c:	e000      	b.n	8006610 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800660e:	2302      	movs	r3, #2
  }
}
 8006610:	4618      	mov	r0, r3
 8006612:	3710      	adds	r7, #16
 8006614:	46bd      	mov	sp, r7
 8006616:	bd80      	pop	{r7, pc}

08006618 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b084      	sub	sp, #16
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
 8006620:	460b      	mov	r3, r1
 8006622:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800662a:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800662c:	78fb      	ldrb	r3, [r7, #3]
 800662e:	4619      	mov	r1, r3
 8006630:	6878      	ldr	r0, [r7, #4]
 8006632:	f001 fdf8 	bl	8008226 <USBD_LL_GetRxDataSize>
 8006636:	4602      	mov	r2, r0
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006644:	2b00      	cmp	r3, #0
 8006646:	d00d      	beq.n	8006664 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800664e:	68db      	ldr	r3, [r3, #12]
 8006650:	68fa      	ldr	r2, [r7, #12]
 8006652:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006656:	68fa      	ldr	r2, [r7, #12]
 8006658:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800665c:	4611      	mov	r1, r2
 800665e:	4798      	blx	r3

    return USBD_OK;
 8006660:	2300      	movs	r3, #0
 8006662:	e000      	b.n	8006666 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8006664:	2302      	movs	r3, #2
  }
}
 8006666:	4618      	mov	r0, r3
 8006668:	3710      	adds	r7, #16
 800666a:	46bd      	mov	sp, r7
 800666c:	bd80      	pop	{r7, pc}

0800666e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800666e:	b580      	push	{r7, lr}
 8006670:	b084      	sub	sp, #16
 8006672:	af00      	add	r7, sp, #0
 8006674:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800667c:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006684:	2b00      	cmp	r3, #0
 8006686:	d015      	beq.n	80066b4 <USBD_CDC_EP0_RxReady+0x46>
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800668e:	2bff      	cmp	r3, #255	; 0xff
 8006690:	d010      	beq.n	80066b4 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006698:	689b      	ldr	r3, [r3, #8]
 800669a:	68fa      	ldr	r2, [r7, #12]
 800669c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80066a0:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80066a2:	68fa      	ldr	r2, [r7, #12]
 80066a4:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80066a8:	b292      	uxth	r2, r2
 80066aa:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	22ff      	movs	r2, #255	; 0xff
 80066b0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80066b4:	2300      	movs	r3, #0
}
 80066b6:	4618      	mov	r0, r3
 80066b8:	3710      	adds	r7, #16
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bd80      	pop	{r7, pc}
	...

080066c0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80066c0:	b480      	push	{r7}
 80066c2:	b083      	sub	sp, #12
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2243      	movs	r2, #67	; 0x43
 80066cc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80066ce:	4b03      	ldr	r3, [pc, #12]	; (80066dc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80066d0:	4618      	mov	r0, r3
 80066d2:	370c      	adds	r7, #12
 80066d4:	46bd      	mov	sp, r7
 80066d6:	bc80      	pop	{r7}
 80066d8:	4770      	bx	lr
 80066da:	bf00      	nop
 80066dc:	20000124 	.word	0x20000124

080066e0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80066e0:	b480      	push	{r7}
 80066e2:	b083      	sub	sp, #12
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2243      	movs	r2, #67	; 0x43
 80066ec:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80066ee:	4b03      	ldr	r3, [pc, #12]	; (80066fc <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80066f0:	4618      	mov	r0, r3
 80066f2:	370c      	adds	r7, #12
 80066f4:	46bd      	mov	sp, r7
 80066f6:	bc80      	pop	{r7}
 80066f8:	4770      	bx	lr
 80066fa:	bf00      	nop
 80066fc:	200000e0 	.word	0x200000e0

08006700 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006700:	b480      	push	{r7}
 8006702:	b083      	sub	sp, #12
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2243      	movs	r2, #67	; 0x43
 800670c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800670e:	4b03      	ldr	r3, [pc, #12]	; (800671c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006710:	4618      	mov	r0, r3
 8006712:	370c      	adds	r7, #12
 8006714:	46bd      	mov	sp, r7
 8006716:	bc80      	pop	{r7}
 8006718:	4770      	bx	lr
 800671a:	bf00      	nop
 800671c:	20000168 	.word	0x20000168

08006720 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006720:	b480      	push	{r7}
 8006722:	b083      	sub	sp, #12
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	220a      	movs	r2, #10
 800672c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800672e:	4b03      	ldr	r3, [pc, #12]	; (800673c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006730:	4618      	mov	r0, r3
 8006732:	370c      	adds	r7, #12
 8006734:	46bd      	mov	sp, r7
 8006736:	bc80      	pop	{r7}
 8006738:	4770      	bx	lr
 800673a:	bf00      	nop
 800673c:	2000009c 	.word	0x2000009c

08006740 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8006740:	b480      	push	{r7}
 8006742:	b085      	sub	sp, #20
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
 8006748:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800674a:	2302      	movs	r3, #2
 800674c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d005      	beq.n	8006760 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	683a      	ldr	r2, [r7, #0]
 8006758:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800675c:	2300      	movs	r3, #0
 800675e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006760:	7bfb      	ldrb	r3, [r7, #15]
}
 8006762:	4618      	mov	r0, r3
 8006764:	3714      	adds	r7, #20
 8006766:	46bd      	mov	sp, r7
 8006768:	bc80      	pop	{r7}
 800676a:	4770      	bx	lr

0800676c <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800676c:	b480      	push	{r7}
 800676e:	b087      	sub	sp, #28
 8006770:	af00      	add	r7, sp, #0
 8006772:	60f8      	str	r0, [r7, #12]
 8006774:	60b9      	str	r1, [r7, #8]
 8006776:	4613      	mov	r3, r2
 8006778:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006780:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	68ba      	ldr	r2, [r7, #8]
 8006786:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800678a:	88fa      	ldrh	r2, [r7, #6]
 800678c:	697b      	ldr	r3, [r7, #20]
 800678e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8006792:	2300      	movs	r3, #0
}
 8006794:	4618      	mov	r0, r3
 8006796:	371c      	adds	r7, #28
 8006798:	46bd      	mov	sp, r7
 800679a:	bc80      	pop	{r7}
 800679c:	4770      	bx	lr

0800679e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800679e:	b480      	push	{r7}
 80067a0:	b085      	sub	sp, #20
 80067a2:	af00      	add	r7, sp, #0
 80067a4:	6078      	str	r0, [r7, #4]
 80067a6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067ae:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	683a      	ldr	r2, [r7, #0]
 80067b4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80067b8:	2300      	movs	r3, #0
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	3714      	adds	r7, #20
 80067be:	46bd      	mov	sp, r7
 80067c0:	bc80      	pop	{r7}
 80067c2:	4770      	bx	lr

080067c4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b084      	sub	sp, #16
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067d2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d01c      	beq.n	8006818 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d115      	bne.n	8006814 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	2201      	movs	r2, #1
 80067ec:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006806:	b29b      	uxth	r3, r3
 8006808:	2181      	movs	r1, #129	; 0x81
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	f001 fcc5 	bl	800819a <USBD_LL_Transmit>

      return USBD_OK;
 8006810:	2300      	movs	r3, #0
 8006812:	e002      	b.n	800681a <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8006814:	2301      	movs	r3, #1
 8006816:	e000      	b.n	800681a <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8006818:	2302      	movs	r3, #2
  }
}
 800681a:	4618      	mov	r0, r3
 800681c:	3710      	adds	r7, #16
 800681e:	46bd      	mov	sp, r7
 8006820:	bd80      	pop	{r7, pc}

08006822 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006822:	b580      	push	{r7, lr}
 8006824:	b084      	sub	sp, #16
 8006826:	af00      	add	r7, sp, #0
 8006828:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006830:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006838:	2b00      	cmp	r3, #0
 800683a:	d017      	beq.n	800686c <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	7c1b      	ldrb	r3, [r3, #16]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d109      	bne.n	8006858 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800684a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800684e:	2101      	movs	r1, #1
 8006850:	6878      	ldr	r0, [r7, #4]
 8006852:	f001 fcc5 	bl	80081e0 <USBD_LL_PrepareReceive>
 8006856:	e007      	b.n	8006868 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800685e:	2340      	movs	r3, #64	; 0x40
 8006860:	2101      	movs	r1, #1
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f001 fcbc 	bl	80081e0 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8006868:	2300      	movs	r3, #0
 800686a:	e000      	b.n	800686e <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800686c:	2302      	movs	r3, #2
  }
}
 800686e:	4618      	mov	r0, r3
 8006870:	3710      	adds	r7, #16
 8006872:	46bd      	mov	sp, r7
 8006874:	bd80      	pop	{r7, pc}

08006876 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006876:	b580      	push	{r7, lr}
 8006878:	b084      	sub	sp, #16
 800687a:	af00      	add	r7, sp, #0
 800687c:	60f8      	str	r0, [r7, #12]
 800687e:	60b9      	str	r1, [r7, #8]
 8006880:	4613      	mov	r3, r2
 8006882:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d101      	bne.n	800688e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800688a:	2302      	movs	r3, #2
 800688c:	e01a      	b.n	80068c4 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006894:	2b00      	cmp	r3, #0
 8006896:	d003      	beq.n	80068a0 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	2200      	movs	r2, #0
 800689c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d003      	beq.n	80068ae <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	68ba      	ldr	r2, [r7, #8]
 80068aa:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	2201      	movs	r2, #1
 80068b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	79fa      	ldrb	r2, [r7, #7]
 80068ba:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80068bc:	68f8      	ldr	r0, [r7, #12]
 80068be:	f001 fb29 	bl	8007f14 <USBD_LL_Init>

  return USBD_OK;
 80068c2:	2300      	movs	r3, #0
}
 80068c4:	4618      	mov	r0, r3
 80068c6:	3710      	adds	r7, #16
 80068c8:	46bd      	mov	sp, r7
 80068ca:	bd80      	pop	{r7, pc}

080068cc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80068cc:	b480      	push	{r7}
 80068ce:	b085      	sub	sp, #20
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
 80068d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80068d6:	2300      	movs	r3, #0
 80068d8:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d006      	beq.n	80068ee <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	683a      	ldr	r2, [r7, #0]
 80068e4:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80068e8:	2300      	movs	r3, #0
 80068ea:	73fb      	strb	r3, [r7, #15]
 80068ec:	e001      	b.n	80068f2 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80068ee:	2302      	movs	r3, #2
 80068f0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80068f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80068f4:	4618      	mov	r0, r3
 80068f6:	3714      	adds	r7, #20
 80068f8:	46bd      	mov	sp, r7
 80068fa:	bc80      	pop	{r7}
 80068fc:	4770      	bx	lr

080068fe <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80068fe:	b580      	push	{r7, lr}
 8006900:	b082      	sub	sp, #8
 8006902:	af00      	add	r7, sp, #0
 8006904:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	f001 fb5e 	bl	8007fc8 <USBD_LL_Start>

  return USBD_OK;
 800690c:	2300      	movs	r3, #0
}
 800690e:	4618      	mov	r0, r3
 8006910:	3708      	adds	r7, #8
 8006912:	46bd      	mov	sp, r7
 8006914:	bd80      	pop	{r7, pc}

08006916 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006916:	b480      	push	{r7}
 8006918:	b083      	sub	sp, #12
 800691a:	af00      	add	r7, sp, #0
 800691c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800691e:	2300      	movs	r3, #0
}
 8006920:	4618      	mov	r0, r3
 8006922:	370c      	adds	r7, #12
 8006924:	46bd      	mov	sp, r7
 8006926:	bc80      	pop	{r7}
 8006928:	4770      	bx	lr

0800692a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800692a:	b580      	push	{r7, lr}
 800692c:	b084      	sub	sp, #16
 800692e:	af00      	add	r7, sp, #0
 8006930:	6078      	str	r0, [r7, #4]
 8006932:	460b      	mov	r3, r1
 8006934:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006936:	2302      	movs	r3, #2
 8006938:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006940:	2b00      	cmp	r3, #0
 8006942:	d00c      	beq.n	800695e <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	78fa      	ldrb	r2, [r7, #3]
 800694e:	4611      	mov	r1, r2
 8006950:	6878      	ldr	r0, [r7, #4]
 8006952:	4798      	blx	r3
 8006954:	4603      	mov	r3, r0
 8006956:	2b00      	cmp	r3, #0
 8006958:	d101      	bne.n	800695e <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800695a:	2300      	movs	r3, #0
 800695c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800695e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006960:	4618      	mov	r0, r3
 8006962:	3710      	adds	r7, #16
 8006964:	46bd      	mov	sp, r7
 8006966:	bd80      	pop	{r7, pc}

08006968 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b082      	sub	sp, #8
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
 8006970:	460b      	mov	r3, r1
 8006972:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800697a:	685b      	ldr	r3, [r3, #4]
 800697c:	78fa      	ldrb	r2, [r7, #3]
 800697e:	4611      	mov	r1, r2
 8006980:	6878      	ldr	r0, [r7, #4]
 8006982:	4798      	blx	r3

  return USBD_OK;
 8006984:	2300      	movs	r3, #0
}
 8006986:	4618      	mov	r0, r3
 8006988:	3708      	adds	r7, #8
 800698a:	46bd      	mov	sp, r7
 800698c:	bd80      	pop	{r7, pc}

0800698e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800698e:	b580      	push	{r7, lr}
 8006990:	b082      	sub	sp, #8
 8006992:	af00      	add	r7, sp, #0
 8006994:	6078      	str	r0, [r7, #4]
 8006996:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800699e:	6839      	ldr	r1, [r7, #0]
 80069a0:	4618      	mov	r0, r3
 80069a2:	f000 fed8 	bl	8007756 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2201      	movs	r2, #1
 80069aa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80069b4:	461a      	mov	r2, r3
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80069c2:	f003 031f 	and.w	r3, r3, #31
 80069c6:	2b02      	cmp	r3, #2
 80069c8:	d016      	beq.n	80069f8 <USBD_LL_SetupStage+0x6a>
 80069ca:	2b02      	cmp	r3, #2
 80069cc:	d81c      	bhi.n	8006a08 <USBD_LL_SetupStage+0x7a>
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d002      	beq.n	80069d8 <USBD_LL_SetupStage+0x4a>
 80069d2:	2b01      	cmp	r3, #1
 80069d4:	d008      	beq.n	80069e8 <USBD_LL_SetupStage+0x5a>
 80069d6:	e017      	b.n	8006a08 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80069de:	4619      	mov	r1, r3
 80069e0:	6878      	ldr	r0, [r7, #4]
 80069e2:	f000 f9cb 	bl	8006d7c <USBD_StdDevReq>
      break;
 80069e6:	e01a      	b.n	8006a1e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80069ee:	4619      	mov	r1, r3
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f000 fa2d 	bl	8006e50 <USBD_StdItfReq>
      break;
 80069f6:	e012      	b.n	8006a1e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80069fe:	4619      	mov	r1, r3
 8006a00:	6878      	ldr	r0, [r7, #4]
 8006a02:	f000 fa6d 	bl	8006ee0 <USBD_StdEPReq>
      break;
 8006a06:	e00a      	b.n	8006a1e <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006a0e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006a12:	b2db      	uxtb	r3, r3
 8006a14:	4619      	mov	r1, r3
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f001 fb36 	bl	8008088 <USBD_LL_StallEP>
      break;
 8006a1c:	bf00      	nop
  }

  return USBD_OK;
 8006a1e:	2300      	movs	r3, #0
}
 8006a20:	4618      	mov	r0, r3
 8006a22:	3708      	adds	r7, #8
 8006a24:	46bd      	mov	sp, r7
 8006a26:	bd80      	pop	{r7, pc}

08006a28 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b086      	sub	sp, #24
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	60f8      	str	r0, [r7, #12]
 8006a30:	460b      	mov	r3, r1
 8006a32:	607a      	str	r2, [r7, #4]
 8006a34:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006a36:	7afb      	ldrb	r3, [r7, #11]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d14b      	bne.n	8006ad4 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006a42:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006a4a:	2b03      	cmp	r3, #3
 8006a4c:	d134      	bne.n	8006ab8 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8006a4e:	697b      	ldr	r3, [r7, #20]
 8006a50:	68da      	ldr	r2, [r3, #12]
 8006a52:	697b      	ldr	r3, [r7, #20]
 8006a54:	691b      	ldr	r3, [r3, #16]
 8006a56:	429a      	cmp	r2, r3
 8006a58:	d919      	bls.n	8006a8e <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8006a5a:	697b      	ldr	r3, [r7, #20]
 8006a5c:	68da      	ldr	r2, [r3, #12]
 8006a5e:	697b      	ldr	r3, [r7, #20]
 8006a60:	691b      	ldr	r3, [r3, #16]
 8006a62:	1ad2      	subs	r2, r2, r3
 8006a64:	697b      	ldr	r3, [r7, #20]
 8006a66:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006a68:	697b      	ldr	r3, [r7, #20]
 8006a6a:	68da      	ldr	r2, [r3, #12]
 8006a6c:	697b      	ldr	r3, [r7, #20]
 8006a6e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006a70:	429a      	cmp	r2, r3
 8006a72:	d203      	bcs.n	8006a7c <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006a74:	697b      	ldr	r3, [r7, #20]
 8006a76:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8006a78:	b29b      	uxth	r3, r3
 8006a7a:	e002      	b.n	8006a82 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006a7c:	697b      	ldr	r3, [r7, #20]
 8006a7e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006a80:	b29b      	uxth	r3, r3
 8006a82:	461a      	mov	r2, r3
 8006a84:	6879      	ldr	r1, [r7, #4]
 8006a86:	68f8      	ldr	r0, [r7, #12]
 8006a88:	f000 ff57 	bl	800793a <USBD_CtlContinueRx>
 8006a8c:	e038      	b.n	8006b00 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a94:	691b      	ldr	r3, [r3, #16]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d00a      	beq.n	8006ab0 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006aa0:	2b03      	cmp	r3, #3
 8006aa2:	d105      	bne.n	8006ab0 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006aaa:	691b      	ldr	r3, [r3, #16]
 8006aac:	68f8      	ldr	r0, [r7, #12]
 8006aae:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006ab0:	68f8      	ldr	r0, [r7, #12]
 8006ab2:	f000 ff54 	bl	800795e <USBD_CtlSendStatus>
 8006ab6:	e023      	b.n	8006b00 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006abe:	2b05      	cmp	r3, #5
 8006ac0:	d11e      	bne.n	8006b00 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8006aca:	2100      	movs	r1, #0
 8006acc:	68f8      	ldr	r0, [r7, #12]
 8006ace:	f001 fadb 	bl	8008088 <USBD_LL_StallEP>
 8006ad2:	e015      	b.n	8006b00 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ada:	699b      	ldr	r3, [r3, #24]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d00d      	beq.n	8006afc <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006ae6:	2b03      	cmp	r3, #3
 8006ae8:	d108      	bne.n	8006afc <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006af0:	699b      	ldr	r3, [r3, #24]
 8006af2:	7afa      	ldrb	r2, [r7, #11]
 8006af4:	4611      	mov	r1, r2
 8006af6:	68f8      	ldr	r0, [r7, #12]
 8006af8:	4798      	blx	r3
 8006afa:	e001      	b.n	8006b00 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006afc:	2302      	movs	r3, #2
 8006afe:	e000      	b.n	8006b02 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006b00:	2300      	movs	r3, #0
}
 8006b02:	4618      	mov	r0, r3
 8006b04:	3718      	adds	r7, #24
 8006b06:	46bd      	mov	sp, r7
 8006b08:	bd80      	pop	{r7, pc}

08006b0a <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006b0a:	b580      	push	{r7, lr}
 8006b0c:	b086      	sub	sp, #24
 8006b0e:	af00      	add	r7, sp, #0
 8006b10:	60f8      	str	r0, [r7, #12]
 8006b12:	460b      	mov	r3, r1
 8006b14:	607a      	str	r2, [r7, #4]
 8006b16:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006b18:	7afb      	ldrb	r3, [r7, #11]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d17f      	bne.n	8006c1e <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	3314      	adds	r3, #20
 8006b22:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006b2a:	2b02      	cmp	r3, #2
 8006b2c:	d15c      	bne.n	8006be8 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8006b2e:	697b      	ldr	r3, [r7, #20]
 8006b30:	68da      	ldr	r2, [r3, #12]
 8006b32:	697b      	ldr	r3, [r7, #20]
 8006b34:	691b      	ldr	r3, [r3, #16]
 8006b36:	429a      	cmp	r2, r3
 8006b38:	d915      	bls.n	8006b66 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	68da      	ldr	r2, [r3, #12]
 8006b3e:	697b      	ldr	r3, [r7, #20]
 8006b40:	691b      	ldr	r3, [r3, #16]
 8006b42:	1ad2      	subs	r2, r2, r3
 8006b44:	697b      	ldr	r3, [r7, #20]
 8006b46:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006b48:	697b      	ldr	r3, [r7, #20]
 8006b4a:	68db      	ldr	r3, [r3, #12]
 8006b4c:	b29b      	uxth	r3, r3
 8006b4e:	461a      	mov	r2, r3
 8006b50:	6879      	ldr	r1, [r7, #4]
 8006b52:	68f8      	ldr	r0, [r7, #12]
 8006b54:	f000 fec1 	bl	80078da <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006b58:	2300      	movs	r3, #0
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	2100      	movs	r1, #0
 8006b5e:	68f8      	ldr	r0, [r7, #12]
 8006b60:	f001 fb3e 	bl	80081e0 <USBD_LL_PrepareReceive>
 8006b64:	e04e      	b.n	8006c04 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006b66:	697b      	ldr	r3, [r7, #20]
 8006b68:	689b      	ldr	r3, [r3, #8]
 8006b6a:	697a      	ldr	r2, [r7, #20]
 8006b6c:	6912      	ldr	r2, [r2, #16]
 8006b6e:	fbb3 f1f2 	udiv	r1, r3, r2
 8006b72:	fb02 f201 	mul.w	r2, r2, r1
 8006b76:	1a9b      	subs	r3, r3, r2
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d11c      	bne.n	8006bb6 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8006b7c:	697b      	ldr	r3, [r7, #20]
 8006b7e:	689a      	ldr	r2, [r3, #8]
 8006b80:	697b      	ldr	r3, [r7, #20]
 8006b82:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006b84:	429a      	cmp	r2, r3
 8006b86:	d316      	bcc.n	8006bb6 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8006b88:	697b      	ldr	r3, [r7, #20]
 8006b8a:	689a      	ldr	r2, [r3, #8]
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006b92:	429a      	cmp	r2, r3
 8006b94:	d20f      	bcs.n	8006bb6 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006b96:	2200      	movs	r2, #0
 8006b98:	2100      	movs	r1, #0
 8006b9a:	68f8      	ldr	r0, [r7, #12]
 8006b9c:	f000 fe9d 	bl	80078da <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006ba8:	2300      	movs	r3, #0
 8006baa:	2200      	movs	r2, #0
 8006bac:	2100      	movs	r1, #0
 8006bae:	68f8      	ldr	r0, [r7, #12]
 8006bb0:	f001 fb16 	bl	80081e0 <USBD_LL_PrepareReceive>
 8006bb4:	e026      	b.n	8006c04 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bbc:	68db      	ldr	r3, [r3, #12]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d00a      	beq.n	8006bd8 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006bc8:	2b03      	cmp	r3, #3
 8006bca:	d105      	bne.n	8006bd8 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bd2:	68db      	ldr	r3, [r3, #12]
 8006bd4:	68f8      	ldr	r0, [r7, #12]
 8006bd6:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006bd8:	2180      	movs	r1, #128	; 0x80
 8006bda:	68f8      	ldr	r0, [r7, #12]
 8006bdc:	f001 fa54 	bl	8008088 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006be0:	68f8      	ldr	r0, [r7, #12]
 8006be2:	f000 fecf 	bl	8007984 <USBD_CtlReceiveStatus>
 8006be6:	e00d      	b.n	8006c04 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006bee:	2b04      	cmp	r3, #4
 8006bf0:	d004      	beq.n	8006bfc <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d103      	bne.n	8006c04 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006bfc:	2180      	movs	r1, #128	; 0x80
 8006bfe:	68f8      	ldr	r0, [r7, #12]
 8006c00:	f001 fa42 	bl	8008088 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006c0a:	2b01      	cmp	r3, #1
 8006c0c:	d11d      	bne.n	8006c4a <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8006c0e:	68f8      	ldr	r0, [r7, #12]
 8006c10:	f7ff fe81 	bl	8006916 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	2200      	movs	r2, #0
 8006c18:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006c1c:	e015      	b.n	8006c4a <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c24:	695b      	ldr	r3, [r3, #20]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d00d      	beq.n	8006c46 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006c30:	2b03      	cmp	r3, #3
 8006c32:	d108      	bne.n	8006c46 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c3a:	695b      	ldr	r3, [r3, #20]
 8006c3c:	7afa      	ldrb	r2, [r7, #11]
 8006c3e:	4611      	mov	r1, r2
 8006c40:	68f8      	ldr	r0, [r7, #12]
 8006c42:	4798      	blx	r3
 8006c44:	e001      	b.n	8006c4a <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006c46:	2302      	movs	r3, #2
 8006c48:	e000      	b.n	8006c4c <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8006c4a:	2300      	movs	r3, #0
}
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	3718      	adds	r7, #24
 8006c50:	46bd      	mov	sp, r7
 8006c52:	bd80      	pop	{r7, pc}

08006c54 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b082      	sub	sp, #8
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006c5c:	2340      	movs	r3, #64	; 0x40
 8006c5e:	2200      	movs	r2, #0
 8006c60:	2100      	movs	r1, #0
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	f001 f9cb 	bl	8007ffe <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2201      	movs	r2, #1
 8006c6c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2240      	movs	r2, #64	; 0x40
 8006c74:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006c78:	2340      	movs	r3, #64	; 0x40
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	2180      	movs	r1, #128	; 0x80
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f001 f9bd 	bl	8007ffe <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2201      	movs	r2, #1
 8006c88:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2240      	movs	r2, #64	; 0x40
 8006c8e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2201      	movs	r2, #1
 8006c94:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d009      	beq.n	8006ccc <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006cbe:	685b      	ldr	r3, [r3, #4]
 8006cc0:	687a      	ldr	r2, [r7, #4]
 8006cc2:	6852      	ldr	r2, [r2, #4]
 8006cc4:	b2d2      	uxtb	r2, r2
 8006cc6:	4611      	mov	r1, r2
 8006cc8:	6878      	ldr	r0, [r7, #4]
 8006cca:	4798      	blx	r3
  }

  return USBD_OK;
 8006ccc:	2300      	movs	r3, #0
}
 8006cce:	4618      	mov	r0, r3
 8006cd0:	3708      	adds	r7, #8
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	bd80      	pop	{r7, pc}

08006cd6 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006cd6:	b480      	push	{r7}
 8006cd8:	b083      	sub	sp, #12
 8006cda:	af00      	add	r7, sp, #0
 8006cdc:	6078      	str	r0, [r7, #4]
 8006cde:	460b      	mov	r3, r1
 8006ce0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	78fa      	ldrb	r2, [r7, #3]
 8006ce6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006ce8:	2300      	movs	r3, #0
}
 8006cea:	4618      	mov	r0, r3
 8006cec:	370c      	adds	r7, #12
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	bc80      	pop	{r7}
 8006cf2:	4770      	bx	lr

08006cf4 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b083      	sub	sp, #12
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2204      	movs	r2, #4
 8006d0c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006d10:	2300      	movs	r3, #0
}
 8006d12:	4618      	mov	r0, r3
 8006d14:	370c      	adds	r7, #12
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bc80      	pop	{r7}
 8006d1a:	4770      	bx	lr

08006d1c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	b083      	sub	sp, #12
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d2a:	2b04      	cmp	r3, #4
 8006d2c:	d105      	bne.n	8006d3a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006d3a:	2300      	movs	r3, #0
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	370c      	adds	r7, #12
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bc80      	pop	{r7}
 8006d44:	4770      	bx	lr

08006d46 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006d46:	b580      	push	{r7, lr}
 8006d48:	b082      	sub	sp, #8
 8006d4a:	af00      	add	r7, sp, #0
 8006d4c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d54:	2b03      	cmp	r3, #3
 8006d56:	d10b      	bne.n	8006d70 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d5e:	69db      	ldr	r3, [r3, #28]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d005      	beq.n	8006d70 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d6a:	69db      	ldr	r3, [r3, #28]
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006d70:	2300      	movs	r3, #0
}
 8006d72:	4618      	mov	r0, r3
 8006d74:	3708      	adds	r7, #8
 8006d76:	46bd      	mov	sp, r7
 8006d78:	bd80      	pop	{r7, pc}
	...

08006d7c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b084      	sub	sp, #16
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
 8006d84:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006d86:	2300      	movs	r3, #0
 8006d88:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	781b      	ldrb	r3, [r3, #0]
 8006d8e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006d92:	2b40      	cmp	r3, #64	; 0x40
 8006d94:	d005      	beq.n	8006da2 <USBD_StdDevReq+0x26>
 8006d96:	2b40      	cmp	r3, #64	; 0x40
 8006d98:	d84f      	bhi.n	8006e3a <USBD_StdDevReq+0xbe>
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d009      	beq.n	8006db2 <USBD_StdDevReq+0x36>
 8006d9e:	2b20      	cmp	r3, #32
 8006da0:	d14b      	bne.n	8006e3a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006da8:	689b      	ldr	r3, [r3, #8]
 8006daa:	6839      	ldr	r1, [r7, #0]
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	4798      	blx	r3
      break;
 8006db0:	e048      	b.n	8006e44 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	785b      	ldrb	r3, [r3, #1]
 8006db6:	2b09      	cmp	r3, #9
 8006db8:	d839      	bhi.n	8006e2e <USBD_StdDevReq+0xb2>
 8006dba:	a201      	add	r2, pc, #4	; (adr r2, 8006dc0 <USBD_StdDevReq+0x44>)
 8006dbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dc0:	08006e11 	.word	0x08006e11
 8006dc4:	08006e25 	.word	0x08006e25
 8006dc8:	08006e2f 	.word	0x08006e2f
 8006dcc:	08006e1b 	.word	0x08006e1b
 8006dd0:	08006e2f 	.word	0x08006e2f
 8006dd4:	08006df3 	.word	0x08006df3
 8006dd8:	08006de9 	.word	0x08006de9
 8006ddc:	08006e2f 	.word	0x08006e2f
 8006de0:	08006e07 	.word	0x08006e07
 8006de4:	08006dfd 	.word	0x08006dfd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006de8:	6839      	ldr	r1, [r7, #0]
 8006dea:	6878      	ldr	r0, [r7, #4]
 8006dec:	f000 f9dc 	bl	80071a8 <USBD_GetDescriptor>
          break;
 8006df0:	e022      	b.n	8006e38 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006df2:	6839      	ldr	r1, [r7, #0]
 8006df4:	6878      	ldr	r0, [r7, #4]
 8006df6:	f000 fb3f 	bl	8007478 <USBD_SetAddress>
          break;
 8006dfa:	e01d      	b.n	8006e38 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8006dfc:	6839      	ldr	r1, [r7, #0]
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f000 fb7e 	bl	8007500 <USBD_SetConfig>
          break;
 8006e04:	e018      	b.n	8006e38 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006e06:	6839      	ldr	r1, [r7, #0]
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	f000 fc07 	bl	800761c <USBD_GetConfig>
          break;
 8006e0e:	e013      	b.n	8006e38 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006e10:	6839      	ldr	r1, [r7, #0]
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f000 fc37 	bl	8007686 <USBD_GetStatus>
          break;
 8006e18:	e00e      	b.n	8006e38 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006e1a:	6839      	ldr	r1, [r7, #0]
 8006e1c:	6878      	ldr	r0, [r7, #4]
 8006e1e:	f000 fc65 	bl	80076ec <USBD_SetFeature>
          break;
 8006e22:	e009      	b.n	8006e38 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006e24:	6839      	ldr	r1, [r7, #0]
 8006e26:	6878      	ldr	r0, [r7, #4]
 8006e28:	f000 fc74 	bl	8007714 <USBD_ClrFeature>
          break;
 8006e2c:	e004      	b.n	8006e38 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8006e2e:	6839      	ldr	r1, [r7, #0]
 8006e30:	6878      	ldr	r0, [r7, #4]
 8006e32:	f000 fccc 	bl	80077ce <USBD_CtlError>
          break;
 8006e36:	bf00      	nop
      }
      break;
 8006e38:	e004      	b.n	8006e44 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8006e3a:	6839      	ldr	r1, [r7, #0]
 8006e3c:	6878      	ldr	r0, [r7, #4]
 8006e3e:	f000 fcc6 	bl	80077ce <USBD_CtlError>
      break;
 8006e42:	bf00      	nop
  }

  return ret;
 8006e44:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e46:	4618      	mov	r0, r3
 8006e48:	3710      	adds	r7, #16
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	bd80      	pop	{r7, pc}
 8006e4e:	bf00      	nop

08006e50 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b084      	sub	sp, #16
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
 8006e58:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	781b      	ldrb	r3, [r3, #0]
 8006e62:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006e66:	2b40      	cmp	r3, #64	; 0x40
 8006e68:	d005      	beq.n	8006e76 <USBD_StdItfReq+0x26>
 8006e6a:	2b40      	cmp	r3, #64	; 0x40
 8006e6c:	d82e      	bhi.n	8006ecc <USBD_StdItfReq+0x7c>
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d001      	beq.n	8006e76 <USBD_StdItfReq+0x26>
 8006e72:	2b20      	cmp	r3, #32
 8006e74:	d12a      	bne.n	8006ecc <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e7c:	3b01      	subs	r3, #1
 8006e7e:	2b02      	cmp	r3, #2
 8006e80:	d81d      	bhi.n	8006ebe <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	889b      	ldrh	r3, [r3, #4]
 8006e86:	b2db      	uxtb	r3, r3
 8006e88:	2b01      	cmp	r3, #1
 8006e8a:	d813      	bhi.n	8006eb4 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e92:	689b      	ldr	r3, [r3, #8]
 8006e94:	6839      	ldr	r1, [r7, #0]
 8006e96:	6878      	ldr	r0, [r7, #4]
 8006e98:	4798      	blx	r3
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	88db      	ldrh	r3, [r3, #6]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d110      	bne.n	8006ec8 <USBD_StdItfReq+0x78>
 8006ea6:	7bfb      	ldrb	r3, [r7, #15]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d10d      	bne.n	8006ec8 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8006eac:	6878      	ldr	r0, [r7, #4]
 8006eae:	f000 fd56 	bl	800795e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006eb2:	e009      	b.n	8006ec8 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8006eb4:	6839      	ldr	r1, [r7, #0]
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	f000 fc89 	bl	80077ce <USBD_CtlError>
          break;
 8006ebc:	e004      	b.n	8006ec8 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8006ebe:	6839      	ldr	r1, [r7, #0]
 8006ec0:	6878      	ldr	r0, [r7, #4]
 8006ec2:	f000 fc84 	bl	80077ce <USBD_CtlError>
          break;
 8006ec6:	e000      	b.n	8006eca <USBD_StdItfReq+0x7a>
          break;
 8006ec8:	bf00      	nop
      }
      break;
 8006eca:	e004      	b.n	8006ed6 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8006ecc:	6839      	ldr	r1, [r7, #0]
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	f000 fc7d 	bl	80077ce <USBD_CtlError>
      break;
 8006ed4:	bf00      	nop
  }

  return USBD_OK;
 8006ed6:	2300      	movs	r3, #0
}
 8006ed8:	4618      	mov	r0, r3
 8006eda:	3710      	adds	r7, #16
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bd80      	pop	{r7, pc}

08006ee0 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b084      	sub	sp, #16
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
 8006ee8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006eea:	2300      	movs	r3, #0
 8006eec:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	889b      	ldrh	r3, [r3, #4]
 8006ef2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	781b      	ldrb	r3, [r3, #0]
 8006ef8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006efc:	2b40      	cmp	r3, #64	; 0x40
 8006efe:	d007      	beq.n	8006f10 <USBD_StdEPReq+0x30>
 8006f00:	2b40      	cmp	r3, #64	; 0x40
 8006f02:	f200 8146 	bhi.w	8007192 <USBD_StdEPReq+0x2b2>
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d00a      	beq.n	8006f20 <USBD_StdEPReq+0x40>
 8006f0a:	2b20      	cmp	r3, #32
 8006f0c:	f040 8141 	bne.w	8007192 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f16:	689b      	ldr	r3, [r3, #8]
 8006f18:	6839      	ldr	r1, [r7, #0]
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	4798      	blx	r3
      break;
 8006f1e:	e13d      	b.n	800719c <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	781b      	ldrb	r3, [r3, #0]
 8006f24:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006f28:	2b20      	cmp	r3, #32
 8006f2a:	d10a      	bne.n	8006f42 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f32:	689b      	ldr	r3, [r3, #8]
 8006f34:	6839      	ldr	r1, [r7, #0]
 8006f36:	6878      	ldr	r0, [r7, #4]
 8006f38:	4798      	blx	r3
 8006f3a:	4603      	mov	r3, r0
 8006f3c:	73fb      	strb	r3, [r7, #15]

        return ret;
 8006f3e:	7bfb      	ldrb	r3, [r7, #15]
 8006f40:	e12d      	b.n	800719e <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	785b      	ldrb	r3, [r3, #1]
 8006f46:	2b03      	cmp	r3, #3
 8006f48:	d007      	beq.n	8006f5a <USBD_StdEPReq+0x7a>
 8006f4a:	2b03      	cmp	r3, #3
 8006f4c:	f300 811b 	bgt.w	8007186 <USBD_StdEPReq+0x2a6>
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d072      	beq.n	800703a <USBD_StdEPReq+0x15a>
 8006f54:	2b01      	cmp	r3, #1
 8006f56:	d03a      	beq.n	8006fce <USBD_StdEPReq+0xee>
 8006f58:	e115      	b.n	8007186 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f60:	2b02      	cmp	r3, #2
 8006f62:	d002      	beq.n	8006f6a <USBD_StdEPReq+0x8a>
 8006f64:	2b03      	cmp	r3, #3
 8006f66:	d015      	beq.n	8006f94 <USBD_StdEPReq+0xb4>
 8006f68:	e02b      	b.n	8006fc2 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006f6a:	7bbb      	ldrb	r3, [r7, #14]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d00c      	beq.n	8006f8a <USBD_StdEPReq+0xaa>
 8006f70:	7bbb      	ldrb	r3, [r7, #14]
 8006f72:	2b80      	cmp	r3, #128	; 0x80
 8006f74:	d009      	beq.n	8006f8a <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006f76:	7bbb      	ldrb	r3, [r7, #14]
 8006f78:	4619      	mov	r1, r3
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	f001 f884 	bl	8008088 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006f80:	2180      	movs	r1, #128	; 0x80
 8006f82:	6878      	ldr	r0, [r7, #4]
 8006f84:	f001 f880 	bl	8008088 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006f88:	e020      	b.n	8006fcc <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8006f8a:	6839      	ldr	r1, [r7, #0]
 8006f8c:	6878      	ldr	r0, [r7, #4]
 8006f8e:	f000 fc1e 	bl	80077ce <USBD_CtlError>
              break;
 8006f92:	e01b      	b.n	8006fcc <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	885b      	ldrh	r3, [r3, #2]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d10e      	bne.n	8006fba <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8006f9c:	7bbb      	ldrb	r3, [r7, #14]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d00b      	beq.n	8006fba <USBD_StdEPReq+0xda>
 8006fa2:	7bbb      	ldrb	r3, [r7, #14]
 8006fa4:	2b80      	cmp	r3, #128	; 0x80
 8006fa6:	d008      	beq.n	8006fba <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	88db      	ldrh	r3, [r3, #6]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d104      	bne.n	8006fba <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8006fb0:	7bbb      	ldrb	r3, [r7, #14]
 8006fb2:	4619      	mov	r1, r3
 8006fb4:	6878      	ldr	r0, [r7, #4]
 8006fb6:	f001 f867 	bl	8008088 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	f000 fccf 	bl	800795e <USBD_CtlSendStatus>

              break;
 8006fc0:	e004      	b.n	8006fcc <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8006fc2:	6839      	ldr	r1, [r7, #0]
 8006fc4:	6878      	ldr	r0, [r7, #4]
 8006fc6:	f000 fc02 	bl	80077ce <USBD_CtlError>
              break;
 8006fca:	bf00      	nop
          }
          break;
 8006fcc:	e0e0      	b.n	8007190 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fd4:	2b02      	cmp	r3, #2
 8006fd6:	d002      	beq.n	8006fde <USBD_StdEPReq+0xfe>
 8006fd8:	2b03      	cmp	r3, #3
 8006fda:	d015      	beq.n	8007008 <USBD_StdEPReq+0x128>
 8006fdc:	e026      	b.n	800702c <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006fde:	7bbb      	ldrb	r3, [r7, #14]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d00c      	beq.n	8006ffe <USBD_StdEPReq+0x11e>
 8006fe4:	7bbb      	ldrb	r3, [r7, #14]
 8006fe6:	2b80      	cmp	r3, #128	; 0x80
 8006fe8:	d009      	beq.n	8006ffe <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006fea:	7bbb      	ldrb	r3, [r7, #14]
 8006fec:	4619      	mov	r1, r3
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	f001 f84a 	bl	8008088 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006ff4:	2180      	movs	r1, #128	; 0x80
 8006ff6:	6878      	ldr	r0, [r7, #4]
 8006ff8:	f001 f846 	bl	8008088 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006ffc:	e01c      	b.n	8007038 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8006ffe:	6839      	ldr	r1, [r7, #0]
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	f000 fbe4 	bl	80077ce <USBD_CtlError>
              break;
 8007006:	e017      	b.n	8007038 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	885b      	ldrh	r3, [r3, #2]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d112      	bne.n	8007036 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007010:	7bbb      	ldrb	r3, [r7, #14]
 8007012:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007016:	2b00      	cmp	r3, #0
 8007018:	d004      	beq.n	8007024 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800701a:	7bbb      	ldrb	r3, [r7, #14]
 800701c:	4619      	mov	r1, r3
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	f001 f851 	bl	80080c6 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007024:	6878      	ldr	r0, [r7, #4]
 8007026:	f000 fc9a 	bl	800795e <USBD_CtlSendStatus>
              }
              break;
 800702a:	e004      	b.n	8007036 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800702c:	6839      	ldr	r1, [r7, #0]
 800702e:	6878      	ldr	r0, [r7, #4]
 8007030:	f000 fbcd 	bl	80077ce <USBD_CtlError>
              break;
 8007034:	e000      	b.n	8007038 <USBD_StdEPReq+0x158>
              break;
 8007036:	bf00      	nop
          }
          break;
 8007038:	e0aa      	b.n	8007190 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007040:	2b02      	cmp	r3, #2
 8007042:	d002      	beq.n	800704a <USBD_StdEPReq+0x16a>
 8007044:	2b03      	cmp	r3, #3
 8007046:	d032      	beq.n	80070ae <USBD_StdEPReq+0x1ce>
 8007048:	e097      	b.n	800717a <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800704a:	7bbb      	ldrb	r3, [r7, #14]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d007      	beq.n	8007060 <USBD_StdEPReq+0x180>
 8007050:	7bbb      	ldrb	r3, [r7, #14]
 8007052:	2b80      	cmp	r3, #128	; 0x80
 8007054:	d004      	beq.n	8007060 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8007056:	6839      	ldr	r1, [r7, #0]
 8007058:	6878      	ldr	r0, [r7, #4]
 800705a:	f000 fbb8 	bl	80077ce <USBD_CtlError>
                break;
 800705e:	e091      	b.n	8007184 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007060:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007064:	2b00      	cmp	r3, #0
 8007066:	da0b      	bge.n	8007080 <USBD_StdEPReq+0x1a0>
 8007068:	7bbb      	ldrb	r3, [r7, #14]
 800706a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800706e:	4613      	mov	r3, r2
 8007070:	009b      	lsls	r3, r3, #2
 8007072:	4413      	add	r3, r2
 8007074:	009b      	lsls	r3, r3, #2
 8007076:	3310      	adds	r3, #16
 8007078:	687a      	ldr	r2, [r7, #4]
 800707a:	4413      	add	r3, r2
 800707c:	3304      	adds	r3, #4
 800707e:	e00b      	b.n	8007098 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007080:	7bbb      	ldrb	r3, [r7, #14]
 8007082:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007086:	4613      	mov	r3, r2
 8007088:	009b      	lsls	r3, r3, #2
 800708a:	4413      	add	r3, r2
 800708c:	009b      	lsls	r3, r3, #2
 800708e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007092:	687a      	ldr	r2, [r7, #4]
 8007094:	4413      	add	r3, r2
 8007096:	3304      	adds	r3, #4
 8007098:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800709a:	68bb      	ldr	r3, [r7, #8]
 800709c:	2200      	movs	r2, #0
 800709e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	2202      	movs	r2, #2
 80070a4:	4619      	mov	r1, r3
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	f000 fbfb 	bl	80078a2 <USBD_CtlSendData>
              break;
 80070ac:	e06a      	b.n	8007184 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80070ae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	da11      	bge.n	80070da <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80070b6:	7bbb      	ldrb	r3, [r7, #14]
 80070b8:	f003 020f 	and.w	r2, r3, #15
 80070bc:	6879      	ldr	r1, [r7, #4]
 80070be:	4613      	mov	r3, r2
 80070c0:	009b      	lsls	r3, r3, #2
 80070c2:	4413      	add	r3, r2
 80070c4:	009b      	lsls	r3, r3, #2
 80070c6:	440b      	add	r3, r1
 80070c8:	3318      	adds	r3, #24
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d117      	bne.n	8007100 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80070d0:	6839      	ldr	r1, [r7, #0]
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	f000 fb7b 	bl	80077ce <USBD_CtlError>
                  break;
 80070d8:	e054      	b.n	8007184 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80070da:	7bbb      	ldrb	r3, [r7, #14]
 80070dc:	f003 020f 	and.w	r2, r3, #15
 80070e0:	6879      	ldr	r1, [r7, #4]
 80070e2:	4613      	mov	r3, r2
 80070e4:	009b      	lsls	r3, r3, #2
 80070e6:	4413      	add	r3, r2
 80070e8:	009b      	lsls	r3, r3, #2
 80070ea:	440b      	add	r3, r1
 80070ec:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d104      	bne.n	8007100 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80070f6:	6839      	ldr	r1, [r7, #0]
 80070f8:	6878      	ldr	r0, [r7, #4]
 80070fa:	f000 fb68 	bl	80077ce <USBD_CtlError>
                  break;
 80070fe:	e041      	b.n	8007184 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007100:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007104:	2b00      	cmp	r3, #0
 8007106:	da0b      	bge.n	8007120 <USBD_StdEPReq+0x240>
 8007108:	7bbb      	ldrb	r3, [r7, #14]
 800710a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800710e:	4613      	mov	r3, r2
 8007110:	009b      	lsls	r3, r3, #2
 8007112:	4413      	add	r3, r2
 8007114:	009b      	lsls	r3, r3, #2
 8007116:	3310      	adds	r3, #16
 8007118:	687a      	ldr	r2, [r7, #4]
 800711a:	4413      	add	r3, r2
 800711c:	3304      	adds	r3, #4
 800711e:	e00b      	b.n	8007138 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007120:	7bbb      	ldrb	r3, [r7, #14]
 8007122:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007126:	4613      	mov	r3, r2
 8007128:	009b      	lsls	r3, r3, #2
 800712a:	4413      	add	r3, r2
 800712c:	009b      	lsls	r3, r3, #2
 800712e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007132:	687a      	ldr	r2, [r7, #4]
 8007134:	4413      	add	r3, r2
 8007136:	3304      	adds	r3, #4
 8007138:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800713a:	7bbb      	ldrb	r3, [r7, #14]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d002      	beq.n	8007146 <USBD_StdEPReq+0x266>
 8007140:	7bbb      	ldrb	r3, [r7, #14]
 8007142:	2b80      	cmp	r3, #128	; 0x80
 8007144:	d103      	bne.n	800714e <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8007146:	68bb      	ldr	r3, [r7, #8]
 8007148:	2200      	movs	r2, #0
 800714a:	601a      	str	r2, [r3, #0]
 800714c:	e00e      	b.n	800716c <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800714e:	7bbb      	ldrb	r3, [r7, #14]
 8007150:	4619      	mov	r1, r3
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f000 ffd6 	bl	8008104 <USBD_LL_IsStallEP>
 8007158:	4603      	mov	r3, r0
 800715a:	2b00      	cmp	r3, #0
 800715c:	d003      	beq.n	8007166 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800715e:	68bb      	ldr	r3, [r7, #8]
 8007160:	2201      	movs	r2, #1
 8007162:	601a      	str	r2, [r3, #0]
 8007164:	e002      	b.n	800716c <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8007166:	68bb      	ldr	r3, [r7, #8]
 8007168:	2200      	movs	r2, #0
 800716a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	2202      	movs	r2, #2
 8007170:	4619      	mov	r1, r3
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	f000 fb95 	bl	80078a2 <USBD_CtlSendData>
              break;
 8007178:	e004      	b.n	8007184 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800717a:	6839      	ldr	r1, [r7, #0]
 800717c:	6878      	ldr	r0, [r7, #4]
 800717e:	f000 fb26 	bl	80077ce <USBD_CtlError>
              break;
 8007182:	bf00      	nop
          }
          break;
 8007184:	e004      	b.n	8007190 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8007186:	6839      	ldr	r1, [r7, #0]
 8007188:	6878      	ldr	r0, [r7, #4]
 800718a:	f000 fb20 	bl	80077ce <USBD_CtlError>
          break;
 800718e:	bf00      	nop
      }
      break;
 8007190:	e004      	b.n	800719c <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8007192:	6839      	ldr	r1, [r7, #0]
 8007194:	6878      	ldr	r0, [r7, #4]
 8007196:	f000 fb1a 	bl	80077ce <USBD_CtlError>
      break;
 800719a:	bf00      	nop
  }

  return ret;
 800719c:	7bfb      	ldrb	r3, [r7, #15]
}
 800719e:	4618      	mov	r0, r3
 80071a0:	3710      	adds	r7, #16
 80071a2:	46bd      	mov	sp, r7
 80071a4:	bd80      	pop	{r7, pc}
	...

080071a8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b084      	sub	sp, #16
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
 80071b0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80071b2:	2300      	movs	r3, #0
 80071b4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80071b6:	2300      	movs	r3, #0
 80071b8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80071ba:	2300      	movs	r3, #0
 80071bc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	885b      	ldrh	r3, [r3, #2]
 80071c2:	0a1b      	lsrs	r3, r3, #8
 80071c4:	b29b      	uxth	r3, r3
 80071c6:	3b01      	subs	r3, #1
 80071c8:	2b06      	cmp	r3, #6
 80071ca:	f200 8128 	bhi.w	800741e <USBD_GetDescriptor+0x276>
 80071ce:	a201      	add	r2, pc, #4	; (adr r2, 80071d4 <USBD_GetDescriptor+0x2c>)
 80071d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071d4:	080071f1 	.word	0x080071f1
 80071d8:	08007209 	.word	0x08007209
 80071dc:	08007249 	.word	0x08007249
 80071e0:	0800741f 	.word	0x0800741f
 80071e4:	0800741f 	.word	0x0800741f
 80071e8:	080073bf 	.word	0x080073bf
 80071ec:	080073eb 	.word	0x080073eb
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	687a      	ldr	r2, [r7, #4]
 80071fa:	7c12      	ldrb	r2, [r2, #16]
 80071fc:	f107 0108 	add.w	r1, r7, #8
 8007200:	4610      	mov	r0, r2
 8007202:	4798      	blx	r3
 8007204:	60f8      	str	r0, [r7, #12]
      break;
 8007206:	e112      	b.n	800742e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	7c1b      	ldrb	r3, [r3, #16]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d10d      	bne.n	800722c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007218:	f107 0208 	add.w	r2, r7, #8
 800721c:	4610      	mov	r0, r2
 800721e:	4798      	blx	r3
 8007220:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	3301      	adds	r3, #1
 8007226:	2202      	movs	r2, #2
 8007228:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800722a:	e100      	b.n	800742e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007234:	f107 0208 	add.w	r2, r7, #8
 8007238:	4610      	mov	r0, r2
 800723a:	4798      	blx	r3
 800723c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	3301      	adds	r3, #1
 8007242:	2202      	movs	r2, #2
 8007244:	701a      	strb	r2, [r3, #0]
      break;
 8007246:	e0f2      	b.n	800742e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	885b      	ldrh	r3, [r3, #2]
 800724c:	b2db      	uxtb	r3, r3
 800724e:	2b05      	cmp	r3, #5
 8007250:	f200 80ac 	bhi.w	80073ac <USBD_GetDescriptor+0x204>
 8007254:	a201      	add	r2, pc, #4	; (adr r2, 800725c <USBD_GetDescriptor+0xb4>)
 8007256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800725a:	bf00      	nop
 800725c:	08007275 	.word	0x08007275
 8007260:	080072a9 	.word	0x080072a9
 8007264:	080072dd 	.word	0x080072dd
 8007268:	08007311 	.word	0x08007311
 800726c:	08007345 	.word	0x08007345
 8007270:	08007379 	.word	0x08007379
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800727a:	685b      	ldr	r3, [r3, #4]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d00b      	beq.n	8007298 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007286:	685b      	ldr	r3, [r3, #4]
 8007288:	687a      	ldr	r2, [r7, #4]
 800728a:	7c12      	ldrb	r2, [r2, #16]
 800728c:	f107 0108 	add.w	r1, r7, #8
 8007290:	4610      	mov	r0, r2
 8007292:	4798      	blx	r3
 8007294:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007296:	e091      	b.n	80073bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007298:	6839      	ldr	r1, [r7, #0]
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	f000 fa97 	bl	80077ce <USBD_CtlError>
            err++;
 80072a0:	7afb      	ldrb	r3, [r7, #11]
 80072a2:	3301      	adds	r3, #1
 80072a4:	72fb      	strb	r3, [r7, #11]
          break;
 80072a6:	e089      	b.n	80073bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80072ae:	689b      	ldr	r3, [r3, #8]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d00b      	beq.n	80072cc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80072ba:	689b      	ldr	r3, [r3, #8]
 80072bc:	687a      	ldr	r2, [r7, #4]
 80072be:	7c12      	ldrb	r2, [r2, #16]
 80072c0:	f107 0108 	add.w	r1, r7, #8
 80072c4:	4610      	mov	r0, r2
 80072c6:	4798      	blx	r3
 80072c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80072ca:	e077      	b.n	80073bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80072cc:	6839      	ldr	r1, [r7, #0]
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	f000 fa7d 	bl	80077ce <USBD_CtlError>
            err++;
 80072d4:	7afb      	ldrb	r3, [r7, #11]
 80072d6:	3301      	adds	r3, #1
 80072d8:	72fb      	strb	r3, [r7, #11]
          break;
 80072da:	e06f      	b.n	80073bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80072e2:	68db      	ldr	r3, [r3, #12]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d00b      	beq.n	8007300 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80072ee:	68db      	ldr	r3, [r3, #12]
 80072f0:	687a      	ldr	r2, [r7, #4]
 80072f2:	7c12      	ldrb	r2, [r2, #16]
 80072f4:	f107 0108 	add.w	r1, r7, #8
 80072f8:	4610      	mov	r0, r2
 80072fa:	4798      	blx	r3
 80072fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80072fe:	e05d      	b.n	80073bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007300:	6839      	ldr	r1, [r7, #0]
 8007302:	6878      	ldr	r0, [r7, #4]
 8007304:	f000 fa63 	bl	80077ce <USBD_CtlError>
            err++;
 8007308:	7afb      	ldrb	r3, [r7, #11]
 800730a:	3301      	adds	r3, #1
 800730c:	72fb      	strb	r3, [r7, #11]
          break;
 800730e:	e055      	b.n	80073bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007316:	691b      	ldr	r3, [r3, #16]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d00b      	beq.n	8007334 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007322:	691b      	ldr	r3, [r3, #16]
 8007324:	687a      	ldr	r2, [r7, #4]
 8007326:	7c12      	ldrb	r2, [r2, #16]
 8007328:	f107 0108 	add.w	r1, r7, #8
 800732c:	4610      	mov	r0, r2
 800732e:	4798      	blx	r3
 8007330:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007332:	e043      	b.n	80073bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007334:	6839      	ldr	r1, [r7, #0]
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f000 fa49 	bl	80077ce <USBD_CtlError>
            err++;
 800733c:	7afb      	ldrb	r3, [r7, #11]
 800733e:	3301      	adds	r3, #1
 8007340:	72fb      	strb	r3, [r7, #11]
          break;
 8007342:	e03b      	b.n	80073bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800734a:	695b      	ldr	r3, [r3, #20]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d00b      	beq.n	8007368 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007356:	695b      	ldr	r3, [r3, #20]
 8007358:	687a      	ldr	r2, [r7, #4]
 800735a:	7c12      	ldrb	r2, [r2, #16]
 800735c:	f107 0108 	add.w	r1, r7, #8
 8007360:	4610      	mov	r0, r2
 8007362:	4798      	blx	r3
 8007364:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007366:	e029      	b.n	80073bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007368:	6839      	ldr	r1, [r7, #0]
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	f000 fa2f 	bl	80077ce <USBD_CtlError>
            err++;
 8007370:	7afb      	ldrb	r3, [r7, #11]
 8007372:	3301      	adds	r3, #1
 8007374:	72fb      	strb	r3, [r7, #11]
          break;
 8007376:	e021      	b.n	80073bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800737e:	699b      	ldr	r3, [r3, #24]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d00b      	beq.n	800739c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800738a:	699b      	ldr	r3, [r3, #24]
 800738c:	687a      	ldr	r2, [r7, #4]
 800738e:	7c12      	ldrb	r2, [r2, #16]
 8007390:	f107 0108 	add.w	r1, r7, #8
 8007394:	4610      	mov	r0, r2
 8007396:	4798      	blx	r3
 8007398:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800739a:	e00f      	b.n	80073bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800739c:	6839      	ldr	r1, [r7, #0]
 800739e:	6878      	ldr	r0, [r7, #4]
 80073a0:	f000 fa15 	bl	80077ce <USBD_CtlError>
            err++;
 80073a4:	7afb      	ldrb	r3, [r7, #11]
 80073a6:	3301      	adds	r3, #1
 80073a8:	72fb      	strb	r3, [r7, #11]
          break;
 80073aa:	e007      	b.n	80073bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80073ac:	6839      	ldr	r1, [r7, #0]
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	f000 fa0d 	bl	80077ce <USBD_CtlError>
          err++;
 80073b4:	7afb      	ldrb	r3, [r7, #11]
 80073b6:	3301      	adds	r3, #1
 80073b8:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80073ba:	e038      	b.n	800742e <USBD_GetDescriptor+0x286>
 80073bc:	e037      	b.n	800742e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	7c1b      	ldrb	r3, [r3, #16]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d109      	bne.n	80073da <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073ce:	f107 0208 	add.w	r2, r7, #8
 80073d2:	4610      	mov	r0, r2
 80073d4:	4798      	blx	r3
 80073d6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80073d8:	e029      	b.n	800742e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80073da:	6839      	ldr	r1, [r7, #0]
 80073dc:	6878      	ldr	r0, [r7, #4]
 80073de:	f000 f9f6 	bl	80077ce <USBD_CtlError>
        err++;
 80073e2:	7afb      	ldrb	r3, [r7, #11]
 80073e4:	3301      	adds	r3, #1
 80073e6:	72fb      	strb	r3, [r7, #11]
      break;
 80073e8:	e021      	b.n	800742e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	7c1b      	ldrb	r3, [r3, #16]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d10d      	bne.n	800740e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073fa:	f107 0208 	add.w	r2, r7, #8
 80073fe:	4610      	mov	r0, r2
 8007400:	4798      	blx	r3
 8007402:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	3301      	adds	r3, #1
 8007408:	2207      	movs	r2, #7
 800740a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800740c:	e00f      	b.n	800742e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800740e:	6839      	ldr	r1, [r7, #0]
 8007410:	6878      	ldr	r0, [r7, #4]
 8007412:	f000 f9dc 	bl	80077ce <USBD_CtlError>
        err++;
 8007416:	7afb      	ldrb	r3, [r7, #11]
 8007418:	3301      	adds	r3, #1
 800741a:	72fb      	strb	r3, [r7, #11]
      break;
 800741c:	e007      	b.n	800742e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800741e:	6839      	ldr	r1, [r7, #0]
 8007420:	6878      	ldr	r0, [r7, #4]
 8007422:	f000 f9d4 	bl	80077ce <USBD_CtlError>
      err++;
 8007426:	7afb      	ldrb	r3, [r7, #11]
 8007428:	3301      	adds	r3, #1
 800742a:	72fb      	strb	r3, [r7, #11]
      break;
 800742c:	bf00      	nop
  }

  if (err != 0U)
 800742e:	7afb      	ldrb	r3, [r7, #11]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d11c      	bne.n	800746e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007434:	893b      	ldrh	r3, [r7, #8]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d011      	beq.n	800745e <USBD_GetDescriptor+0x2b6>
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	88db      	ldrh	r3, [r3, #6]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d00d      	beq.n	800745e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	88da      	ldrh	r2, [r3, #6]
 8007446:	893b      	ldrh	r3, [r7, #8]
 8007448:	4293      	cmp	r3, r2
 800744a:	bf28      	it	cs
 800744c:	4613      	movcs	r3, r2
 800744e:	b29b      	uxth	r3, r3
 8007450:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007452:	893b      	ldrh	r3, [r7, #8]
 8007454:	461a      	mov	r2, r3
 8007456:	68f9      	ldr	r1, [r7, #12]
 8007458:	6878      	ldr	r0, [r7, #4]
 800745a:	f000 fa22 	bl	80078a2 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	88db      	ldrh	r3, [r3, #6]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d104      	bne.n	8007470 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f000 fa79 	bl	800795e <USBD_CtlSendStatus>
 800746c:	e000      	b.n	8007470 <USBD_GetDescriptor+0x2c8>
    return;
 800746e:	bf00      	nop
    }
  }
}
 8007470:	3710      	adds	r7, #16
 8007472:	46bd      	mov	sp, r7
 8007474:	bd80      	pop	{r7, pc}
 8007476:	bf00      	nop

08007478 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b084      	sub	sp, #16
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
 8007480:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	889b      	ldrh	r3, [r3, #4]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d130      	bne.n	80074ec <USBD_SetAddress+0x74>
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	88db      	ldrh	r3, [r3, #6]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d12c      	bne.n	80074ec <USBD_SetAddress+0x74>
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	885b      	ldrh	r3, [r3, #2]
 8007496:	2b7f      	cmp	r3, #127	; 0x7f
 8007498:	d828      	bhi.n	80074ec <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	885b      	ldrh	r3, [r3, #2]
 800749e:	b2db      	uxtb	r3, r3
 80074a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074a4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074ac:	2b03      	cmp	r3, #3
 80074ae:	d104      	bne.n	80074ba <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80074b0:	6839      	ldr	r1, [r7, #0]
 80074b2:	6878      	ldr	r0, [r7, #4]
 80074b4:	f000 f98b 	bl	80077ce <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074b8:	e01d      	b.n	80074f6 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	7bfa      	ldrb	r2, [r7, #15]
 80074be:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80074c2:	7bfb      	ldrb	r3, [r7, #15]
 80074c4:	4619      	mov	r1, r3
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f000 fe48 	bl	800815c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80074cc:	6878      	ldr	r0, [r7, #4]
 80074ce:	f000 fa46 	bl	800795e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80074d2:	7bfb      	ldrb	r3, [r7, #15]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d004      	beq.n	80074e2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2202      	movs	r2, #2
 80074dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074e0:	e009      	b.n	80074f6 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2201      	movs	r2, #1
 80074e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074ea:	e004      	b.n	80074f6 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80074ec:	6839      	ldr	r1, [r7, #0]
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	f000 f96d 	bl	80077ce <USBD_CtlError>
  }
}
 80074f4:	bf00      	nop
 80074f6:	bf00      	nop
 80074f8:	3710      	adds	r7, #16
 80074fa:	46bd      	mov	sp, r7
 80074fc:	bd80      	pop	{r7, pc}
	...

08007500 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b082      	sub	sp, #8
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
 8007508:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	885b      	ldrh	r3, [r3, #2]
 800750e:	b2da      	uxtb	r2, r3
 8007510:	4b41      	ldr	r3, [pc, #260]	; (8007618 <USBD_SetConfig+0x118>)
 8007512:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007514:	4b40      	ldr	r3, [pc, #256]	; (8007618 <USBD_SetConfig+0x118>)
 8007516:	781b      	ldrb	r3, [r3, #0]
 8007518:	2b01      	cmp	r3, #1
 800751a:	d904      	bls.n	8007526 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800751c:	6839      	ldr	r1, [r7, #0]
 800751e:	6878      	ldr	r0, [r7, #4]
 8007520:	f000 f955 	bl	80077ce <USBD_CtlError>
 8007524:	e075      	b.n	8007612 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800752c:	2b02      	cmp	r3, #2
 800752e:	d002      	beq.n	8007536 <USBD_SetConfig+0x36>
 8007530:	2b03      	cmp	r3, #3
 8007532:	d023      	beq.n	800757c <USBD_SetConfig+0x7c>
 8007534:	e062      	b.n	80075fc <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007536:	4b38      	ldr	r3, [pc, #224]	; (8007618 <USBD_SetConfig+0x118>)
 8007538:	781b      	ldrb	r3, [r3, #0]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d01a      	beq.n	8007574 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800753e:	4b36      	ldr	r3, [pc, #216]	; (8007618 <USBD_SetConfig+0x118>)
 8007540:	781b      	ldrb	r3, [r3, #0]
 8007542:	461a      	mov	r2, r3
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2203      	movs	r2, #3
 800754c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007550:	4b31      	ldr	r3, [pc, #196]	; (8007618 <USBD_SetConfig+0x118>)
 8007552:	781b      	ldrb	r3, [r3, #0]
 8007554:	4619      	mov	r1, r3
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	f7ff f9e7 	bl	800692a <USBD_SetClassConfig>
 800755c:	4603      	mov	r3, r0
 800755e:	2b02      	cmp	r3, #2
 8007560:	d104      	bne.n	800756c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8007562:	6839      	ldr	r1, [r7, #0]
 8007564:	6878      	ldr	r0, [r7, #4]
 8007566:	f000 f932 	bl	80077ce <USBD_CtlError>
            return;
 800756a:	e052      	b.n	8007612 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800756c:	6878      	ldr	r0, [r7, #4]
 800756e:	f000 f9f6 	bl	800795e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007572:	e04e      	b.n	8007612 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007574:	6878      	ldr	r0, [r7, #4]
 8007576:	f000 f9f2 	bl	800795e <USBD_CtlSendStatus>
        break;
 800757a:	e04a      	b.n	8007612 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800757c:	4b26      	ldr	r3, [pc, #152]	; (8007618 <USBD_SetConfig+0x118>)
 800757e:	781b      	ldrb	r3, [r3, #0]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d112      	bne.n	80075aa <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2202      	movs	r2, #2
 8007588:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800758c:	4b22      	ldr	r3, [pc, #136]	; (8007618 <USBD_SetConfig+0x118>)
 800758e:	781b      	ldrb	r3, [r3, #0]
 8007590:	461a      	mov	r2, r3
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8007596:	4b20      	ldr	r3, [pc, #128]	; (8007618 <USBD_SetConfig+0x118>)
 8007598:	781b      	ldrb	r3, [r3, #0]
 800759a:	4619      	mov	r1, r3
 800759c:	6878      	ldr	r0, [r7, #4]
 800759e:	f7ff f9e3 	bl	8006968 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	f000 f9db 	bl	800795e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80075a8:	e033      	b.n	8007612 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80075aa:	4b1b      	ldr	r3, [pc, #108]	; (8007618 <USBD_SetConfig+0x118>)
 80075ac:	781b      	ldrb	r3, [r3, #0]
 80075ae:	461a      	mov	r2, r3
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	685b      	ldr	r3, [r3, #4]
 80075b4:	429a      	cmp	r2, r3
 80075b6:	d01d      	beq.n	80075f4 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	685b      	ldr	r3, [r3, #4]
 80075bc:	b2db      	uxtb	r3, r3
 80075be:	4619      	mov	r1, r3
 80075c0:	6878      	ldr	r0, [r7, #4]
 80075c2:	f7ff f9d1 	bl	8006968 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80075c6:	4b14      	ldr	r3, [pc, #80]	; (8007618 <USBD_SetConfig+0x118>)
 80075c8:	781b      	ldrb	r3, [r3, #0]
 80075ca:	461a      	mov	r2, r3
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80075d0:	4b11      	ldr	r3, [pc, #68]	; (8007618 <USBD_SetConfig+0x118>)
 80075d2:	781b      	ldrb	r3, [r3, #0]
 80075d4:	4619      	mov	r1, r3
 80075d6:	6878      	ldr	r0, [r7, #4]
 80075d8:	f7ff f9a7 	bl	800692a <USBD_SetClassConfig>
 80075dc:	4603      	mov	r3, r0
 80075de:	2b02      	cmp	r3, #2
 80075e0:	d104      	bne.n	80075ec <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80075e2:	6839      	ldr	r1, [r7, #0]
 80075e4:	6878      	ldr	r0, [r7, #4]
 80075e6:	f000 f8f2 	bl	80077ce <USBD_CtlError>
            return;
 80075ea:	e012      	b.n	8007612 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80075ec:	6878      	ldr	r0, [r7, #4]
 80075ee:	f000 f9b6 	bl	800795e <USBD_CtlSendStatus>
        break;
 80075f2:	e00e      	b.n	8007612 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80075f4:	6878      	ldr	r0, [r7, #4]
 80075f6:	f000 f9b2 	bl	800795e <USBD_CtlSendStatus>
        break;
 80075fa:	e00a      	b.n	8007612 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80075fc:	6839      	ldr	r1, [r7, #0]
 80075fe:	6878      	ldr	r0, [r7, #4]
 8007600:	f000 f8e5 	bl	80077ce <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007604:	4b04      	ldr	r3, [pc, #16]	; (8007618 <USBD_SetConfig+0x118>)
 8007606:	781b      	ldrb	r3, [r3, #0]
 8007608:	4619      	mov	r1, r3
 800760a:	6878      	ldr	r0, [r7, #4]
 800760c:	f7ff f9ac 	bl	8006968 <USBD_ClrClassConfig>
        break;
 8007610:	bf00      	nop
    }
  }
}
 8007612:	3708      	adds	r7, #8
 8007614:	46bd      	mov	sp, r7
 8007616:	bd80      	pop	{r7, pc}
 8007618:	20000290 	.word	0x20000290

0800761c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b082      	sub	sp, #8
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
 8007624:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	88db      	ldrh	r3, [r3, #6]
 800762a:	2b01      	cmp	r3, #1
 800762c:	d004      	beq.n	8007638 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800762e:	6839      	ldr	r1, [r7, #0]
 8007630:	6878      	ldr	r0, [r7, #4]
 8007632:	f000 f8cc 	bl	80077ce <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007636:	e022      	b.n	800767e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800763e:	2b02      	cmp	r3, #2
 8007640:	dc02      	bgt.n	8007648 <USBD_GetConfig+0x2c>
 8007642:	2b00      	cmp	r3, #0
 8007644:	dc03      	bgt.n	800764e <USBD_GetConfig+0x32>
 8007646:	e015      	b.n	8007674 <USBD_GetConfig+0x58>
 8007648:	2b03      	cmp	r3, #3
 800764a:	d00b      	beq.n	8007664 <USBD_GetConfig+0x48>
 800764c:	e012      	b.n	8007674 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2200      	movs	r2, #0
 8007652:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	3308      	adds	r3, #8
 8007658:	2201      	movs	r2, #1
 800765a:	4619      	mov	r1, r3
 800765c:	6878      	ldr	r0, [r7, #4]
 800765e:	f000 f920 	bl	80078a2 <USBD_CtlSendData>
        break;
 8007662:	e00c      	b.n	800767e <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	3304      	adds	r3, #4
 8007668:	2201      	movs	r2, #1
 800766a:	4619      	mov	r1, r3
 800766c:	6878      	ldr	r0, [r7, #4]
 800766e:	f000 f918 	bl	80078a2 <USBD_CtlSendData>
        break;
 8007672:	e004      	b.n	800767e <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8007674:	6839      	ldr	r1, [r7, #0]
 8007676:	6878      	ldr	r0, [r7, #4]
 8007678:	f000 f8a9 	bl	80077ce <USBD_CtlError>
        break;
 800767c:	bf00      	nop
}
 800767e:	bf00      	nop
 8007680:	3708      	adds	r7, #8
 8007682:	46bd      	mov	sp, r7
 8007684:	bd80      	pop	{r7, pc}

08007686 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007686:	b580      	push	{r7, lr}
 8007688:	b082      	sub	sp, #8
 800768a:	af00      	add	r7, sp, #0
 800768c:	6078      	str	r0, [r7, #4]
 800768e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007696:	3b01      	subs	r3, #1
 8007698:	2b02      	cmp	r3, #2
 800769a:	d81e      	bhi.n	80076da <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	88db      	ldrh	r3, [r3, #6]
 80076a0:	2b02      	cmp	r3, #2
 80076a2:	d004      	beq.n	80076ae <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80076a4:	6839      	ldr	r1, [r7, #0]
 80076a6:	6878      	ldr	r0, [r7, #4]
 80076a8:	f000 f891 	bl	80077ce <USBD_CtlError>
        break;
 80076ac:	e01a      	b.n	80076e4 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2201      	movs	r2, #1
 80076b2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d005      	beq.n	80076ca <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	68db      	ldr	r3, [r3, #12]
 80076c2:	f043 0202 	orr.w	r2, r3, #2
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	330c      	adds	r3, #12
 80076ce:	2202      	movs	r2, #2
 80076d0:	4619      	mov	r1, r3
 80076d2:	6878      	ldr	r0, [r7, #4]
 80076d4:	f000 f8e5 	bl	80078a2 <USBD_CtlSendData>
      break;
 80076d8:	e004      	b.n	80076e4 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80076da:	6839      	ldr	r1, [r7, #0]
 80076dc:	6878      	ldr	r0, [r7, #4]
 80076de:	f000 f876 	bl	80077ce <USBD_CtlError>
      break;
 80076e2:	bf00      	nop
  }
}
 80076e4:	bf00      	nop
 80076e6:	3708      	adds	r7, #8
 80076e8:	46bd      	mov	sp, r7
 80076ea:	bd80      	pop	{r7, pc}

080076ec <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b082      	sub	sp, #8
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
 80076f4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	885b      	ldrh	r3, [r3, #2]
 80076fa:	2b01      	cmp	r3, #1
 80076fc:	d106      	bne.n	800770c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2201      	movs	r2, #1
 8007702:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	f000 f929 	bl	800795e <USBD_CtlSendStatus>
  }
}
 800770c:	bf00      	nop
 800770e:	3708      	adds	r7, #8
 8007710:	46bd      	mov	sp, r7
 8007712:	bd80      	pop	{r7, pc}

08007714 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b082      	sub	sp, #8
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
 800771c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007724:	3b01      	subs	r3, #1
 8007726:	2b02      	cmp	r3, #2
 8007728:	d80b      	bhi.n	8007742 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	885b      	ldrh	r3, [r3, #2]
 800772e:	2b01      	cmp	r3, #1
 8007730:	d10c      	bne.n	800774c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2200      	movs	r2, #0
 8007736:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	f000 f90f 	bl	800795e <USBD_CtlSendStatus>
      }
      break;
 8007740:	e004      	b.n	800774c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007742:	6839      	ldr	r1, [r7, #0]
 8007744:	6878      	ldr	r0, [r7, #4]
 8007746:	f000 f842 	bl	80077ce <USBD_CtlError>
      break;
 800774a:	e000      	b.n	800774e <USBD_ClrFeature+0x3a>
      break;
 800774c:	bf00      	nop
  }
}
 800774e:	bf00      	nop
 8007750:	3708      	adds	r7, #8
 8007752:	46bd      	mov	sp, r7
 8007754:	bd80      	pop	{r7, pc}

08007756 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007756:	b480      	push	{r7}
 8007758:	b083      	sub	sp, #12
 800775a:	af00      	add	r7, sp, #0
 800775c:	6078      	str	r0, [r7, #4]
 800775e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	781a      	ldrb	r2, [r3, #0]
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	785a      	ldrb	r2, [r3, #1]
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	3302      	adds	r3, #2
 8007774:	781b      	ldrb	r3, [r3, #0]
 8007776:	b29a      	uxth	r2, r3
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	3303      	adds	r3, #3
 800777c:	781b      	ldrb	r3, [r3, #0]
 800777e:	b29b      	uxth	r3, r3
 8007780:	021b      	lsls	r3, r3, #8
 8007782:	b29b      	uxth	r3, r3
 8007784:	4413      	add	r3, r2
 8007786:	b29a      	uxth	r2, r3
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	3304      	adds	r3, #4
 8007790:	781b      	ldrb	r3, [r3, #0]
 8007792:	b29a      	uxth	r2, r3
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	3305      	adds	r3, #5
 8007798:	781b      	ldrb	r3, [r3, #0]
 800779a:	b29b      	uxth	r3, r3
 800779c:	021b      	lsls	r3, r3, #8
 800779e:	b29b      	uxth	r3, r3
 80077a0:	4413      	add	r3, r2
 80077a2:	b29a      	uxth	r2, r3
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	3306      	adds	r3, #6
 80077ac:	781b      	ldrb	r3, [r3, #0]
 80077ae:	b29a      	uxth	r2, r3
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	3307      	adds	r3, #7
 80077b4:	781b      	ldrb	r3, [r3, #0]
 80077b6:	b29b      	uxth	r3, r3
 80077b8:	021b      	lsls	r3, r3, #8
 80077ba:	b29b      	uxth	r3, r3
 80077bc:	4413      	add	r3, r2
 80077be:	b29a      	uxth	r2, r3
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	80da      	strh	r2, [r3, #6]

}
 80077c4:	bf00      	nop
 80077c6:	370c      	adds	r7, #12
 80077c8:	46bd      	mov	sp, r7
 80077ca:	bc80      	pop	{r7}
 80077cc:	4770      	bx	lr

080077ce <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80077ce:	b580      	push	{r7, lr}
 80077d0:	b082      	sub	sp, #8
 80077d2:	af00      	add	r7, sp, #0
 80077d4:	6078      	str	r0, [r7, #4]
 80077d6:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80077d8:	2180      	movs	r1, #128	; 0x80
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	f000 fc54 	bl	8008088 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80077e0:	2100      	movs	r1, #0
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	f000 fc50 	bl	8008088 <USBD_LL_StallEP>
}
 80077e8:	bf00      	nop
 80077ea:	3708      	adds	r7, #8
 80077ec:	46bd      	mov	sp, r7
 80077ee:	bd80      	pop	{r7, pc}

080077f0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b086      	sub	sp, #24
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	60f8      	str	r0, [r7, #12]
 80077f8:	60b9      	str	r1, [r7, #8]
 80077fa:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80077fc:	2300      	movs	r3, #0
 80077fe:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d032      	beq.n	800786c <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007806:	68f8      	ldr	r0, [r7, #12]
 8007808:	f000 f834 	bl	8007874 <USBD_GetLen>
 800780c:	4603      	mov	r3, r0
 800780e:	3301      	adds	r3, #1
 8007810:	b29b      	uxth	r3, r3
 8007812:	005b      	lsls	r3, r3, #1
 8007814:	b29a      	uxth	r2, r3
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800781a:	7dfb      	ldrb	r3, [r7, #23]
 800781c:	1c5a      	adds	r2, r3, #1
 800781e:	75fa      	strb	r2, [r7, #23]
 8007820:	461a      	mov	r2, r3
 8007822:	68bb      	ldr	r3, [r7, #8]
 8007824:	4413      	add	r3, r2
 8007826:	687a      	ldr	r2, [r7, #4]
 8007828:	7812      	ldrb	r2, [r2, #0]
 800782a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800782c:	7dfb      	ldrb	r3, [r7, #23]
 800782e:	1c5a      	adds	r2, r3, #1
 8007830:	75fa      	strb	r2, [r7, #23]
 8007832:	461a      	mov	r2, r3
 8007834:	68bb      	ldr	r3, [r7, #8]
 8007836:	4413      	add	r3, r2
 8007838:	2203      	movs	r2, #3
 800783a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800783c:	e012      	b.n	8007864 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	1c5a      	adds	r2, r3, #1
 8007842:	60fa      	str	r2, [r7, #12]
 8007844:	7dfa      	ldrb	r2, [r7, #23]
 8007846:	1c51      	adds	r1, r2, #1
 8007848:	75f9      	strb	r1, [r7, #23]
 800784a:	4611      	mov	r1, r2
 800784c:	68ba      	ldr	r2, [r7, #8]
 800784e:	440a      	add	r2, r1
 8007850:	781b      	ldrb	r3, [r3, #0]
 8007852:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007854:	7dfb      	ldrb	r3, [r7, #23]
 8007856:	1c5a      	adds	r2, r3, #1
 8007858:	75fa      	strb	r2, [r7, #23]
 800785a:	461a      	mov	r2, r3
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	4413      	add	r3, r2
 8007860:	2200      	movs	r2, #0
 8007862:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	781b      	ldrb	r3, [r3, #0]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d1e8      	bne.n	800783e <USBD_GetString+0x4e>
    }
  }
}
 800786c:	bf00      	nop
 800786e:	3718      	adds	r7, #24
 8007870:	46bd      	mov	sp, r7
 8007872:	bd80      	pop	{r7, pc}

08007874 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007874:	b480      	push	{r7}
 8007876:	b085      	sub	sp, #20
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800787c:	2300      	movs	r3, #0
 800787e:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8007880:	e005      	b.n	800788e <USBD_GetLen+0x1a>
  {
    len++;
 8007882:	7bfb      	ldrb	r3, [r7, #15]
 8007884:	3301      	adds	r3, #1
 8007886:	73fb      	strb	r3, [r7, #15]
    buf++;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	3301      	adds	r3, #1
 800788c:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	781b      	ldrb	r3, [r3, #0]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d1f5      	bne.n	8007882 <USBD_GetLen+0xe>
  }

  return len;
 8007896:	7bfb      	ldrb	r3, [r7, #15]
}
 8007898:	4618      	mov	r0, r3
 800789a:	3714      	adds	r7, #20
 800789c:	46bd      	mov	sp, r7
 800789e:	bc80      	pop	{r7}
 80078a0:	4770      	bx	lr

080078a2 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80078a2:	b580      	push	{r7, lr}
 80078a4:	b084      	sub	sp, #16
 80078a6:	af00      	add	r7, sp, #0
 80078a8:	60f8      	str	r0, [r7, #12]
 80078aa:	60b9      	str	r1, [r7, #8]
 80078ac:	4613      	mov	r3, r2
 80078ae:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	2202      	movs	r2, #2
 80078b4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80078b8:	88fa      	ldrh	r2, [r7, #6]
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80078be:	88fa      	ldrh	r2, [r7, #6]
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80078c4:	88fb      	ldrh	r3, [r7, #6]
 80078c6:	68ba      	ldr	r2, [r7, #8]
 80078c8:	2100      	movs	r1, #0
 80078ca:	68f8      	ldr	r0, [r7, #12]
 80078cc:	f000 fc65 	bl	800819a <USBD_LL_Transmit>

  return USBD_OK;
 80078d0:	2300      	movs	r3, #0
}
 80078d2:	4618      	mov	r0, r3
 80078d4:	3710      	adds	r7, #16
 80078d6:	46bd      	mov	sp, r7
 80078d8:	bd80      	pop	{r7, pc}

080078da <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80078da:	b580      	push	{r7, lr}
 80078dc:	b084      	sub	sp, #16
 80078de:	af00      	add	r7, sp, #0
 80078e0:	60f8      	str	r0, [r7, #12]
 80078e2:	60b9      	str	r1, [r7, #8]
 80078e4:	4613      	mov	r3, r2
 80078e6:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80078e8:	88fb      	ldrh	r3, [r7, #6]
 80078ea:	68ba      	ldr	r2, [r7, #8]
 80078ec:	2100      	movs	r1, #0
 80078ee:	68f8      	ldr	r0, [r7, #12]
 80078f0:	f000 fc53 	bl	800819a <USBD_LL_Transmit>

  return USBD_OK;
 80078f4:	2300      	movs	r3, #0
}
 80078f6:	4618      	mov	r0, r3
 80078f8:	3710      	adds	r7, #16
 80078fa:	46bd      	mov	sp, r7
 80078fc:	bd80      	pop	{r7, pc}

080078fe <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80078fe:	b580      	push	{r7, lr}
 8007900:	b084      	sub	sp, #16
 8007902:	af00      	add	r7, sp, #0
 8007904:	60f8      	str	r0, [r7, #12]
 8007906:	60b9      	str	r1, [r7, #8]
 8007908:	4613      	mov	r3, r2
 800790a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	2203      	movs	r2, #3
 8007910:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007914:	88fa      	ldrh	r2, [r7, #6]
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800791c:	88fa      	ldrh	r2, [r7, #6]
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007924:	88fb      	ldrh	r3, [r7, #6]
 8007926:	68ba      	ldr	r2, [r7, #8]
 8007928:	2100      	movs	r1, #0
 800792a:	68f8      	ldr	r0, [r7, #12]
 800792c:	f000 fc58 	bl	80081e0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007930:	2300      	movs	r3, #0
}
 8007932:	4618      	mov	r0, r3
 8007934:	3710      	adds	r7, #16
 8007936:	46bd      	mov	sp, r7
 8007938:	bd80      	pop	{r7, pc}

0800793a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800793a:	b580      	push	{r7, lr}
 800793c:	b084      	sub	sp, #16
 800793e:	af00      	add	r7, sp, #0
 8007940:	60f8      	str	r0, [r7, #12]
 8007942:	60b9      	str	r1, [r7, #8]
 8007944:	4613      	mov	r3, r2
 8007946:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007948:	88fb      	ldrh	r3, [r7, #6]
 800794a:	68ba      	ldr	r2, [r7, #8]
 800794c:	2100      	movs	r1, #0
 800794e:	68f8      	ldr	r0, [r7, #12]
 8007950:	f000 fc46 	bl	80081e0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007954:	2300      	movs	r3, #0
}
 8007956:	4618      	mov	r0, r3
 8007958:	3710      	adds	r7, #16
 800795a:	46bd      	mov	sp, r7
 800795c:	bd80      	pop	{r7, pc}

0800795e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800795e:	b580      	push	{r7, lr}
 8007960:	b082      	sub	sp, #8
 8007962:	af00      	add	r7, sp, #0
 8007964:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	2204      	movs	r2, #4
 800796a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800796e:	2300      	movs	r3, #0
 8007970:	2200      	movs	r2, #0
 8007972:	2100      	movs	r1, #0
 8007974:	6878      	ldr	r0, [r7, #4]
 8007976:	f000 fc10 	bl	800819a <USBD_LL_Transmit>

  return USBD_OK;
 800797a:	2300      	movs	r3, #0
}
 800797c:	4618      	mov	r0, r3
 800797e:	3708      	adds	r7, #8
 8007980:	46bd      	mov	sp, r7
 8007982:	bd80      	pop	{r7, pc}

08007984 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b082      	sub	sp, #8
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2205      	movs	r2, #5
 8007990:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007994:	2300      	movs	r3, #0
 8007996:	2200      	movs	r2, #0
 8007998:	2100      	movs	r1, #0
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	f000 fc20 	bl	80081e0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80079a0:	2300      	movs	r3, #0
}
 80079a2:	4618      	mov	r0, r3
 80079a4:	3708      	adds	r7, #8
 80079a6:	46bd      	mov	sp, r7
 80079a8:	bd80      	pop	{r7, pc}
	...

080079ac <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80079b0:	2200      	movs	r2, #0
 80079b2:	4912      	ldr	r1, [pc, #72]	; (80079fc <MX_USB_DEVICE_Init+0x50>)
 80079b4:	4812      	ldr	r0, [pc, #72]	; (8007a00 <MX_USB_DEVICE_Init+0x54>)
 80079b6:	f7fe ff5e 	bl	8006876 <USBD_Init>
 80079ba:	4603      	mov	r3, r0
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d001      	beq.n	80079c4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80079c0:	f7f8 fcea 	bl	8000398 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80079c4:	490f      	ldr	r1, [pc, #60]	; (8007a04 <MX_USB_DEVICE_Init+0x58>)
 80079c6:	480e      	ldr	r0, [pc, #56]	; (8007a00 <MX_USB_DEVICE_Init+0x54>)
 80079c8:	f7fe ff80 	bl	80068cc <USBD_RegisterClass>
 80079cc:	4603      	mov	r3, r0
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d001      	beq.n	80079d6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80079d2:	f7f8 fce1 	bl	8000398 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80079d6:	490c      	ldr	r1, [pc, #48]	; (8007a08 <MX_USB_DEVICE_Init+0x5c>)
 80079d8:	4809      	ldr	r0, [pc, #36]	; (8007a00 <MX_USB_DEVICE_Init+0x54>)
 80079da:	f7fe feb1 	bl	8006740 <USBD_CDC_RegisterInterface>
 80079de:	4603      	mov	r3, r0
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d001      	beq.n	80079e8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80079e4:	f7f8 fcd8 	bl	8000398 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80079e8:	4805      	ldr	r0, [pc, #20]	; (8007a00 <MX_USB_DEVICE_Init+0x54>)
 80079ea:	f7fe ff88 	bl	80068fe <USBD_Start>
 80079ee:	4603      	mov	r3, r0
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d001      	beq.n	80079f8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80079f4:	f7f8 fcd0 	bl	8000398 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80079f8:	bf00      	nop
 80079fa:	bd80      	pop	{r7, pc}
 80079fc:	200001bc 	.word	0x200001bc
 8007a00:	200004f0 	.word	0x200004f0
 8007a04:	200000a8 	.word	0x200000a8
 8007a08:	200001ac 	.word	0x200001ac

08007a0c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007a10:	2200      	movs	r2, #0
 8007a12:	4905      	ldr	r1, [pc, #20]	; (8007a28 <CDC_Init_FS+0x1c>)
 8007a14:	4805      	ldr	r0, [pc, #20]	; (8007a2c <CDC_Init_FS+0x20>)
 8007a16:	f7fe fea9 	bl	800676c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007a1a:	4905      	ldr	r1, [pc, #20]	; (8007a30 <CDC_Init_FS+0x24>)
 8007a1c:	4803      	ldr	r0, [pc, #12]	; (8007a2c <CDC_Init_FS+0x20>)
 8007a1e:	f7fe febe 	bl	800679e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007a22:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007a24:	4618      	mov	r0, r3
 8007a26:	bd80      	pop	{r7, pc}
 8007a28:	20000b9c 	.word	0x20000b9c
 8007a2c:	200004f0 	.word	0x200004f0
 8007a30:	200007b4 	.word	0x200007b4

08007a34 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007a34:	b480      	push	{r7}
 8007a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007a38:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bc80      	pop	{r7}
 8007a40:	4770      	bx	lr
	...

08007a44 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007a44:	b480      	push	{r7}
 8007a46:	b083      	sub	sp, #12
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	4603      	mov	r3, r0
 8007a4c:	6039      	str	r1, [r7, #0]
 8007a4e:	71fb      	strb	r3, [r7, #7]
 8007a50:	4613      	mov	r3, r2
 8007a52:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007a54:	79fb      	ldrb	r3, [r7, #7]
 8007a56:	2b23      	cmp	r3, #35	; 0x23
 8007a58:	d84a      	bhi.n	8007af0 <CDC_Control_FS+0xac>
 8007a5a:	a201      	add	r2, pc, #4	; (adr r2, 8007a60 <CDC_Control_FS+0x1c>)
 8007a5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a60:	08007af1 	.word	0x08007af1
 8007a64:	08007af1 	.word	0x08007af1
 8007a68:	08007af1 	.word	0x08007af1
 8007a6c:	08007af1 	.word	0x08007af1
 8007a70:	08007af1 	.word	0x08007af1
 8007a74:	08007af1 	.word	0x08007af1
 8007a78:	08007af1 	.word	0x08007af1
 8007a7c:	08007af1 	.word	0x08007af1
 8007a80:	08007af1 	.word	0x08007af1
 8007a84:	08007af1 	.word	0x08007af1
 8007a88:	08007af1 	.word	0x08007af1
 8007a8c:	08007af1 	.word	0x08007af1
 8007a90:	08007af1 	.word	0x08007af1
 8007a94:	08007af1 	.word	0x08007af1
 8007a98:	08007af1 	.word	0x08007af1
 8007a9c:	08007af1 	.word	0x08007af1
 8007aa0:	08007af1 	.word	0x08007af1
 8007aa4:	08007af1 	.word	0x08007af1
 8007aa8:	08007af1 	.word	0x08007af1
 8007aac:	08007af1 	.word	0x08007af1
 8007ab0:	08007af1 	.word	0x08007af1
 8007ab4:	08007af1 	.word	0x08007af1
 8007ab8:	08007af1 	.word	0x08007af1
 8007abc:	08007af1 	.word	0x08007af1
 8007ac0:	08007af1 	.word	0x08007af1
 8007ac4:	08007af1 	.word	0x08007af1
 8007ac8:	08007af1 	.word	0x08007af1
 8007acc:	08007af1 	.word	0x08007af1
 8007ad0:	08007af1 	.word	0x08007af1
 8007ad4:	08007af1 	.word	0x08007af1
 8007ad8:	08007af1 	.word	0x08007af1
 8007adc:	08007af1 	.word	0x08007af1
 8007ae0:	08007af1 	.word	0x08007af1
 8007ae4:	08007af1 	.word	0x08007af1
 8007ae8:	08007af1 	.word	0x08007af1
 8007aec:	08007af1 	.word	0x08007af1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007af0:	bf00      	nop
  }

  return (USBD_OK);
 8007af2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007af4:	4618      	mov	r0, r3
 8007af6:	370c      	adds	r7, #12
 8007af8:	46bd      	mov	sp, r7
 8007afa:	bc80      	pop	{r7}
 8007afc:	4770      	bx	lr
 8007afe:	bf00      	nop

08007b00 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b082      	sub	sp, #8
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
 8007b08:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007b0a:	6879      	ldr	r1, [r7, #4]
 8007b0c:	4805      	ldr	r0, [pc, #20]	; (8007b24 <CDC_Receive_FS+0x24>)
 8007b0e:	f7fe fe46 	bl	800679e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007b12:	4804      	ldr	r0, [pc, #16]	; (8007b24 <CDC_Receive_FS+0x24>)
 8007b14:	f7fe fe85 	bl	8006822 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007b18:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	3708      	adds	r7, #8
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bd80      	pop	{r7, pc}
 8007b22:	bf00      	nop
 8007b24:	200004f0 	.word	0x200004f0

08007b28 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b084      	sub	sp, #16
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
 8007b30:	460b      	mov	r3, r1
 8007b32:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007b34:	2300      	movs	r3, #0
 8007b36:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007b38:	4b0d      	ldr	r3, [pc, #52]	; (8007b70 <CDC_Transmit_FS+0x48>)
 8007b3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b3e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007b40:	68bb      	ldr	r3, [r7, #8]
 8007b42:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d001      	beq.n	8007b4e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007b4a:	2301      	movs	r3, #1
 8007b4c:	e00b      	b.n	8007b66 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007b4e:	887b      	ldrh	r3, [r7, #2]
 8007b50:	461a      	mov	r2, r3
 8007b52:	6879      	ldr	r1, [r7, #4]
 8007b54:	4806      	ldr	r0, [pc, #24]	; (8007b70 <CDC_Transmit_FS+0x48>)
 8007b56:	f7fe fe09 	bl	800676c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007b5a:	4805      	ldr	r0, [pc, #20]	; (8007b70 <CDC_Transmit_FS+0x48>)
 8007b5c:	f7fe fe32 	bl	80067c4 <USBD_CDC_TransmitPacket>
 8007b60:	4603      	mov	r3, r0
 8007b62:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007b64:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b66:	4618      	mov	r0, r3
 8007b68:	3710      	adds	r7, #16
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	bd80      	pop	{r7, pc}
 8007b6e:	bf00      	nop
 8007b70:	200004f0 	.word	0x200004f0

08007b74 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b74:	b480      	push	{r7}
 8007b76:	b083      	sub	sp, #12
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	4603      	mov	r3, r0
 8007b7c:	6039      	str	r1, [r7, #0]
 8007b7e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	2212      	movs	r2, #18
 8007b84:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007b86:	4b03      	ldr	r3, [pc, #12]	; (8007b94 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007b88:	4618      	mov	r0, r3
 8007b8a:	370c      	adds	r7, #12
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	bc80      	pop	{r7}
 8007b90:	4770      	bx	lr
 8007b92:	bf00      	nop
 8007b94:	200001d8 	.word	0x200001d8

08007b98 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b98:	b480      	push	{r7}
 8007b9a:	b083      	sub	sp, #12
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	4603      	mov	r3, r0
 8007ba0:	6039      	str	r1, [r7, #0]
 8007ba2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	2204      	movs	r2, #4
 8007ba8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007baa:	4b03      	ldr	r3, [pc, #12]	; (8007bb8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007bac:	4618      	mov	r0, r3
 8007bae:	370c      	adds	r7, #12
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	bc80      	pop	{r7}
 8007bb4:	4770      	bx	lr
 8007bb6:	bf00      	nop
 8007bb8:	200001ec 	.word	0x200001ec

08007bbc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b082      	sub	sp, #8
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	6039      	str	r1, [r7, #0]
 8007bc6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007bc8:	79fb      	ldrb	r3, [r7, #7]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d105      	bne.n	8007bda <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007bce:	683a      	ldr	r2, [r7, #0]
 8007bd0:	4907      	ldr	r1, [pc, #28]	; (8007bf0 <USBD_FS_ProductStrDescriptor+0x34>)
 8007bd2:	4808      	ldr	r0, [pc, #32]	; (8007bf4 <USBD_FS_ProductStrDescriptor+0x38>)
 8007bd4:	f7ff fe0c 	bl	80077f0 <USBD_GetString>
 8007bd8:	e004      	b.n	8007be4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007bda:	683a      	ldr	r2, [r7, #0]
 8007bdc:	4904      	ldr	r1, [pc, #16]	; (8007bf0 <USBD_FS_ProductStrDescriptor+0x34>)
 8007bde:	4805      	ldr	r0, [pc, #20]	; (8007bf4 <USBD_FS_ProductStrDescriptor+0x38>)
 8007be0:	f7ff fe06 	bl	80077f0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007be4:	4b02      	ldr	r3, [pc, #8]	; (8007bf0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007be6:	4618      	mov	r0, r3
 8007be8:	3708      	adds	r7, #8
 8007bea:	46bd      	mov	sp, r7
 8007bec:	bd80      	pop	{r7, pc}
 8007bee:	bf00      	nop
 8007bf0:	20000f84 	.word	0x20000f84
 8007bf4:	08008c5c 	.word	0x08008c5c

08007bf8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b082      	sub	sp, #8
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	4603      	mov	r3, r0
 8007c00:	6039      	str	r1, [r7, #0]
 8007c02:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007c04:	683a      	ldr	r2, [r7, #0]
 8007c06:	4904      	ldr	r1, [pc, #16]	; (8007c18 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007c08:	4804      	ldr	r0, [pc, #16]	; (8007c1c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007c0a:	f7ff fdf1 	bl	80077f0 <USBD_GetString>
  return USBD_StrDesc;
 8007c0e:	4b02      	ldr	r3, [pc, #8]	; (8007c18 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007c10:	4618      	mov	r0, r3
 8007c12:	3708      	adds	r7, #8
 8007c14:	46bd      	mov	sp, r7
 8007c16:	bd80      	pop	{r7, pc}
 8007c18:	20000f84 	.word	0x20000f84
 8007c1c:	08008c74 	.word	0x08008c74

08007c20 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b082      	sub	sp, #8
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	4603      	mov	r3, r0
 8007c28:	6039      	str	r1, [r7, #0]
 8007c2a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	221a      	movs	r2, #26
 8007c30:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007c32:	f000 f843 	bl	8007cbc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007c36:	4b02      	ldr	r3, [pc, #8]	; (8007c40 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007c38:	4618      	mov	r0, r3
 8007c3a:	3708      	adds	r7, #8
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	bd80      	pop	{r7, pc}
 8007c40:	200001f0 	.word	0x200001f0

08007c44 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b082      	sub	sp, #8
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	6039      	str	r1, [r7, #0]
 8007c4e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007c50:	79fb      	ldrb	r3, [r7, #7]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d105      	bne.n	8007c62 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007c56:	683a      	ldr	r2, [r7, #0]
 8007c58:	4907      	ldr	r1, [pc, #28]	; (8007c78 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007c5a:	4808      	ldr	r0, [pc, #32]	; (8007c7c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007c5c:	f7ff fdc8 	bl	80077f0 <USBD_GetString>
 8007c60:	e004      	b.n	8007c6c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007c62:	683a      	ldr	r2, [r7, #0]
 8007c64:	4904      	ldr	r1, [pc, #16]	; (8007c78 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007c66:	4805      	ldr	r0, [pc, #20]	; (8007c7c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007c68:	f7ff fdc2 	bl	80077f0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007c6c:	4b02      	ldr	r3, [pc, #8]	; (8007c78 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007c6e:	4618      	mov	r0, r3
 8007c70:	3708      	adds	r7, #8
 8007c72:	46bd      	mov	sp, r7
 8007c74:	bd80      	pop	{r7, pc}
 8007c76:	bf00      	nop
 8007c78:	20000f84 	.word	0x20000f84
 8007c7c:	08008c88 	.word	0x08008c88

08007c80 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b082      	sub	sp, #8
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	4603      	mov	r3, r0
 8007c88:	6039      	str	r1, [r7, #0]
 8007c8a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007c8c:	79fb      	ldrb	r3, [r7, #7]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d105      	bne.n	8007c9e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007c92:	683a      	ldr	r2, [r7, #0]
 8007c94:	4907      	ldr	r1, [pc, #28]	; (8007cb4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007c96:	4808      	ldr	r0, [pc, #32]	; (8007cb8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007c98:	f7ff fdaa 	bl	80077f0 <USBD_GetString>
 8007c9c:	e004      	b.n	8007ca8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007c9e:	683a      	ldr	r2, [r7, #0]
 8007ca0:	4904      	ldr	r1, [pc, #16]	; (8007cb4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007ca2:	4805      	ldr	r0, [pc, #20]	; (8007cb8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007ca4:	f7ff fda4 	bl	80077f0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007ca8:	4b02      	ldr	r3, [pc, #8]	; (8007cb4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007caa:	4618      	mov	r0, r3
 8007cac:	3708      	adds	r7, #8
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	bd80      	pop	{r7, pc}
 8007cb2:	bf00      	nop
 8007cb4:	20000f84 	.word	0x20000f84
 8007cb8:	08008c94 	.word	0x08008c94

08007cbc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b084      	sub	sp, #16
 8007cc0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007cc2:	4b0f      	ldr	r3, [pc, #60]	; (8007d00 <Get_SerialNum+0x44>)
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007cc8:	4b0e      	ldr	r3, [pc, #56]	; (8007d04 <Get_SerialNum+0x48>)
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007cce:	4b0e      	ldr	r3, [pc, #56]	; (8007d08 <Get_SerialNum+0x4c>)
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007cd4:	68fa      	ldr	r2, [r7, #12]
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	4413      	add	r3, r2
 8007cda:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d009      	beq.n	8007cf6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007ce2:	2208      	movs	r2, #8
 8007ce4:	4909      	ldr	r1, [pc, #36]	; (8007d0c <Get_SerialNum+0x50>)
 8007ce6:	68f8      	ldr	r0, [r7, #12]
 8007ce8:	f000 f814 	bl	8007d14 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007cec:	2204      	movs	r2, #4
 8007cee:	4908      	ldr	r1, [pc, #32]	; (8007d10 <Get_SerialNum+0x54>)
 8007cf0:	68b8      	ldr	r0, [r7, #8]
 8007cf2:	f000 f80f 	bl	8007d14 <IntToUnicode>
  }
}
 8007cf6:	bf00      	nop
 8007cf8:	3710      	adds	r7, #16
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	bd80      	pop	{r7, pc}
 8007cfe:	bf00      	nop
 8007d00:	1ffff7e8 	.word	0x1ffff7e8
 8007d04:	1ffff7ec 	.word	0x1ffff7ec
 8007d08:	1ffff7f0 	.word	0x1ffff7f0
 8007d0c:	200001f2 	.word	0x200001f2
 8007d10:	20000202 	.word	0x20000202

08007d14 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007d14:	b480      	push	{r7}
 8007d16:	b087      	sub	sp, #28
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	60f8      	str	r0, [r7, #12]
 8007d1c:	60b9      	str	r1, [r7, #8]
 8007d1e:	4613      	mov	r3, r2
 8007d20:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007d22:	2300      	movs	r3, #0
 8007d24:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007d26:	2300      	movs	r3, #0
 8007d28:	75fb      	strb	r3, [r7, #23]
 8007d2a:	e027      	b.n	8007d7c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	0f1b      	lsrs	r3, r3, #28
 8007d30:	2b09      	cmp	r3, #9
 8007d32:	d80b      	bhi.n	8007d4c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	0f1b      	lsrs	r3, r3, #28
 8007d38:	b2da      	uxtb	r2, r3
 8007d3a:	7dfb      	ldrb	r3, [r7, #23]
 8007d3c:	005b      	lsls	r3, r3, #1
 8007d3e:	4619      	mov	r1, r3
 8007d40:	68bb      	ldr	r3, [r7, #8]
 8007d42:	440b      	add	r3, r1
 8007d44:	3230      	adds	r2, #48	; 0x30
 8007d46:	b2d2      	uxtb	r2, r2
 8007d48:	701a      	strb	r2, [r3, #0]
 8007d4a:	e00a      	b.n	8007d62 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	0f1b      	lsrs	r3, r3, #28
 8007d50:	b2da      	uxtb	r2, r3
 8007d52:	7dfb      	ldrb	r3, [r7, #23]
 8007d54:	005b      	lsls	r3, r3, #1
 8007d56:	4619      	mov	r1, r3
 8007d58:	68bb      	ldr	r3, [r7, #8]
 8007d5a:	440b      	add	r3, r1
 8007d5c:	3237      	adds	r2, #55	; 0x37
 8007d5e:	b2d2      	uxtb	r2, r2
 8007d60:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	011b      	lsls	r3, r3, #4
 8007d66:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007d68:	7dfb      	ldrb	r3, [r7, #23]
 8007d6a:	005b      	lsls	r3, r3, #1
 8007d6c:	3301      	adds	r3, #1
 8007d6e:	68ba      	ldr	r2, [r7, #8]
 8007d70:	4413      	add	r3, r2
 8007d72:	2200      	movs	r2, #0
 8007d74:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007d76:	7dfb      	ldrb	r3, [r7, #23]
 8007d78:	3301      	adds	r3, #1
 8007d7a:	75fb      	strb	r3, [r7, #23]
 8007d7c:	7dfa      	ldrb	r2, [r7, #23]
 8007d7e:	79fb      	ldrb	r3, [r7, #7]
 8007d80:	429a      	cmp	r2, r3
 8007d82:	d3d3      	bcc.n	8007d2c <IntToUnicode+0x18>
  }
}
 8007d84:	bf00      	nop
 8007d86:	bf00      	nop
 8007d88:	371c      	adds	r7, #28
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	bc80      	pop	{r7}
 8007d8e:	4770      	bx	lr

08007d90 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b084      	sub	sp, #16
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	4a0d      	ldr	r2, [pc, #52]	; (8007dd4 <HAL_PCD_MspInit+0x44>)
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	d113      	bne.n	8007dca <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8007da2:	4b0d      	ldr	r3, [pc, #52]	; (8007dd8 <HAL_PCD_MspInit+0x48>)
 8007da4:	69db      	ldr	r3, [r3, #28]
 8007da6:	4a0c      	ldr	r2, [pc, #48]	; (8007dd8 <HAL_PCD_MspInit+0x48>)
 8007da8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007dac:	61d3      	str	r3, [r2, #28]
 8007dae:	4b0a      	ldr	r3, [pc, #40]	; (8007dd8 <HAL_PCD_MspInit+0x48>)
 8007db0:	69db      	ldr	r3, [r3, #28]
 8007db2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007db6:	60fb      	str	r3, [r7, #12]
 8007db8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8007dba:	2200      	movs	r2, #0
 8007dbc:	2100      	movs	r1, #0
 8007dbe:	2014      	movs	r0, #20
 8007dc0:	f7f9 fbc9 	bl	8001556 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8007dc4:	2014      	movs	r0, #20
 8007dc6:	f7f9 fbe2 	bl	800158e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8007dca:	bf00      	nop
 8007dcc:	3710      	adds	r7, #16
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	bd80      	pop	{r7, pc}
 8007dd2:	bf00      	nop
 8007dd4:	40005c00 	.word	0x40005c00
 8007dd8:	40021000 	.word	0x40021000

08007ddc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b082      	sub	sp, #8
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8007df0:	4619      	mov	r1, r3
 8007df2:	4610      	mov	r0, r2
 8007df4:	f7fe fdcb 	bl	800698e <USBD_LL_SetupStage>
}
 8007df8:	bf00      	nop
 8007dfa:	3708      	adds	r7, #8
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	bd80      	pop	{r7, pc}

08007e00 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b082      	sub	sp, #8
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
 8007e08:	460b      	mov	r3, r1
 8007e0a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8007e12:	78fa      	ldrb	r2, [r7, #3]
 8007e14:	6879      	ldr	r1, [r7, #4]
 8007e16:	4613      	mov	r3, r2
 8007e18:	009b      	lsls	r3, r3, #2
 8007e1a:	4413      	add	r3, r2
 8007e1c:	00db      	lsls	r3, r3, #3
 8007e1e:	440b      	add	r3, r1
 8007e20:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8007e24:	681a      	ldr	r2, [r3, #0]
 8007e26:	78fb      	ldrb	r3, [r7, #3]
 8007e28:	4619      	mov	r1, r3
 8007e2a:	f7fe fdfd 	bl	8006a28 <USBD_LL_DataOutStage>
}
 8007e2e:	bf00      	nop
 8007e30:	3708      	adds	r7, #8
 8007e32:	46bd      	mov	sp, r7
 8007e34:	bd80      	pop	{r7, pc}

08007e36 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e36:	b580      	push	{r7, lr}
 8007e38:	b082      	sub	sp, #8
 8007e3a:	af00      	add	r7, sp, #0
 8007e3c:	6078      	str	r0, [r7, #4]
 8007e3e:	460b      	mov	r3, r1
 8007e40:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8007e48:	78fa      	ldrb	r2, [r7, #3]
 8007e4a:	6879      	ldr	r1, [r7, #4]
 8007e4c:	4613      	mov	r3, r2
 8007e4e:	009b      	lsls	r3, r3, #2
 8007e50:	4413      	add	r3, r2
 8007e52:	00db      	lsls	r3, r3, #3
 8007e54:	440b      	add	r3, r1
 8007e56:	333c      	adds	r3, #60	; 0x3c
 8007e58:	681a      	ldr	r2, [r3, #0]
 8007e5a:	78fb      	ldrb	r3, [r7, #3]
 8007e5c:	4619      	mov	r1, r3
 8007e5e:	f7fe fe54 	bl	8006b0a <USBD_LL_DataInStage>
}
 8007e62:	bf00      	nop
 8007e64:	3708      	adds	r7, #8
 8007e66:	46bd      	mov	sp, r7
 8007e68:	bd80      	pop	{r7, pc}

08007e6a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e6a:	b580      	push	{r7, lr}
 8007e6c:	b082      	sub	sp, #8
 8007e6e:	af00      	add	r7, sp, #0
 8007e70:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007e78:	4618      	mov	r0, r3
 8007e7a:	f7fe ff64 	bl	8006d46 <USBD_LL_SOF>
}
 8007e7e:	bf00      	nop
 8007e80:	3708      	adds	r7, #8
 8007e82:	46bd      	mov	sp, r7
 8007e84:	bd80      	pop	{r7, pc}

08007e86 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e86:	b580      	push	{r7, lr}
 8007e88:	b084      	sub	sp, #16
 8007e8a:	af00      	add	r7, sp, #0
 8007e8c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007e8e:	2301      	movs	r3, #1
 8007e90:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	689b      	ldr	r3, [r3, #8]
 8007e96:	2b02      	cmp	r3, #2
 8007e98:	d001      	beq.n	8007e9e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007e9a:	f7f8 fa7d 	bl	8000398 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007ea4:	7bfa      	ldrb	r2, [r7, #15]
 8007ea6:	4611      	mov	r1, r2
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	f7fe ff14 	bl	8006cd6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	f7fe fecd 	bl	8006c54 <USBD_LL_Reset>
}
 8007eba:	bf00      	nop
 8007ebc:	3710      	adds	r7, #16
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	bd80      	pop	{r7, pc}
	...

08007ec4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b082      	sub	sp, #8
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	f7fe ff0e 	bl	8006cf4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	699b      	ldr	r3, [r3, #24]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d005      	beq.n	8007eec <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007ee0:	4b04      	ldr	r3, [pc, #16]	; (8007ef4 <HAL_PCD_SuspendCallback+0x30>)
 8007ee2:	691b      	ldr	r3, [r3, #16]
 8007ee4:	4a03      	ldr	r2, [pc, #12]	; (8007ef4 <HAL_PCD_SuspendCallback+0x30>)
 8007ee6:	f043 0306 	orr.w	r3, r3, #6
 8007eea:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007eec:	bf00      	nop
 8007eee:	3708      	adds	r7, #8
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	bd80      	pop	{r7, pc}
 8007ef4:	e000ed00 	.word	0xe000ed00

08007ef8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b082      	sub	sp, #8
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007f06:	4618      	mov	r0, r3
 8007f08:	f7fe ff08 	bl	8006d1c <USBD_LL_Resume>
}
 8007f0c:	bf00      	nop
 8007f0e:	3708      	adds	r7, #8
 8007f10:	46bd      	mov	sp, r7
 8007f12:	bd80      	pop	{r7, pc}

08007f14 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b082      	sub	sp, #8
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8007f1c:	4a28      	ldr	r2, [pc, #160]	; (8007fc0 <USBD_LL_Init+0xac>)
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	4a26      	ldr	r2, [pc, #152]	; (8007fc0 <USBD_LL_Init+0xac>)
 8007f28:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8007f2c:	4b24      	ldr	r3, [pc, #144]	; (8007fc0 <USBD_LL_Init+0xac>)
 8007f2e:	4a25      	ldr	r2, [pc, #148]	; (8007fc4 <USBD_LL_Init+0xb0>)
 8007f30:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007f32:	4b23      	ldr	r3, [pc, #140]	; (8007fc0 <USBD_LL_Init+0xac>)
 8007f34:	2208      	movs	r2, #8
 8007f36:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007f38:	4b21      	ldr	r3, [pc, #132]	; (8007fc0 <USBD_LL_Init+0xac>)
 8007f3a:	2202      	movs	r2, #2
 8007f3c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007f3e:	4b20      	ldr	r3, [pc, #128]	; (8007fc0 <USBD_LL_Init+0xac>)
 8007f40:	2200      	movs	r2, #0
 8007f42:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8007f44:	4b1e      	ldr	r3, [pc, #120]	; (8007fc0 <USBD_LL_Init+0xac>)
 8007f46:	2200      	movs	r2, #0
 8007f48:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8007f4a:	4b1d      	ldr	r3, [pc, #116]	; (8007fc0 <USBD_LL_Init+0xac>)
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007f50:	481b      	ldr	r0, [pc, #108]	; (8007fc0 <USBD_LL_Init+0xac>)
 8007f52:	f7f9 fcea 	bl	800192a <HAL_PCD_Init>
 8007f56:	4603      	mov	r3, r0
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d001      	beq.n	8007f60 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8007f5c:	f7f8 fa1c 	bl	8000398 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007f66:	2318      	movs	r3, #24
 8007f68:	2200      	movs	r2, #0
 8007f6a:	2100      	movs	r1, #0
 8007f6c:	f7fb f960 	bl	8003230 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007f76:	2358      	movs	r3, #88	; 0x58
 8007f78:	2200      	movs	r2, #0
 8007f7a:	2180      	movs	r1, #128	; 0x80
 8007f7c:	f7fb f958 	bl	8003230 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007f86:	23c0      	movs	r3, #192	; 0xc0
 8007f88:	2200      	movs	r2, #0
 8007f8a:	2181      	movs	r1, #129	; 0x81
 8007f8c:	f7fb f950 	bl	8003230 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007f96:	f44f 7388 	mov.w	r3, #272	; 0x110
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	2101      	movs	r1, #1
 8007f9e:	f7fb f947 	bl	8003230 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007fa8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007fac:	2200      	movs	r2, #0
 8007fae:	2182      	movs	r1, #130	; 0x82
 8007fb0:	f7fb f93e 	bl	8003230 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8007fb4:	2300      	movs	r3, #0
}
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	3708      	adds	r7, #8
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	bd80      	pop	{r7, pc}
 8007fbe:	bf00      	nop
 8007fc0:	20001184 	.word	0x20001184
 8007fc4:	40005c00 	.word	0x40005c00

08007fc8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b084      	sub	sp, #16
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007fde:	4618      	mov	r0, r3
 8007fe0:	f7f9 fdae 	bl	8001b40 <HAL_PCD_Start>
 8007fe4:	4603      	mov	r3, r0
 8007fe6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007fe8:	7bfb      	ldrb	r3, [r7, #15]
 8007fea:	4618      	mov	r0, r3
 8007fec:	f000 f94e 	bl	800828c <USBD_Get_USB_Status>
 8007ff0:	4603      	mov	r3, r0
 8007ff2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007ff4:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	3710      	adds	r7, #16
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	bd80      	pop	{r7, pc}

08007ffe <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007ffe:	b580      	push	{r7, lr}
 8008000:	b084      	sub	sp, #16
 8008002:	af00      	add	r7, sp, #0
 8008004:	6078      	str	r0, [r7, #4]
 8008006:	4608      	mov	r0, r1
 8008008:	4611      	mov	r1, r2
 800800a:	461a      	mov	r2, r3
 800800c:	4603      	mov	r3, r0
 800800e:	70fb      	strb	r3, [r7, #3]
 8008010:	460b      	mov	r3, r1
 8008012:	70bb      	strb	r3, [r7, #2]
 8008014:	4613      	mov	r3, r2
 8008016:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008018:	2300      	movs	r3, #0
 800801a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800801c:	2300      	movs	r3, #0
 800801e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008026:	78bb      	ldrb	r3, [r7, #2]
 8008028:	883a      	ldrh	r2, [r7, #0]
 800802a:	78f9      	ldrb	r1, [r7, #3]
 800802c:	f7f9 ff28 	bl	8001e80 <HAL_PCD_EP_Open>
 8008030:	4603      	mov	r3, r0
 8008032:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008034:	7bfb      	ldrb	r3, [r7, #15]
 8008036:	4618      	mov	r0, r3
 8008038:	f000 f928 	bl	800828c <USBD_Get_USB_Status>
 800803c:	4603      	mov	r3, r0
 800803e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008040:	7bbb      	ldrb	r3, [r7, #14]
}
 8008042:	4618      	mov	r0, r3
 8008044:	3710      	adds	r7, #16
 8008046:	46bd      	mov	sp, r7
 8008048:	bd80      	pop	{r7, pc}

0800804a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800804a:	b580      	push	{r7, lr}
 800804c:	b084      	sub	sp, #16
 800804e:	af00      	add	r7, sp, #0
 8008050:	6078      	str	r0, [r7, #4]
 8008052:	460b      	mov	r3, r1
 8008054:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008056:	2300      	movs	r3, #0
 8008058:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800805a:	2300      	movs	r3, #0
 800805c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008064:	78fa      	ldrb	r2, [r7, #3]
 8008066:	4611      	mov	r1, r2
 8008068:	4618      	mov	r0, r3
 800806a:	f7f9 ff6f 	bl	8001f4c <HAL_PCD_EP_Close>
 800806e:	4603      	mov	r3, r0
 8008070:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008072:	7bfb      	ldrb	r3, [r7, #15]
 8008074:	4618      	mov	r0, r3
 8008076:	f000 f909 	bl	800828c <USBD_Get_USB_Status>
 800807a:	4603      	mov	r3, r0
 800807c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800807e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008080:	4618      	mov	r0, r3
 8008082:	3710      	adds	r7, #16
 8008084:	46bd      	mov	sp, r7
 8008086:	bd80      	pop	{r7, pc}

08008088 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b084      	sub	sp, #16
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
 8008090:	460b      	mov	r3, r1
 8008092:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008094:	2300      	movs	r3, #0
 8008096:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008098:	2300      	movs	r3, #0
 800809a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80080a2:	78fa      	ldrb	r2, [r7, #3]
 80080a4:	4611      	mov	r1, r2
 80080a6:	4618      	mov	r0, r3
 80080a8:	f7fa f82f 	bl	800210a <HAL_PCD_EP_SetStall>
 80080ac:	4603      	mov	r3, r0
 80080ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80080b0:	7bfb      	ldrb	r3, [r7, #15]
 80080b2:	4618      	mov	r0, r3
 80080b4:	f000 f8ea 	bl	800828c <USBD_Get_USB_Status>
 80080b8:	4603      	mov	r3, r0
 80080ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80080bc:	7bbb      	ldrb	r3, [r7, #14]
}
 80080be:	4618      	mov	r0, r3
 80080c0:	3710      	adds	r7, #16
 80080c2:	46bd      	mov	sp, r7
 80080c4:	bd80      	pop	{r7, pc}

080080c6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80080c6:	b580      	push	{r7, lr}
 80080c8:	b084      	sub	sp, #16
 80080ca:	af00      	add	r7, sp, #0
 80080cc:	6078      	str	r0, [r7, #4]
 80080ce:	460b      	mov	r3, r1
 80080d0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080d2:	2300      	movs	r3, #0
 80080d4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080d6:	2300      	movs	r3, #0
 80080d8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80080e0:	78fa      	ldrb	r2, [r7, #3]
 80080e2:	4611      	mov	r1, r2
 80080e4:	4618      	mov	r0, r3
 80080e6:	f7fa f870 	bl	80021ca <HAL_PCD_EP_ClrStall>
 80080ea:	4603      	mov	r3, r0
 80080ec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80080ee:	7bfb      	ldrb	r3, [r7, #15]
 80080f0:	4618      	mov	r0, r3
 80080f2:	f000 f8cb 	bl	800828c <USBD_Get_USB_Status>
 80080f6:	4603      	mov	r3, r0
 80080f8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80080fa:	7bbb      	ldrb	r3, [r7, #14]
}
 80080fc:	4618      	mov	r0, r3
 80080fe:	3710      	adds	r7, #16
 8008100:	46bd      	mov	sp, r7
 8008102:	bd80      	pop	{r7, pc}

08008104 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008104:	b480      	push	{r7}
 8008106:	b085      	sub	sp, #20
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
 800810c:	460b      	mov	r3, r1
 800810e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008116:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008118:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800811c:	2b00      	cmp	r3, #0
 800811e:	da0c      	bge.n	800813a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008120:	78fb      	ldrb	r3, [r7, #3]
 8008122:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008126:	68f9      	ldr	r1, [r7, #12]
 8008128:	1c5a      	adds	r2, r3, #1
 800812a:	4613      	mov	r3, r2
 800812c:	009b      	lsls	r3, r3, #2
 800812e:	4413      	add	r3, r2
 8008130:	00db      	lsls	r3, r3, #3
 8008132:	440b      	add	r3, r1
 8008134:	3302      	adds	r3, #2
 8008136:	781b      	ldrb	r3, [r3, #0]
 8008138:	e00b      	b.n	8008152 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800813a:	78fb      	ldrb	r3, [r7, #3]
 800813c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008140:	68f9      	ldr	r1, [r7, #12]
 8008142:	4613      	mov	r3, r2
 8008144:	009b      	lsls	r3, r3, #2
 8008146:	4413      	add	r3, r2
 8008148:	00db      	lsls	r3, r3, #3
 800814a:	440b      	add	r3, r1
 800814c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8008150:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008152:	4618      	mov	r0, r3
 8008154:	3714      	adds	r7, #20
 8008156:	46bd      	mov	sp, r7
 8008158:	bc80      	pop	{r7}
 800815a:	4770      	bx	lr

0800815c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b084      	sub	sp, #16
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
 8008164:	460b      	mov	r3, r1
 8008166:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008168:	2300      	movs	r3, #0
 800816a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800816c:	2300      	movs	r3, #0
 800816e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008176:	78fa      	ldrb	r2, [r7, #3]
 8008178:	4611      	mov	r1, r2
 800817a:	4618      	mov	r0, r3
 800817c:	f7f9 fe5b 	bl	8001e36 <HAL_PCD_SetAddress>
 8008180:	4603      	mov	r3, r0
 8008182:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008184:	7bfb      	ldrb	r3, [r7, #15]
 8008186:	4618      	mov	r0, r3
 8008188:	f000 f880 	bl	800828c <USBD_Get_USB_Status>
 800818c:	4603      	mov	r3, r0
 800818e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008190:	7bbb      	ldrb	r3, [r7, #14]
}
 8008192:	4618      	mov	r0, r3
 8008194:	3710      	adds	r7, #16
 8008196:	46bd      	mov	sp, r7
 8008198:	bd80      	pop	{r7, pc}

0800819a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800819a:	b580      	push	{r7, lr}
 800819c:	b086      	sub	sp, #24
 800819e:	af00      	add	r7, sp, #0
 80081a0:	60f8      	str	r0, [r7, #12]
 80081a2:	607a      	str	r2, [r7, #4]
 80081a4:	461a      	mov	r2, r3
 80081a6:	460b      	mov	r3, r1
 80081a8:	72fb      	strb	r3, [r7, #11]
 80081aa:	4613      	mov	r3, r2
 80081ac:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081ae:	2300      	movs	r3, #0
 80081b0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80081b2:	2300      	movs	r3, #0
 80081b4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80081bc:	893b      	ldrh	r3, [r7, #8]
 80081be:	7af9      	ldrb	r1, [r7, #11]
 80081c0:	687a      	ldr	r2, [r7, #4]
 80081c2:	f7f9 ff5f 	bl	8002084 <HAL_PCD_EP_Transmit>
 80081c6:	4603      	mov	r3, r0
 80081c8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80081ca:	7dfb      	ldrb	r3, [r7, #23]
 80081cc:	4618      	mov	r0, r3
 80081ce:	f000 f85d 	bl	800828c <USBD_Get_USB_Status>
 80081d2:	4603      	mov	r3, r0
 80081d4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80081d6:	7dbb      	ldrb	r3, [r7, #22]
}
 80081d8:	4618      	mov	r0, r3
 80081da:	3718      	adds	r7, #24
 80081dc:	46bd      	mov	sp, r7
 80081de:	bd80      	pop	{r7, pc}

080081e0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b086      	sub	sp, #24
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	60f8      	str	r0, [r7, #12]
 80081e8:	607a      	str	r2, [r7, #4]
 80081ea:	461a      	mov	r2, r3
 80081ec:	460b      	mov	r3, r1
 80081ee:	72fb      	strb	r3, [r7, #11]
 80081f0:	4613      	mov	r3, r2
 80081f2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081f4:	2300      	movs	r3, #0
 80081f6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80081f8:	2300      	movs	r3, #0
 80081fa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008202:	893b      	ldrh	r3, [r7, #8]
 8008204:	7af9      	ldrb	r1, [r7, #11]
 8008206:	687a      	ldr	r2, [r7, #4]
 8008208:	f7f9 fee8 	bl	8001fdc <HAL_PCD_EP_Receive>
 800820c:	4603      	mov	r3, r0
 800820e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008210:	7dfb      	ldrb	r3, [r7, #23]
 8008212:	4618      	mov	r0, r3
 8008214:	f000 f83a 	bl	800828c <USBD_Get_USB_Status>
 8008218:	4603      	mov	r3, r0
 800821a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800821c:	7dbb      	ldrb	r3, [r7, #22]
}
 800821e:	4618      	mov	r0, r3
 8008220:	3718      	adds	r7, #24
 8008222:	46bd      	mov	sp, r7
 8008224:	bd80      	pop	{r7, pc}

08008226 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008226:	b580      	push	{r7, lr}
 8008228:	b082      	sub	sp, #8
 800822a:	af00      	add	r7, sp, #0
 800822c:	6078      	str	r0, [r7, #4]
 800822e:	460b      	mov	r3, r1
 8008230:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008238:	78fa      	ldrb	r2, [r7, #3]
 800823a:	4611      	mov	r1, r2
 800823c:	4618      	mov	r0, r3
 800823e:	f7f9 ff0a 	bl	8002056 <HAL_PCD_EP_GetRxCount>
 8008242:	4603      	mov	r3, r0
}
 8008244:	4618      	mov	r0, r3
 8008246:	3708      	adds	r7, #8
 8008248:	46bd      	mov	sp, r7
 800824a:	bd80      	pop	{r7, pc}

0800824c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800824c:	b480      	push	{r7}
 800824e:	b083      	sub	sp, #12
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008254:	4b02      	ldr	r3, [pc, #8]	; (8008260 <USBD_static_malloc+0x14>)
}
 8008256:	4618      	mov	r0, r3
 8008258:	370c      	adds	r7, #12
 800825a:	46bd      	mov	sp, r7
 800825c:	bc80      	pop	{r7}
 800825e:	4770      	bx	lr
 8008260:	20000294 	.word	0x20000294

08008264 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008264:	b480      	push	{r7}
 8008266:	b083      	sub	sp, #12
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]

}
 800826c:	bf00      	nop
 800826e:	370c      	adds	r7, #12
 8008270:	46bd      	mov	sp, r7
 8008272:	bc80      	pop	{r7}
 8008274:	4770      	bx	lr

08008276 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008276:	b480      	push	{r7}
 8008278:	b083      	sub	sp, #12
 800827a:	af00      	add	r7, sp, #0
 800827c:	6078      	str	r0, [r7, #4]
 800827e:	460b      	mov	r3, r1
 8008280:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8008282:	bf00      	nop
 8008284:	370c      	adds	r7, #12
 8008286:	46bd      	mov	sp, r7
 8008288:	bc80      	pop	{r7}
 800828a:	4770      	bx	lr

0800828c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800828c:	b480      	push	{r7}
 800828e:	b085      	sub	sp, #20
 8008290:	af00      	add	r7, sp, #0
 8008292:	4603      	mov	r3, r0
 8008294:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008296:	2300      	movs	r3, #0
 8008298:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800829a:	79fb      	ldrb	r3, [r7, #7]
 800829c:	2b03      	cmp	r3, #3
 800829e:	d817      	bhi.n	80082d0 <USBD_Get_USB_Status+0x44>
 80082a0:	a201      	add	r2, pc, #4	; (adr r2, 80082a8 <USBD_Get_USB_Status+0x1c>)
 80082a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082a6:	bf00      	nop
 80082a8:	080082b9 	.word	0x080082b9
 80082ac:	080082bf 	.word	0x080082bf
 80082b0:	080082c5 	.word	0x080082c5
 80082b4:	080082cb 	.word	0x080082cb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80082b8:	2300      	movs	r3, #0
 80082ba:	73fb      	strb	r3, [r7, #15]
    break;
 80082bc:	e00b      	b.n	80082d6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80082be:	2302      	movs	r3, #2
 80082c0:	73fb      	strb	r3, [r7, #15]
    break;
 80082c2:	e008      	b.n	80082d6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80082c4:	2301      	movs	r3, #1
 80082c6:	73fb      	strb	r3, [r7, #15]
    break;
 80082c8:	e005      	b.n	80082d6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80082ca:	2302      	movs	r3, #2
 80082cc:	73fb      	strb	r3, [r7, #15]
    break;
 80082ce:	e002      	b.n	80082d6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80082d0:	2302      	movs	r3, #2
 80082d2:	73fb      	strb	r3, [r7, #15]
    break;
 80082d4:	bf00      	nop
  }
  return usb_status;
 80082d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80082d8:	4618      	mov	r0, r3
 80082da:	3714      	adds	r7, #20
 80082dc:	46bd      	mov	sp, r7
 80082de:	bc80      	pop	{r7}
 80082e0:	4770      	bx	lr
 80082e2:	bf00      	nop

080082e4 <__errno>:
 80082e4:	4b01      	ldr	r3, [pc, #4]	; (80082ec <__errno+0x8>)
 80082e6:	6818      	ldr	r0, [r3, #0]
 80082e8:	4770      	bx	lr
 80082ea:	bf00      	nop
 80082ec:	2000020c 	.word	0x2000020c

080082f0 <__libc_init_array>:
 80082f0:	b570      	push	{r4, r5, r6, lr}
 80082f2:	2600      	movs	r6, #0
 80082f4:	4d0c      	ldr	r5, [pc, #48]	; (8008328 <__libc_init_array+0x38>)
 80082f6:	4c0d      	ldr	r4, [pc, #52]	; (800832c <__libc_init_array+0x3c>)
 80082f8:	1b64      	subs	r4, r4, r5
 80082fa:	10a4      	asrs	r4, r4, #2
 80082fc:	42a6      	cmp	r6, r4
 80082fe:	d109      	bne.n	8008314 <__libc_init_array+0x24>
 8008300:	f000 fc5c 	bl	8008bbc <_init>
 8008304:	2600      	movs	r6, #0
 8008306:	4d0a      	ldr	r5, [pc, #40]	; (8008330 <__libc_init_array+0x40>)
 8008308:	4c0a      	ldr	r4, [pc, #40]	; (8008334 <__libc_init_array+0x44>)
 800830a:	1b64      	subs	r4, r4, r5
 800830c:	10a4      	asrs	r4, r4, #2
 800830e:	42a6      	cmp	r6, r4
 8008310:	d105      	bne.n	800831e <__libc_init_array+0x2e>
 8008312:	bd70      	pop	{r4, r5, r6, pc}
 8008314:	f855 3b04 	ldr.w	r3, [r5], #4
 8008318:	4798      	blx	r3
 800831a:	3601      	adds	r6, #1
 800831c:	e7ee      	b.n	80082fc <__libc_init_array+0xc>
 800831e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008322:	4798      	blx	r3
 8008324:	3601      	adds	r6, #1
 8008326:	e7f2      	b.n	800830e <__libc_init_array+0x1e>
 8008328:	08008cf0 	.word	0x08008cf0
 800832c:	08008cf0 	.word	0x08008cf0
 8008330:	08008cf0 	.word	0x08008cf0
 8008334:	08008cf4 	.word	0x08008cf4

08008338 <memset>:
 8008338:	4603      	mov	r3, r0
 800833a:	4402      	add	r2, r0
 800833c:	4293      	cmp	r3, r2
 800833e:	d100      	bne.n	8008342 <memset+0xa>
 8008340:	4770      	bx	lr
 8008342:	f803 1b01 	strb.w	r1, [r3], #1
 8008346:	e7f9      	b.n	800833c <memset+0x4>

08008348 <siprintf>:
 8008348:	b40e      	push	{r1, r2, r3}
 800834a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800834e:	b500      	push	{lr}
 8008350:	b09c      	sub	sp, #112	; 0x70
 8008352:	ab1d      	add	r3, sp, #116	; 0x74
 8008354:	9002      	str	r0, [sp, #8]
 8008356:	9006      	str	r0, [sp, #24]
 8008358:	9107      	str	r1, [sp, #28]
 800835a:	9104      	str	r1, [sp, #16]
 800835c:	4808      	ldr	r0, [pc, #32]	; (8008380 <siprintf+0x38>)
 800835e:	4909      	ldr	r1, [pc, #36]	; (8008384 <siprintf+0x3c>)
 8008360:	f853 2b04 	ldr.w	r2, [r3], #4
 8008364:	9105      	str	r1, [sp, #20]
 8008366:	6800      	ldr	r0, [r0, #0]
 8008368:	a902      	add	r1, sp, #8
 800836a:	9301      	str	r3, [sp, #4]
 800836c:	f000 f868 	bl	8008440 <_svfiprintf_r>
 8008370:	2200      	movs	r2, #0
 8008372:	9b02      	ldr	r3, [sp, #8]
 8008374:	701a      	strb	r2, [r3, #0]
 8008376:	b01c      	add	sp, #112	; 0x70
 8008378:	f85d eb04 	ldr.w	lr, [sp], #4
 800837c:	b003      	add	sp, #12
 800837e:	4770      	bx	lr
 8008380:	2000020c 	.word	0x2000020c
 8008384:	ffff0208 	.word	0xffff0208

08008388 <__ssputs_r>:
 8008388:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800838c:	688e      	ldr	r6, [r1, #8]
 800838e:	4682      	mov	sl, r0
 8008390:	429e      	cmp	r6, r3
 8008392:	460c      	mov	r4, r1
 8008394:	4690      	mov	r8, r2
 8008396:	461f      	mov	r7, r3
 8008398:	d838      	bhi.n	800840c <__ssputs_r+0x84>
 800839a:	898a      	ldrh	r2, [r1, #12]
 800839c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80083a0:	d032      	beq.n	8008408 <__ssputs_r+0x80>
 80083a2:	6825      	ldr	r5, [r4, #0]
 80083a4:	6909      	ldr	r1, [r1, #16]
 80083a6:	3301      	adds	r3, #1
 80083a8:	eba5 0901 	sub.w	r9, r5, r1
 80083ac:	6965      	ldr	r5, [r4, #20]
 80083ae:	444b      	add	r3, r9
 80083b0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80083b4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80083b8:	106d      	asrs	r5, r5, #1
 80083ba:	429d      	cmp	r5, r3
 80083bc:	bf38      	it	cc
 80083be:	461d      	movcc	r5, r3
 80083c0:	0553      	lsls	r3, r2, #21
 80083c2:	d531      	bpl.n	8008428 <__ssputs_r+0xa0>
 80083c4:	4629      	mov	r1, r5
 80083c6:	f000 fb53 	bl	8008a70 <_malloc_r>
 80083ca:	4606      	mov	r6, r0
 80083cc:	b950      	cbnz	r0, 80083e4 <__ssputs_r+0x5c>
 80083ce:	230c      	movs	r3, #12
 80083d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80083d4:	f8ca 3000 	str.w	r3, [sl]
 80083d8:	89a3      	ldrh	r3, [r4, #12]
 80083da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083de:	81a3      	strh	r3, [r4, #12]
 80083e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083e4:	464a      	mov	r2, r9
 80083e6:	6921      	ldr	r1, [r4, #16]
 80083e8:	f000 face 	bl	8008988 <memcpy>
 80083ec:	89a3      	ldrh	r3, [r4, #12]
 80083ee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80083f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083f6:	81a3      	strh	r3, [r4, #12]
 80083f8:	6126      	str	r6, [r4, #16]
 80083fa:	444e      	add	r6, r9
 80083fc:	6026      	str	r6, [r4, #0]
 80083fe:	463e      	mov	r6, r7
 8008400:	6165      	str	r5, [r4, #20]
 8008402:	eba5 0509 	sub.w	r5, r5, r9
 8008406:	60a5      	str	r5, [r4, #8]
 8008408:	42be      	cmp	r6, r7
 800840a:	d900      	bls.n	800840e <__ssputs_r+0x86>
 800840c:	463e      	mov	r6, r7
 800840e:	4632      	mov	r2, r6
 8008410:	4641      	mov	r1, r8
 8008412:	6820      	ldr	r0, [r4, #0]
 8008414:	f000 fac6 	bl	80089a4 <memmove>
 8008418:	68a3      	ldr	r3, [r4, #8]
 800841a:	6822      	ldr	r2, [r4, #0]
 800841c:	1b9b      	subs	r3, r3, r6
 800841e:	4432      	add	r2, r6
 8008420:	2000      	movs	r0, #0
 8008422:	60a3      	str	r3, [r4, #8]
 8008424:	6022      	str	r2, [r4, #0]
 8008426:	e7db      	b.n	80083e0 <__ssputs_r+0x58>
 8008428:	462a      	mov	r2, r5
 800842a:	f000 fb7b 	bl	8008b24 <_realloc_r>
 800842e:	4606      	mov	r6, r0
 8008430:	2800      	cmp	r0, #0
 8008432:	d1e1      	bne.n	80083f8 <__ssputs_r+0x70>
 8008434:	4650      	mov	r0, sl
 8008436:	6921      	ldr	r1, [r4, #16]
 8008438:	f000 face 	bl	80089d8 <_free_r>
 800843c:	e7c7      	b.n	80083ce <__ssputs_r+0x46>
	...

08008440 <_svfiprintf_r>:
 8008440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008444:	4698      	mov	r8, r3
 8008446:	898b      	ldrh	r3, [r1, #12]
 8008448:	4607      	mov	r7, r0
 800844a:	061b      	lsls	r3, r3, #24
 800844c:	460d      	mov	r5, r1
 800844e:	4614      	mov	r4, r2
 8008450:	b09d      	sub	sp, #116	; 0x74
 8008452:	d50e      	bpl.n	8008472 <_svfiprintf_r+0x32>
 8008454:	690b      	ldr	r3, [r1, #16]
 8008456:	b963      	cbnz	r3, 8008472 <_svfiprintf_r+0x32>
 8008458:	2140      	movs	r1, #64	; 0x40
 800845a:	f000 fb09 	bl	8008a70 <_malloc_r>
 800845e:	6028      	str	r0, [r5, #0]
 8008460:	6128      	str	r0, [r5, #16]
 8008462:	b920      	cbnz	r0, 800846e <_svfiprintf_r+0x2e>
 8008464:	230c      	movs	r3, #12
 8008466:	603b      	str	r3, [r7, #0]
 8008468:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800846c:	e0d1      	b.n	8008612 <_svfiprintf_r+0x1d2>
 800846e:	2340      	movs	r3, #64	; 0x40
 8008470:	616b      	str	r3, [r5, #20]
 8008472:	2300      	movs	r3, #0
 8008474:	9309      	str	r3, [sp, #36]	; 0x24
 8008476:	2320      	movs	r3, #32
 8008478:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800847c:	2330      	movs	r3, #48	; 0x30
 800847e:	f04f 0901 	mov.w	r9, #1
 8008482:	f8cd 800c 	str.w	r8, [sp, #12]
 8008486:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800862c <_svfiprintf_r+0x1ec>
 800848a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800848e:	4623      	mov	r3, r4
 8008490:	469a      	mov	sl, r3
 8008492:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008496:	b10a      	cbz	r2, 800849c <_svfiprintf_r+0x5c>
 8008498:	2a25      	cmp	r2, #37	; 0x25
 800849a:	d1f9      	bne.n	8008490 <_svfiprintf_r+0x50>
 800849c:	ebba 0b04 	subs.w	fp, sl, r4
 80084a0:	d00b      	beq.n	80084ba <_svfiprintf_r+0x7a>
 80084a2:	465b      	mov	r3, fp
 80084a4:	4622      	mov	r2, r4
 80084a6:	4629      	mov	r1, r5
 80084a8:	4638      	mov	r0, r7
 80084aa:	f7ff ff6d 	bl	8008388 <__ssputs_r>
 80084ae:	3001      	adds	r0, #1
 80084b0:	f000 80aa 	beq.w	8008608 <_svfiprintf_r+0x1c8>
 80084b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80084b6:	445a      	add	r2, fp
 80084b8:	9209      	str	r2, [sp, #36]	; 0x24
 80084ba:	f89a 3000 	ldrb.w	r3, [sl]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	f000 80a2 	beq.w	8008608 <_svfiprintf_r+0x1c8>
 80084c4:	2300      	movs	r3, #0
 80084c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80084ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80084ce:	f10a 0a01 	add.w	sl, sl, #1
 80084d2:	9304      	str	r3, [sp, #16]
 80084d4:	9307      	str	r3, [sp, #28]
 80084d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80084da:	931a      	str	r3, [sp, #104]	; 0x68
 80084dc:	4654      	mov	r4, sl
 80084de:	2205      	movs	r2, #5
 80084e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084e4:	4851      	ldr	r0, [pc, #324]	; (800862c <_svfiprintf_r+0x1ec>)
 80084e6:	f000 fa41 	bl	800896c <memchr>
 80084ea:	9a04      	ldr	r2, [sp, #16]
 80084ec:	b9d8      	cbnz	r0, 8008526 <_svfiprintf_r+0xe6>
 80084ee:	06d0      	lsls	r0, r2, #27
 80084f0:	bf44      	itt	mi
 80084f2:	2320      	movmi	r3, #32
 80084f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80084f8:	0711      	lsls	r1, r2, #28
 80084fa:	bf44      	itt	mi
 80084fc:	232b      	movmi	r3, #43	; 0x2b
 80084fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008502:	f89a 3000 	ldrb.w	r3, [sl]
 8008506:	2b2a      	cmp	r3, #42	; 0x2a
 8008508:	d015      	beq.n	8008536 <_svfiprintf_r+0xf6>
 800850a:	4654      	mov	r4, sl
 800850c:	2000      	movs	r0, #0
 800850e:	f04f 0c0a 	mov.w	ip, #10
 8008512:	9a07      	ldr	r2, [sp, #28]
 8008514:	4621      	mov	r1, r4
 8008516:	f811 3b01 	ldrb.w	r3, [r1], #1
 800851a:	3b30      	subs	r3, #48	; 0x30
 800851c:	2b09      	cmp	r3, #9
 800851e:	d94e      	bls.n	80085be <_svfiprintf_r+0x17e>
 8008520:	b1b0      	cbz	r0, 8008550 <_svfiprintf_r+0x110>
 8008522:	9207      	str	r2, [sp, #28]
 8008524:	e014      	b.n	8008550 <_svfiprintf_r+0x110>
 8008526:	eba0 0308 	sub.w	r3, r0, r8
 800852a:	fa09 f303 	lsl.w	r3, r9, r3
 800852e:	4313      	orrs	r3, r2
 8008530:	46a2      	mov	sl, r4
 8008532:	9304      	str	r3, [sp, #16]
 8008534:	e7d2      	b.n	80084dc <_svfiprintf_r+0x9c>
 8008536:	9b03      	ldr	r3, [sp, #12]
 8008538:	1d19      	adds	r1, r3, #4
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	9103      	str	r1, [sp, #12]
 800853e:	2b00      	cmp	r3, #0
 8008540:	bfbb      	ittet	lt
 8008542:	425b      	neglt	r3, r3
 8008544:	f042 0202 	orrlt.w	r2, r2, #2
 8008548:	9307      	strge	r3, [sp, #28]
 800854a:	9307      	strlt	r3, [sp, #28]
 800854c:	bfb8      	it	lt
 800854e:	9204      	strlt	r2, [sp, #16]
 8008550:	7823      	ldrb	r3, [r4, #0]
 8008552:	2b2e      	cmp	r3, #46	; 0x2e
 8008554:	d10c      	bne.n	8008570 <_svfiprintf_r+0x130>
 8008556:	7863      	ldrb	r3, [r4, #1]
 8008558:	2b2a      	cmp	r3, #42	; 0x2a
 800855a:	d135      	bne.n	80085c8 <_svfiprintf_r+0x188>
 800855c:	9b03      	ldr	r3, [sp, #12]
 800855e:	3402      	adds	r4, #2
 8008560:	1d1a      	adds	r2, r3, #4
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	9203      	str	r2, [sp, #12]
 8008566:	2b00      	cmp	r3, #0
 8008568:	bfb8      	it	lt
 800856a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800856e:	9305      	str	r3, [sp, #20]
 8008570:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800863c <_svfiprintf_r+0x1fc>
 8008574:	2203      	movs	r2, #3
 8008576:	4650      	mov	r0, sl
 8008578:	7821      	ldrb	r1, [r4, #0]
 800857a:	f000 f9f7 	bl	800896c <memchr>
 800857e:	b140      	cbz	r0, 8008592 <_svfiprintf_r+0x152>
 8008580:	2340      	movs	r3, #64	; 0x40
 8008582:	eba0 000a 	sub.w	r0, r0, sl
 8008586:	fa03 f000 	lsl.w	r0, r3, r0
 800858a:	9b04      	ldr	r3, [sp, #16]
 800858c:	3401      	adds	r4, #1
 800858e:	4303      	orrs	r3, r0
 8008590:	9304      	str	r3, [sp, #16]
 8008592:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008596:	2206      	movs	r2, #6
 8008598:	4825      	ldr	r0, [pc, #148]	; (8008630 <_svfiprintf_r+0x1f0>)
 800859a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800859e:	f000 f9e5 	bl	800896c <memchr>
 80085a2:	2800      	cmp	r0, #0
 80085a4:	d038      	beq.n	8008618 <_svfiprintf_r+0x1d8>
 80085a6:	4b23      	ldr	r3, [pc, #140]	; (8008634 <_svfiprintf_r+0x1f4>)
 80085a8:	bb1b      	cbnz	r3, 80085f2 <_svfiprintf_r+0x1b2>
 80085aa:	9b03      	ldr	r3, [sp, #12]
 80085ac:	3307      	adds	r3, #7
 80085ae:	f023 0307 	bic.w	r3, r3, #7
 80085b2:	3308      	adds	r3, #8
 80085b4:	9303      	str	r3, [sp, #12]
 80085b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085b8:	4433      	add	r3, r6
 80085ba:	9309      	str	r3, [sp, #36]	; 0x24
 80085bc:	e767      	b.n	800848e <_svfiprintf_r+0x4e>
 80085be:	460c      	mov	r4, r1
 80085c0:	2001      	movs	r0, #1
 80085c2:	fb0c 3202 	mla	r2, ip, r2, r3
 80085c6:	e7a5      	b.n	8008514 <_svfiprintf_r+0xd4>
 80085c8:	2300      	movs	r3, #0
 80085ca:	f04f 0c0a 	mov.w	ip, #10
 80085ce:	4619      	mov	r1, r3
 80085d0:	3401      	adds	r4, #1
 80085d2:	9305      	str	r3, [sp, #20]
 80085d4:	4620      	mov	r0, r4
 80085d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80085da:	3a30      	subs	r2, #48	; 0x30
 80085dc:	2a09      	cmp	r2, #9
 80085de:	d903      	bls.n	80085e8 <_svfiprintf_r+0x1a8>
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d0c5      	beq.n	8008570 <_svfiprintf_r+0x130>
 80085e4:	9105      	str	r1, [sp, #20]
 80085e6:	e7c3      	b.n	8008570 <_svfiprintf_r+0x130>
 80085e8:	4604      	mov	r4, r0
 80085ea:	2301      	movs	r3, #1
 80085ec:	fb0c 2101 	mla	r1, ip, r1, r2
 80085f0:	e7f0      	b.n	80085d4 <_svfiprintf_r+0x194>
 80085f2:	ab03      	add	r3, sp, #12
 80085f4:	9300      	str	r3, [sp, #0]
 80085f6:	462a      	mov	r2, r5
 80085f8:	4638      	mov	r0, r7
 80085fa:	4b0f      	ldr	r3, [pc, #60]	; (8008638 <_svfiprintf_r+0x1f8>)
 80085fc:	a904      	add	r1, sp, #16
 80085fe:	f3af 8000 	nop.w
 8008602:	1c42      	adds	r2, r0, #1
 8008604:	4606      	mov	r6, r0
 8008606:	d1d6      	bne.n	80085b6 <_svfiprintf_r+0x176>
 8008608:	89ab      	ldrh	r3, [r5, #12]
 800860a:	065b      	lsls	r3, r3, #25
 800860c:	f53f af2c 	bmi.w	8008468 <_svfiprintf_r+0x28>
 8008610:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008612:	b01d      	add	sp, #116	; 0x74
 8008614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008618:	ab03      	add	r3, sp, #12
 800861a:	9300      	str	r3, [sp, #0]
 800861c:	462a      	mov	r2, r5
 800861e:	4638      	mov	r0, r7
 8008620:	4b05      	ldr	r3, [pc, #20]	; (8008638 <_svfiprintf_r+0x1f8>)
 8008622:	a904      	add	r1, sp, #16
 8008624:	f000 f87c 	bl	8008720 <_printf_i>
 8008628:	e7eb      	b.n	8008602 <_svfiprintf_r+0x1c2>
 800862a:	bf00      	nop
 800862c:	08008cbc 	.word	0x08008cbc
 8008630:	08008cc6 	.word	0x08008cc6
 8008634:	00000000 	.word	0x00000000
 8008638:	08008389 	.word	0x08008389
 800863c:	08008cc2 	.word	0x08008cc2

08008640 <_printf_common>:
 8008640:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008644:	4616      	mov	r6, r2
 8008646:	4699      	mov	r9, r3
 8008648:	688a      	ldr	r2, [r1, #8]
 800864a:	690b      	ldr	r3, [r1, #16]
 800864c:	4607      	mov	r7, r0
 800864e:	4293      	cmp	r3, r2
 8008650:	bfb8      	it	lt
 8008652:	4613      	movlt	r3, r2
 8008654:	6033      	str	r3, [r6, #0]
 8008656:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800865a:	460c      	mov	r4, r1
 800865c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008660:	b10a      	cbz	r2, 8008666 <_printf_common+0x26>
 8008662:	3301      	adds	r3, #1
 8008664:	6033      	str	r3, [r6, #0]
 8008666:	6823      	ldr	r3, [r4, #0]
 8008668:	0699      	lsls	r1, r3, #26
 800866a:	bf42      	ittt	mi
 800866c:	6833      	ldrmi	r3, [r6, #0]
 800866e:	3302      	addmi	r3, #2
 8008670:	6033      	strmi	r3, [r6, #0]
 8008672:	6825      	ldr	r5, [r4, #0]
 8008674:	f015 0506 	ands.w	r5, r5, #6
 8008678:	d106      	bne.n	8008688 <_printf_common+0x48>
 800867a:	f104 0a19 	add.w	sl, r4, #25
 800867e:	68e3      	ldr	r3, [r4, #12]
 8008680:	6832      	ldr	r2, [r6, #0]
 8008682:	1a9b      	subs	r3, r3, r2
 8008684:	42ab      	cmp	r3, r5
 8008686:	dc28      	bgt.n	80086da <_printf_common+0x9a>
 8008688:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800868c:	1e13      	subs	r3, r2, #0
 800868e:	6822      	ldr	r2, [r4, #0]
 8008690:	bf18      	it	ne
 8008692:	2301      	movne	r3, #1
 8008694:	0692      	lsls	r2, r2, #26
 8008696:	d42d      	bmi.n	80086f4 <_printf_common+0xb4>
 8008698:	4649      	mov	r1, r9
 800869a:	4638      	mov	r0, r7
 800869c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80086a0:	47c0      	blx	r8
 80086a2:	3001      	adds	r0, #1
 80086a4:	d020      	beq.n	80086e8 <_printf_common+0xa8>
 80086a6:	6823      	ldr	r3, [r4, #0]
 80086a8:	68e5      	ldr	r5, [r4, #12]
 80086aa:	f003 0306 	and.w	r3, r3, #6
 80086ae:	2b04      	cmp	r3, #4
 80086b0:	bf18      	it	ne
 80086b2:	2500      	movne	r5, #0
 80086b4:	6832      	ldr	r2, [r6, #0]
 80086b6:	f04f 0600 	mov.w	r6, #0
 80086ba:	68a3      	ldr	r3, [r4, #8]
 80086bc:	bf08      	it	eq
 80086be:	1aad      	subeq	r5, r5, r2
 80086c0:	6922      	ldr	r2, [r4, #16]
 80086c2:	bf08      	it	eq
 80086c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80086c8:	4293      	cmp	r3, r2
 80086ca:	bfc4      	itt	gt
 80086cc:	1a9b      	subgt	r3, r3, r2
 80086ce:	18ed      	addgt	r5, r5, r3
 80086d0:	341a      	adds	r4, #26
 80086d2:	42b5      	cmp	r5, r6
 80086d4:	d11a      	bne.n	800870c <_printf_common+0xcc>
 80086d6:	2000      	movs	r0, #0
 80086d8:	e008      	b.n	80086ec <_printf_common+0xac>
 80086da:	2301      	movs	r3, #1
 80086dc:	4652      	mov	r2, sl
 80086de:	4649      	mov	r1, r9
 80086e0:	4638      	mov	r0, r7
 80086e2:	47c0      	blx	r8
 80086e4:	3001      	adds	r0, #1
 80086e6:	d103      	bne.n	80086f0 <_printf_common+0xb0>
 80086e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80086ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086f0:	3501      	adds	r5, #1
 80086f2:	e7c4      	b.n	800867e <_printf_common+0x3e>
 80086f4:	2030      	movs	r0, #48	; 0x30
 80086f6:	18e1      	adds	r1, r4, r3
 80086f8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80086fc:	1c5a      	adds	r2, r3, #1
 80086fe:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008702:	4422      	add	r2, r4
 8008704:	3302      	adds	r3, #2
 8008706:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800870a:	e7c5      	b.n	8008698 <_printf_common+0x58>
 800870c:	2301      	movs	r3, #1
 800870e:	4622      	mov	r2, r4
 8008710:	4649      	mov	r1, r9
 8008712:	4638      	mov	r0, r7
 8008714:	47c0      	blx	r8
 8008716:	3001      	adds	r0, #1
 8008718:	d0e6      	beq.n	80086e8 <_printf_common+0xa8>
 800871a:	3601      	adds	r6, #1
 800871c:	e7d9      	b.n	80086d2 <_printf_common+0x92>
	...

08008720 <_printf_i>:
 8008720:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008724:	460c      	mov	r4, r1
 8008726:	7e27      	ldrb	r7, [r4, #24]
 8008728:	4691      	mov	r9, r2
 800872a:	2f78      	cmp	r7, #120	; 0x78
 800872c:	4680      	mov	r8, r0
 800872e:	469a      	mov	sl, r3
 8008730:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008732:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008736:	d807      	bhi.n	8008748 <_printf_i+0x28>
 8008738:	2f62      	cmp	r7, #98	; 0x62
 800873a:	d80a      	bhi.n	8008752 <_printf_i+0x32>
 800873c:	2f00      	cmp	r7, #0
 800873e:	f000 80d9 	beq.w	80088f4 <_printf_i+0x1d4>
 8008742:	2f58      	cmp	r7, #88	; 0x58
 8008744:	f000 80a4 	beq.w	8008890 <_printf_i+0x170>
 8008748:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800874c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008750:	e03a      	b.n	80087c8 <_printf_i+0xa8>
 8008752:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008756:	2b15      	cmp	r3, #21
 8008758:	d8f6      	bhi.n	8008748 <_printf_i+0x28>
 800875a:	a001      	add	r0, pc, #4	; (adr r0, 8008760 <_printf_i+0x40>)
 800875c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008760:	080087b9 	.word	0x080087b9
 8008764:	080087cd 	.word	0x080087cd
 8008768:	08008749 	.word	0x08008749
 800876c:	08008749 	.word	0x08008749
 8008770:	08008749 	.word	0x08008749
 8008774:	08008749 	.word	0x08008749
 8008778:	080087cd 	.word	0x080087cd
 800877c:	08008749 	.word	0x08008749
 8008780:	08008749 	.word	0x08008749
 8008784:	08008749 	.word	0x08008749
 8008788:	08008749 	.word	0x08008749
 800878c:	080088db 	.word	0x080088db
 8008790:	080087fd 	.word	0x080087fd
 8008794:	080088bd 	.word	0x080088bd
 8008798:	08008749 	.word	0x08008749
 800879c:	08008749 	.word	0x08008749
 80087a0:	080088fd 	.word	0x080088fd
 80087a4:	08008749 	.word	0x08008749
 80087a8:	080087fd 	.word	0x080087fd
 80087ac:	08008749 	.word	0x08008749
 80087b0:	08008749 	.word	0x08008749
 80087b4:	080088c5 	.word	0x080088c5
 80087b8:	680b      	ldr	r3, [r1, #0]
 80087ba:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80087be:	1d1a      	adds	r2, r3, #4
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	600a      	str	r2, [r1, #0]
 80087c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80087c8:	2301      	movs	r3, #1
 80087ca:	e0a4      	b.n	8008916 <_printf_i+0x1f6>
 80087cc:	6825      	ldr	r5, [r4, #0]
 80087ce:	6808      	ldr	r0, [r1, #0]
 80087d0:	062e      	lsls	r6, r5, #24
 80087d2:	f100 0304 	add.w	r3, r0, #4
 80087d6:	d50a      	bpl.n	80087ee <_printf_i+0xce>
 80087d8:	6805      	ldr	r5, [r0, #0]
 80087da:	600b      	str	r3, [r1, #0]
 80087dc:	2d00      	cmp	r5, #0
 80087de:	da03      	bge.n	80087e8 <_printf_i+0xc8>
 80087e0:	232d      	movs	r3, #45	; 0x2d
 80087e2:	426d      	negs	r5, r5
 80087e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80087e8:	230a      	movs	r3, #10
 80087ea:	485e      	ldr	r0, [pc, #376]	; (8008964 <_printf_i+0x244>)
 80087ec:	e019      	b.n	8008822 <_printf_i+0x102>
 80087ee:	f015 0f40 	tst.w	r5, #64	; 0x40
 80087f2:	6805      	ldr	r5, [r0, #0]
 80087f4:	600b      	str	r3, [r1, #0]
 80087f6:	bf18      	it	ne
 80087f8:	b22d      	sxthne	r5, r5
 80087fa:	e7ef      	b.n	80087dc <_printf_i+0xbc>
 80087fc:	680b      	ldr	r3, [r1, #0]
 80087fe:	6825      	ldr	r5, [r4, #0]
 8008800:	1d18      	adds	r0, r3, #4
 8008802:	6008      	str	r0, [r1, #0]
 8008804:	0628      	lsls	r0, r5, #24
 8008806:	d501      	bpl.n	800880c <_printf_i+0xec>
 8008808:	681d      	ldr	r5, [r3, #0]
 800880a:	e002      	b.n	8008812 <_printf_i+0xf2>
 800880c:	0669      	lsls	r1, r5, #25
 800880e:	d5fb      	bpl.n	8008808 <_printf_i+0xe8>
 8008810:	881d      	ldrh	r5, [r3, #0]
 8008812:	2f6f      	cmp	r7, #111	; 0x6f
 8008814:	bf0c      	ite	eq
 8008816:	2308      	moveq	r3, #8
 8008818:	230a      	movne	r3, #10
 800881a:	4852      	ldr	r0, [pc, #328]	; (8008964 <_printf_i+0x244>)
 800881c:	2100      	movs	r1, #0
 800881e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008822:	6866      	ldr	r6, [r4, #4]
 8008824:	2e00      	cmp	r6, #0
 8008826:	bfa8      	it	ge
 8008828:	6821      	ldrge	r1, [r4, #0]
 800882a:	60a6      	str	r6, [r4, #8]
 800882c:	bfa4      	itt	ge
 800882e:	f021 0104 	bicge.w	r1, r1, #4
 8008832:	6021      	strge	r1, [r4, #0]
 8008834:	b90d      	cbnz	r5, 800883a <_printf_i+0x11a>
 8008836:	2e00      	cmp	r6, #0
 8008838:	d04d      	beq.n	80088d6 <_printf_i+0x1b6>
 800883a:	4616      	mov	r6, r2
 800883c:	fbb5 f1f3 	udiv	r1, r5, r3
 8008840:	fb03 5711 	mls	r7, r3, r1, r5
 8008844:	5dc7      	ldrb	r7, [r0, r7]
 8008846:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800884a:	462f      	mov	r7, r5
 800884c:	42bb      	cmp	r3, r7
 800884e:	460d      	mov	r5, r1
 8008850:	d9f4      	bls.n	800883c <_printf_i+0x11c>
 8008852:	2b08      	cmp	r3, #8
 8008854:	d10b      	bne.n	800886e <_printf_i+0x14e>
 8008856:	6823      	ldr	r3, [r4, #0]
 8008858:	07df      	lsls	r7, r3, #31
 800885a:	d508      	bpl.n	800886e <_printf_i+0x14e>
 800885c:	6923      	ldr	r3, [r4, #16]
 800885e:	6861      	ldr	r1, [r4, #4]
 8008860:	4299      	cmp	r1, r3
 8008862:	bfde      	ittt	le
 8008864:	2330      	movle	r3, #48	; 0x30
 8008866:	f806 3c01 	strble.w	r3, [r6, #-1]
 800886a:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800886e:	1b92      	subs	r2, r2, r6
 8008870:	6122      	str	r2, [r4, #16]
 8008872:	464b      	mov	r3, r9
 8008874:	4621      	mov	r1, r4
 8008876:	4640      	mov	r0, r8
 8008878:	f8cd a000 	str.w	sl, [sp]
 800887c:	aa03      	add	r2, sp, #12
 800887e:	f7ff fedf 	bl	8008640 <_printf_common>
 8008882:	3001      	adds	r0, #1
 8008884:	d14c      	bne.n	8008920 <_printf_i+0x200>
 8008886:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800888a:	b004      	add	sp, #16
 800888c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008890:	4834      	ldr	r0, [pc, #208]	; (8008964 <_printf_i+0x244>)
 8008892:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008896:	680e      	ldr	r6, [r1, #0]
 8008898:	6823      	ldr	r3, [r4, #0]
 800889a:	f856 5b04 	ldr.w	r5, [r6], #4
 800889e:	061f      	lsls	r7, r3, #24
 80088a0:	600e      	str	r6, [r1, #0]
 80088a2:	d514      	bpl.n	80088ce <_printf_i+0x1ae>
 80088a4:	07d9      	lsls	r1, r3, #31
 80088a6:	bf44      	itt	mi
 80088a8:	f043 0320 	orrmi.w	r3, r3, #32
 80088ac:	6023      	strmi	r3, [r4, #0]
 80088ae:	b91d      	cbnz	r5, 80088b8 <_printf_i+0x198>
 80088b0:	6823      	ldr	r3, [r4, #0]
 80088b2:	f023 0320 	bic.w	r3, r3, #32
 80088b6:	6023      	str	r3, [r4, #0]
 80088b8:	2310      	movs	r3, #16
 80088ba:	e7af      	b.n	800881c <_printf_i+0xfc>
 80088bc:	6823      	ldr	r3, [r4, #0]
 80088be:	f043 0320 	orr.w	r3, r3, #32
 80088c2:	6023      	str	r3, [r4, #0]
 80088c4:	2378      	movs	r3, #120	; 0x78
 80088c6:	4828      	ldr	r0, [pc, #160]	; (8008968 <_printf_i+0x248>)
 80088c8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80088cc:	e7e3      	b.n	8008896 <_printf_i+0x176>
 80088ce:	065e      	lsls	r6, r3, #25
 80088d0:	bf48      	it	mi
 80088d2:	b2ad      	uxthmi	r5, r5
 80088d4:	e7e6      	b.n	80088a4 <_printf_i+0x184>
 80088d6:	4616      	mov	r6, r2
 80088d8:	e7bb      	b.n	8008852 <_printf_i+0x132>
 80088da:	680b      	ldr	r3, [r1, #0]
 80088dc:	6826      	ldr	r6, [r4, #0]
 80088de:	1d1d      	adds	r5, r3, #4
 80088e0:	6960      	ldr	r0, [r4, #20]
 80088e2:	600d      	str	r5, [r1, #0]
 80088e4:	0635      	lsls	r5, r6, #24
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	d501      	bpl.n	80088ee <_printf_i+0x1ce>
 80088ea:	6018      	str	r0, [r3, #0]
 80088ec:	e002      	b.n	80088f4 <_printf_i+0x1d4>
 80088ee:	0671      	lsls	r1, r6, #25
 80088f0:	d5fb      	bpl.n	80088ea <_printf_i+0x1ca>
 80088f2:	8018      	strh	r0, [r3, #0]
 80088f4:	2300      	movs	r3, #0
 80088f6:	4616      	mov	r6, r2
 80088f8:	6123      	str	r3, [r4, #16]
 80088fa:	e7ba      	b.n	8008872 <_printf_i+0x152>
 80088fc:	680b      	ldr	r3, [r1, #0]
 80088fe:	1d1a      	adds	r2, r3, #4
 8008900:	600a      	str	r2, [r1, #0]
 8008902:	681e      	ldr	r6, [r3, #0]
 8008904:	2100      	movs	r1, #0
 8008906:	4630      	mov	r0, r6
 8008908:	6862      	ldr	r2, [r4, #4]
 800890a:	f000 f82f 	bl	800896c <memchr>
 800890e:	b108      	cbz	r0, 8008914 <_printf_i+0x1f4>
 8008910:	1b80      	subs	r0, r0, r6
 8008912:	6060      	str	r0, [r4, #4]
 8008914:	6863      	ldr	r3, [r4, #4]
 8008916:	6123      	str	r3, [r4, #16]
 8008918:	2300      	movs	r3, #0
 800891a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800891e:	e7a8      	b.n	8008872 <_printf_i+0x152>
 8008920:	4632      	mov	r2, r6
 8008922:	4649      	mov	r1, r9
 8008924:	4640      	mov	r0, r8
 8008926:	6923      	ldr	r3, [r4, #16]
 8008928:	47d0      	blx	sl
 800892a:	3001      	adds	r0, #1
 800892c:	d0ab      	beq.n	8008886 <_printf_i+0x166>
 800892e:	6823      	ldr	r3, [r4, #0]
 8008930:	079b      	lsls	r3, r3, #30
 8008932:	d413      	bmi.n	800895c <_printf_i+0x23c>
 8008934:	68e0      	ldr	r0, [r4, #12]
 8008936:	9b03      	ldr	r3, [sp, #12]
 8008938:	4298      	cmp	r0, r3
 800893a:	bfb8      	it	lt
 800893c:	4618      	movlt	r0, r3
 800893e:	e7a4      	b.n	800888a <_printf_i+0x16a>
 8008940:	2301      	movs	r3, #1
 8008942:	4632      	mov	r2, r6
 8008944:	4649      	mov	r1, r9
 8008946:	4640      	mov	r0, r8
 8008948:	47d0      	blx	sl
 800894a:	3001      	adds	r0, #1
 800894c:	d09b      	beq.n	8008886 <_printf_i+0x166>
 800894e:	3501      	adds	r5, #1
 8008950:	68e3      	ldr	r3, [r4, #12]
 8008952:	9903      	ldr	r1, [sp, #12]
 8008954:	1a5b      	subs	r3, r3, r1
 8008956:	42ab      	cmp	r3, r5
 8008958:	dcf2      	bgt.n	8008940 <_printf_i+0x220>
 800895a:	e7eb      	b.n	8008934 <_printf_i+0x214>
 800895c:	2500      	movs	r5, #0
 800895e:	f104 0619 	add.w	r6, r4, #25
 8008962:	e7f5      	b.n	8008950 <_printf_i+0x230>
 8008964:	08008ccd 	.word	0x08008ccd
 8008968:	08008cde 	.word	0x08008cde

0800896c <memchr>:
 800896c:	4603      	mov	r3, r0
 800896e:	b510      	push	{r4, lr}
 8008970:	b2c9      	uxtb	r1, r1
 8008972:	4402      	add	r2, r0
 8008974:	4293      	cmp	r3, r2
 8008976:	4618      	mov	r0, r3
 8008978:	d101      	bne.n	800897e <memchr+0x12>
 800897a:	2000      	movs	r0, #0
 800897c:	e003      	b.n	8008986 <memchr+0x1a>
 800897e:	7804      	ldrb	r4, [r0, #0]
 8008980:	3301      	adds	r3, #1
 8008982:	428c      	cmp	r4, r1
 8008984:	d1f6      	bne.n	8008974 <memchr+0x8>
 8008986:	bd10      	pop	{r4, pc}

08008988 <memcpy>:
 8008988:	440a      	add	r2, r1
 800898a:	4291      	cmp	r1, r2
 800898c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008990:	d100      	bne.n	8008994 <memcpy+0xc>
 8008992:	4770      	bx	lr
 8008994:	b510      	push	{r4, lr}
 8008996:	f811 4b01 	ldrb.w	r4, [r1], #1
 800899a:	4291      	cmp	r1, r2
 800899c:	f803 4f01 	strb.w	r4, [r3, #1]!
 80089a0:	d1f9      	bne.n	8008996 <memcpy+0xe>
 80089a2:	bd10      	pop	{r4, pc}

080089a4 <memmove>:
 80089a4:	4288      	cmp	r0, r1
 80089a6:	b510      	push	{r4, lr}
 80089a8:	eb01 0402 	add.w	r4, r1, r2
 80089ac:	d902      	bls.n	80089b4 <memmove+0x10>
 80089ae:	4284      	cmp	r4, r0
 80089b0:	4623      	mov	r3, r4
 80089b2:	d807      	bhi.n	80089c4 <memmove+0x20>
 80089b4:	1e43      	subs	r3, r0, #1
 80089b6:	42a1      	cmp	r1, r4
 80089b8:	d008      	beq.n	80089cc <memmove+0x28>
 80089ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80089be:	f803 2f01 	strb.w	r2, [r3, #1]!
 80089c2:	e7f8      	b.n	80089b6 <memmove+0x12>
 80089c4:	4601      	mov	r1, r0
 80089c6:	4402      	add	r2, r0
 80089c8:	428a      	cmp	r2, r1
 80089ca:	d100      	bne.n	80089ce <memmove+0x2a>
 80089cc:	bd10      	pop	{r4, pc}
 80089ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80089d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80089d6:	e7f7      	b.n	80089c8 <memmove+0x24>

080089d8 <_free_r>:
 80089d8:	b538      	push	{r3, r4, r5, lr}
 80089da:	4605      	mov	r5, r0
 80089dc:	2900      	cmp	r1, #0
 80089de:	d043      	beq.n	8008a68 <_free_r+0x90>
 80089e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80089e4:	1f0c      	subs	r4, r1, #4
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	bfb8      	it	lt
 80089ea:	18e4      	addlt	r4, r4, r3
 80089ec:	f000 f8d0 	bl	8008b90 <__malloc_lock>
 80089f0:	4a1e      	ldr	r2, [pc, #120]	; (8008a6c <_free_r+0x94>)
 80089f2:	6813      	ldr	r3, [r2, #0]
 80089f4:	4610      	mov	r0, r2
 80089f6:	b933      	cbnz	r3, 8008a06 <_free_r+0x2e>
 80089f8:	6063      	str	r3, [r4, #4]
 80089fa:	6014      	str	r4, [r2, #0]
 80089fc:	4628      	mov	r0, r5
 80089fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008a02:	f000 b8cb 	b.w	8008b9c <__malloc_unlock>
 8008a06:	42a3      	cmp	r3, r4
 8008a08:	d90a      	bls.n	8008a20 <_free_r+0x48>
 8008a0a:	6821      	ldr	r1, [r4, #0]
 8008a0c:	1862      	adds	r2, r4, r1
 8008a0e:	4293      	cmp	r3, r2
 8008a10:	bf01      	itttt	eq
 8008a12:	681a      	ldreq	r2, [r3, #0]
 8008a14:	685b      	ldreq	r3, [r3, #4]
 8008a16:	1852      	addeq	r2, r2, r1
 8008a18:	6022      	streq	r2, [r4, #0]
 8008a1a:	6063      	str	r3, [r4, #4]
 8008a1c:	6004      	str	r4, [r0, #0]
 8008a1e:	e7ed      	b.n	80089fc <_free_r+0x24>
 8008a20:	461a      	mov	r2, r3
 8008a22:	685b      	ldr	r3, [r3, #4]
 8008a24:	b10b      	cbz	r3, 8008a2a <_free_r+0x52>
 8008a26:	42a3      	cmp	r3, r4
 8008a28:	d9fa      	bls.n	8008a20 <_free_r+0x48>
 8008a2a:	6811      	ldr	r1, [r2, #0]
 8008a2c:	1850      	adds	r0, r2, r1
 8008a2e:	42a0      	cmp	r0, r4
 8008a30:	d10b      	bne.n	8008a4a <_free_r+0x72>
 8008a32:	6820      	ldr	r0, [r4, #0]
 8008a34:	4401      	add	r1, r0
 8008a36:	1850      	adds	r0, r2, r1
 8008a38:	4283      	cmp	r3, r0
 8008a3a:	6011      	str	r1, [r2, #0]
 8008a3c:	d1de      	bne.n	80089fc <_free_r+0x24>
 8008a3e:	6818      	ldr	r0, [r3, #0]
 8008a40:	685b      	ldr	r3, [r3, #4]
 8008a42:	4401      	add	r1, r0
 8008a44:	6011      	str	r1, [r2, #0]
 8008a46:	6053      	str	r3, [r2, #4]
 8008a48:	e7d8      	b.n	80089fc <_free_r+0x24>
 8008a4a:	d902      	bls.n	8008a52 <_free_r+0x7a>
 8008a4c:	230c      	movs	r3, #12
 8008a4e:	602b      	str	r3, [r5, #0]
 8008a50:	e7d4      	b.n	80089fc <_free_r+0x24>
 8008a52:	6820      	ldr	r0, [r4, #0]
 8008a54:	1821      	adds	r1, r4, r0
 8008a56:	428b      	cmp	r3, r1
 8008a58:	bf01      	itttt	eq
 8008a5a:	6819      	ldreq	r1, [r3, #0]
 8008a5c:	685b      	ldreq	r3, [r3, #4]
 8008a5e:	1809      	addeq	r1, r1, r0
 8008a60:	6021      	streq	r1, [r4, #0]
 8008a62:	6063      	str	r3, [r4, #4]
 8008a64:	6054      	str	r4, [r2, #4]
 8008a66:	e7c9      	b.n	80089fc <_free_r+0x24>
 8008a68:	bd38      	pop	{r3, r4, r5, pc}
 8008a6a:	bf00      	nop
 8008a6c:	200004b4 	.word	0x200004b4

08008a70 <_malloc_r>:
 8008a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a72:	1ccd      	adds	r5, r1, #3
 8008a74:	f025 0503 	bic.w	r5, r5, #3
 8008a78:	3508      	adds	r5, #8
 8008a7a:	2d0c      	cmp	r5, #12
 8008a7c:	bf38      	it	cc
 8008a7e:	250c      	movcc	r5, #12
 8008a80:	2d00      	cmp	r5, #0
 8008a82:	4606      	mov	r6, r0
 8008a84:	db01      	blt.n	8008a8a <_malloc_r+0x1a>
 8008a86:	42a9      	cmp	r1, r5
 8008a88:	d903      	bls.n	8008a92 <_malloc_r+0x22>
 8008a8a:	230c      	movs	r3, #12
 8008a8c:	6033      	str	r3, [r6, #0]
 8008a8e:	2000      	movs	r0, #0
 8008a90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a92:	f000 f87d 	bl	8008b90 <__malloc_lock>
 8008a96:	4921      	ldr	r1, [pc, #132]	; (8008b1c <_malloc_r+0xac>)
 8008a98:	680a      	ldr	r2, [r1, #0]
 8008a9a:	4614      	mov	r4, r2
 8008a9c:	b99c      	cbnz	r4, 8008ac6 <_malloc_r+0x56>
 8008a9e:	4f20      	ldr	r7, [pc, #128]	; (8008b20 <_malloc_r+0xb0>)
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	b923      	cbnz	r3, 8008aae <_malloc_r+0x3e>
 8008aa4:	4621      	mov	r1, r4
 8008aa6:	4630      	mov	r0, r6
 8008aa8:	f000 f862 	bl	8008b70 <_sbrk_r>
 8008aac:	6038      	str	r0, [r7, #0]
 8008aae:	4629      	mov	r1, r5
 8008ab0:	4630      	mov	r0, r6
 8008ab2:	f000 f85d 	bl	8008b70 <_sbrk_r>
 8008ab6:	1c43      	adds	r3, r0, #1
 8008ab8:	d123      	bne.n	8008b02 <_malloc_r+0x92>
 8008aba:	230c      	movs	r3, #12
 8008abc:	4630      	mov	r0, r6
 8008abe:	6033      	str	r3, [r6, #0]
 8008ac0:	f000 f86c 	bl	8008b9c <__malloc_unlock>
 8008ac4:	e7e3      	b.n	8008a8e <_malloc_r+0x1e>
 8008ac6:	6823      	ldr	r3, [r4, #0]
 8008ac8:	1b5b      	subs	r3, r3, r5
 8008aca:	d417      	bmi.n	8008afc <_malloc_r+0x8c>
 8008acc:	2b0b      	cmp	r3, #11
 8008ace:	d903      	bls.n	8008ad8 <_malloc_r+0x68>
 8008ad0:	6023      	str	r3, [r4, #0]
 8008ad2:	441c      	add	r4, r3
 8008ad4:	6025      	str	r5, [r4, #0]
 8008ad6:	e004      	b.n	8008ae2 <_malloc_r+0x72>
 8008ad8:	6863      	ldr	r3, [r4, #4]
 8008ada:	42a2      	cmp	r2, r4
 8008adc:	bf0c      	ite	eq
 8008ade:	600b      	streq	r3, [r1, #0]
 8008ae0:	6053      	strne	r3, [r2, #4]
 8008ae2:	4630      	mov	r0, r6
 8008ae4:	f000 f85a 	bl	8008b9c <__malloc_unlock>
 8008ae8:	f104 000b 	add.w	r0, r4, #11
 8008aec:	1d23      	adds	r3, r4, #4
 8008aee:	f020 0007 	bic.w	r0, r0, #7
 8008af2:	1ac2      	subs	r2, r0, r3
 8008af4:	d0cc      	beq.n	8008a90 <_malloc_r+0x20>
 8008af6:	1a1b      	subs	r3, r3, r0
 8008af8:	50a3      	str	r3, [r4, r2]
 8008afa:	e7c9      	b.n	8008a90 <_malloc_r+0x20>
 8008afc:	4622      	mov	r2, r4
 8008afe:	6864      	ldr	r4, [r4, #4]
 8008b00:	e7cc      	b.n	8008a9c <_malloc_r+0x2c>
 8008b02:	1cc4      	adds	r4, r0, #3
 8008b04:	f024 0403 	bic.w	r4, r4, #3
 8008b08:	42a0      	cmp	r0, r4
 8008b0a:	d0e3      	beq.n	8008ad4 <_malloc_r+0x64>
 8008b0c:	1a21      	subs	r1, r4, r0
 8008b0e:	4630      	mov	r0, r6
 8008b10:	f000 f82e 	bl	8008b70 <_sbrk_r>
 8008b14:	3001      	adds	r0, #1
 8008b16:	d1dd      	bne.n	8008ad4 <_malloc_r+0x64>
 8008b18:	e7cf      	b.n	8008aba <_malloc_r+0x4a>
 8008b1a:	bf00      	nop
 8008b1c:	200004b4 	.word	0x200004b4
 8008b20:	200004b8 	.word	0x200004b8

08008b24 <_realloc_r>:
 8008b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b26:	4607      	mov	r7, r0
 8008b28:	4614      	mov	r4, r2
 8008b2a:	460e      	mov	r6, r1
 8008b2c:	b921      	cbnz	r1, 8008b38 <_realloc_r+0x14>
 8008b2e:	4611      	mov	r1, r2
 8008b30:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008b34:	f7ff bf9c 	b.w	8008a70 <_malloc_r>
 8008b38:	b922      	cbnz	r2, 8008b44 <_realloc_r+0x20>
 8008b3a:	f7ff ff4d 	bl	80089d8 <_free_r>
 8008b3e:	4625      	mov	r5, r4
 8008b40:	4628      	mov	r0, r5
 8008b42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b44:	f000 f830 	bl	8008ba8 <_malloc_usable_size_r>
 8008b48:	42a0      	cmp	r0, r4
 8008b4a:	d20f      	bcs.n	8008b6c <_realloc_r+0x48>
 8008b4c:	4621      	mov	r1, r4
 8008b4e:	4638      	mov	r0, r7
 8008b50:	f7ff ff8e 	bl	8008a70 <_malloc_r>
 8008b54:	4605      	mov	r5, r0
 8008b56:	2800      	cmp	r0, #0
 8008b58:	d0f2      	beq.n	8008b40 <_realloc_r+0x1c>
 8008b5a:	4631      	mov	r1, r6
 8008b5c:	4622      	mov	r2, r4
 8008b5e:	f7ff ff13 	bl	8008988 <memcpy>
 8008b62:	4631      	mov	r1, r6
 8008b64:	4638      	mov	r0, r7
 8008b66:	f7ff ff37 	bl	80089d8 <_free_r>
 8008b6a:	e7e9      	b.n	8008b40 <_realloc_r+0x1c>
 8008b6c:	4635      	mov	r5, r6
 8008b6e:	e7e7      	b.n	8008b40 <_realloc_r+0x1c>

08008b70 <_sbrk_r>:
 8008b70:	b538      	push	{r3, r4, r5, lr}
 8008b72:	2300      	movs	r3, #0
 8008b74:	4d05      	ldr	r5, [pc, #20]	; (8008b8c <_sbrk_r+0x1c>)
 8008b76:	4604      	mov	r4, r0
 8008b78:	4608      	mov	r0, r1
 8008b7a:	602b      	str	r3, [r5, #0]
 8008b7c:	f7f7 fcb2 	bl	80004e4 <_sbrk>
 8008b80:	1c43      	adds	r3, r0, #1
 8008b82:	d102      	bne.n	8008b8a <_sbrk_r+0x1a>
 8008b84:	682b      	ldr	r3, [r5, #0]
 8008b86:	b103      	cbz	r3, 8008b8a <_sbrk_r+0x1a>
 8008b88:	6023      	str	r3, [r4, #0]
 8008b8a:	bd38      	pop	{r3, r4, r5, pc}
 8008b8c:	20001470 	.word	0x20001470

08008b90 <__malloc_lock>:
 8008b90:	4801      	ldr	r0, [pc, #4]	; (8008b98 <__malloc_lock+0x8>)
 8008b92:	f000 b811 	b.w	8008bb8 <__retarget_lock_acquire_recursive>
 8008b96:	bf00      	nop
 8008b98:	20001478 	.word	0x20001478

08008b9c <__malloc_unlock>:
 8008b9c:	4801      	ldr	r0, [pc, #4]	; (8008ba4 <__malloc_unlock+0x8>)
 8008b9e:	f000 b80c 	b.w	8008bba <__retarget_lock_release_recursive>
 8008ba2:	bf00      	nop
 8008ba4:	20001478 	.word	0x20001478

08008ba8 <_malloc_usable_size_r>:
 8008ba8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008bac:	1f18      	subs	r0, r3, #4
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	bfbc      	itt	lt
 8008bb2:	580b      	ldrlt	r3, [r1, r0]
 8008bb4:	18c0      	addlt	r0, r0, r3
 8008bb6:	4770      	bx	lr

08008bb8 <__retarget_lock_acquire_recursive>:
 8008bb8:	4770      	bx	lr

08008bba <__retarget_lock_release_recursive>:
 8008bba:	4770      	bx	lr

08008bbc <_init>:
 8008bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bbe:	bf00      	nop
 8008bc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bc2:	bc08      	pop	{r3}
 8008bc4:	469e      	mov	lr, r3
 8008bc6:	4770      	bx	lr

08008bc8 <_fini>:
 8008bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bca:	bf00      	nop
 8008bcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bce:	bc08      	pop	{r3}
 8008bd0:	469e      	mov	lr, r3
 8008bd2:	4770      	bx	lr
