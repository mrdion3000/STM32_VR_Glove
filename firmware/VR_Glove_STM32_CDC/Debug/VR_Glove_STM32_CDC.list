
VR_Glove_STM32_CDC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009728  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  08009838  08009838  00019838  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009954  08009954  0002027c  2**0
                  CONTENTS
  4 .ARM          00000000  08009954  08009954  0002027c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009954  08009954  0002027c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009954  08009954  00019954  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009958  08009958  00019958  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000027c  20000000  0800995c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001210  2000027c  08009bd8  0002027c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000148c  08009bd8  0002148c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002027c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014c51  00000000  00000000  000202a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003361  00000000  00000000  00034ef6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bd8  00000000  00000000  00038258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a60  00000000  00000000  00038e30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a7bf  00000000  00000000  00039890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fff6  00000000  00000000  0005404f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a3de  00000000  00000000  00064045  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ee423  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003340  00000000  00000000  000ee478  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000027c 	.word	0x2000027c
 800012c:	00000000 	.word	0x00000000
 8000130:	08009820 	.word	0x08009820

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000280 	.word	0x20000280
 800014c:	08009820 	.word	0x08009820

08000150 <__aeabi_fmul>:
 8000150:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000154:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000158:	bf1e      	ittt	ne
 800015a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015e:	ea92 0f0c 	teqne	r2, ip
 8000162:	ea93 0f0c 	teqne	r3, ip
 8000166:	d06f      	beq.n	8000248 <__aeabi_fmul+0xf8>
 8000168:	441a      	add	r2, r3
 800016a:	ea80 0c01 	eor.w	ip, r0, r1
 800016e:	0240      	lsls	r0, r0, #9
 8000170:	bf18      	it	ne
 8000172:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000176:	d01e      	beq.n	80001b6 <__aeabi_fmul+0x66>
 8000178:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800017c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000180:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000184:	fba0 3101 	umull	r3, r1, r0, r1
 8000188:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800018c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000190:	bf3e      	ittt	cc
 8000192:	0049      	lslcc	r1, r1, #1
 8000194:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000198:	005b      	lslcc	r3, r3, #1
 800019a:	ea40 0001 	orr.w	r0, r0, r1
 800019e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001a2:	2afd      	cmp	r2, #253	; 0xfd
 80001a4:	d81d      	bhi.n	80001e2 <__aeabi_fmul+0x92>
 80001a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001aa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001ae:	bf08      	it	eq
 80001b0:	f020 0001 	biceq.w	r0, r0, #1
 80001b4:	4770      	bx	lr
 80001b6:	f090 0f00 	teq	r0, #0
 80001ba:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001be:	bf08      	it	eq
 80001c0:	0249      	lsleq	r1, r1, #9
 80001c2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001ca:	3a7f      	subs	r2, #127	; 0x7f
 80001cc:	bfc2      	ittt	gt
 80001ce:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001d2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d6:	4770      	bxgt	lr
 80001d8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001dc:	f04f 0300 	mov.w	r3, #0
 80001e0:	3a01      	subs	r2, #1
 80001e2:	dc5d      	bgt.n	80002a0 <__aeabi_fmul+0x150>
 80001e4:	f112 0f19 	cmn.w	r2, #25
 80001e8:	bfdc      	itt	le
 80001ea:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001ee:	4770      	bxle	lr
 80001f0:	f1c2 0200 	rsb	r2, r2, #0
 80001f4:	0041      	lsls	r1, r0, #1
 80001f6:	fa21 f102 	lsr.w	r1, r1, r2
 80001fa:	f1c2 0220 	rsb	r2, r2, #32
 80001fe:	fa00 fc02 	lsl.w	ip, r0, r2
 8000202:	ea5f 0031 	movs.w	r0, r1, rrx
 8000206:	f140 0000 	adc.w	r0, r0, #0
 800020a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020e:	bf08      	it	eq
 8000210:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000214:	4770      	bx	lr
 8000216:	f092 0f00 	teq	r2, #0
 800021a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800021e:	bf02      	ittt	eq
 8000220:	0040      	lsleq	r0, r0, #1
 8000222:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000226:	3a01      	subeq	r2, #1
 8000228:	d0f9      	beq.n	800021e <__aeabi_fmul+0xce>
 800022a:	ea40 000c 	orr.w	r0, r0, ip
 800022e:	f093 0f00 	teq	r3, #0
 8000232:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000236:	bf02      	ittt	eq
 8000238:	0049      	lsleq	r1, r1, #1
 800023a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800023e:	3b01      	subeq	r3, #1
 8000240:	d0f9      	beq.n	8000236 <__aeabi_fmul+0xe6>
 8000242:	ea41 010c 	orr.w	r1, r1, ip
 8000246:	e78f      	b.n	8000168 <__aeabi_fmul+0x18>
 8000248:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800024c:	ea92 0f0c 	teq	r2, ip
 8000250:	bf18      	it	ne
 8000252:	ea93 0f0c 	teqne	r3, ip
 8000256:	d00a      	beq.n	800026e <__aeabi_fmul+0x11e>
 8000258:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800025c:	bf18      	it	ne
 800025e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000262:	d1d8      	bne.n	8000216 <__aeabi_fmul+0xc6>
 8000264:	ea80 0001 	eor.w	r0, r0, r1
 8000268:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800026c:	4770      	bx	lr
 800026e:	f090 0f00 	teq	r0, #0
 8000272:	bf17      	itett	ne
 8000274:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000278:	4608      	moveq	r0, r1
 800027a:	f091 0f00 	teqne	r1, #0
 800027e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000282:	d014      	beq.n	80002ae <__aeabi_fmul+0x15e>
 8000284:	ea92 0f0c 	teq	r2, ip
 8000288:	d101      	bne.n	800028e <__aeabi_fmul+0x13e>
 800028a:	0242      	lsls	r2, r0, #9
 800028c:	d10f      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800028e:	ea93 0f0c 	teq	r3, ip
 8000292:	d103      	bne.n	800029c <__aeabi_fmul+0x14c>
 8000294:	024b      	lsls	r3, r1, #9
 8000296:	bf18      	it	ne
 8000298:	4608      	movne	r0, r1
 800029a:	d108      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800029c:	ea80 0001 	eor.w	r0, r0, r1
 80002a0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002a4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002a8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002ac:	4770      	bx	lr
 80002ae:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002b2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_drsub>:
 80002b8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002bc:	e002      	b.n	80002c4 <__adddf3>
 80002be:	bf00      	nop

080002c0 <__aeabi_dsub>:
 80002c0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002c4 <__adddf3>:
 80002c4:	b530      	push	{r4, r5, lr}
 80002c6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ca:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ce:	ea94 0f05 	teq	r4, r5
 80002d2:	bf08      	it	eq
 80002d4:	ea90 0f02 	teqeq	r0, r2
 80002d8:	bf1f      	itttt	ne
 80002da:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002de:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002e2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002e6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ea:	f000 80e2 	beq.w	80004b2 <__adddf3+0x1ee>
 80002ee:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002f2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002f6:	bfb8      	it	lt
 80002f8:	426d      	neglt	r5, r5
 80002fa:	dd0c      	ble.n	8000316 <__adddf3+0x52>
 80002fc:	442c      	add	r4, r5
 80002fe:	ea80 0202 	eor.w	r2, r0, r2
 8000302:	ea81 0303 	eor.w	r3, r1, r3
 8000306:	ea82 0000 	eor.w	r0, r2, r0
 800030a:	ea83 0101 	eor.w	r1, r3, r1
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	2d36      	cmp	r5, #54	; 0x36
 8000318:	bf88      	it	hi
 800031a:	bd30      	pophi	{r4, r5, pc}
 800031c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000320:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000324:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000328:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800032c:	d002      	beq.n	8000334 <__adddf3+0x70>
 800032e:	4240      	negs	r0, r0
 8000330:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000334:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000338:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800033c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000340:	d002      	beq.n	8000348 <__adddf3+0x84>
 8000342:	4252      	negs	r2, r2
 8000344:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000348:	ea94 0f05 	teq	r4, r5
 800034c:	f000 80a7 	beq.w	800049e <__adddf3+0x1da>
 8000350:	f1a4 0401 	sub.w	r4, r4, #1
 8000354:	f1d5 0e20 	rsbs	lr, r5, #32
 8000358:	db0d      	blt.n	8000376 <__adddf3+0xb2>
 800035a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800035e:	fa22 f205 	lsr.w	r2, r2, r5
 8000362:	1880      	adds	r0, r0, r2
 8000364:	f141 0100 	adc.w	r1, r1, #0
 8000368:	fa03 f20e 	lsl.w	r2, r3, lr
 800036c:	1880      	adds	r0, r0, r2
 800036e:	fa43 f305 	asr.w	r3, r3, r5
 8000372:	4159      	adcs	r1, r3
 8000374:	e00e      	b.n	8000394 <__adddf3+0xd0>
 8000376:	f1a5 0520 	sub.w	r5, r5, #32
 800037a:	f10e 0e20 	add.w	lr, lr, #32
 800037e:	2a01      	cmp	r2, #1
 8000380:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000384:	bf28      	it	cs
 8000386:	f04c 0c02 	orrcs.w	ip, ip, #2
 800038a:	fa43 f305 	asr.w	r3, r3, r5
 800038e:	18c0      	adds	r0, r0, r3
 8000390:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	d507      	bpl.n	80003aa <__adddf3+0xe6>
 800039a:	f04f 0e00 	mov.w	lr, #0
 800039e:	f1dc 0c00 	rsbs	ip, ip, #0
 80003a2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003a6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003aa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003ae:	d31b      	bcc.n	80003e8 <__adddf3+0x124>
 80003b0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003b4:	d30c      	bcc.n	80003d0 <__adddf3+0x10c>
 80003b6:	0849      	lsrs	r1, r1, #1
 80003b8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003bc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c0:	f104 0401 	add.w	r4, r4, #1
 80003c4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003cc:	f080 809a 	bcs.w	8000504 <__adddf3+0x240>
 80003d0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003d4:	bf08      	it	eq
 80003d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003da:	f150 0000 	adcs.w	r0, r0, #0
 80003de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003e2:	ea41 0105 	orr.w	r1, r1, r5
 80003e6:	bd30      	pop	{r4, r5, pc}
 80003e8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003ec:	4140      	adcs	r0, r0
 80003ee:	eb41 0101 	adc.w	r1, r1, r1
 80003f2:	3c01      	subs	r4, #1
 80003f4:	bf28      	it	cs
 80003f6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003fa:	d2e9      	bcs.n	80003d0 <__adddf3+0x10c>
 80003fc:	f091 0f00 	teq	r1, #0
 8000400:	bf04      	itt	eq
 8000402:	4601      	moveq	r1, r0
 8000404:	2000      	moveq	r0, #0
 8000406:	fab1 f381 	clz	r3, r1
 800040a:	bf08      	it	eq
 800040c:	3320      	addeq	r3, #32
 800040e:	f1a3 030b 	sub.w	r3, r3, #11
 8000412:	f1b3 0220 	subs.w	r2, r3, #32
 8000416:	da0c      	bge.n	8000432 <__adddf3+0x16e>
 8000418:	320c      	adds	r2, #12
 800041a:	dd08      	ble.n	800042e <__adddf3+0x16a>
 800041c:	f102 0c14 	add.w	ip, r2, #20
 8000420:	f1c2 020c 	rsb	r2, r2, #12
 8000424:	fa01 f00c 	lsl.w	r0, r1, ip
 8000428:	fa21 f102 	lsr.w	r1, r1, r2
 800042c:	e00c      	b.n	8000448 <__adddf3+0x184>
 800042e:	f102 0214 	add.w	r2, r2, #20
 8000432:	bfd8      	it	le
 8000434:	f1c2 0c20 	rsble	ip, r2, #32
 8000438:	fa01 f102 	lsl.w	r1, r1, r2
 800043c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000440:	bfdc      	itt	le
 8000442:	ea41 010c 	orrle.w	r1, r1, ip
 8000446:	4090      	lslle	r0, r2
 8000448:	1ae4      	subs	r4, r4, r3
 800044a:	bfa2      	ittt	ge
 800044c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000450:	4329      	orrge	r1, r5
 8000452:	bd30      	popge	{r4, r5, pc}
 8000454:	ea6f 0404 	mvn.w	r4, r4
 8000458:	3c1f      	subs	r4, #31
 800045a:	da1c      	bge.n	8000496 <__adddf3+0x1d2>
 800045c:	340c      	adds	r4, #12
 800045e:	dc0e      	bgt.n	800047e <__adddf3+0x1ba>
 8000460:	f104 0414 	add.w	r4, r4, #20
 8000464:	f1c4 0220 	rsb	r2, r4, #32
 8000468:	fa20 f004 	lsr.w	r0, r0, r4
 800046c:	fa01 f302 	lsl.w	r3, r1, r2
 8000470:	ea40 0003 	orr.w	r0, r0, r3
 8000474:	fa21 f304 	lsr.w	r3, r1, r4
 8000478:	ea45 0103 	orr.w	r1, r5, r3
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	f1c4 040c 	rsb	r4, r4, #12
 8000482:	f1c4 0220 	rsb	r2, r4, #32
 8000486:	fa20 f002 	lsr.w	r0, r0, r2
 800048a:	fa01 f304 	lsl.w	r3, r1, r4
 800048e:	ea40 0003 	orr.w	r0, r0, r3
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	fa21 f004 	lsr.w	r0, r1, r4
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	f094 0f00 	teq	r4, #0
 80004a2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004a6:	bf06      	itte	eq
 80004a8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004ac:	3401      	addeq	r4, #1
 80004ae:	3d01      	subne	r5, #1
 80004b0:	e74e      	b.n	8000350 <__adddf3+0x8c>
 80004b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004b6:	bf18      	it	ne
 80004b8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004bc:	d029      	beq.n	8000512 <__adddf3+0x24e>
 80004be:	ea94 0f05 	teq	r4, r5
 80004c2:	bf08      	it	eq
 80004c4:	ea90 0f02 	teqeq	r0, r2
 80004c8:	d005      	beq.n	80004d6 <__adddf3+0x212>
 80004ca:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ce:	bf04      	itt	eq
 80004d0:	4619      	moveq	r1, r3
 80004d2:	4610      	moveq	r0, r2
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	ea91 0f03 	teq	r1, r3
 80004da:	bf1e      	ittt	ne
 80004dc:	2100      	movne	r1, #0
 80004de:	2000      	movne	r0, #0
 80004e0:	bd30      	popne	{r4, r5, pc}
 80004e2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004e6:	d105      	bne.n	80004f4 <__adddf3+0x230>
 80004e8:	0040      	lsls	r0, r0, #1
 80004ea:	4149      	adcs	r1, r1
 80004ec:	bf28      	it	cs
 80004ee:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004f2:	bd30      	pop	{r4, r5, pc}
 80004f4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f8:	bf3c      	itt	cc
 80004fa:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004fe:	bd30      	popcc	{r4, r5, pc}
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000504:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000508:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800050c:	f04f 0000 	mov.w	r0, #0
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000516:	bf1a      	itte	ne
 8000518:	4619      	movne	r1, r3
 800051a:	4610      	movne	r0, r2
 800051c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000520:	bf1c      	itt	ne
 8000522:	460b      	movne	r3, r1
 8000524:	4602      	movne	r2, r0
 8000526:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800052a:	bf06      	itte	eq
 800052c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000530:	ea91 0f03 	teqeq	r1, r3
 8000534:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	bf00      	nop

0800053c <__aeabi_ui2d>:
 800053c:	f090 0f00 	teq	r0, #0
 8000540:	bf04      	itt	eq
 8000542:	2100      	moveq	r1, #0
 8000544:	4770      	bxeq	lr
 8000546:	b530      	push	{r4, r5, lr}
 8000548:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000550:	f04f 0500 	mov.w	r5, #0
 8000554:	f04f 0100 	mov.w	r1, #0
 8000558:	e750      	b.n	80003fc <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_i2d>:
 800055c:	f090 0f00 	teq	r0, #0
 8000560:	bf04      	itt	eq
 8000562:	2100      	moveq	r1, #0
 8000564:	4770      	bxeq	lr
 8000566:	b530      	push	{r4, r5, lr}
 8000568:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000570:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000574:	bf48      	it	mi
 8000576:	4240      	negmi	r0, r0
 8000578:	f04f 0100 	mov.w	r1, #0
 800057c:	e73e      	b.n	80003fc <__adddf3+0x138>
 800057e:	bf00      	nop

08000580 <__aeabi_f2d>:
 8000580:	0042      	lsls	r2, r0, #1
 8000582:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000586:	ea4f 0131 	mov.w	r1, r1, rrx
 800058a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800058e:	bf1f      	itttt	ne
 8000590:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000594:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000598:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800059c:	4770      	bxne	lr
 800059e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005a2:	bf08      	it	eq
 80005a4:	4770      	bxeq	lr
 80005a6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005aa:	bf04      	itt	eq
 80005ac:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b0:	4770      	bxeq	lr
 80005b2:	b530      	push	{r4, r5, lr}
 80005b4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005bc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c0:	e71c      	b.n	80003fc <__adddf3+0x138>
 80005c2:	bf00      	nop

080005c4 <__aeabi_ul2d>:
 80005c4:	ea50 0201 	orrs.w	r2, r0, r1
 80005c8:	bf08      	it	eq
 80005ca:	4770      	bxeq	lr
 80005cc:	b530      	push	{r4, r5, lr}
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	e00a      	b.n	80005ea <__aeabi_l2d+0x16>

080005d4 <__aeabi_l2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005e2:	d502      	bpl.n	80005ea <__aeabi_l2d+0x16>
 80005e4:	4240      	negs	r0, r0
 80005e6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ea:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ee:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005f2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005f6:	f43f aed8 	beq.w	80003aa <__adddf3+0xe6>
 80005fa:	f04f 0203 	mov.w	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000612:	f1c2 0320 	rsb	r3, r2, #32
 8000616:	fa00 fc03 	lsl.w	ip, r0, r3
 800061a:	fa20 f002 	lsr.w	r0, r0, r2
 800061e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000622:	ea40 000e 	orr.w	r0, r0, lr
 8000626:	fa21 f102 	lsr.w	r1, r1, r2
 800062a:	4414      	add	r4, r2
 800062c:	e6bd      	b.n	80003aa <__adddf3+0xe6>
 800062e:	bf00      	nop

08000630 <__aeabi_dmul>:
 8000630:	b570      	push	{r4, r5, r6, lr}
 8000632:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000636:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800063a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800063e:	bf1d      	ittte	ne
 8000640:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000644:	ea94 0f0c 	teqne	r4, ip
 8000648:	ea95 0f0c 	teqne	r5, ip
 800064c:	f000 f8de 	bleq	800080c <__aeabi_dmul+0x1dc>
 8000650:	442c      	add	r4, r5
 8000652:	ea81 0603 	eor.w	r6, r1, r3
 8000656:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800065a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800065e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000662:	bf18      	it	ne
 8000664:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000668:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800066c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000670:	d038      	beq.n	80006e4 <__aeabi_dmul+0xb4>
 8000672:	fba0 ce02 	umull	ip, lr, r0, r2
 8000676:	f04f 0500 	mov.w	r5, #0
 800067a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800067e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000682:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000686:	f04f 0600 	mov.w	r6, #0
 800068a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800068e:	f09c 0f00 	teq	ip, #0
 8000692:	bf18      	it	ne
 8000694:	f04e 0e01 	orrne.w	lr, lr, #1
 8000698:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800069c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006a4:	d204      	bcs.n	80006b0 <__aeabi_dmul+0x80>
 80006a6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006aa:	416d      	adcs	r5, r5
 80006ac:	eb46 0606 	adc.w	r6, r6, r6
 80006b0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006b4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006bc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006c4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c8:	bf88      	it	hi
 80006ca:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ce:	d81e      	bhi.n	800070e <__aeabi_dmul+0xde>
 80006d0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006d4:	bf08      	it	eq
 80006d6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006da:	f150 0000 	adcs.w	r0, r0, #0
 80006de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e8:	ea46 0101 	orr.w	r1, r6, r1
 80006ec:	ea40 0002 	orr.w	r0, r0, r2
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f8:	bfc2      	ittt	gt
 80006fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000702:	bd70      	popgt	{r4, r5, r6, pc}
 8000704:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000708:	f04f 0e00 	mov.w	lr, #0
 800070c:	3c01      	subs	r4, #1
 800070e:	f300 80ab 	bgt.w	8000868 <__aeabi_dmul+0x238>
 8000712:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000716:	bfde      	ittt	le
 8000718:	2000      	movle	r0, #0
 800071a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800071e:	bd70      	pople	{r4, r5, r6, pc}
 8000720:	f1c4 0400 	rsb	r4, r4, #0
 8000724:	3c20      	subs	r4, #32
 8000726:	da35      	bge.n	8000794 <__aeabi_dmul+0x164>
 8000728:	340c      	adds	r4, #12
 800072a:	dc1b      	bgt.n	8000764 <__aeabi_dmul+0x134>
 800072c:	f104 0414 	add.w	r4, r4, #20
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f305 	lsl.w	r3, r0, r5
 8000738:	fa20 f004 	lsr.w	r0, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000748:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800074c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000750:	fa21 f604 	lsr.w	r6, r1, r4
 8000754:	eb42 0106 	adc.w	r1, r2, r6
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 040c 	rsb	r4, r4, #12
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f304 	lsl.w	r3, r0, r4
 8000770:	fa20 f005 	lsr.w	r0, r0, r5
 8000774:	fa01 f204 	lsl.w	r2, r1, r4
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000784:	f141 0100 	adc.w	r1, r1, #0
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f1c4 0520 	rsb	r5, r4, #32
 8000798:	fa00 f205 	lsl.w	r2, r0, r5
 800079c:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a0:	fa20 f304 	lsr.w	r3, r0, r4
 80007a4:	fa01 f205 	lsl.w	r2, r1, r5
 80007a8:	ea43 0302 	orr.w	r3, r3, r2
 80007ac:	fa21 f004 	lsr.w	r0, r1, r4
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b4:	fa21 f204 	lsr.w	r2, r1, r4
 80007b8:	ea20 0002 	bic.w	r0, r0, r2
 80007bc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f094 0f00 	teq	r4, #0
 80007d0:	d10f      	bne.n	80007f2 <__aeabi_dmul+0x1c2>
 80007d2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007d6:	0040      	lsls	r0, r0, #1
 80007d8:	eb41 0101 	adc.w	r1, r1, r1
 80007dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e0:	bf08      	it	eq
 80007e2:	3c01      	subeq	r4, #1
 80007e4:	d0f7      	beq.n	80007d6 <__aeabi_dmul+0x1a6>
 80007e6:	ea41 0106 	orr.w	r1, r1, r6
 80007ea:	f095 0f00 	teq	r5, #0
 80007ee:	bf18      	it	ne
 80007f0:	4770      	bxne	lr
 80007f2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007f6:	0052      	lsls	r2, r2, #1
 80007f8:	eb43 0303 	adc.w	r3, r3, r3
 80007fc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000800:	bf08      	it	eq
 8000802:	3d01      	subeq	r5, #1
 8000804:	d0f7      	beq.n	80007f6 <__aeabi_dmul+0x1c6>
 8000806:	ea43 0306 	orr.w	r3, r3, r6
 800080a:	4770      	bx	lr
 800080c:	ea94 0f0c 	teq	r4, ip
 8000810:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000814:	bf18      	it	ne
 8000816:	ea95 0f0c 	teqne	r5, ip
 800081a:	d00c      	beq.n	8000836 <__aeabi_dmul+0x206>
 800081c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000820:	bf18      	it	ne
 8000822:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000826:	d1d1      	bne.n	80007cc <__aeabi_dmul+0x19c>
 8000828:	ea81 0103 	eor.w	r1, r1, r3
 800082c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000830:	f04f 0000 	mov.w	r0, #0
 8000834:	bd70      	pop	{r4, r5, r6, pc}
 8000836:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800083a:	bf06      	itte	eq
 800083c:	4610      	moveq	r0, r2
 800083e:	4619      	moveq	r1, r3
 8000840:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000844:	d019      	beq.n	800087a <__aeabi_dmul+0x24a>
 8000846:	ea94 0f0c 	teq	r4, ip
 800084a:	d102      	bne.n	8000852 <__aeabi_dmul+0x222>
 800084c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000850:	d113      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000852:	ea95 0f0c 	teq	r5, ip
 8000856:	d105      	bne.n	8000864 <__aeabi_dmul+0x234>
 8000858:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800085c:	bf1c      	itt	ne
 800085e:	4610      	movne	r0, r2
 8000860:	4619      	movne	r1, r3
 8000862:	d10a      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000864:	ea81 0103 	eor.w	r1, r1, r3
 8000868:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800086c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000870:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	bd70      	pop	{r4, r5, r6, pc}
 800087a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800087e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000882:	bd70      	pop	{r4, r5, r6, pc}

08000884 <__aeabi_ddiv>:
 8000884:	b570      	push	{r4, r5, r6, lr}
 8000886:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800088a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800088e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000892:	bf1d      	ittte	ne
 8000894:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000898:	ea94 0f0c 	teqne	r4, ip
 800089c:	ea95 0f0c 	teqne	r5, ip
 80008a0:	f000 f8a7 	bleq	80009f2 <__aeabi_ddiv+0x16e>
 80008a4:	eba4 0405 	sub.w	r4, r4, r5
 80008a8:	ea81 0e03 	eor.w	lr, r1, r3
 80008ac:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008b4:	f000 8088 	beq.w	80009c8 <__aeabi_ddiv+0x144>
 80008b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008bc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008c4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008cc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008d4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008dc:	429d      	cmp	r5, r3
 80008de:	bf08      	it	eq
 80008e0:	4296      	cmpeq	r6, r2
 80008e2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008e6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ea:	d202      	bcs.n	80008f2 <__aeabi_ddiv+0x6e>
 80008ec:	085b      	lsrs	r3, r3, #1
 80008ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f2:	1ab6      	subs	r6, r6, r2
 80008f4:	eb65 0503 	sbc.w	r5, r5, r3
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000902:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 000c 	orrcs.w	r0, r0, ip
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000960:	ea55 0e06 	orrs.w	lr, r5, r6
 8000964:	d018      	beq.n	8000998 <__aeabi_ddiv+0x114>
 8000966:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800096a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800096e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000972:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000976:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800097a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800097e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000982:	d1c0      	bne.n	8000906 <__aeabi_ddiv+0x82>
 8000984:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000988:	d10b      	bne.n	80009a2 <__aeabi_ddiv+0x11e>
 800098a:	ea41 0100 	orr.w	r1, r1, r0
 800098e:	f04f 0000 	mov.w	r0, #0
 8000992:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000996:	e7b6      	b.n	8000906 <__aeabi_ddiv+0x82>
 8000998:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800099c:	bf04      	itt	eq
 800099e:	4301      	orreq	r1, r0
 80009a0:	2000      	moveq	r0, #0
 80009a2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009a6:	bf88      	it	hi
 80009a8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009ac:	f63f aeaf 	bhi.w	800070e <__aeabi_dmul+0xde>
 80009b0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009b4:	bf04      	itt	eq
 80009b6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009be:	f150 0000 	adcs.w	r0, r0, #0
 80009c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	pop	{r4, r5, r6, pc}
 80009c8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009cc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009d4:	bfc2      	ittt	gt
 80009d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009de:	bd70      	popgt	{r4, r5, r6, pc}
 80009e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009e4:	f04f 0e00 	mov.w	lr, #0
 80009e8:	3c01      	subs	r4, #1
 80009ea:	e690      	b.n	800070e <__aeabi_dmul+0xde>
 80009ec:	ea45 0e06 	orr.w	lr, r5, r6
 80009f0:	e68d      	b.n	800070e <__aeabi_dmul+0xde>
 80009f2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009f6:	ea94 0f0c 	teq	r4, ip
 80009fa:	bf08      	it	eq
 80009fc:	ea95 0f0c 	teqeq	r5, ip
 8000a00:	f43f af3b 	beq.w	800087a <__aeabi_dmul+0x24a>
 8000a04:	ea94 0f0c 	teq	r4, ip
 8000a08:	d10a      	bne.n	8000a20 <__aeabi_ddiv+0x19c>
 8000a0a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a0e:	f47f af34 	bne.w	800087a <__aeabi_dmul+0x24a>
 8000a12:	ea95 0f0c 	teq	r5, ip
 8000a16:	f47f af25 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	e72c      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a20:	ea95 0f0c 	teq	r5, ip
 8000a24:	d106      	bne.n	8000a34 <__aeabi_ddiv+0x1b0>
 8000a26:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a2a:	f43f aefd 	beq.w	8000828 <__aeabi_dmul+0x1f8>
 8000a2e:	4610      	mov	r0, r2
 8000a30:	4619      	mov	r1, r3
 8000a32:	e722      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a34:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a3e:	f47f aec5 	bne.w	80007cc <__aeabi_dmul+0x19c>
 8000a42:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a46:	f47f af0d 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a4a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a4e:	f47f aeeb 	bne.w	8000828 <__aeabi_dmul+0x1f8>
 8000a52:	e712      	b.n	800087a <__aeabi_dmul+0x24a>

08000a54 <__aeabi_d2f>:
 8000a54:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a58:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a5c:	bf24      	itt	cs
 8000a5e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a62:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a66:	d90d      	bls.n	8000a84 <__aeabi_d2f+0x30>
 8000a68:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a6c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a70:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a74:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a78:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a7c:	bf08      	it	eq
 8000a7e:	f020 0001 	biceq.w	r0, r0, #1
 8000a82:	4770      	bx	lr
 8000a84:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a88:	d121      	bne.n	8000ace <__aeabi_d2f+0x7a>
 8000a8a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a8e:	bfbc      	itt	lt
 8000a90:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a94:	4770      	bxlt	lr
 8000a96:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a9a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a9e:	f1c2 0218 	rsb	r2, r2, #24
 8000aa2:	f1c2 0c20 	rsb	ip, r2, #32
 8000aa6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aaa:	fa20 f002 	lsr.w	r0, r0, r2
 8000aae:	bf18      	it	ne
 8000ab0:	f040 0001 	orrne.w	r0, r0, #1
 8000ab4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000abc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ac0:	ea40 000c 	orr.w	r0, r0, ip
 8000ac4:	fa23 f302 	lsr.w	r3, r3, r2
 8000ac8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000acc:	e7cc      	b.n	8000a68 <__aeabi_d2f+0x14>
 8000ace:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ad2:	d107      	bne.n	8000ae4 <__aeabi_d2f+0x90>
 8000ad4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ad8:	bf1e      	ittt	ne
 8000ada:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ade:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ae2:	4770      	bxne	lr
 8000ae4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ae8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000aec:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop

08000af4 <__aeabi_frsub>:
 8000af4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000af8:	e002      	b.n	8000b00 <__addsf3>
 8000afa:	bf00      	nop

08000afc <__aeabi_fsub>:
 8000afc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b00 <__addsf3>:
 8000b00:	0042      	lsls	r2, r0, #1
 8000b02:	bf1f      	itttt	ne
 8000b04:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b08:	ea92 0f03 	teqne	r2, r3
 8000b0c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b10:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b14:	d06a      	beq.n	8000bec <__addsf3+0xec>
 8000b16:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b1a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b1e:	bfc1      	itttt	gt
 8000b20:	18d2      	addgt	r2, r2, r3
 8000b22:	4041      	eorgt	r1, r0
 8000b24:	4048      	eorgt	r0, r1
 8000b26:	4041      	eorgt	r1, r0
 8000b28:	bfb8      	it	lt
 8000b2a:	425b      	neglt	r3, r3
 8000b2c:	2b19      	cmp	r3, #25
 8000b2e:	bf88      	it	hi
 8000b30:	4770      	bxhi	lr
 8000b32:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b36:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b3a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b3e:	bf18      	it	ne
 8000b40:	4240      	negne	r0, r0
 8000b42:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b46:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b4a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b4e:	bf18      	it	ne
 8000b50:	4249      	negne	r1, r1
 8000b52:	ea92 0f03 	teq	r2, r3
 8000b56:	d03f      	beq.n	8000bd8 <__addsf3+0xd8>
 8000b58:	f1a2 0201 	sub.w	r2, r2, #1
 8000b5c:	fa41 fc03 	asr.w	ip, r1, r3
 8000b60:	eb10 000c 	adds.w	r0, r0, ip
 8000b64:	f1c3 0320 	rsb	r3, r3, #32
 8000b68:	fa01 f103 	lsl.w	r1, r1, r3
 8000b6c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b70:	d502      	bpl.n	8000b78 <__addsf3+0x78>
 8000b72:	4249      	negs	r1, r1
 8000b74:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b78:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b7c:	d313      	bcc.n	8000ba6 <__addsf3+0xa6>
 8000b7e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b82:	d306      	bcc.n	8000b92 <__addsf3+0x92>
 8000b84:	0840      	lsrs	r0, r0, #1
 8000b86:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b8a:	f102 0201 	add.w	r2, r2, #1
 8000b8e:	2afe      	cmp	r2, #254	; 0xfe
 8000b90:	d251      	bcs.n	8000c36 <__addsf3+0x136>
 8000b92:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b96:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b9a:	bf08      	it	eq
 8000b9c:	f020 0001 	biceq.w	r0, r0, #1
 8000ba0:	ea40 0003 	orr.w	r0, r0, r3
 8000ba4:	4770      	bx	lr
 8000ba6:	0049      	lsls	r1, r1, #1
 8000ba8:	eb40 0000 	adc.w	r0, r0, r0
 8000bac:	3a01      	subs	r2, #1
 8000bae:	bf28      	it	cs
 8000bb0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000bb4:	d2ed      	bcs.n	8000b92 <__addsf3+0x92>
 8000bb6:	fab0 fc80 	clz	ip, r0
 8000bba:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bbe:	ebb2 020c 	subs.w	r2, r2, ip
 8000bc2:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bc6:	bfaa      	itet	ge
 8000bc8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bcc:	4252      	neglt	r2, r2
 8000bce:	4318      	orrge	r0, r3
 8000bd0:	bfbc      	itt	lt
 8000bd2:	40d0      	lsrlt	r0, r2
 8000bd4:	4318      	orrlt	r0, r3
 8000bd6:	4770      	bx	lr
 8000bd8:	f092 0f00 	teq	r2, #0
 8000bdc:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000be0:	bf06      	itte	eq
 8000be2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000be6:	3201      	addeq	r2, #1
 8000be8:	3b01      	subne	r3, #1
 8000bea:	e7b5      	b.n	8000b58 <__addsf3+0x58>
 8000bec:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bf0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bf4:	bf18      	it	ne
 8000bf6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bfa:	d021      	beq.n	8000c40 <__addsf3+0x140>
 8000bfc:	ea92 0f03 	teq	r2, r3
 8000c00:	d004      	beq.n	8000c0c <__addsf3+0x10c>
 8000c02:	f092 0f00 	teq	r2, #0
 8000c06:	bf08      	it	eq
 8000c08:	4608      	moveq	r0, r1
 8000c0a:	4770      	bx	lr
 8000c0c:	ea90 0f01 	teq	r0, r1
 8000c10:	bf1c      	itt	ne
 8000c12:	2000      	movne	r0, #0
 8000c14:	4770      	bxne	lr
 8000c16:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c1a:	d104      	bne.n	8000c26 <__addsf3+0x126>
 8000c1c:	0040      	lsls	r0, r0, #1
 8000c1e:	bf28      	it	cs
 8000c20:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c24:	4770      	bx	lr
 8000c26:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c2a:	bf3c      	itt	cc
 8000c2c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c30:	4770      	bxcc	lr
 8000c32:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c36:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c3a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c3e:	4770      	bx	lr
 8000c40:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c44:	bf16      	itet	ne
 8000c46:	4608      	movne	r0, r1
 8000c48:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c4c:	4601      	movne	r1, r0
 8000c4e:	0242      	lsls	r2, r0, #9
 8000c50:	bf06      	itte	eq
 8000c52:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c56:	ea90 0f01 	teqeq	r0, r1
 8000c5a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c5e:	4770      	bx	lr

08000c60 <__aeabi_ui2f>:
 8000c60:	f04f 0300 	mov.w	r3, #0
 8000c64:	e004      	b.n	8000c70 <__aeabi_i2f+0x8>
 8000c66:	bf00      	nop

08000c68 <__aeabi_i2f>:
 8000c68:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c6c:	bf48      	it	mi
 8000c6e:	4240      	negmi	r0, r0
 8000c70:	ea5f 0c00 	movs.w	ip, r0
 8000c74:	bf08      	it	eq
 8000c76:	4770      	bxeq	lr
 8000c78:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c7c:	4601      	mov	r1, r0
 8000c7e:	f04f 0000 	mov.w	r0, #0
 8000c82:	e01c      	b.n	8000cbe <__aeabi_l2f+0x2a>

08000c84 <__aeabi_ul2f>:
 8000c84:	ea50 0201 	orrs.w	r2, r0, r1
 8000c88:	bf08      	it	eq
 8000c8a:	4770      	bxeq	lr
 8000c8c:	f04f 0300 	mov.w	r3, #0
 8000c90:	e00a      	b.n	8000ca8 <__aeabi_l2f+0x14>
 8000c92:	bf00      	nop

08000c94 <__aeabi_l2f>:
 8000c94:	ea50 0201 	orrs.w	r2, r0, r1
 8000c98:	bf08      	it	eq
 8000c9a:	4770      	bxeq	lr
 8000c9c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000ca0:	d502      	bpl.n	8000ca8 <__aeabi_l2f+0x14>
 8000ca2:	4240      	negs	r0, r0
 8000ca4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca8:	ea5f 0c01 	movs.w	ip, r1
 8000cac:	bf02      	ittt	eq
 8000cae:	4684      	moveq	ip, r0
 8000cb0:	4601      	moveq	r1, r0
 8000cb2:	2000      	moveq	r0, #0
 8000cb4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cb8:	bf08      	it	eq
 8000cba:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cbe:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cc2:	fabc f28c 	clz	r2, ip
 8000cc6:	3a08      	subs	r2, #8
 8000cc8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ccc:	db10      	blt.n	8000cf0 <__aeabi_l2f+0x5c>
 8000cce:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cd2:	4463      	add	r3, ip
 8000cd4:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cd8:	f1c2 0220 	rsb	r2, r2, #32
 8000cdc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000ce0:	fa20 f202 	lsr.w	r2, r0, r2
 8000ce4:	eb43 0002 	adc.w	r0, r3, r2
 8000ce8:	bf08      	it	eq
 8000cea:	f020 0001 	biceq.w	r0, r0, #1
 8000cee:	4770      	bx	lr
 8000cf0:	f102 0220 	add.w	r2, r2, #32
 8000cf4:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cf8:	f1c2 0220 	rsb	r2, r2, #32
 8000cfc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d00:	fa21 f202 	lsr.w	r2, r1, r2
 8000d04:	eb43 0002 	adc.w	r0, r3, r2
 8000d08:	bf08      	it	eq
 8000d0a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d0e:	4770      	bx	lr

08000d10 <__aeabi_f2uiz>:
 8000d10:	0042      	lsls	r2, r0, #1
 8000d12:	d20e      	bcs.n	8000d32 <__aeabi_f2uiz+0x22>
 8000d14:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000d18:	d30b      	bcc.n	8000d32 <__aeabi_f2uiz+0x22>
 8000d1a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000d1e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000d22:	d409      	bmi.n	8000d38 <__aeabi_f2uiz+0x28>
 8000d24:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000d28:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d2c:	fa23 f002 	lsr.w	r0, r3, r2
 8000d30:	4770      	bx	lr
 8000d32:	f04f 0000 	mov.w	r0, #0
 8000d36:	4770      	bx	lr
 8000d38:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000d3c:	d101      	bne.n	8000d42 <__aeabi_f2uiz+0x32>
 8000d3e:	0242      	lsls	r2, r0, #9
 8000d40:	d102      	bne.n	8000d48 <__aeabi_f2uiz+0x38>
 8000d42:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d46:	4770      	bx	lr
 8000d48:	f04f 0000 	mov.w	r0, #0
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop

08000d50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d54:	f000 fc7c 	bl	8001650 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d58:	f000 f81e 	bl	8000d98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d5c:	f000 f8b8 	bl	8000ed0 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000d60:	f000 f878 	bl	8000e54 <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 8000d64:	f007 fc54 	bl	8008610 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  VR_Glove_Calibration(&vr_glove1);
 8000d68:	480a      	ldr	r0, [pc, #40]	; (8000d94 <main+0x44>)
 8000d6a:	f000 fa19 	bl	80011a0 <VR_Glove_Calibration>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  VR_Glove_Input(&vr_glove1);
 8000d6e:	4809      	ldr	r0, [pc, #36]	; (8000d94 <main+0x44>)
 8000d70:	f000 fa98 	bl	80012a4 <VR_Glove_Input>
	  VR_Glove_Scale(&vr_glove1);
 8000d74:	4807      	ldr	r0, [pc, #28]	; (8000d94 <main+0x44>)
 8000d76:	f000 fb13 	bl	80013a0 <VR_Glove_Scale>
	  VR_Glove_Gestures(&vr_glove1);
 8000d7a:	4806      	ldr	r0, [pc, #24]	; (8000d94 <main+0x44>)
 8000d7c:	f000 fc05 	bl	800158a <VR_Glove_Gestures>
	  VR_Glove_Serialization(&vr_glove1);
 8000d80:	4804      	ldr	r0, [pc, #16]	; (8000d94 <main+0x44>)
 8000d82:	f000 fb67 	bl	8001454 <VR_Glove_Serialization>
	  VR_Glove_Transmit(&vr_glove1);
 8000d86:	4803      	ldr	r0, [pc, #12]	; (8000d94 <main+0x44>)
 8000d88:	f000 fbee 	bl	8001568 <VR_Glove_Transmit>
	  HAL_Delay(10);
 8000d8c:	200a      	movs	r0, #10
 8000d8e:	f000 fcc1 	bl	8001714 <HAL_Delay>
	  VR_Glove_Input(&vr_glove1);
 8000d92:	e7ec      	b.n	8000d6e <main+0x1e>
 8000d94:	20000000 	.word	0x20000000

08000d98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b094      	sub	sp, #80	; 0x50
 8000d9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d9e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000da2:	2228      	movs	r2, #40	; 0x28
 8000da4:	2100      	movs	r1, #0
 8000da6:	4618      	mov	r0, r3
 8000da8:	f008 f8f8 	bl	8008f9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dac:	f107 0314 	add.w	r3, r7, #20
 8000db0:	2200      	movs	r2, #0
 8000db2:	601a      	str	r2, [r3, #0]
 8000db4:	605a      	str	r2, [r3, #4]
 8000db6:	609a      	str	r2, [r3, #8]
 8000db8:	60da      	str	r2, [r3, #12]
 8000dba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000dbc:	1d3b      	adds	r3, r7, #4
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	601a      	str	r2, [r3, #0]
 8000dc2:	605a      	str	r2, [r3, #4]
 8000dc4:	609a      	str	r2, [r3, #8]
 8000dc6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000dc8:	2301      	movs	r3, #1
 8000dca:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000dcc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dda:	2302      	movs	r3, #2
 8000ddc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dde:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000de2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000de4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000de8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000dee:	4618      	mov	r0, r3
 8000df0:	f003 f892 	bl	8003f18 <HAL_RCC_OscConfig>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000dfa:	f000 f8cf 	bl	8000f9c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dfe:	230f      	movs	r3, #15
 8000e00:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e02:	2302      	movs	r3, #2
 8000e04:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e06:	2300      	movs	r3, #0
 8000e08:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e0e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e10:	2300      	movs	r3, #0
 8000e12:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000e14:	f107 0314 	add.w	r3, r7, #20
 8000e18:	2101      	movs	r1, #1
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f003 fafc 	bl	8004418 <HAL_RCC_ClockConfig>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000e26:	f000 f8b9 	bl	8000f9c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8000e2a:	2312      	movs	r3, #18
 8000e2c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 8000e2e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000e32:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000e34:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e38:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e3a:	1d3b      	adds	r3, r7, #4
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f003 fc71 	bl	8004724 <HAL_RCCEx_PeriphCLKConfig>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000e48:	f000 f8a8 	bl	8000f9c <Error_Handler>
  }
}
 8000e4c:	bf00      	nop
 8000e4e:	3750      	adds	r7, #80	; 0x50
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}

08000e54 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b084      	sub	sp, #16
 8000e58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e5a:	1d3b      	adds	r3, r7, #4
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	601a      	str	r2, [r3, #0]
 8000e60:	605a      	str	r2, [r3, #4]
 8000e62:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000e64:	4b18      	ldr	r3, [pc, #96]	; (8000ec8 <MX_ADC1_Init+0x74>)
 8000e66:	4a19      	ldr	r2, [pc, #100]	; (8000ecc <MX_ADC1_Init+0x78>)
 8000e68:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e6a:	4b17      	ldr	r3, [pc, #92]	; (8000ec8 <MX_ADC1_Init+0x74>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e70:	4b15      	ldr	r3, [pc, #84]	; (8000ec8 <MX_ADC1_Init+0x74>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e76:	4b14      	ldr	r3, [pc, #80]	; (8000ec8 <MX_ADC1_Init+0x74>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e7c:	4b12      	ldr	r3, [pc, #72]	; (8000ec8 <MX_ADC1_Init+0x74>)
 8000e7e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000e82:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e84:	4b10      	ldr	r3, [pc, #64]	; (8000ec8 <MX_ADC1_Init+0x74>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000e8a:	4b0f      	ldr	r3, [pc, #60]	; (8000ec8 <MX_ADC1_Init+0x74>)
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e90:	480d      	ldr	r0, [pc, #52]	; (8000ec8 <MX_ADC1_Init+0x74>)
 8000e92:	f000 fc63 	bl	800175c <HAL_ADC_Init>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000e9c:	f000 f87e 	bl	8000f9c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000eac:	1d3b      	adds	r3, r7, #4
 8000eae:	4619      	mov	r1, r3
 8000eb0:	4805      	ldr	r0, [pc, #20]	; (8000ec8 <MX_ADC1_Init+0x74>)
 8000eb2:	f000 ff17 	bl	8001ce4 <HAL_ADC_ConfigChannel>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000ebc:	f000 f86e 	bl	8000f9c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ec0:	bf00      	nop
 8000ec2:	3710      	adds	r7, #16
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	200004c8 	.word	0x200004c8
 8000ecc:	40012400 	.word	0x40012400

08000ed0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b088      	sub	sp, #32
 8000ed4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed6:	f107 0310 	add.w	r3, r7, #16
 8000eda:	2200      	movs	r2, #0
 8000edc:	601a      	str	r2, [r3, #0]
 8000ede:	605a      	str	r2, [r3, #4]
 8000ee0:	609a      	str	r2, [r3, #8]
 8000ee2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ee4:	4b2a      	ldr	r3, [pc, #168]	; (8000f90 <MX_GPIO_Init+0xc0>)
 8000ee6:	699b      	ldr	r3, [r3, #24]
 8000ee8:	4a29      	ldr	r2, [pc, #164]	; (8000f90 <MX_GPIO_Init+0xc0>)
 8000eea:	f043 0310 	orr.w	r3, r3, #16
 8000eee:	6193      	str	r3, [r2, #24]
 8000ef0:	4b27      	ldr	r3, [pc, #156]	; (8000f90 <MX_GPIO_Init+0xc0>)
 8000ef2:	699b      	ldr	r3, [r3, #24]
 8000ef4:	f003 0310 	and.w	r3, r3, #16
 8000ef8:	60fb      	str	r3, [r7, #12]
 8000efa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000efc:	4b24      	ldr	r3, [pc, #144]	; (8000f90 <MX_GPIO_Init+0xc0>)
 8000efe:	699b      	ldr	r3, [r3, #24]
 8000f00:	4a23      	ldr	r2, [pc, #140]	; (8000f90 <MX_GPIO_Init+0xc0>)
 8000f02:	f043 0320 	orr.w	r3, r3, #32
 8000f06:	6193      	str	r3, [r2, #24]
 8000f08:	4b21      	ldr	r3, [pc, #132]	; (8000f90 <MX_GPIO_Init+0xc0>)
 8000f0a:	699b      	ldr	r3, [r3, #24]
 8000f0c:	f003 0320 	and.w	r3, r3, #32
 8000f10:	60bb      	str	r3, [r7, #8]
 8000f12:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f14:	4b1e      	ldr	r3, [pc, #120]	; (8000f90 <MX_GPIO_Init+0xc0>)
 8000f16:	699b      	ldr	r3, [r3, #24]
 8000f18:	4a1d      	ldr	r2, [pc, #116]	; (8000f90 <MX_GPIO_Init+0xc0>)
 8000f1a:	f043 0304 	orr.w	r3, r3, #4
 8000f1e:	6193      	str	r3, [r2, #24]
 8000f20:	4b1b      	ldr	r3, [pc, #108]	; (8000f90 <MX_GPIO_Init+0xc0>)
 8000f22:	699b      	ldr	r3, [r3, #24]
 8000f24:	f003 0304 	and.w	r3, r3, #4
 8000f28:	607b      	str	r3, [r7, #4]
 8000f2a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f2c:	4b18      	ldr	r3, [pc, #96]	; (8000f90 <MX_GPIO_Init+0xc0>)
 8000f2e:	699b      	ldr	r3, [r3, #24]
 8000f30:	4a17      	ldr	r2, [pc, #92]	; (8000f90 <MX_GPIO_Init+0xc0>)
 8000f32:	f043 0308 	orr.w	r3, r3, #8
 8000f36:	6193      	str	r3, [r2, #24]
 8000f38:	4b15      	ldr	r3, [pc, #84]	; (8000f90 <MX_GPIO_Init+0xc0>)
 8000f3a:	699b      	ldr	r3, [r3, #24]
 8000f3c:	f003 0308 	and.w	r3, r3, #8
 8000f40:	603b      	str	r3, [r7, #0]
 8000f42:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000f44:	2200      	movs	r2, #0
 8000f46:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f4a:	4812      	ldr	r0, [pc, #72]	; (8000f94 <MX_GPIO_Init+0xc4>)
 8000f4c:	f001 fb07 	bl	800255e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000f50:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f54:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f56:	2301      	movs	r3, #1
 8000f58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5e:	2302      	movs	r3, #2
 8000f60:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000f62:	f107 0310 	add.w	r3, r7, #16
 8000f66:	4619      	mov	r1, r3
 8000f68:	480a      	ldr	r0, [pc, #40]	; (8000f94 <MX_GPIO_Init+0xc4>)
 8000f6a:	f001 f95d 	bl	8002228 <HAL_GPIO_Init>

  /*Configure GPIO pins : joy_button_Pin A_Pin B_Pin menu_Pin */
  GPIO_InitStruct.Pin = joy_button_Pin|A_Pin|B_Pin|menu_Pin;
 8000f6e:	f240 4307 	movw	r3, #1031	; 0x407
 8000f72:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f74:	2300      	movs	r3, #0
 8000f76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f7c:	f107 0310 	add.w	r3, r7, #16
 8000f80:	4619      	mov	r1, r3
 8000f82:	4805      	ldr	r0, [pc, #20]	; (8000f98 <MX_GPIO_Init+0xc8>)
 8000f84:	f001 f950 	bl	8002228 <HAL_GPIO_Init>

}
 8000f88:	bf00      	nop
 8000f8a:	3720      	adds	r7, #32
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	40021000 	.word	0x40021000
 8000f94:	40011000 	.word	0x40011000
 8000f98:	40010c00 	.word	0x40010c00

08000f9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fa0:	b672      	cpsid	i
}
 8000fa2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fa4:	e7fe      	b.n	8000fa4 <Error_Handler+0x8>
	...

08000fa8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b085      	sub	sp, #20
 8000fac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000fae:	4b15      	ldr	r3, [pc, #84]	; (8001004 <HAL_MspInit+0x5c>)
 8000fb0:	699b      	ldr	r3, [r3, #24]
 8000fb2:	4a14      	ldr	r2, [pc, #80]	; (8001004 <HAL_MspInit+0x5c>)
 8000fb4:	f043 0301 	orr.w	r3, r3, #1
 8000fb8:	6193      	str	r3, [r2, #24]
 8000fba:	4b12      	ldr	r3, [pc, #72]	; (8001004 <HAL_MspInit+0x5c>)
 8000fbc:	699b      	ldr	r3, [r3, #24]
 8000fbe:	f003 0301 	and.w	r3, r3, #1
 8000fc2:	60bb      	str	r3, [r7, #8]
 8000fc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fc6:	4b0f      	ldr	r3, [pc, #60]	; (8001004 <HAL_MspInit+0x5c>)
 8000fc8:	69db      	ldr	r3, [r3, #28]
 8000fca:	4a0e      	ldr	r2, [pc, #56]	; (8001004 <HAL_MspInit+0x5c>)
 8000fcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fd0:	61d3      	str	r3, [r2, #28]
 8000fd2:	4b0c      	ldr	r3, [pc, #48]	; (8001004 <HAL_MspInit+0x5c>)
 8000fd4:	69db      	ldr	r3, [r3, #28]
 8000fd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fda:	607b      	str	r3, [r7, #4]
 8000fdc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000fde:	4b0a      	ldr	r3, [pc, #40]	; (8001008 <HAL_MspInit+0x60>)
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	60fb      	str	r3, [r7, #12]
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000fea:	60fb      	str	r3, [r7, #12]
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000ff2:	60fb      	str	r3, [r7, #12]
 8000ff4:	4a04      	ldr	r2, [pc, #16]	; (8001008 <HAL_MspInit+0x60>)
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ffa:	bf00      	nop
 8000ffc:	3714      	adds	r7, #20
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bc80      	pop	{r7}
 8001002:	4770      	bx	lr
 8001004:	40021000 	.word	0x40021000
 8001008:	40010000 	.word	0x40010000

0800100c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b088      	sub	sp, #32
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001014:	f107 0310 	add.w	r3, r7, #16
 8001018:	2200      	movs	r2, #0
 800101a:	601a      	str	r2, [r3, #0]
 800101c:	605a      	str	r2, [r3, #4]
 800101e:	609a      	str	r2, [r3, #8]
 8001020:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	4a14      	ldr	r2, [pc, #80]	; (8001078 <HAL_ADC_MspInit+0x6c>)
 8001028:	4293      	cmp	r3, r2
 800102a:	d121      	bne.n	8001070 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800102c:	4b13      	ldr	r3, [pc, #76]	; (800107c <HAL_ADC_MspInit+0x70>)
 800102e:	699b      	ldr	r3, [r3, #24]
 8001030:	4a12      	ldr	r2, [pc, #72]	; (800107c <HAL_ADC_MspInit+0x70>)
 8001032:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001036:	6193      	str	r3, [r2, #24]
 8001038:	4b10      	ldr	r3, [pc, #64]	; (800107c <HAL_ADC_MspInit+0x70>)
 800103a:	699b      	ldr	r3, [r3, #24]
 800103c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001040:	60fb      	str	r3, [r7, #12]
 8001042:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001044:	4b0d      	ldr	r3, [pc, #52]	; (800107c <HAL_ADC_MspInit+0x70>)
 8001046:	699b      	ldr	r3, [r3, #24]
 8001048:	4a0c      	ldr	r2, [pc, #48]	; (800107c <HAL_ADC_MspInit+0x70>)
 800104a:	f043 0304 	orr.w	r3, r3, #4
 800104e:	6193      	str	r3, [r2, #24]
 8001050:	4b0a      	ldr	r3, [pc, #40]	; (800107c <HAL_ADC_MspInit+0x70>)
 8001052:	699b      	ldr	r3, [r3, #24]
 8001054:	f003 0304 	and.w	r3, r3, #4
 8001058:	60bb      	str	r3, [r7, #8]
 800105a:	68bb      	ldr	r3, [r7, #8]
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800105c:	237f      	movs	r3, #127	; 0x7f
 800105e:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001060:	2303      	movs	r3, #3
 8001062:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001064:	f107 0310 	add.w	r3, r7, #16
 8001068:	4619      	mov	r1, r3
 800106a:	4805      	ldr	r0, [pc, #20]	; (8001080 <HAL_ADC_MspInit+0x74>)
 800106c:	f001 f8dc 	bl	8002228 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001070:	bf00      	nop
 8001072:	3720      	adds	r7, #32
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	40012400 	.word	0x40012400
 800107c:	40021000 	.word	0x40021000
 8001080:	40010800 	.word	0x40010800

08001084 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001088:	e7fe      	b.n	8001088 <NMI_Handler+0x4>

0800108a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800108a:	b480      	push	{r7}
 800108c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800108e:	e7fe      	b.n	800108e <HardFault_Handler+0x4>

08001090 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001094:	e7fe      	b.n	8001094 <MemManage_Handler+0x4>

08001096 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001096:	b480      	push	{r7}
 8001098:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800109a:	e7fe      	b.n	800109a <BusFault_Handler+0x4>

0800109c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010a0:	e7fe      	b.n	80010a0 <UsageFault_Handler+0x4>

080010a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010a2:	b480      	push	{r7}
 80010a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010a6:	bf00      	nop
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bc80      	pop	{r7}
 80010ac:	4770      	bx	lr

080010ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010ae:	b480      	push	{r7}
 80010b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010b2:	bf00      	nop
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bc80      	pop	{r7}
 80010b8:	4770      	bx	lr

080010ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010ba:	b480      	push	{r7}
 80010bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010be:	bf00      	nop
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bc80      	pop	{r7}
 80010c4:	4770      	bx	lr

080010c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010c6:	b580      	push	{r7, lr}
 80010c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010ca:	f000 fb07 	bl	80016dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010ce:	bf00      	nop
 80010d0:	bd80      	pop	{r7, pc}
	...

080010d4 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80010d8:	4802      	ldr	r0, [pc, #8]	; (80010e4 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80010da:	f001 fb89 	bl	80027f0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80010de:	bf00      	nop
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	20001190 	.word	0x20001190

080010e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b086      	sub	sp, #24
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010f0:	4a14      	ldr	r2, [pc, #80]	; (8001144 <_sbrk+0x5c>)
 80010f2:	4b15      	ldr	r3, [pc, #84]	; (8001148 <_sbrk+0x60>)
 80010f4:	1ad3      	subs	r3, r2, r3
 80010f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010fc:	4b13      	ldr	r3, [pc, #76]	; (800114c <_sbrk+0x64>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d102      	bne.n	800110a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001104:	4b11      	ldr	r3, [pc, #68]	; (800114c <_sbrk+0x64>)
 8001106:	4a12      	ldr	r2, [pc, #72]	; (8001150 <_sbrk+0x68>)
 8001108:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800110a:	4b10      	ldr	r3, [pc, #64]	; (800114c <_sbrk+0x64>)
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4413      	add	r3, r2
 8001112:	693a      	ldr	r2, [r7, #16]
 8001114:	429a      	cmp	r2, r3
 8001116:	d207      	bcs.n	8001128 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001118:	f007 ff16 	bl	8008f48 <__errno>
 800111c:	4603      	mov	r3, r0
 800111e:	220c      	movs	r2, #12
 8001120:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001122:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001126:	e009      	b.n	800113c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001128:	4b08      	ldr	r3, [pc, #32]	; (800114c <_sbrk+0x64>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800112e:	4b07      	ldr	r3, [pc, #28]	; (800114c <_sbrk+0x64>)
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	4413      	add	r3, r2
 8001136:	4a05      	ldr	r2, [pc, #20]	; (800114c <_sbrk+0x64>)
 8001138:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800113a:	68fb      	ldr	r3, [r7, #12]
}
 800113c:	4618      	mov	r0, r3
 800113e:	3718      	adds	r7, #24
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	20005000 	.word	0x20005000
 8001148:	00000400 	.word	0x00000400
 800114c:	20000298 	.word	0x20000298
 8001150:	20001490 	.word	0x20001490

08001154 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001158:	bf00      	nop
 800115a:	46bd      	mov	sp, r7
 800115c:	bc80      	pop	{r7}
 800115e:	4770      	bx	lr

08001160 <ADC_Select_Channel>:
#include "vr_glove.h"
#include "usb_device.h"
void ADC_Select_Channel(uint32_t ch, VR_Glove* vr_glove) {
 8001160:	b580      	push	{r7, lr}
 8001162:	b086      	sub	sp, #24
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	6039      	str	r1, [r7, #0]
    ADC_ChannelConfTypeDef conf = {
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	60fb      	str	r3, [r7, #12]
 800116e:	2301      	movs	r3, #1
 8001170:	613b      	str	r3, [r7, #16]
 8001172:	2303      	movs	r3, #3
 8001174:	617b      	str	r3, [r7, #20]
        .Channel = ch,
        .Rank = 1,
        .SamplingTime = ADC_SAMPLETIME_28CYCLES_5,
    };
    if (HAL_ADC_ConfigChannel(vr_glove->hadc1, &conf) != HAL_OK) {
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800117c:	f107 020c 	add.w	r2, r7, #12
 8001180:	4611      	mov	r1, r2
 8001182:	4618      	mov	r0, r3
 8001184:	f000 fdae 	bl	8001ce4 <HAL_ADC_ConfigChannel>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <ADC_Select_Channel+0x32>
        Error_Handler();
 800118e:	f7ff ff05 	bl	8000f9c <Error_Handler>
    }
}
 8001192:	bf00      	nop
 8001194:	3718      	adds	r7, #24
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	0000      	movs	r0, r0
 800119c:	0000      	movs	r0, r0
	...

080011a0 <VR_Glove_Calibration>:
int16_t VR_Glove_Calibration(VR_Glove* vr_glove)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b084      	sub	sp, #16
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED_GPIO_Port,LED_Pin,LED_ON);
 80011a8:	2200      	movs	r2, #0
 80011aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011ae:	483c      	ldr	r0, [pc, #240]	; (80012a0 <VR_Glove_Calibration+0x100>)
 80011b0:	f001 f9d5 	bl	800255e <HAL_GPIO_WritePin>
	HAL_Delay(2000);
 80011b4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80011b8:	f000 faac 	bl	8001714 <HAL_Delay>
	VR_Glove_Input(vr_glove);
 80011bc:	6878      	ldr	r0, [r7, #4]
 80011be:	f000 f871 	bl	80012a4 <VR_Glove_Input>
	for (int i = 0; i < 5; i++)
 80011c2:	2300      	movs	r3, #0
 80011c4:	60fb      	str	r3, [r7, #12]
 80011c6:	e00f      	b.n	80011e8 <VR_Glove_Calibration+0x48>
	{
		vr_glove->finger_zero[i] = vr_glove->flex_sensor_rawdata[i];
 80011c8:	687a      	ldr	r2, [r7, #4]
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	3304      	adds	r3, #4
 80011ce:	005b      	lsls	r3, r3, #1
 80011d0:	4413      	add	r3, r2
 80011d2:	8859      	ldrh	r1, [r3, #2]
 80011d4:	687a      	ldr	r2, [r7, #4]
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	3314      	adds	r3, #20
 80011da:	005b      	lsls	r3, r3, #1
 80011dc:	4413      	add	r3, r2
 80011de:	460a      	mov	r2, r1
 80011e0:	809a      	strh	r2, [r3, #4]
	for (int i = 0; i < 5; i++)
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	3301      	adds	r3, #1
 80011e6:	60fb      	str	r3, [r7, #12]
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	2b04      	cmp	r3, #4
 80011ec:	ddec      	ble.n	80011c8 <VR_Glove_Calibration+0x28>
	}
	HAL_GPIO_WritePin(LED_GPIO_Port,LED_Pin,LED_OFF);
 80011ee:	2201      	movs	r2, #1
 80011f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011f4:	482a      	ldr	r0, [pc, #168]	; (80012a0 <VR_Glove_Calibration+0x100>)
 80011f6:	f001 f9b2 	bl	800255e <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 80011fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011fe:	f000 fa89 	bl	8001714 <HAL_Delay>
	HAL_GPIO_WritePin(LED_GPIO_Port,LED_Pin,LED_ON);
 8001202:	2200      	movs	r2, #0
 8001204:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001208:	4825      	ldr	r0, [pc, #148]	; (80012a0 <VR_Glove_Calibration+0x100>)
 800120a:	f001 f9a8 	bl	800255e <HAL_GPIO_WritePin>
	HAL_Delay(2000);
 800120e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001212:	f000 fa7f 	bl	8001714 <HAL_Delay>
	VR_Glove_Input(vr_glove);
 8001216:	6878      	ldr	r0, [r7, #4]
 8001218:	f000 f844 	bl	80012a4 <VR_Glove_Input>
	for (int i = 0; i < 5; i++)
 800121c:	2300      	movs	r3, #0
 800121e:	60bb      	str	r3, [r7, #8]
 8001220:	e026      	b.n	8001270 <VR_Glove_Calibration+0xd0>
	{
		vr_glove->finger_calibr[i] =(float)(1023.0/(vr_glove->flex_sensor_rawdata[i]-vr_glove->finger_zero[i]));
 8001222:	687a      	ldr	r2, [r7, #4]
 8001224:	68bb      	ldr	r3, [r7, #8]
 8001226:	3304      	adds	r3, #4
 8001228:	005b      	lsls	r3, r3, #1
 800122a:	4413      	add	r3, r2
 800122c:	885b      	ldrh	r3, [r3, #2]
 800122e:	4619      	mov	r1, r3
 8001230:	687a      	ldr	r2, [r7, #4]
 8001232:	68bb      	ldr	r3, [r7, #8]
 8001234:	3314      	adds	r3, #20
 8001236:	005b      	lsls	r3, r3, #1
 8001238:	4413      	add	r3, r2
 800123a:	889b      	ldrh	r3, [r3, #4]
 800123c:	1acb      	subs	r3, r1, r3
 800123e:	4618      	mov	r0, r3
 8001240:	f7ff f98c 	bl	800055c <__aeabi_i2d>
 8001244:	4602      	mov	r2, r0
 8001246:	460b      	mov	r3, r1
 8001248:	a113      	add	r1, pc, #76	; (adr r1, 8001298 <VR_Glove_Calibration+0xf8>)
 800124a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800124e:	f7ff fb19 	bl	8000884 <__aeabi_ddiv>
 8001252:	4602      	mov	r2, r0
 8001254:	460b      	mov	r3, r1
 8001256:	4610      	mov	r0, r2
 8001258:	4619      	mov	r1, r3
 800125a:	f7ff fbfb 	bl	8000a54 <__aeabi_d2f>
 800125e:	4601      	mov	r1, r0
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	68ba      	ldr	r2, [r7, #8]
 8001264:	320e      	adds	r2, #14
 8001266:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (int i = 0; i < 5; i++)
 800126a:	68bb      	ldr	r3, [r7, #8]
 800126c:	3301      	adds	r3, #1
 800126e:	60bb      	str	r3, [r7, #8]
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	2b04      	cmp	r3, #4
 8001274:	ddd5      	ble.n	8001222 <VR_Glove_Calibration+0x82>
	}
	HAL_GPIO_WritePin(LED_GPIO_Port,LED_Pin,LED_OFF);
 8001276:	2201      	movs	r2, #1
 8001278:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800127c:	4808      	ldr	r0, [pc, #32]	; (80012a0 <VR_Glove_Calibration+0x100>)
 800127e:	f001 f96e 	bl	800255e <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8001282:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001286:	f000 fa45 	bl	8001714 <HAL_Delay>
	return 0;
 800128a:	2300      	movs	r3, #0

}
 800128c:	4618      	mov	r0, r3
 800128e:	3710      	adds	r7, #16
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	f3af 8000 	nop.w
 8001298:	00000000 	.word	0x00000000
 800129c:	408ff800 	.word	0x408ff800
 80012a0:	40011000 	.word	0x40011000

080012a4 <VR_Glove_Input>:

int16_t VR_Glove_Input(VR_Glove* vr_glove)
{
 80012a4:	b5b0      	push	{r4, r5, r7, lr}
 80012a6:	b08a      	sub	sp, #40	; 0x28
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
	uint32_t channels[7]={ADC_CHANNEL_0,ADC_CHANNEL_1,ADC_CHANNEL_2,ADC_CHANNEL_3,ADC_CHANNEL_4,ADC_CHANNEL_5,ADC_CHANNEL_6};
 80012ac:	4b3a      	ldr	r3, [pc, #232]	; (8001398 <VR_Glove_Input+0xf4>)
 80012ae:	f107 0408 	add.w	r4, r7, #8
 80012b2:	461d      	mov	r5, r3
 80012b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012b8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80012bc:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	vr_glove->calib = 0;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2200      	movs	r2, #0
 80012c4:	849a      	strh	r2, [r3, #36]	; 0x24
	vr_glove->A_button = 1-HAL_GPIO_ReadPin(A_GPIO_Port,A_Pin);
 80012c6:	2102      	movs	r1, #2
 80012c8:	4834      	ldr	r0, [pc, #208]	; (800139c <VR_Glove_Input+0xf8>)
 80012ca:	f001 f931 	bl	8002530 <HAL_GPIO_ReadPin>
 80012ce:	4603      	mov	r3, r0
 80012d0:	b29b      	uxth	r3, r3
 80012d2:	f1c3 0301 	rsb	r3, r3, #1
 80012d6:	b29a      	uxth	r2, r3
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	84da      	strh	r2, [r3, #38]	; 0x26
	vr_glove->B_button = 1-HAL_GPIO_ReadPin(B_GPIO_Port,B_Pin);
 80012dc:	2104      	movs	r1, #4
 80012de:	482f      	ldr	r0, [pc, #188]	; (800139c <VR_Glove_Input+0xf8>)
 80012e0:	f001 f926 	bl	8002530 <HAL_GPIO_ReadPin>
 80012e4:	4603      	mov	r3, r0
 80012e6:	b29b      	uxth	r3, r3
 80012e8:	f1c3 0301 	rsb	r3, r3, #1
 80012ec:	b29a      	uxth	r2, r3
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	851a      	strh	r2, [r3, #40]	; 0x28
	vr_glove->menu_button = 1-HAL_GPIO_ReadPin(menu_GPIO_Port,menu_Pin);
 80012f2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012f6:	4829      	ldr	r0, [pc, #164]	; (800139c <VR_Glove_Input+0xf8>)
 80012f8:	f001 f91a 	bl	8002530 <HAL_GPIO_ReadPin>
 80012fc:	4603      	mov	r3, r0
 80012fe:	b29b      	uxth	r3, r3
 8001300:	f1c3 0301 	rsb	r3, r3, #1
 8001304:	b29a      	uxth	r2, r3
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	855a      	strh	r2, [r3, #42]	; 0x2a
	vr_glove->joy_button = 1-HAL_GPIO_ReadPin(joy_button_GPIO_Port,joy_button_Pin);
 800130a:	2101      	movs	r1, #1
 800130c:	4823      	ldr	r0, [pc, #140]	; (800139c <VR_Glove_Input+0xf8>)
 800130e:	f001 f90f 	bl	8002530 <HAL_GPIO_ReadPin>
 8001312:	4603      	mov	r3, r0
 8001314:	b29b      	uxth	r3, r3
 8001316:	f1c3 0301 	rsb	r3, r3, #1
 800131a:	b29a      	uxth	r2, r3
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	839a      	strh	r2, [r3, #28]

	for(int i = 0; i < 7; i++)
 8001320:	2300      	movs	r3, #0
 8001322:	627b      	str	r3, [r7, #36]	; 0x24
 8001324:	e030      	b.n	8001388 <VR_Glove_Input+0xe4>
	{
		ADC_Select_Channel(channels[i],vr_glove);
 8001326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001328:	009b      	lsls	r3, r3, #2
 800132a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800132e:	4413      	add	r3, r2
 8001330:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8001334:	6879      	ldr	r1, [r7, #4]
 8001336:	4618      	mov	r0, r3
 8001338:	f7ff ff12 	bl	8001160 <ADC_Select_Channel>
		HAL_ADC_Start(vr_glove->hadc1);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001342:	4618      	mov	r0, r3
 8001344:	f000 fae2 	bl	800190c <HAL_ADC_Start>
		HAL_ADC_PollForConversion(vr_glove->hadc1, HAL_MAX_DELAY);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800134e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001352:	4618      	mov	r0, r3
 8001354:	f000 fbb4 	bl	8001ac0 <HAL_ADC_PollForConversion>
		vr_glove->flex_sensor_rawdata[i] = HAL_ADC_GetValue(vr_glove->hadc1);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800135e:	4618      	mov	r0, r3
 8001360:	f000 fcb4 	bl	8001ccc <HAL_ADC_GetValue>
 8001364:	4603      	mov	r3, r0
 8001366:	b299      	uxth	r1, r3
 8001368:	687a      	ldr	r2, [r7, #4]
 800136a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800136c:	3304      	adds	r3, #4
 800136e:	005b      	lsls	r3, r3, #1
 8001370:	4413      	add	r3, r2
 8001372:	460a      	mov	r2, r1
 8001374:	805a      	strh	r2, [r3, #2]
		HAL_ADC_Stop(vr_glove->hadc1);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800137c:	4618      	mov	r0, r3
 800137e:	f000 fb73 	bl	8001a68 <HAL_ADC_Stop>
	for(int i = 0; i < 7; i++)
 8001382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001384:	3301      	adds	r3, #1
 8001386:	627b      	str	r3, [r7, #36]	; 0x24
 8001388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800138a:	2b06      	cmp	r3, #6
 800138c:	ddcb      	ble.n	8001326 <VR_Glove_Input+0x82>
	}


	return 0;
 800138e:	2300      	movs	r3, #0
}
 8001390:	4618      	mov	r0, r3
 8001392:	3728      	adds	r7, #40	; 0x28
 8001394:	46bd      	mov	sp, r7
 8001396:	bdb0      	pop	{r4, r5, r7, pc}
 8001398:	08009838 	.word	0x08009838
 800139c:	40010c00 	.word	0x40010c00

080013a0 <VR_Glove_Scale>:

int16_t VR_Glove_Scale(VR_Glove* vr_glove)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
	int32_t d = 0;
 80013a8:	2300      	movs	r3, #0
 80013aa:	60bb      	str	r3, [r7, #8]
	for (int i = 0; i < 5; i++)
 80013ac:	2300      	movs	r3, #0
 80013ae:	60fb      	str	r3, [r7, #12]
 80013b0:	e03c      	b.n	800142c <VR_Glove_Scale+0x8c>
	{

		d = vr_glove->flex_sensor_rawdata[i] - vr_glove->finger_zero[i];
 80013b2:	687a      	ldr	r2, [r7, #4]
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	3304      	adds	r3, #4
 80013b8:	005b      	lsls	r3, r3, #1
 80013ba:	4413      	add	r3, r2
 80013bc:	885b      	ldrh	r3, [r3, #2]
 80013be:	4619      	mov	r1, r3
 80013c0:	687a      	ldr	r2, [r7, #4]
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	3314      	adds	r3, #20
 80013c6:	005b      	lsls	r3, r3, #1
 80013c8:	4413      	add	r3, r2
 80013ca:	889b      	ldrh	r3, [r3, #4]
 80013cc:	1acb      	subs	r3, r1, r3
 80013ce:	60bb      	str	r3, [r7, #8]
		if (d <= 0)
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	dc05      	bgt.n	80013e2 <VR_Glove_Scale+0x42>
		{
			vr_glove->finger_position[i] = 0;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	68fa      	ldr	r2, [r7, #12]
 80013da:	2100      	movs	r1, #0
 80013dc:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 80013e0:	e014      	b.n	800140c <VR_Glove_Scale+0x6c>
		}
		else
		{
			vr_glove->finger_position[i] = (uint16_t)(d * vr_glove->finger_calibr[i]);
 80013e2:	68b8      	ldr	r0, [r7, #8]
 80013e4:	f7ff fc40 	bl	8000c68 <__aeabi_i2f>
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	68fa      	ldr	r2, [r7, #12]
 80013ec:	320e      	adds	r2, #14
 80013ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013f2:	4619      	mov	r1, r3
 80013f4:	f7fe feac 	bl	8000150 <__aeabi_fmul>
 80013f8:	4603      	mov	r3, r0
 80013fa:	4618      	mov	r0, r3
 80013fc:	f7ff fc88 	bl	8000d10 <__aeabi_f2uiz>
 8001400:	4603      	mov	r3, r0
 8001402:	b299      	uxth	r1, r3
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	68fa      	ldr	r2, [r7, #12]
 8001408:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		}
		if (vr_glove->finger_position[i] > ANALOG_MAX)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	68fa      	ldr	r2, [r7, #12]
 8001410:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001414:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001418:	d305      	bcc.n	8001426 <VR_Glove_Scale+0x86>
		{
			vr_glove->finger_position[i] = ANALOG_MAX;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	68fa      	ldr	r2, [r7, #12]
 800141e:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8001422:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for (int i = 0; i < 5; i++)
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	3301      	adds	r3, #1
 800142a:	60fb      	str	r3, [r7, #12]
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	2b04      	cmp	r3, #4
 8001430:	ddbf      	ble.n	80013b2 <VR_Glove_Scale+0x12>
		}
	}
	vr_glove->joy_axis[0] = vr_glove->flex_sensor_rawdata[5]/4;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	8a9b      	ldrh	r3, [r3, #20]
 8001436:	089b      	lsrs	r3, r3, #2
 8001438:	b29a      	uxth	r2, r3
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	831a      	strh	r2, [r3, #24]
	vr_glove->joy_axis[1] = vr_glove->flex_sensor_rawdata[6]/4;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	8adb      	ldrh	r3, [r3, #22]
 8001442:	089b      	lsrs	r3, r3, #2
 8001444:	b29a      	uxth	r2, r3
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	835a      	strh	r2, [r3, #26]
	return 0;
 800144a:	2300      	movs	r3, #0

}
 800144c:	4618      	mov	r0, r3
 800144e:	3710      	adds	r7, #16
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}

08001454 <VR_Glove_Serialization>:

int16_t VR_Glove_Serialization(VR_Glove* vr_glove)
{
 8001454:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001458:	b096      	sub	sp, #88	; 0x58
 800145a:	af0e      	add	r7, sp, #56	; 0x38
 800145c:	61f8      	str	r0, [r7, #28]
	sprintf(vr_glove->serializedData, "A%dB%dC%dD%dE%dF%dG%d%s%s%s%s%s%s%s%s\n",
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	f103 0c4c 	add.w	ip, r3, #76	; 0x4c
	  vr_glove->finger_position[0], vr_glove->finger_position[1], vr_glove->finger_position[2], vr_glove->finger_position[3], vr_glove->finger_position[4],
 8001464:	69fb      	ldr	r3, [r7, #28]
 8001466:	881b      	ldrh	r3, [r3, #0]
	sprintf(vr_glove->serializedData, "A%dB%dC%dD%dE%dF%dG%d%s%s%s%s%s%s%s%s\n",
 8001468:	469e      	mov	lr, r3
	  vr_glove->finger_position[0], vr_glove->finger_position[1], vr_glove->finger_position[2], vr_glove->finger_position[3], vr_glove->finger_position[4],
 800146a:	69fb      	ldr	r3, [r7, #28]
 800146c:	885b      	ldrh	r3, [r3, #2]
	sprintf(vr_glove->serializedData, "A%dB%dC%dD%dE%dF%dG%d%s%s%s%s%s%s%s%s\n",
 800146e:	4698      	mov	r8, r3
	  vr_glove->finger_position[0], vr_glove->finger_position[1], vr_glove->finger_position[2], vr_glove->finger_position[3], vr_glove->finger_position[4],
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	889b      	ldrh	r3, [r3, #4]
	sprintf(vr_glove->serializedData, "A%dB%dC%dD%dE%dF%dG%d%s%s%s%s%s%s%s%s\n",
 8001474:	617b      	str	r3, [r7, #20]
	  vr_glove->finger_position[0], vr_glove->finger_position[1], vr_glove->finger_position[2], vr_glove->finger_position[3], vr_glove->finger_position[4],
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	88db      	ldrh	r3, [r3, #6]
	sprintf(vr_glove->serializedData, "A%dB%dC%dD%dE%dF%dG%d%s%s%s%s%s%s%s%s\n",
 800147a:	613b      	str	r3, [r7, #16]
	  vr_glove->finger_position[0], vr_glove->finger_position[1], vr_glove->finger_position[2], vr_glove->finger_position[3], vr_glove->finger_position[4],
 800147c:	69fb      	ldr	r3, [r7, #28]
 800147e:	891b      	ldrh	r3, [r3, #8]
	sprintf(vr_glove->serializedData, "A%dB%dC%dD%dE%dF%dG%d%s%s%s%s%s%s%s%s\n",
 8001480:	60fb      	str	r3, [r7, #12]
	  vr_glove->joy_axis[0], vr_glove->joy_axis[1], vr_glove->joy_button?"H":"",
 8001482:	69fb      	ldr	r3, [r7, #28]
 8001484:	8b1b      	ldrh	r3, [r3, #24]
	sprintf(vr_glove->serializedData, "A%dB%dC%dD%dE%dF%dG%d%s%s%s%s%s%s%s%s\n",
 8001486:	60bb      	str	r3, [r7, #8]
	  vr_glove->joy_axis[0], vr_glove->joy_axis[1], vr_glove->joy_button?"H":"",
 8001488:	69fb      	ldr	r3, [r7, #28]
 800148a:	8b5b      	ldrh	r3, [r3, #26]
	sprintf(vr_glove->serializedData, "A%dB%dC%dD%dE%dF%dG%d%s%s%s%s%s%s%s%s\n",
 800148c:	607b      	str	r3, [r7, #4]
	  vr_glove->joy_axis[0], vr_glove->joy_axis[1], vr_glove->joy_button?"H":"",
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	8b9b      	ldrh	r3, [r3, #28]
	sprintf(vr_glove->serializedData, "A%dB%dC%dD%dE%dF%dG%d%s%s%s%s%s%s%s%s\n",
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <VR_Glove_Serialization+0x46>
 8001496:	482a      	ldr	r0, [pc, #168]	; (8001540 <VR_Glove_Serialization+0xec>)
 8001498:	e000      	b.n	800149c <VR_Glove_Serialization+0x48>
 800149a:	482a      	ldr	r0, [pc, #168]	; (8001544 <VR_Glove_Serialization+0xf0>)
	  vr_glove->trigger?"I":"", vr_glove->A_button?"J":"", vr_glove->B_button?"K":"", vr_glove->grub?"L":"", vr_glove->pinch?"M":"", vr_glove->menu_button?"N":"", vr_glove->calib?"O":""
 800149c:	69fb      	ldr	r3, [r7, #28]
 800149e:	8bdb      	ldrh	r3, [r3, #30]
	sprintf(vr_glove->serializedData, "A%dB%dC%dD%dE%dF%dG%d%s%s%s%s%s%s%s%s\n",
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <VR_Glove_Serialization+0x54>
 80014a4:	4c28      	ldr	r4, [pc, #160]	; (8001548 <VR_Glove_Serialization+0xf4>)
 80014a6:	e000      	b.n	80014aa <VR_Glove_Serialization+0x56>
 80014a8:	4c26      	ldr	r4, [pc, #152]	; (8001544 <VR_Glove_Serialization+0xf0>)
	  vr_glove->trigger?"I":"", vr_glove->A_button?"J":"", vr_glove->B_button?"K":"", vr_glove->grub?"L":"", vr_glove->pinch?"M":"", vr_glove->menu_button?"N":"", vr_glove->calib?"O":""
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
	sprintf(vr_glove->serializedData, "A%dB%dC%dD%dE%dF%dG%d%s%s%s%s%s%s%s%s\n",
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <VR_Glove_Serialization+0x62>
 80014b2:	4d26      	ldr	r5, [pc, #152]	; (800154c <VR_Glove_Serialization+0xf8>)
 80014b4:	e000      	b.n	80014b8 <VR_Glove_Serialization+0x64>
 80014b6:	4d23      	ldr	r5, [pc, #140]	; (8001544 <VR_Glove_Serialization+0xf0>)
	  vr_glove->trigger?"I":"", vr_glove->A_button?"J":"", vr_glove->B_button?"K":"", vr_glove->grub?"L":"", vr_glove->pinch?"M":"", vr_glove->menu_button?"N":"", vr_glove->calib?"O":""
 80014b8:	69fb      	ldr	r3, [r7, #28]
 80014ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
	sprintf(vr_glove->serializedData, "A%dB%dC%dD%dE%dF%dG%d%s%s%s%s%s%s%s%s\n",
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <VR_Glove_Serialization+0x70>
 80014c0:	4e23      	ldr	r6, [pc, #140]	; (8001550 <VR_Glove_Serialization+0xfc>)
 80014c2:	e000      	b.n	80014c6 <VR_Glove_Serialization+0x72>
 80014c4:	4e1f      	ldr	r6, [pc, #124]	; (8001544 <VR_Glove_Serialization+0xf0>)
	  vr_glove->trigger?"I":"", vr_glove->A_button?"J":"", vr_glove->B_button?"K":"", vr_glove->grub?"L":"", vr_glove->pinch?"M":"", vr_glove->menu_button?"N":"", vr_glove->calib?"O":""
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	8c1b      	ldrh	r3, [r3, #32]
	sprintf(vr_glove->serializedData, "A%dB%dC%dD%dE%dF%dG%d%s%s%s%s%s%s%s%s\n",
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d002      	beq.n	80014d4 <VR_Glove_Serialization+0x80>
 80014ce:	4b21      	ldr	r3, [pc, #132]	; (8001554 <VR_Glove_Serialization+0x100>)
 80014d0:	61bb      	str	r3, [r7, #24]
 80014d2:	e001      	b.n	80014d8 <VR_Glove_Serialization+0x84>
 80014d4:	4b1b      	ldr	r3, [pc, #108]	; (8001544 <VR_Glove_Serialization+0xf0>)
 80014d6:	61bb      	str	r3, [r7, #24]
	  vr_glove->trigger?"I":"", vr_glove->A_button?"J":"", vr_glove->B_button?"K":"", vr_glove->grub?"L":"", vr_glove->pinch?"M":"", vr_glove->menu_button?"N":"", vr_glove->calib?"O":""
 80014d8:	69fb      	ldr	r3, [r7, #28]
 80014da:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
	sprintf(vr_glove->serializedData, "A%dB%dC%dD%dE%dF%dG%d%s%s%s%s%s%s%s%s\n",
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <VR_Glove_Serialization+0x90>
 80014e0:	491d      	ldr	r1, [pc, #116]	; (8001558 <VR_Glove_Serialization+0x104>)
 80014e2:	e000      	b.n	80014e6 <VR_Glove_Serialization+0x92>
 80014e4:	4917      	ldr	r1, [pc, #92]	; (8001544 <VR_Glove_Serialization+0xf0>)
	  vr_glove->trigger?"I":"", vr_glove->A_button?"J":"", vr_glove->B_button?"K":"", vr_glove->grub?"L":"", vr_glove->pinch?"M":"", vr_glove->menu_button?"N":"", vr_glove->calib?"O":""
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
	sprintf(vr_glove->serializedData, "A%dB%dC%dD%dE%dF%dG%d%s%s%s%s%s%s%s%s\n",
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <VR_Glove_Serialization+0x9e>
 80014ee:	4a1b      	ldr	r2, [pc, #108]	; (800155c <VR_Glove_Serialization+0x108>)
 80014f0:	e000      	b.n	80014f4 <VR_Glove_Serialization+0xa0>
 80014f2:	4a14      	ldr	r2, [pc, #80]	; (8001544 <VR_Glove_Serialization+0xf0>)
	  vr_glove->trigger?"I":"", vr_glove->A_button?"J":"", vr_glove->B_button?"K":"", vr_glove->grub?"L":"", vr_glove->pinch?"M":"", vr_glove->menu_button?"N":"", vr_glove->calib?"O":""
 80014f4:	69fb      	ldr	r3, [r7, #28]
 80014f6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
	sprintf(vr_glove->serializedData, "A%dB%dC%dD%dE%dF%dG%d%s%s%s%s%s%s%s%s\n",
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <VR_Glove_Serialization+0xac>
 80014fc:	4b18      	ldr	r3, [pc, #96]	; (8001560 <VR_Glove_Serialization+0x10c>)
 80014fe:	e000      	b.n	8001502 <VR_Glove_Serialization+0xae>
 8001500:	4b10      	ldr	r3, [pc, #64]	; (8001544 <VR_Glove_Serialization+0xf0>)
 8001502:	930c      	str	r3, [sp, #48]	; 0x30
 8001504:	920b      	str	r2, [sp, #44]	; 0x2c
 8001506:	910a      	str	r1, [sp, #40]	; 0x28
 8001508:	69bb      	ldr	r3, [r7, #24]
 800150a:	9309      	str	r3, [sp, #36]	; 0x24
 800150c:	9608      	str	r6, [sp, #32]
 800150e:	9507      	str	r5, [sp, #28]
 8001510:	9406      	str	r4, [sp, #24]
 8001512:	9005      	str	r0, [sp, #20]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	9304      	str	r3, [sp, #16]
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	9303      	str	r3, [sp, #12]
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	9302      	str	r3, [sp, #8]
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	9301      	str	r3, [sp, #4]
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	9300      	str	r3, [sp, #0]
 8001528:	4643      	mov	r3, r8
 800152a:	4672      	mov	r2, lr
 800152c:	490d      	ldr	r1, [pc, #52]	; (8001564 <VR_Glove_Serialization+0x110>)
 800152e:	4660      	mov	r0, ip
 8001530:	f007 fd3c 	bl	8008fac <siprintf>
	  );
	return 0;
 8001534:	2300      	movs	r3, #0
}
 8001536:	4618      	mov	r0, r3
 8001538:	3720      	adds	r7, #32
 800153a:	46bd      	mov	sp, r7
 800153c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001540:	08009854 	.word	0x08009854
 8001544:	08009858 	.word	0x08009858
 8001548:	0800985c 	.word	0x0800985c
 800154c:	08009860 	.word	0x08009860
 8001550:	08009864 	.word	0x08009864
 8001554:	08009868 	.word	0x08009868
 8001558:	0800986c 	.word	0x0800986c
 800155c:	08009870 	.word	0x08009870
 8001560:	08009874 	.word	0x08009874
 8001564:	08009878 	.word	0x08009878

08001568 <VR_Glove_Transmit>:
int16_t VR_Glove_Transmit(VR_Glove* vr_glove)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b084      	sub	sp, #16
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
	int buf_len = 75;
 8001570:	234b      	movs	r3, #75	; 0x4b
 8001572:	60fb      	str	r3, [r7, #12]
	CDC_Transmit_FS(vr_glove->serializedData,buf_len);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	334c      	adds	r3, #76	; 0x4c
 8001578:	68f9      	ldr	r1, [r7, #12]
 800157a:	4618      	mov	r0, r3
 800157c:	f007 f906 	bl	800878c <CDC_Transmit_FS>
	return 0;
 8001580:	2300      	movs	r3, #0
}
 8001582:	4618      	mov	r0, r3
 8001584:	3710      	adds	r7, #16
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}

0800158a <VR_Glove_Gestures>:

int16_t VR_Glove_Gestures(VR_Glove* vr_glove)
{
 800158a:	b480      	push	{r7}
 800158c:	b083      	sub	sp, #12
 800158e:	af00      	add	r7, sp, #0
 8001590:	6078      	str	r0, [r7, #4]
	vr_glove->grub = (vr_glove->finger_position[1]+vr_glove->finger_position[2]+vr_glove->finger_position[3]+vr_glove->finger_position[4]) / 4 <= ANALOG_MAX/2 ? 0:1;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	885b      	ldrh	r3, [r3, #2]
 8001596:	461a      	mov	r2, r3
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	889b      	ldrh	r3, [r3, #4]
 800159c:	4413      	add	r3, r2
 800159e:	687a      	ldr	r2, [r7, #4]
 80015a0:	88d2      	ldrh	r2, [r2, #6]
 80015a2:	4413      	add	r3, r2
 80015a4:	687a      	ldr	r2, [r7, #4]
 80015a6:	8912      	ldrh	r2, [r2, #8]
 80015a8:	4413      	add	r3, r2
 80015aa:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80015ae:	4293      	cmp	r3, r2
 80015b0:	bfcc      	ite	gt
 80015b2:	2301      	movgt	r3, #1
 80015b4:	2300      	movle	r3, #0
 80015b6:	b2db      	uxtb	r3, r3
 80015b8:	b29a      	uxth	r2, r3
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	841a      	strh	r2, [r3, #32]
	vr_glove->pinch = (vr_glove->finger_position[0]+vr_glove->finger_position[1]) / 2 <= ANALOG_MAX/2 ? 0:1;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	881b      	ldrh	r3, [r3, #0]
 80015c2:	461a      	mov	r2, r3
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	885b      	ldrh	r3, [r3, #2]
 80015c8:	4413      	add	r3, r2
 80015ca:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80015ce:	4293      	cmp	r3, r2
 80015d0:	bfcc      	ite	gt
 80015d2:	2301      	movgt	r3, #1
 80015d4:	2300      	movle	r3, #0
 80015d6:	b2db      	uxtb	r3, r3
 80015d8:	b29a      	uxth	r2, r3
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	845a      	strh	r2, [r3, #34]	; 0x22
	vr_glove->trigger = (vr_glove->finger_position[1]) <= ANALOG_MAX/2 ? 0:1;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	885b      	ldrh	r3, [r3, #2]
 80015e2:	f240 12ff 	movw	r2, #511	; 0x1ff
 80015e6:	4293      	cmp	r3, r2
 80015e8:	bf8c      	ite	hi
 80015ea:	2301      	movhi	r3, #1
 80015ec:	2300      	movls	r3, #0
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	b29a      	uxth	r2, r3
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	83da      	strh	r2, [r3, #30]
	return 0;
 80015f6:	2300      	movs	r3, #0
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	370c      	adds	r7, #12
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bc80      	pop	{r7}
 8001600:	4770      	bx	lr
	...

08001604 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001604:	480c      	ldr	r0, [pc, #48]	; (8001638 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001606:	490d      	ldr	r1, [pc, #52]	; (800163c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001608:	4a0d      	ldr	r2, [pc, #52]	; (8001640 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800160a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800160c:	e002      	b.n	8001614 <LoopCopyDataInit>

0800160e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800160e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001610:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001612:	3304      	adds	r3, #4

08001614 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001614:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001616:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001618:	d3f9      	bcc.n	800160e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800161a:	4a0a      	ldr	r2, [pc, #40]	; (8001644 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800161c:	4c0a      	ldr	r4, [pc, #40]	; (8001648 <LoopFillZerobss+0x22>)
  movs r3, #0
 800161e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001620:	e001      	b.n	8001626 <LoopFillZerobss>

08001622 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001622:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001624:	3204      	adds	r2, #4

08001626 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001626:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001628:	d3fb      	bcc.n	8001622 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800162a:	f7ff fd93 	bl	8001154 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800162e:	f007 fc91 	bl	8008f54 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001632:	f7ff fb8d 	bl	8000d50 <main>
  bx lr
 8001636:	4770      	bx	lr
  ldr r0, =_sdata
 8001638:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800163c:	2000027c 	.word	0x2000027c
  ldr r2, =_sidata
 8001640:	0800995c 	.word	0x0800995c
  ldr r2, =_sbss
 8001644:	2000027c 	.word	0x2000027c
  ldr r4, =_ebss
 8001648:	2000148c 	.word	0x2000148c

0800164c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800164c:	e7fe      	b.n	800164c <ADC1_2_IRQHandler>
	...

08001650 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001654:	4b08      	ldr	r3, [pc, #32]	; (8001678 <HAL_Init+0x28>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a07      	ldr	r2, [pc, #28]	; (8001678 <HAL_Init+0x28>)
 800165a:	f043 0310 	orr.w	r3, r3, #16
 800165e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001660:	2003      	movs	r0, #3
 8001662:	f000 fd9f 	bl	80021a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001666:	200f      	movs	r0, #15
 8001668:	f000 f808 	bl	800167c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800166c:	f7ff fc9c 	bl	8000fa8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001670:	2300      	movs	r3, #0
}
 8001672:	4618      	mov	r0, r3
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	40022000 	.word	0x40022000

0800167c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001684:	4b12      	ldr	r3, [pc, #72]	; (80016d0 <HAL_InitTick+0x54>)
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	4b12      	ldr	r3, [pc, #72]	; (80016d4 <HAL_InitTick+0x58>)
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	4619      	mov	r1, r3
 800168e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001692:	fbb3 f3f1 	udiv	r3, r3, r1
 8001696:	fbb2 f3f3 	udiv	r3, r2, r3
 800169a:	4618      	mov	r0, r3
 800169c:	f000 fdb7 	bl	800220e <HAL_SYSTICK_Config>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	e00e      	b.n	80016c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2b0f      	cmp	r3, #15
 80016ae:	d80a      	bhi.n	80016c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016b0:	2200      	movs	r2, #0
 80016b2:	6879      	ldr	r1, [r7, #4]
 80016b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80016b8:	f000 fd7f 	bl	80021ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016bc:	4a06      	ldr	r2, [pc, #24]	; (80016d8 <HAL_InitTick+0x5c>)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016c2:	2300      	movs	r3, #0
 80016c4:	e000      	b.n	80016c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	3708      	adds	r7, #8
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	2000009c 	.word	0x2000009c
 80016d4:	200000a4 	.word	0x200000a4
 80016d8:	200000a0 	.word	0x200000a0

080016dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016e0:	4b05      	ldr	r3, [pc, #20]	; (80016f8 <HAL_IncTick+0x1c>)
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	461a      	mov	r2, r3
 80016e6:	4b05      	ldr	r3, [pc, #20]	; (80016fc <HAL_IncTick+0x20>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4413      	add	r3, r2
 80016ec:	4a03      	ldr	r2, [pc, #12]	; (80016fc <HAL_IncTick+0x20>)
 80016ee:	6013      	str	r3, [r2, #0]
}
 80016f0:	bf00      	nop
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bc80      	pop	{r7}
 80016f6:	4770      	bx	lr
 80016f8:	200000a4 	.word	0x200000a4
 80016fc:	200004f8 	.word	0x200004f8

08001700 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  return uwTick;
 8001704:	4b02      	ldr	r3, [pc, #8]	; (8001710 <HAL_GetTick+0x10>)
 8001706:	681b      	ldr	r3, [r3, #0]
}
 8001708:	4618      	mov	r0, r3
 800170a:	46bd      	mov	sp, r7
 800170c:	bc80      	pop	{r7}
 800170e:	4770      	bx	lr
 8001710:	200004f8 	.word	0x200004f8

08001714 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b084      	sub	sp, #16
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800171c:	f7ff fff0 	bl	8001700 <HAL_GetTick>
 8001720:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800172c:	d005      	beq.n	800173a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800172e:	4b0a      	ldr	r3, [pc, #40]	; (8001758 <HAL_Delay+0x44>)
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	461a      	mov	r2, r3
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	4413      	add	r3, r2
 8001738:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800173a:	bf00      	nop
 800173c:	f7ff ffe0 	bl	8001700 <HAL_GetTick>
 8001740:	4602      	mov	r2, r0
 8001742:	68bb      	ldr	r3, [r7, #8]
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	68fa      	ldr	r2, [r7, #12]
 8001748:	429a      	cmp	r2, r3
 800174a:	d8f7      	bhi.n	800173c <HAL_Delay+0x28>
  {
  }
}
 800174c:	bf00      	nop
 800174e:	bf00      	nop
 8001750:	3710      	adds	r7, #16
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	200000a4 	.word	0x200000a4

0800175c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b086      	sub	sp, #24
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001764:	2300      	movs	r3, #0
 8001766:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001768:	2300      	movs	r3, #0
 800176a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800176c:	2300      	movs	r3, #0
 800176e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001770:	2300      	movs	r3, #0
 8001772:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d101      	bne.n	800177e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	e0be      	b.n	80018fc <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	689b      	ldr	r3, [r3, #8]
 8001782:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001788:	2b00      	cmp	r3, #0
 800178a:	d109      	bne.n	80017a0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2200      	movs	r2, #0
 8001790:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2200      	movs	r2, #0
 8001796:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800179a:	6878      	ldr	r0, [r7, #4]
 800179c:	f7ff fc36 	bl	800100c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80017a0:	6878      	ldr	r0, [r7, #4]
 80017a2:	f000 fbf1 	bl	8001f88 <ADC_ConversionStop_Disable>
 80017a6:	4603      	mov	r3, r0
 80017a8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ae:	f003 0310 	and.w	r3, r3, #16
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	f040 8099 	bne.w	80018ea <HAL_ADC_Init+0x18e>
 80017b8:	7dfb      	ldrb	r3, [r7, #23]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	f040 8095 	bne.w	80018ea <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017c4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80017c8:	f023 0302 	bic.w	r3, r3, #2
 80017cc:	f043 0202 	orr.w	r2, r3, #2
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80017dc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	7b1b      	ldrb	r3, [r3, #12]
 80017e2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80017e4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80017e6:	68ba      	ldr	r2, [r7, #8]
 80017e8:	4313      	orrs	r3, r2
 80017ea:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80017f4:	d003      	beq.n	80017fe <HAL_ADC_Init+0xa2>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	2b01      	cmp	r3, #1
 80017fc:	d102      	bne.n	8001804 <HAL_ADC_Init+0xa8>
 80017fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001802:	e000      	b.n	8001806 <HAL_ADC_Init+0xaa>
 8001804:	2300      	movs	r3, #0
 8001806:	693a      	ldr	r2, [r7, #16]
 8001808:	4313      	orrs	r3, r2
 800180a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	7d1b      	ldrb	r3, [r3, #20]
 8001810:	2b01      	cmp	r3, #1
 8001812:	d119      	bne.n	8001848 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	7b1b      	ldrb	r3, [r3, #12]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d109      	bne.n	8001830 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	699b      	ldr	r3, [r3, #24]
 8001820:	3b01      	subs	r3, #1
 8001822:	035a      	lsls	r2, r3, #13
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	4313      	orrs	r3, r2
 8001828:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800182c:	613b      	str	r3, [r7, #16]
 800182e:	e00b      	b.n	8001848 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001834:	f043 0220 	orr.w	r2, r3, #32
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001840:	f043 0201 	orr.w	r2, r3, #1
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	693a      	ldr	r2, [r7, #16]
 8001858:	430a      	orrs	r2, r1
 800185a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	689a      	ldr	r2, [r3, #8]
 8001862:	4b28      	ldr	r3, [pc, #160]	; (8001904 <HAL_ADC_Init+0x1a8>)
 8001864:	4013      	ands	r3, r2
 8001866:	687a      	ldr	r2, [r7, #4]
 8001868:	6812      	ldr	r2, [r2, #0]
 800186a:	68b9      	ldr	r1, [r7, #8]
 800186c:	430b      	orrs	r3, r1
 800186e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001878:	d003      	beq.n	8001882 <HAL_ADC_Init+0x126>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	2b01      	cmp	r3, #1
 8001880:	d104      	bne.n	800188c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	691b      	ldr	r3, [r3, #16]
 8001886:	3b01      	subs	r3, #1
 8001888:	051b      	lsls	r3, r3, #20
 800188a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001892:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	68fa      	ldr	r2, [r7, #12]
 800189c:	430a      	orrs	r2, r1
 800189e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	689a      	ldr	r2, [r3, #8]
 80018a6:	4b18      	ldr	r3, [pc, #96]	; (8001908 <HAL_ADC_Init+0x1ac>)
 80018a8:	4013      	ands	r3, r2
 80018aa:	68ba      	ldr	r2, [r7, #8]
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d10b      	bne.n	80018c8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2200      	movs	r2, #0
 80018b4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ba:	f023 0303 	bic.w	r3, r3, #3
 80018be:	f043 0201 	orr.w	r2, r3, #1
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80018c6:	e018      	b.n	80018fa <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018cc:	f023 0312 	bic.w	r3, r3, #18
 80018d0:	f043 0210 	orr.w	r2, r3, #16
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018dc:	f043 0201 	orr.w	r2, r3, #1
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80018e4:	2301      	movs	r3, #1
 80018e6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80018e8:	e007      	b.n	80018fa <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ee:	f043 0210 	orr.w	r2, r3, #16
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80018fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	3718      	adds	r7, #24
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	ffe1f7fd 	.word	0xffe1f7fd
 8001908:	ff1f0efe 	.word	0xff1f0efe

0800190c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b084      	sub	sp, #16
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001914:	2300      	movs	r3, #0
 8001916:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800191e:	2b01      	cmp	r3, #1
 8001920:	d101      	bne.n	8001926 <HAL_ADC_Start+0x1a>
 8001922:	2302      	movs	r3, #2
 8001924:	e098      	b.n	8001a58 <HAL_ADC_Start+0x14c>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2201      	movs	r2, #1
 800192a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	f000 fad0 	bl	8001ed4 <ADC_Enable>
 8001934:	4603      	mov	r3, r0
 8001936:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001938:	7bfb      	ldrb	r3, [r7, #15]
 800193a:	2b00      	cmp	r3, #0
 800193c:	f040 8087 	bne.w	8001a4e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001944:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001948:	f023 0301 	bic.w	r3, r3, #1
 800194c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a41      	ldr	r2, [pc, #260]	; (8001a60 <HAL_ADC_Start+0x154>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d105      	bne.n	800196a <HAL_ADC_Start+0x5e>
 800195e:	4b41      	ldr	r3, [pc, #260]	; (8001a64 <HAL_ADC_Start+0x158>)
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001966:	2b00      	cmp	r3, #0
 8001968:	d115      	bne.n	8001996 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800196e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001980:	2b00      	cmp	r3, #0
 8001982:	d026      	beq.n	80019d2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001988:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800198c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001994:	e01d      	b.n	80019d2 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800199a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a2f      	ldr	r2, [pc, #188]	; (8001a64 <HAL_ADC_Start+0x158>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d004      	beq.n	80019b6 <HAL_ADC_Start+0xaa>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a2b      	ldr	r2, [pc, #172]	; (8001a60 <HAL_ADC_Start+0x154>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d10d      	bne.n	80019d2 <HAL_ADC_Start+0xc6>
 80019b6:	4b2b      	ldr	r3, [pc, #172]	; (8001a64 <HAL_ADC_Start+0x158>)
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d007      	beq.n	80019d2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019c6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80019ca:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d006      	beq.n	80019ec <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019e2:	f023 0206 	bic.w	r2, r3, #6
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	62da      	str	r2, [r3, #44]	; 0x2c
 80019ea:	e002      	b.n	80019f2 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2200      	movs	r2, #0
 80019f0:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2200      	movs	r2, #0
 80019f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f06f 0202 	mvn.w	r2, #2
 8001a02:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001a0e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001a12:	d113      	bne.n	8001a3c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001a18:	4a11      	ldr	r2, [pc, #68]	; (8001a60 <HAL_ADC_Start+0x154>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d105      	bne.n	8001a2a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001a1e:	4b11      	ldr	r3, [pc, #68]	; (8001a64 <HAL_ADC_Start+0x158>)
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d108      	bne.n	8001a3c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	689a      	ldr	r2, [r3, #8]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001a38:	609a      	str	r2, [r3, #8]
 8001a3a:	e00c      	b.n	8001a56 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	689a      	ldr	r2, [r3, #8]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001a4a:	609a      	str	r2, [r3, #8]
 8001a4c:	e003      	b.n	8001a56 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2200      	movs	r2, #0
 8001a52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001a56:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3710      	adds	r7, #16
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	40012800 	.word	0x40012800
 8001a64:	40012400 	.word	0x40012400

08001a68 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b084      	sub	sp, #16
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a70:	2300      	movs	r3, #0
 8001a72:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	d101      	bne.n	8001a82 <HAL_ADC_Stop+0x1a>
 8001a7e:	2302      	movs	r3, #2
 8001a80:	e01a      	b.n	8001ab8 <HAL_ADC_Stop+0x50>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2201      	movs	r2, #1
 8001a86:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	f000 fa7c 	bl	8001f88 <ADC_ConversionStop_Disable>
 8001a90:	4603      	mov	r3, r0
 8001a92:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001a94:	7bfb      	ldrb	r3, [r7, #15]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d109      	bne.n	8001aae <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a9e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001aa2:	f023 0301 	bic.w	r3, r3, #1
 8001aa6:	f043 0201 	orr.w	r2, r3, #1
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001ab6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	3710      	adds	r7, #16
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}

08001ac0 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001ac0:	b590      	push	{r4, r7, lr}
 8001ac2:	b087      	sub	sp, #28
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001aca:	2300      	movs	r3, #0
 8001acc:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001ad6:	f7ff fe13 	bl	8001700 <HAL_GetTick>
 8001ada:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d00b      	beq.n	8001b02 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aee:	f043 0220 	orr.w	r2, r3, #32
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2200      	movs	r2, #0
 8001afa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e0d3      	b.n	8001caa <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d131      	bne.n	8001b74 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b16:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d12a      	bne.n	8001b74 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001b1e:	e021      	b.n	8001b64 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b26:	d01d      	beq.n	8001b64 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d007      	beq.n	8001b3e <HAL_ADC_PollForConversion+0x7e>
 8001b2e:	f7ff fde7 	bl	8001700 <HAL_GetTick>
 8001b32:	4602      	mov	r2, r0
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	1ad3      	subs	r3, r2, r3
 8001b38:	683a      	ldr	r2, [r7, #0]
 8001b3a:	429a      	cmp	r2, r3
 8001b3c:	d212      	bcs.n	8001b64 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f003 0302 	and.w	r3, r3, #2
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d10b      	bne.n	8001b64 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b50:	f043 0204 	orr.w	r2, r3, #4
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8001b60:	2303      	movs	r3, #3
 8001b62:	e0a2      	b.n	8001caa <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 0302 	and.w	r3, r3, #2
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d0d6      	beq.n	8001b20 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001b72:	e070      	b.n	8001c56 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001b74:	4b4f      	ldr	r3, [pc, #316]	; (8001cb4 <HAL_ADC_PollForConversion+0x1f4>)
 8001b76:	681c      	ldr	r4, [r3, #0]
 8001b78:	2002      	movs	r0, #2
 8001b7a:	f002 fe89 	bl	8004890 <HAL_RCCEx_GetPeriphCLKFreq>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	6919      	ldr	r1, [r3, #16]
 8001b8a:	4b4b      	ldr	r3, [pc, #300]	; (8001cb8 <HAL_ADC_PollForConversion+0x1f8>)
 8001b8c:	400b      	ands	r3, r1
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d118      	bne.n	8001bc4 <HAL_ADC_PollForConversion+0x104>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	68d9      	ldr	r1, [r3, #12]
 8001b98:	4b48      	ldr	r3, [pc, #288]	; (8001cbc <HAL_ADC_PollForConversion+0x1fc>)
 8001b9a:	400b      	ands	r3, r1
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d111      	bne.n	8001bc4 <HAL_ADC_PollForConversion+0x104>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	6919      	ldr	r1, [r3, #16]
 8001ba6:	4b46      	ldr	r3, [pc, #280]	; (8001cc0 <HAL_ADC_PollForConversion+0x200>)
 8001ba8:	400b      	ands	r3, r1
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d108      	bne.n	8001bc0 <HAL_ADC_PollForConversion+0x100>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	68d9      	ldr	r1, [r3, #12]
 8001bb4:	4b43      	ldr	r3, [pc, #268]	; (8001cc4 <HAL_ADC_PollForConversion+0x204>)
 8001bb6:	400b      	ands	r3, r1
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d101      	bne.n	8001bc0 <HAL_ADC_PollForConversion+0x100>
 8001bbc:	2314      	movs	r3, #20
 8001bbe:	e020      	b.n	8001c02 <HAL_ADC_PollForConversion+0x142>
 8001bc0:	2329      	movs	r3, #41	; 0x29
 8001bc2:	e01e      	b.n	8001c02 <HAL_ADC_PollForConversion+0x142>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	6919      	ldr	r1, [r3, #16]
 8001bca:	4b3d      	ldr	r3, [pc, #244]	; (8001cc0 <HAL_ADC_PollForConversion+0x200>)
 8001bcc:	400b      	ands	r3, r1
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d106      	bne.n	8001be0 <HAL_ADC_PollForConversion+0x120>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	68d9      	ldr	r1, [r3, #12]
 8001bd8:	4b3a      	ldr	r3, [pc, #232]	; (8001cc4 <HAL_ADC_PollForConversion+0x204>)
 8001bda:	400b      	ands	r3, r1
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d00d      	beq.n	8001bfc <HAL_ADC_PollForConversion+0x13c>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	6919      	ldr	r1, [r3, #16]
 8001be6:	4b38      	ldr	r3, [pc, #224]	; (8001cc8 <HAL_ADC_PollForConversion+0x208>)
 8001be8:	400b      	ands	r3, r1
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d108      	bne.n	8001c00 <HAL_ADC_PollForConversion+0x140>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	68d9      	ldr	r1, [r3, #12]
 8001bf4:	4b34      	ldr	r3, [pc, #208]	; (8001cc8 <HAL_ADC_PollForConversion+0x208>)
 8001bf6:	400b      	ands	r3, r1
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d101      	bne.n	8001c00 <HAL_ADC_PollForConversion+0x140>
 8001bfc:	2354      	movs	r3, #84	; 0x54
 8001bfe:	e000      	b.n	8001c02 <HAL_ADC_PollForConversion+0x142>
 8001c00:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001c02:	fb02 f303 	mul.w	r3, r2, r3
 8001c06:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001c08:	e021      	b.n	8001c4e <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c10:	d01a      	beq.n	8001c48 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d007      	beq.n	8001c28 <HAL_ADC_PollForConversion+0x168>
 8001c18:	f7ff fd72 	bl	8001700 <HAL_GetTick>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	683a      	ldr	r2, [r7, #0]
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d20f      	bcs.n	8001c48 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	693a      	ldr	r2, [r7, #16]
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d90b      	bls.n	8001c48 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c34:	f043 0204 	orr.w	r2, r3, #4
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8001c44:	2303      	movs	r3, #3
 8001c46:	e030      	b.n	8001caa <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	3301      	adds	r3, #1
 8001c4c:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	693a      	ldr	r2, [r7, #16]
 8001c52:	429a      	cmp	r2, r3
 8001c54:	d8d9      	bhi.n	8001c0a <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f06f 0212 	mvn.w	r2, #18
 8001c5e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c64:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001c76:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001c7a:	d115      	bne.n	8001ca8 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d111      	bne.n	8001ca8 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c88:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d105      	bne.n	8001ca8 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ca0:	f043 0201 	orr.w	r2, r3, #1
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001ca8:	2300      	movs	r3, #0
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	371c      	adds	r7, #28
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd90      	pop	{r4, r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	2000009c 	.word	0x2000009c
 8001cb8:	24924924 	.word	0x24924924
 8001cbc:	00924924 	.word	0x00924924
 8001cc0:	12492492 	.word	0x12492492
 8001cc4:	00492492 	.word	0x00492492
 8001cc8:	00249249 	.word	0x00249249

08001ccc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	370c      	adds	r7, #12
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bc80      	pop	{r7}
 8001ce2:	4770      	bx	lr

08001ce4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001ce4:	b480      	push	{r7}
 8001ce6:	b085      	sub	sp, #20
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
 8001cec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d101      	bne.n	8001d04 <HAL_ADC_ConfigChannel+0x20>
 8001d00:	2302      	movs	r3, #2
 8001d02:	e0dc      	b.n	8001ebe <HAL_ADC_ConfigChannel+0x1da>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2201      	movs	r2, #1
 8001d08:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	2b06      	cmp	r3, #6
 8001d12:	d81c      	bhi.n	8001d4e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	685a      	ldr	r2, [r3, #4]
 8001d1e:	4613      	mov	r3, r2
 8001d20:	009b      	lsls	r3, r3, #2
 8001d22:	4413      	add	r3, r2
 8001d24:	3b05      	subs	r3, #5
 8001d26:	221f      	movs	r2, #31
 8001d28:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2c:	43db      	mvns	r3, r3
 8001d2e:	4019      	ands	r1, r3
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	6818      	ldr	r0, [r3, #0]
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	685a      	ldr	r2, [r3, #4]
 8001d38:	4613      	mov	r3, r2
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	4413      	add	r3, r2
 8001d3e:	3b05      	subs	r3, #5
 8001d40:	fa00 f203 	lsl.w	r2, r0, r3
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	430a      	orrs	r2, r1
 8001d4a:	635a      	str	r2, [r3, #52]	; 0x34
 8001d4c:	e03c      	b.n	8001dc8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	2b0c      	cmp	r3, #12
 8001d54:	d81c      	bhi.n	8001d90 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	685a      	ldr	r2, [r3, #4]
 8001d60:	4613      	mov	r3, r2
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	4413      	add	r3, r2
 8001d66:	3b23      	subs	r3, #35	; 0x23
 8001d68:	221f      	movs	r2, #31
 8001d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6e:	43db      	mvns	r3, r3
 8001d70:	4019      	ands	r1, r3
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	6818      	ldr	r0, [r3, #0]
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	685a      	ldr	r2, [r3, #4]
 8001d7a:	4613      	mov	r3, r2
 8001d7c:	009b      	lsls	r3, r3, #2
 8001d7e:	4413      	add	r3, r2
 8001d80:	3b23      	subs	r3, #35	; 0x23
 8001d82:	fa00 f203 	lsl.w	r2, r0, r3
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	430a      	orrs	r2, r1
 8001d8c:	631a      	str	r2, [r3, #48]	; 0x30
 8001d8e:	e01b      	b.n	8001dc8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	685a      	ldr	r2, [r3, #4]
 8001d9a:	4613      	mov	r3, r2
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	4413      	add	r3, r2
 8001da0:	3b41      	subs	r3, #65	; 0x41
 8001da2:	221f      	movs	r2, #31
 8001da4:	fa02 f303 	lsl.w	r3, r2, r3
 8001da8:	43db      	mvns	r3, r3
 8001daa:	4019      	ands	r1, r3
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	6818      	ldr	r0, [r3, #0]
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	685a      	ldr	r2, [r3, #4]
 8001db4:	4613      	mov	r3, r2
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	4413      	add	r3, r2
 8001dba:	3b41      	subs	r3, #65	; 0x41
 8001dbc:	fa00 f203 	lsl.w	r2, r0, r3
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	430a      	orrs	r2, r1
 8001dc6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	2b09      	cmp	r3, #9
 8001dce:	d91c      	bls.n	8001e0a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	68d9      	ldr	r1, [r3, #12]
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	4613      	mov	r3, r2
 8001ddc:	005b      	lsls	r3, r3, #1
 8001dde:	4413      	add	r3, r2
 8001de0:	3b1e      	subs	r3, #30
 8001de2:	2207      	movs	r2, #7
 8001de4:	fa02 f303 	lsl.w	r3, r2, r3
 8001de8:	43db      	mvns	r3, r3
 8001dea:	4019      	ands	r1, r3
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	6898      	ldr	r0, [r3, #8]
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	4613      	mov	r3, r2
 8001df6:	005b      	lsls	r3, r3, #1
 8001df8:	4413      	add	r3, r2
 8001dfa:	3b1e      	subs	r3, #30
 8001dfc:	fa00 f203 	lsl.w	r2, r0, r3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	430a      	orrs	r2, r1
 8001e06:	60da      	str	r2, [r3, #12]
 8001e08:	e019      	b.n	8001e3e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	6919      	ldr	r1, [r3, #16]
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	4613      	mov	r3, r2
 8001e16:	005b      	lsls	r3, r3, #1
 8001e18:	4413      	add	r3, r2
 8001e1a:	2207      	movs	r2, #7
 8001e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e20:	43db      	mvns	r3, r3
 8001e22:	4019      	ands	r1, r3
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	6898      	ldr	r0, [r3, #8]
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	4613      	mov	r3, r2
 8001e2e:	005b      	lsls	r3, r3, #1
 8001e30:	4413      	add	r3, r2
 8001e32:	fa00 f203 	lsl.w	r2, r0, r3
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	430a      	orrs	r2, r1
 8001e3c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	2b10      	cmp	r3, #16
 8001e44:	d003      	beq.n	8001e4e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001e4a:	2b11      	cmp	r3, #17
 8001e4c:	d132      	bne.n	8001eb4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a1d      	ldr	r2, [pc, #116]	; (8001ec8 <HAL_ADC_ConfigChannel+0x1e4>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d125      	bne.n	8001ea4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d126      	bne.n	8001eb4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	689a      	ldr	r2, [r3, #8]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001e74:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	2b10      	cmp	r3, #16
 8001e7c:	d11a      	bne.n	8001eb4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001e7e:	4b13      	ldr	r3, [pc, #76]	; (8001ecc <HAL_ADC_ConfigChannel+0x1e8>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a13      	ldr	r2, [pc, #76]	; (8001ed0 <HAL_ADC_ConfigChannel+0x1ec>)
 8001e84:	fba2 2303 	umull	r2, r3, r2, r3
 8001e88:	0c9a      	lsrs	r2, r3, #18
 8001e8a:	4613      	mov	r3, r2
 8001e8c:	009b      	lsls	r3, r3, #2
 8001e8e:	4413      	add	r3, r2
 8001e90:	005b      	lsls	r3, r3, #1
 8001e92:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001e94:	e002      	b.n	8001e9c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	3b01      	subs	r3, #1
 8001e9a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d1f9      	bne.n	8001e96 <HAL_ADC_ConfigChannel+0x1b2>
 8001ea2:	e007      	b.n	8001eb4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ea8:	f043 0220 	orr.w	r2, r3, #32
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001ebc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3714      	adds	r7, #20
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bc80      	pop	{r7}
 8001ec6:	4770      	bx	lr
 8001ec8:	40012400 	.word	0x40012400
 8001ecc:	2000009c 	.word	0x2000009c
 8001ed0:	431bde83 	.word	0x431bde83

08001ed4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b084      	sub	sp, #16
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001edc:	2300      	movs	r3, #0
 8001ede:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	f003 0301 	and.w	r3, r3, #1
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d040      	beq.n	8001f74 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	689a      	ldr	r2, [r3, #8]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f042 0201 	orr.w	r2, r2, #1
 8001f00:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001f02:	4b1f      	ldr	r3, [pc, #124]	; (8001f80 <ADC_Enable+0xac>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a1f      	ldr	r2, [pc, #124]	; (8001f84 <ADC_Enable+0xb0>)
 8001f08:	fba2 2303 	umull	r2, r3, r2, r3
 8001f0c:	0c9b      	lsrs	r3, r3, #18
 8001f0e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001f10:	e002      	b.n	8001f18 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	3b01      	subs	r3, #1
 8001f16:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d1f9      	bne.n	8001f12 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001f1e:	f7ff fbef 	bl	8001700 <HAL_GetTick>
 8001f22:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001f24:	e01f      	b.n	8001f66 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001f26:	f7ff fbeb 	bl	8001700 <HAL_GetTick>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	1ad3      	subs	r3, r2, r3
 8001f30:	2b02      	cmp	r3, #2
 8001f32:	d918      	bls.n	8001f66 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	f003 0301 	and.w	r3, r3, #1
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d011      	beq.n	8001f66 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f46:	f043 0210 	orr.w	r2, r3, #16
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f52:	f043 0201 	orr.w	r2, r3, #1
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	e007      	b.n	8001f76 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	f003 0301 	and.w	r3, r3, #1
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d1d8      	bne.n	8001f26 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001f74:	2300      	movs	r3, #0
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3710      	adds	r7, #16
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	2000009c 	.word	0x2000009c
 8001f84:	431bde83 	.word	0x431bde83

08001f88 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b084      	sub	sp, #16
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001f90:	2300      	movs	r3, #0
 8001f92:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	f003 0301 	and.w	r3, r3, #1
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d12e      	bne.n	8002000 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	689a      	ldr	r2, [r3, #8]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f022 0201 	bic.w	r2, r2, #1
 8001fb0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001fb2:	f7ff fba5 	bl	8001700 <HAL_GetTick>
 8001fb6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001fb8:	e01b      	b.n	8001ff2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001fba:	f7ff fba1 	bl	8001700 <HAL_GetTick>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	1ad3      	subs	r3, r2, r3
 8001fc4:	2b02      	cmp	r3, #2
 8001fc6:	d914      	bls.n	8001ff2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	f003 0301 	and.w	r3, r3, #1
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d10d      	bne.n	8001ff2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fda:	f043 0210 	orr.w	r2, r3, #16
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fe6:	f043 0201 	orr.w	r2, r3, #1
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e007      	b.n	8002002 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	f003 0301 	and.w	r3, r3, #1
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	d0dc      	beq.n	8001fba <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002000:	2300      	movs	r3, #0
}
 8002002:	4618      	mov	r0, r3
 8002004:	3710      	adds	r7, #16
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
	...

0800200c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800200c:	b480      	push	{r7}
 800200e:	b085      	sub	sp, #20
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	f003 0307 	and.w	r3, r3, #7
 800201a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800201c:	4b0c      	ldr	r3, [pc, #48]	; (8002050 <__NVIC_SetPriorityGrouping+0x44>)
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002022:	68ba      	ldr	r2, [r7, #8]
 8002024:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002028:	4013      	ands	r3, r2
 800202a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002034:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002038:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800203c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800203e:	4a04      	ldr	r2, [pc, #16]	; (8002050 <__NVIC_SetPriorityGrouping+0x44>)
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	60d3      	str	r3, [r2, #12]
}
 8002044:	bf00      	nop
 8002046:	3714      	adds	r7, #20
 8002048:	46bd      	mov	sp, r7
 800204a:	bc80      	pop	{r7}
 800204c:	4770      	bx	lr
 800204e:	bf00      	nop
 8002050:	e000ed00 	.word	0xe000ed00

08002054 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002058:	4b04      	ldr	r3, [pc, #16]	; (800206c <__NVIC_GetPriorityGrouping+0x18>)
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	0a1b      	lsrs	r3, r3, #8
 800205e:	f003 0307 	and.w	r3, r3, #7
}
 8002062:	4618      	mov	r0, r3
 8002064:	46bd      	mov	sp, r7
 8002066:	bc80      	pop	{r7}
 8002068:	4770      	bx	lr
 800206a:	bf00      	nop
 800206c:	e000ed00 	.word	0xe000ed00

08002070 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	4603      	mov	r3, r0
 8002078:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800207a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800207e:	2b00      	cmp	r3, #0
 8002080:	db0b      	blt.n	800209a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002082:	79fb      	ldrb	r3, [r7, #7]
 8002084:	f003 021f 	and.w	r2, r3, #31
 8002088:	4906      	ldr	r1, [pc, #24]	; (80020a4 <__NVIC_EnableIRQ+0x34>)
 800208a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800208e:	095b      	lsrs	r3, r3, #5
 8002090:	2001      	movs	r0, #1
 8002092:	fa00 f202 	lsl.w	r2, r0, r2
 8002096:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800209a:	bf00      	nop
 800209c:	370c      	adds	r7, #12
 800209e:	46bd      	mov	sp, r7
 80020a0:	bc80      	pop	{r7}
 80020a2:	4770      	bx	lr
 80020a4:	e000e100 	.word	0xe000e100

080020a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	4603      	mov	r3, r0
 80020b0:	6039      	str	r1, [r7, #0]
 80020b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	db0a      	blt.n	80020d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	b2da      	uxtb	r2, r3
 80020c0:	490c      	ldr	r1, [pc, #48]	; (80020f4 <__NVIC_SetPriority+0x4c>)
 80020c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020c6:	0112      	lsls	r2, r2, #4
 80020c8:	b2d2      	uxtb	r2, r2
 80020ca:	440b      	add	r3, r1
 80020cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020d0:	e00a      	b.n	80020e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	b2da      	uxtb	r2, r3
 80020d6:	4908      	ldr	r1, [pc, #32]	; (80020f8 <__NVIC_SetPriority+0x50>)
 80020d8:	79fb      	ldrb	r3, [r7, #7]
 80020da:	f003 030f 	and.w	r3, r3, #15
 80020de:	3b04      	subs	r3, #4
 80020e0:	0112      	lsls	r2, r2, #4
 80020e2:	b2d2      	uxtb	r2, r2
 80020e4:	440b      	add	r3, r1
 80020e6:	761a      	strb	r2, [r3, #24]
}
 80020e8:	bf00      	nop
 80020ea:	370c      	adds	r7, #12
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bc80      	pop	{r7}
 80020f0:	4770      	bx	lr
 80020f2:	bf00      	nop
 80020f4:	e000e100 	.word	0xe000e100
 80020f8:	e000ed00 	.word	0xe000ed00

080020fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b089      	sub	sp, #36	; 0x24
 8002100:	af00      	add	r7, sp, #0
 8002102:	60f8      	str	r0, [r7, #12]
 8002104:	60b9      	str	r1, [r7, #8]
 8002106:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	f003 0307 	and.w	r3, r3, #7
 800210e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	f1c3 0307 	rsb	r3, r3, #7
 8002116:	2b04      	cmp	r3, #4
 8002118:	bf28      	it	cs
 800211a:	2304      	movcs	r3, #4
 800211c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	3304      	adds	r3, #4
 8002122:	2b06      	cmp	r3, #6
 8002124:	d902      	bls.n	800212c <NVIC_EncodePriority+0x30>
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	3b03      	subs	r3, #3
 800212a:	e000      	b.n	800212e <NVIC_EncodePriority+0x32>
 800212c:	2300      	movs	r3, #0
 800212e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002130:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002134:	69bb      	ldr	r3, [r7, #24]
 8002136:	fa02 f303 	lsl.w	r3, r2, r3
 800213a:	43da      	mvns	r2, r3
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	401a      	ands	r2, r3
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002144:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	fa01 f303 	lsl.w	r3, r1, r3
 800214e:	43d9      	mvns	r1, r3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002154:	4313      	orrs	r3, r2
         );
}
 8002156:	4618      	mov	r0, r3
 8002158:	3724      	adds	r7, #36	; 0x24
 800215a:	46bd      	mov	sp, r7
 800215c:	bc80      	pop	{r7}
 800215e:	4770      	bx	lr

08002160 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	3b01      	subs	r3, #1
 800216c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002170:	d301      	bcc.n	8002176 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002172:	2301      	movs	r3, #1
 8002174:	e00f      	b.n	8002196 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002176:	4a0a      	ldr	r2, [pc, #40]	; (80021a0 <SysTick_Config+0x40>)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	3b01      	subs	r3, #1
 800217c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800217e:	210f      	movs	r1, #15
 8002180:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002184:	f7ff ff90 	bl	80020a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002188:	4b05      	ldr	r3, [pc, #20]	; (80021a0 <SysTick_Config+0x40>)
 800218a:	2200      	movs	r2, #0
 800218c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800218e:	4b04      	ldr	r3, [pc, #16]	; (80021a0 <SysTick_Config+0x40>)
 8002190:	2207      	movs	r2, #7
 8002192:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002194:	2300      	movs	r3, #0
}
 8002196:	4618      	mov	r0, r3
 8002198:	3708      	adds	r7, #8
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	e000e010 	.word	0xe000e010

080021a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b082      	sub	sp, #8
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021ac:	6878      	ldr	r0, [r7, #4]
 80021ae:	f7ff ff2d 	bl	800200c <__NVIC_SetPriorityGrouping>
}
 80021b2:	bf00      	nop
 80021b4:	3708      	adds	r7, #8
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}

080021ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021ba:	b580      	push	{r7, lr}
 80021bc:	b086      	sub	sp, #24
 80021be:	af00      	add	r7, sp, #0
 80021c0:	4603      	mov	r3, r0
 80021c2:	60b9      	str	r1, [r7, #8]
 80021c4:	607a      	str	r2, [r7, #4]
 80021c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021c8:	2300      	movs	r3, #0
 80021ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021cc:	f7ff ff42 	bl	8002054 <__NVIC_GetPriorityGrouping>
 80021d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	68b9      	ldr	r1, [r7, #8]
 80021d6:	6978      	ldr	r0, [r7, #20]
 80021d8:	f7ff ff90 	bl	80020fc <NVIC_EncodePriority>
 80021dc:	4602      	mov	r2, r0
 80021de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021e2:	4611      	mov	r1, r2
 80021e4:	4618      	mov	r0, r3
 80021e6:	f7ff ff5f 	bl	80020a8 <__NVIC_SetPriority>
}
 80021ea:	bf00      	nop
 80021ec:	3718      	adds	r7, #24
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}

080021f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021f2:	b580      	push	{r7, lr}
 80021f4:	b082      	sub	sp, #8
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	4603      	mov	r3, r0
 80021fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002200:	4618      	mov	r0, r3
 8002202:	f7ff ff35 	bl	8002070 <__NVIC_EnableIRQ>
}
 8002206:	bf00      	nop
 8002208:	3708      	adds	r7, #8
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}

0800220e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800220e:	b580      	push	{r7, lr}
 8002210:	b082      	sub	sp, #8
 8002212:	af00      	add	r7, sp, #0
 8002214:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f7ff ffa2 	bl	8002160 <SysTick_Config>
 800221c:	4603      	mov	r3, r0
}
 800221e:	4618      	mov	r0, r3
 8002220:	3708      	adds	r7, #8
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
	...

08002228 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002228:	b480      	push	{r7}
 800222a:	b08b      	sub	sp, #44	; 0x2c
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
 8002230:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002232:	2300      	movs	r3, #0
 8002234:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002236:	2300      	movs	r3, #0
 8002238:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800223a:	e169      	b.n	8002510 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800223c:	2201      	movs	r2, #1
 800223e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002240:	fa02 f303 	lsl.w	r3, r2, r3
 8002244:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	69fa      	ldr	r2, [r7, #28]
 800224c:	4013      	ands	r3, r2
 800224e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002250:	69ba      	ldr	r2, [r7, #24]
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	429a      	cmp	r2, r3
 8002256:	f040 8158 	bne.w	800250a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	4a9a      	ldr	r2, [pc, #616]	; (80024c8 <HAL_GPIO_Init+0x2a0>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d05e      	beq.n	8002322 <HAL_GPIO_Init+0xfa>
 8002264:	4a98      	ldr	r2, [pc, #608]	; (80024c8 <HAL_GPIO_Init+0x2a0>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d875      	bhi.n	8002356 <HAL_GPIO_Init+0x12e>
 800226a:	4a98      	ldr	r2, [pc, #608]	; (80024cc <HAL_GPIO_Init+0x2a4>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d058      	beq.n	8002322 <HAL_GPIO_Init+0xfa>
 8002270:	4a96      	ldr	r2, [pc, #600]	; (80024cc <HAL_GPIO_Init+0x2a4>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d86f      	bhi.n	8002356 <HAL_GPIO_Init+0x12e>
 8002276:	4a96      	ldr	r2, [pc, #600]	; (80024d0 <HAL_GPIO_Init+0x2a8>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d052      	beq.n	8002322 <HAL_GPIO_Init+0xfa>
 800227c:	4a94      	ldr	r2, [pc, #592]	; (80024d0 <HAL_GPIO_Init+0x2a8>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d869      	bhi.n	8002356 <HAL_GPIO_Init+0x12e>
 8002282:	4a94      	ldr	r2, [pc, #592]	; (80024d4 <HAL_GPIO_Init+0x2ac>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d04c      	beq.n	8002322 <HAL_GPIO_Init+0xfa>
 8002288:	4a92      	ldr	r2, [pc, #584]	; (80024d4 <HAL_GPIO_Init+0x2ac>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d863      	bhi.n	8002356 <HAL_GPIO_Init+0x12e>
 800228e:	4a92      	ldr	r2, [pc, #584]	; (80024d8 <HAL_GPIO_Init+0x2b0>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d046      	beq.n	8002322 <HAL_GPIO_Init+0xfa>
 8002294:	4a90      	ldr	r2, [pc, #576]	; (80024d8 <HAL_GPIO_Init+0x2b0>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d85d      	bhi.n	8002356 <HAL_GPIO_Init+0x12e>
 800229a:	2b12      	cmp	r3, #18
 800229c:	d82a      	bhi.n	80022f4 <HAL_GPIO_Init+0xcc>
 800229e:	2b12      	cmp	r3, #18
 80022a0:	d859      	bhi.n	8002356 <HAL_GPIO_Init+0x12e>
 80022a2:	a201      	add	r2, pc, #4	; (adr r2, 80022a8 <HAL_GPIO_Init+0x80>)
 80022a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022a8:	08002323 	.word	0x08002323
 80022ac:	080022fd 	.word	0x080022fd
 80022b0:	0800230f 	.word	0x0800230f
 80022b4:	08002351 	.word	0x08002351
 80022b8:	08002357 	.word	0x08002357
 80022bc:	08002357 	.word	0x08002357
 80022c0:	08002357 	.word	0x08002357
 80022c4:	08002357 	.word	0x08002357
 80022c8:	08002357 	.word	0x08002357
 80022cc:	08002357 	.word	0x08002357
 80022d0:	08002357 	.word	0x08002357
 80022d4:	08002357 	.word	0x08002357
 80022d8:	08002357 	.word	0x08002357
 80022dc:	08002357 	.word	0x08002357
 80022e0:	08002357 	.word	0x08002357
 80022e4:	08002357 	.word	0x08002357
 80022e8:	08002357 	.word	0x08002357
 80022ec:	08002305 	.word	0x08002305
 80022f0:	08002319 	.word	0x08002319
 80022f4:	4a79      	ldr	r2, [pc, #484]	; (80024dc <HAL_GPIO_Init+0x2b4>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d013      	beq.n	8002322 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80022fa:	e02c      	b.n	8002356 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	623b      	str	r3, [r7, #32]
          break;
 8002302:	e029      	b.n	8002358 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	3304      	adds	r3, #4
 800230a:	623b      	str	r3, [r7, #32]
          break;
 800230c:	e024      	b.n	8002358 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	68db      	ldr	r3, [r3, #12]
 8002312:	3308      	adds	r3, #8
 8002314:	623b      	str	r3, [r7, #32]
          break;
 8002316:	e01f      	b.n	8002358 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	330c      	adds	r3, #12
 800231e:	623b      	str	r3, [r7, #32]
          break;
 8002320:	e01a      	b.n	8002358 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d102      	bne.n	8002330 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800232a:	2304      	movs	r3, #4
 800232c:	623b      	str	r3, [r7, #32]
          break;
 800232e:	e013      	b.n	8002358 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	2b01      	cmp	r3, #1
 8002336:	d105      	bne.n	8002344 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002338:	2308      	movs	r3, #8
 800233a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	69fa      	ldr	r2, [r7, #28]
 8002340:	611a      	str	r2, [r3, #16]
          break;
 8002342:	e009      	b.n	8002358 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002344:	2308      	movs	r3, #8
 8002346:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	69fa      	ldr	r2, [r7, #28]
 800234c:	615a      	str	r2, [r3, #20]
          break;
 800234e:	e003      	b.n	8002358 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002350:	2300      	movs	r3, #0
 8002352:	623b      	str	r3, [r7, #32]
          break;
 8002354:	e000      	b.n	8002358 <HAL_GPIO_Init+0x130>
          break;
 8002356:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002358:	69bb      	ldr	r3, [r7, #24]
 800235a:	2bff      	cmp	r3, #255	; 0xff
 800235c:	d801      	bhi.n	8002362 <HAL_GPIO_Init+0x13a>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	e001      	b.n	8002366 <HAL_GPIO_Init+0x13e>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	3304      	adds	r3, #4
 8002366:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002368:	69bb      	ldr	r3, [r7, #24]
 800236a:	2bff      	cmp	r3, #255	; 0xff
 800236c:	d802      	bhi.n	8002374 <HAL_GPIO_Init+0x14c>
 800236e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	e002      	b.n	800237a <HAL_GPIO_Init+0x152>
 8002374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002376:	3b08      	subs	r3, #8
 8002378:	009b      	lsls	r3, r3, #2
 800237a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	210f      	movs	r1, #15
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	fa01 f303 	lsl.w	r3, r1, r3
 8002388:	43db      	mvns	r3, r3
 800238a:	401a      	ands	r2, r3
 800238c:	6a39      	ldr	r1, [r7, #32]
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	fa01 f303 	lsl.w	r3, r1, r3
 8002394:	431a      	orrs	r2, r3
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	f000 80b1 	beq.w	800250a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80023a8:	4b4d      	ldr	r3, [pc, #308]	; (80024e0 <HAL_GPIO_Init+0x2b8>)
 80023aa:	699b      	ldr	r3, [r3, #24]
 80023ac:	4a4c      	ldr	r2, [pc, #304]	; (80024e0 <HAL_GPIO_Init+0x2b8>)
 80023ae:	f043 0301 	orr.w	r3, r3, #1
 80023b2:	6193      	str	r3, [r2, #24]
 80023b4:	4b4a      	ldr	r3, [pc, #296]	; (80024e0 <HAL_GPIO_Init+0x2b8>)
 80023b6:	699b      	ldr	r3, [r3, #24]
 80023b8:	f003 0301 	and.w	r3, r3, #1
 80023bc:	60bb      	str	r3, [r7, #8]
 80023be:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80023c0:	4a48      	ldr	r2, [pc, #288]	; (80024e4 <HAL_GPIO_Init+0x2bc>)
 80023c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c4:	089b      	lsrs	r3, r3, #2
 80023c6:	3302      	adds	r3, #2
 80023c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023cc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80023ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d0:	f003 0303 	and.w	r3, r3, #3
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	220f      	movs	r2, #15
 80023d8:	fa02 f303 	lsl.w	r3, r2, r3
 80023dc:	43db      	mvns	r3, r3
 80023de:	68fa      	ldr	r2, [r7, #12]
 80023e0:	4013      	ands	r3, r2
 80023e2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	4a40      	ldr	r2, [pc, #256]	; (80024e8 <HAL_GPIO_Init+0x2c0>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d013      	beq.n	8002414 <HAL_GPIO_Init+0x1ec>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	4a3f      	ldr	r2, [pc, #252]	; (80024ec <HAL_GPIO_Init+0x2c4>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d00d      	beq.n	8002410 <HAL_GPIO_Init+0x1e8>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	4a3e      	ldr	r2, [pc, #248]	; (80024f0 <HAL_GPIO_Init+0x2c8>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d007      	beq.n	800240c <HAL_GPIO_Init+0x1e4>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	4a3d      	ldr	r2, [pc, #244]	; (80024f4 <HAL_GPIO_Init+0x2cc>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d101      	bne.n	8002408 <HAL_GPIO_Init+0x1e0>
 8002404:	2303      	movs	r3, #3
 8002406:	e006      	b.n	8002416 <HAL_GPIO_Init+0x1ee>
 8002408:	2304      	movs	r3, #4
 800240a:	e004      	b.n	8002416 <HAL_GPIO_Init+0x1ee>
 800240c:	2302      	movs	r3, #2
 800240e:	e002      	b.n	8002416 <HAL_GPIO_Init+0x1ee>
 8002410:	2301      	movs	r3, #1
 8002412:	e000      	b.n	8002416 <HAL_GPIO_Init+0x1ee>
 8002414:	2300      	movs	r3, #0
 8002416:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002418:	f002 0203 	and.w	r2, r2, #3
 800241c:	0092      	lsls	r2, r2, #2
 800241e:	4093      	lsls	r3, r2
 8002420:	68fa      	ldr	r2, [r7, #12]
 8002422:	4313      	orrs	r3, r2
 8002424:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002426:	492f      	ldr	r1, [pc, #188]	; (80024e4 <HAL_GPIO_Init+0x2bc>)
 8002428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242a:	089b      	lsrs	r3, r3, #2
 800242c:	3302      	adds	r3, #2
 800242e:	68fa      	ldr	r2, [r7, #12]
 8002430:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800243c:	2b00      	cmp	r3, #0
 800243e:	d006      	beq.n	800244e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002440:	4b2d      	ldr	r3, [pc, #180]	; (80024f8 <HAL_GPIO_Init+0x2d0>)
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	492c      	ldr	r1, [pc, #176]	; (80024f8 <HAL_GPIO_Init+0x2d0>)
 8002446:	69bb      	ldr	r3, [r7, #24]
 8002448:	4313      	orrs	r3, r2
 800244a:	600b      	str	r3, [r1, #0]
 800244c:	e006      	b.n	800245c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800244e:	4b2a      	ldr	r3, [pc, #168]	; (80024f8 <HAL_GPIO_Init+0x2d0>)
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	69bb      	ldr	r3, [r7, #24]
 8002454:	43db      	mvns	r3, r3
 8002456:	4928      	ldr	r1, [pc, #160]	; (80024f8 <HAL_GPIO_Init+0x2d0>)
 8002458:	4013      	ands	r3, r2
 800245a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002464:	2b00      	cmp	r3, #0
 8002466:	d006      	beq.n	8002476 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002468:	4b23      	ldr	r3, [pc, #140]	; (80024f8 <HAL_GPIO_Init+0x2d0>)
 800246a:	685a      	ldr	r2, [r3, #4]
 800246c:	4922      	ldr	r1, [pc, #136]	; (80024f8 <HAL_GPIO_Init+0x2d0>)
 800246e:	69bb      	ldr	r3, [r7, #24]
 8002470:	4313      	orrs	r3, r2
 8002472:	604b      	str	r3, [r1, #4]
 8002474:	e006      	b.n	8002484 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002476:	4b20      	ldr	r3, [pc, #128]	; (80024f8 <HAL_GPIO_Init+0x2d0>)
 8002478:	685a      	ldr	r2, [r3, #4]
 800247a:	69bb      	ldr	r3, [r7, #24]
 800247c:	43db      	mvns	r3, r3
 800247e:	491e      	ldr	r1, [pc, #120]	; (80024f8 <HAL_GPIO_Init+0x2d0>)
 8002480:	4013      	ands	r3, r2
 8002482:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800248c:	2b00      	cmp	r3, #0
 800248e:	d006      	beq.n	800249e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002490:	4b19      	ldr	r3, [pc, #100]	; (80024f8 <HAL_GPIO_Init+0x2d0>)
 8002492:	689a      	ldr	r2, [r3, #8]
 8002494:	4918      	ldr	r1, [pc, #96]	; (80024f8 <HAL_GPIO_Init+0x2d0>)
 8002496:	69bb      	ldr	r3, [r7, #24]
 8002498:	4313      	orrs	r3, r2
 800249a:	608b      	str	r3, [r1, #8]
 800249c:	e006      	b.n	80024ac <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800249e:	4b16      	ldr	r3, [pc, #88]	; (80024f8 <HAL_GPIO_Init+0x2d0>)
 80024a0:	689a      	ldr	r2, [r3, #8]
 80024a2:	69bb      	ldr	r3, [r7, #24]
 80024a4:	43db      	mvns	r3, r3
 80024a6:	4914      	ldr	r1, [pc, #80]	; (80024f8 <HAL_GPIO_Init+0x2d0>)
 80024a8:	4013      	ands	r3, r2
 80024aa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d021      	beq.n	80024fc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80024b8:	4b0f      	ldr	r3, [pc, #60]	; (80024f8 <HAL_GPIO_Init+0x2d0>)
 80024ba:	68da      	ldr	r2, [r3, #12]
 80024bc:	490e      	ldr	r1, [pc, #56]	; (80024f8 <HAL_GPIO_Init+0x2d0>)
 80024be:	69bb      	ldr	r3, [r7, #24]
 80024c0:	4313      	orrs	r3, r2
 80024c2:	60cb      	str	r3, [r1, #12]
 80024c4:	e021      	b.n	800250a <HAL_GPIO_Init+0x2e2>
 80024c6:	bf00      	nop
 80024c8:	10320000 	.word	0x10320000
 80024cc:	10310000 	.word	0x10310000
 80024d0:	10220000 	.word	0x10220000
 80024d4:	10210000 	.word	0x10210000
 80024d8:	10120000 	.word	0x10120000
 80024dc:	10110000 	.word	0x10110000
 80024e0:	40021000 	.word	0x40021000
 80024e4:	40010000 	.word	0x40010000
 80024e8:	40010800 	.word	0x40010800
 80024ec:	40010c00 	.word	0x40010c00
 80024f0:	40011000 	.word	0x40011000
 80024f4:	40011400 	.word	0x40011400
 80024f8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80024fc:	4b0b      	ldr	r3, [pc, #44]	; (800252c <HAL_GPIO_Init+0x304>)
 80024fe:	68da      	ldr	r2, [r3, #12]
 8002500:	69bb      	ldr	r3, [r7, #24]
 8002502:	43db      	mvns	r3, r3
 8002504:	4909      	ldr	r1, [pc, #36]	; (800252c <HAL_GPIO_Init+0x304>)
 8002506:	4013      	ands	r3, r2
 8002508:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800250a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250c:	3301      	adds	r3, #1
 800250e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002516:	fa22 f303 	lsr.w	r3, r2, r3
 800251a:	2b00      	cmp	r3, #0
 800251c:	f47f ae8e 	bne.w	800223c <HAL_GPIO_Init+0x14>
  }
}
 8002520:	bf00      	nop
 8002522:	bf00      	nop
 8002524:	372c      	adds	r7, #44	; 0x2c
 8002526:	46bd      	mov	sp, r7
 8002528:	bc80      	pop	{r7}
 800252a:	4770      	bx	lr
 800252c:	40010400 	.word	0x40010400

08002530 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002530:	b480      	push	{r7}
 8002532:	b085      	sub	sp, #20
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
 8002538:	460b      	mov	r3, r1
 800253a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	689a      	ldr	r2, [r3, #8]
 8002540:	887b      	ldrh	r3, [r7, #2]
 8002542:	4013      	ands	r3, r2
 8002544:	2b00      	cmp	r3, #0
 8002546:	d002      	beq.n	800254e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002548:	2301      	movs	r3, #1
 800254a:	73fb      	strb	r3, [r7, #15]
 800254c:	e001      	b.n	8002552 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800254e:	2300      	movs	r3, #0
 8002550:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002552:	7bfb      	ldrb	r3, [r7, #15]
}
 8002554:	4618      	mov	r0, r3
 8002556:	3714      	adds	r7, #20
 8002558:	46bd      	mov	sp, r7
 800255a:	bc80      	pop	{r7}
 800255c:	4770      	bx	lr

0800255e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800255e:	b480      	push	{r7}
 8002560:	b083      	sub	sp, #12
 8002562:	af00      	add	r7, sp, #0
 8002564:	6078      	str	r0, [r7, #4]
 8002566:	460b      	mov	r3, r1
 8002568:	807b      	strh	r3, [r7, #2]
 800256a:	4613      	mov	r3, r2
 800256c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800256e:	787b      	ldrb	r3, [r7, #1]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d003      	beq.n	800257c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002574:	887a      	ldrh	r2, [r7, #2]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800257a:	e003      	b.n	8002584 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800257c:	887b      	ldrh	r3, [r7, #2]
 800257e:	041a      	lsls	r2, r3, #16
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	611a      	str	r2, [r3, #16]
}
 8002584:	bf00      	nop
 8002586:	370c      	adds	r7, #12
 8002588:	46bd      	mov	sp, r7
 800258a:	bc80      	pop	{r7}
 800258c:	4770      	bx	lr

0800258e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800258e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002590:	b08b      	sub	sp, #44	; 0x2c
 8002592:	af06      	add	r7, sp, #24
 8002594:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d101      	bne.n	80025a0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	e0fd      	b.n	800279c <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d106      	bne.n	80025ba <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2200      	movs	r2, #0
 80025b0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80025b4:	6878      	ldr	r0, [r7, #4]
 80025b6:	f006 fa1d 	bl	80089f4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2203      	movs	r2, #3
 80025be:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4618      	mov	r0, r3
 80025c8:	f002 fa4c 	bl	8004a64 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	603b      	str	r3, [r7, #0]
 80025d2:	687e      	ldr	r6, [r7, #4]
 80025d4:	466d      	mov	r5, sp
 80025d6:	f106 0410 	add.w	r4, r6, #16
 80025da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025de:	6823      	ldr	r3, [r4, #0]
 80025e0:	602b      	str	r3, [r5, #0]
 80025e2:	1d33      	adds	r3, r6, #4
 80025e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80025e6:	6838      	ldr	r0, [r7, #0]
 80025e8:	f002 fa16 	bl	8004a18 <USB_CoreInit>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d005      	beq.n	80025fe <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2202      	movs	r2, #2
 80025f6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e0ce      	b.n	800279c <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	2100      	movs	r1, #0
 8002604:	4618      	mov	r0, r3
 8002606:	f002 fa47 	bl	8004a98 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800260a:	2300      	movs	r3, #0
 800260c:	73fb      	strb	r3, [r7, #15]
 800260e:	e04c      	b.n	80026aa <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002610:	7bfb      	ldrb	r3, [r7, #15]
 8002612:	6879      	ldr	r1, [r7, #4]
 8002614:	1c5a      	adds	r2, r3, #1
 8002616:	4613      	mov	r3, r2
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	4413      	add	r3, r2
 800261c:	00db      	lsls	r3, r3, #3
 800261e:	440b      	add	r3, r1
 8002620:	3301      	adds	r3, #1
 8002622:	2201      	movs	r2, #1
 8002624:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002626:	7bfb      	ldrb	r3, [r7, #15]
 8002628:	6879      	ldr	r1, [r7, #4]
 800262a:	1c5a      	adds	r2, r3, #1
 800262c:	4613      	mov	r3, r2
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	4413      	add	r3, r2
 8002632:	00db      	lsls	r3, r3, #3
 8002634:	440b      	add	r3, r1
 8002636:	7bfa      	ldrb	r2, [r7, #15]
 8002638:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800263a:	7bfa      	ldrb	r2, [r7, #15]
 800263c:	7bfb      	ldrb	r3, [r7, #15]
 800263e:	b298      	uxth	r0, r3
 8002640:	6879      	ldr	r1, [r7, #4]
 8002642:	4613      	mov	r3, r2
 8002644:	009b      	lsls	r3, r3, #2
 8002646:	4413      	add	r3, r2
 8002648:	00db      	lsls	r3, r3, #3
 800264a:	440b      	add	r3, r1
 800264c:	3336      	adds	r3, #54	; 0x36
 800264e:	4602      	mov	r2, r0
 8002650:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002652:	7bfb      	ldrb	r3, [r7, #15]
 8002654:	6879      	ldr	r1, [r7, #4]
 8002656:	1c5a      	adds	r2, r3, #1
 8002658:	4613      	mov	r3, r2
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	4413      	add	r3, r2
 800265e:	00db      	lsls	r3, r3, #3
 8002660:	440b      	add	r3, r1
 8002662:	3303      	adds	r3, #3
 8002664:	2200      	movs	r2, #0
 8002666:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002668:	7bfa      	ldrb	r2, [r7, #15]
 800266a:	6879      	ldr	r1, [r7, #4]
 800266c:	4613      	mov	r3, r2
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	4413      	add	r3, r2
 8002672:	00db      	lsls	r3, r3, #3
 8002674:	440b      	add	r3, r1
 8002676:	3338      	adds	r3, #56	; 0x38
 8002678:	2200      	movs	r2, #0
 800267a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800267c:	7bfa      	ldrb	r2, [r7, #15]
 800267e:	6879      	ldr	r1, [r7, #4]
 8002680:	4613      	mov	r3, r2
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	4413      	add	r3, r2
 8002686:	00db      	lsls	r3, r3, #3
 8002688:	440b      	add	r3, r1
 800268a:	333c      	adds	r3, #60	; 0x3c
 800268c:	2200      	movs	r2, #0
 800268e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002690:	7bfa      	ldrb	r2, [r7, #15]
 8002692:	6879      	ldr	r1, [r7, #4]
 8002694:	4613      	mov	r3, r2
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	4413      	add	r3, r2
 800269a:	00db      	lsls	r3, r3, #3
 800269c:	440b      	add	r3, r1
 800269e:	3340      	adds	r3, #64	; 0x40
 80026a0:	2200      	movs	r2, #0
 80026a2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026a4:	7bfb      	ldrb	r3, [r7, #15]
 80026a6:	3301      	adds	r3, #1
 80026a8:	73fb      	strb	r3, [r7, #15]
 80026aa:	7bfa      	ldrb	r2, [r7, #15]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d3ad      	bcc.n	8002610 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026b4:	2300      	movs	r3, #0
 80026b6:	73fb      	strb	r3, [r7, #15]
 80026b8:	e044      	b.n	8002744 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80026ba:	7bfa      	ldrb	r2, [r7, #15]
 80026bc:	6879      	ldr	r1, [r7, #4]
 80026be:	4613      	mov	r3, r2
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	4413      	add	r3, r2
 80026c4:	00db      	lsls	r3, r3, #3
 80026c6:	440b      	add	r3, r1
 80026c8:	f203 1369 	addw	r3, r3, #361	; 0x169
 80026cc:	2200      	movs	r2, #0
 80026ce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80026d0:	7bfa      	ldrb	r2, [r7, #15]
 80026d2:	6879      	ldr	r1, [r7, #4]
 80026d4:	4613      	mov	r3, r2
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	4413      	add	r3, r2
 80026da:	00db      	lsls	r3, r3, #3
 80026dc:	440b      	add	r3, r1
 80026de:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80026e2:	7bfa      	ldrb	r2, [r7, #15]
 80026e4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80026e6:	7bfa      	ldrb	r2, [r7, #15]
 80026e8:	6879      	ldr	r1, [r7, #4]
 80026ea:	4613      	mov	r3, r2
 80026ec:	009b      	lsls	r3, r3, #2
 80026ee:	4413      	add	r3, r2
 80026f0:	00db      	lsls	r3, r3, #3
 80026f2:	440b      	add	r3, r1
 80026f4:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80026f8:	2200      	movs	r2, #0
 80026fa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80026fc:	7bfa      	ldrb	r2, [r7, #15]
 80026fe:	6879      	ldr	r1, [r7, #4]
 8002700:	4613      	mov	r3, r2
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	4413      	add	r3, r2
 8002706:	00db      	lsls	r3, r3, #3
 8002708:	440b      	add	r3, r1
 800270a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800270e:	2200      	movs	r2, #0
 8002710:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002712:	7bfa      	ldrb	r2, [r7, #15]
 8002714:	6879      	ldr	r1, [r7, #4]
 8002716:	4613      	mov	r3, r2
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	4413      	add	r3, r2
 800271c:	00db      	lsls	r3, r3, #3
 800271e:	440b      	add	r3, r1
 8002720:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002724:	2200      	movs	r2, #0
 8002726:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002728:	7bfa      	ldrb	r2, [r7, #15]
 800272a:	6879      	ldr	r1, [r7, #4]
 800272c:	4613      	mov	r3, r2
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	4413      	add	r3, r2
 8002732:	00db      	lsls	r3, r3, #3
 8002734:	440b      	add	r3, r1
 8002736:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800273a:	2200      	movs	r2, #0
 800273c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800273e:	7bfb      	ldrb	r3, [r7, #15]
 8002740:	3301      	adds	r3, #1
 8002742:	73fb      	strb	r3, [r7, #15]
 8002744:	7bfa      	ldrb	r2, [r7, #15]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	429a      	cmp	r2, r3
 800274c:	d3b5      	bcc.n	80026ba <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	603b      	str	r3, [r7, #0]
 8002754:	687e      	ldr	r6, [r7, #4]
 8002756:	466d      	mov	r5, sp
 8002758:	f106 0410 	add.w	r4, r6, #16
 800275c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800275e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002760:	6823      	ldr	r3, [r4, #0]
 8002762:	602b      	str	r3, [r5, #0]
 8002764:	1d33      	adds	r3, r6, #4
 8002766:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002768:	6838      	ldr	r0, [r7, #0]
 800276a:	f002 f9a1 	bl	8004ab0 <USB_DevInit>
 800276e:	4603      	mov	r3, r0
 8002770:	2b00      	cmp	r3, #0
 8002772:	d005      	beq.n	8002780 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2202      	movs	r2, #2
 8002778:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	e00d      	b.n	800279c <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2200      	movs	r2, #0
 8002784:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2201      	movs	r2, #1
 800278c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4618      	mov	r0, r3
 8002796:	f004 fb12 	bl	8006dbe <USB_DevDisconnect>

  return HAL_OK;
 800279a:	2300      	movs	r3, #0
}
 800279c:	4618      	mov	r0, r3
 800279e:	3714      	adds	r7, #20
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080027a4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b082      	sub	sp, #8
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d101      	bne.n	80027ba <HAL_PCD_Start+0x16>
 80027b6:	2302      	movs	r3, #2
 80027b8:	e016      	b.n	80027e8 <HAL_PCD_Start+0x44>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2201      	movs	r2, #1
 80027be:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4618      	mov	r0, r3
 80027c8:	f002 f936 	bl	8004a38 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80027cc:	2101      	movs	r1, #1
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f006 fb83 	bl	8008eda <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4618      	mov	r0, r3
 80027da:	f004 fae6 	bl	8006daa <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2200      	movs	r2, #0
 80027e2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80027e6:	2300      	movs	r3, #0
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	3708      	adds	r7, #8
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}

080027f0 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b088      	sub	sp, #32
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4618      	mov	r0, r3
 80027fe:	f004 fae8 	bl	8006dd2 <USB_ReadInterrupts>
 8002802:	4603      	mov	r3, r0
 8002804:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002808:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800280c:	d102      	bne.n	8002814 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f000 fb61 	bl	8002ed6 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4618      	mov	r0, r3
 800281a:	f004 fada 	bl	8006dd2 <USB_ReadInterrupts>
 800281e:	4603      	mov	r3, r0
 8002820:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002824:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002828:	d112      	bne.n	8002850 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002832:	b29a      	uxth	r2, r3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800283c:	b292      	uxth	r2, r2
 800283e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f006 f951 	bl	8008aea <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002848:	2100      	movs	r1, #0
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f000 f925 	bl	8002a9a <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4618      	mov	r0, r3
 8002856:	f004 fabc 	bl	8006dd2 <USB_ReadInterrupts>
 800285a:	4603      	mov	r3, r0
 800285c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002860:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002864:	d10b      	bne.n	800287e <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800286e:	b29a      	uxth	r2, r3
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002878:	b292      	uxth	r2, r2
 800287a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4618      	mov	r0, r3
 8002884:	f004 faa5 	bl	8006dd2 <USB_ReadInterrupts>
 8002888:	4603      	mov	r3, r0
 800288a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800288e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002892:	d10b      	bne.n	80028ac <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800289c:	b29a      	uxth	r2, r3
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80028a6:	b292      	uxth	r2, r2
 80028a8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4618      	mov	r0, r3
 80028b2:	f004 fa8e 	bl	8006dd2 <USB_ReadInterrupts>
 80028b6:	4603      	mov	r3, r0
 80028b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028c0:	d126      	bne.n	8002910 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80028ca:	b29a      	uxth	r2, r3
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f022 0204 	bic.w	r2, r2, #4
 80028d4:	b292      	uxth	r2, r2
 80028d6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80028e2:	b29a      	uxth	r2, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f022 0208 	bic.w	r2, r2, #8
 80028ec:	b292      	uxth	r2, r2
 80028ee:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f006 f932 	bl	8008b5c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002900:	b29a      	uxth	r2, r3
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800290a:	b292      	uxth	r2, r2
 800290c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4618      	mov	r0, r3
 8002916:	f004 fa5c 	bl	8006dd2 <USB_ReadInterrupts>
 800291a:	4603      	mov	r3, r0
 800291c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002920:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002924:	f040 8084 	bne.w	8002a30 <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8002928:	2300      	movs	r3, #0
 800292a:	77fb      	strb	r3, [r7, #31]
 800292c:	e011      	b.n	8002952 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	461a      	mov	r2, r3
 8002934:	7ffb      	ldrb	r3, [r7, #31]
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	441a      	add	r2, r3
 800293a:	7ffb      	ldrb	r3, [r7, #31]
 800293c:	8812      	ldrh	r2, [r2, #0]
 800293e:	b292      	uxth	r2, r2
 8002940:	005b      	lsls	r3, r3, #1
 8002942:	f107 0120 	add.w	r1, r7, #32
 8002946:	440b      	add	r3, r1
 8002948:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 800294c:	7ffb      	ldrb	r3, [r7, #31]
 800294e:	3301      	adds	r3, #1
 8002950:	77fb      	strb	r3, [r7, #31]
 8002952:	7ffb      	ldrb	r3, [r7, #31]
 8002954:	2b07      	cmp	r3, #7
 8002956:	d9ea      	bls.n	800292e <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002960:	b29a      	uxth	r2, r3
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f042 0201 	orr.w	r2, r2, #1
 800296a:	b292      	uxth	r2, r2
 800296c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002978:	b29a      	uxth	r2, r3
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f022 0201 	bic.w	r2, r2, #1
 8002982:	b292      	uxth	r2, r2
 8002984:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8002988:	bf00      	nop
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002992:	b29b      	uxth	r3, r3
 8002994:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002998:	2b00      	cmp	r3, #0
 800299a:	d0f6      	beq.n	800298a <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80029a4:	b29a      	uxth	r2, r3
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029ae:	b292      	uxth	r2, r2
 80029b0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80029b4:	2300      	movs	r3, #0
 80029b6:	77fb      	strb	r3, [r7, #31]
 80029b8:	e010      	b.n	80029dc <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80029ba:	7ffb      	ldrb	r3, [r7, #31]
 80029bc:	687a      	ldr	r2, [r7, #4]
 80029be:	6812      	ldr	r2, [r2, #0]
 80029c0:	4611      	mov	r1, r2
 80029c2:	7ffa      	ldrb	r2, [r7, #31]
 80029c4:	0092      	lsls	r2, r2, #2
 80029c6:	440a      	add	r2, r1
 80029c8:	005b      	lsls	r3, r3, #1
 80029ca:	f107 0120 	add.w	r1, r7, #32
 80029ce:	440b      	add	r3, r1
 80029d0:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80029d4:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80029d6:	7ffb      	ldrb	r3, [r7, #31]
 80029d8:	3301      	adds	r3, #1
 80029da:	77fb      	strb	r3, [r7, #31]
 80029dc:	7ffb      	ldrb	r3, [r7, #31]
 80029de:	2b07      	cmp	r3, #7
 80029e0:	d9eb      	bls.n	80029ba <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80029ea:	b29a      	uxth	r2, r3
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f042 0208 	orr.w	r2, r2, #8
 80029f4:	b292      	uxth	r2, r2
 80029f6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002a02:	b29a      	uxth	r2, r3
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a0c:	b292      	uxth	r2, r2
 8002a0e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002a1a:	b29a      	uxth	r2, r3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f042 0204 	orr.w	r2, r2, #4
 8002a24:	b292      	uxth	r2, r2
 8002a26:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f006 f87c 	bl	8008b28 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4618      	mov	r0, r3
 8002a36:	f004 f9cc 	bl	8006dd2 <USB_ReadInterrupts>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a44:	d10e      	bne.n	8002a64 <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002a4e:	b29a      	uxth	r2, r3
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002a58:	b292      	uxth	r2, r2
 8002a5a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f006 f835 	bl	8008ace <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f004 f9b2 	bl	8006dd2 <USB_ReadInterrupts>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a78:	d10b      	bne.n	8002a92 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002a82:	b29a      	uxth	r2, r3
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a8c:	b292      	uxth	r2, r2
 8002a8e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8002a92:	bf00      	nop
 8002a94:	3720      	adds	r7, #32
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}

08002a9a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002a9a:	b580      	push	{r7, lr}
 8002a9c:	b082      	sub	sp, #8
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	6078      	str	r0, [r7, #4]
 8002aa2:	460b      	mov	r3, r1
 8002aa4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d101      	bne.n	8002ab4 <HAL_PCD_SetAddress+0x1a>
 8002ab0:	2302      	movs	r3, #2
 8002ab2:	e013      	b.n	8002adc <HAL_PCD_SetAddress+0x42>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	78fa      	ldrb	r2, [r7, #3]
 8002ac0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	78fa      	ldrb	r2, [r7, #3]
 8002aca:	4611      	mov	r1, r2
 8002acc:	4618      	mov	r0, r3
 8002ace:	f004 f959 	bl	8006d84 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002ada:	2300      	movs	r3, #0
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	3708      	adds	r7, #8
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}

08002ae4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b084      	sub	sp, #16
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
 8002aec:	4608      	mov	r0, r1
 8002aee:	4611      	mov	r1, r2
 8002af0:	461a      	mov	r2, r3
 8002af2:	4603      	mov	r3, r0
 8002af4:	70fb      	strb	r3, [r7, #3]
 8002af6:	460b      	mov	r3, r1
 8002af8:	803b      	strh	r3, [r7, #0]
 8002afa:	4613      	mov	r3, r2
 8002afc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002afe:	2300      	movs	r3, #0
 8002b00:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002b02:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	da0e      	bge.n	8002b28 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b0a:	78fb      	ldrb	r3, [r7, #3]
 8002b0c:	f003 0307 	and.w	r3, r3, #7
 8002b10:	1c5a      	adds	r2, r3, #1
 8002b12:	4613      	mov	r3, r2
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	4413      	add	r3, r2
 8002b18:	00db      	lsls	r3, r3, #3
 8002b1a:	687a      	ldr	r2, [r7, #4]
 8002b1c:	4413      	add	r3, r2
 8002b1e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2201      	movs	r2, #1
 8002b24:	705a      	strb	r2, [r3, #1]
 8002b26:	e00e      	b.n	8002b46 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b28:	78fb      	ldrb	r3, [r7, #3]
 8002b2a:	f003 0207 	and.w	r2, r3, #7
 8002b2e:	4613      	mov	r3, r2
 8002b30:	009b      	lsls	r3, r3, #2
 8002b32:	4413      	add	r3, r2
 8002b34:	00db      	lsls	r3, r3, #3
 8002b36:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002b3a:	687a      	ldr	r2, [r7, #4]
 8002b3c:	4413      	add	r3, r2
 8002b3e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2200      	movs	r2, #0
 8002b44:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002b46:	78fb      	ldrb	r3, [r7, #3]
 8002b48:	f003 0307 	and.w	r3, r3, #7
 8002b4c:	b2da      	uxtb	r2, r3
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002b52:	883a      	ldrh	r2, [r7, #0]
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	78ba      	ldrb	r2, [r7, #2]
 8002b5c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	785b      	ldrb	r3, [r3, #1]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d004      	beq.n	8002b70 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	781b      	ldrb	r3, [r3, #0]
 8002b6a:	b29a      	uxth	r2, r3
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002b70:	78bb      	ldrb	r3, [r7, #2]
 8002b72:	2b02      	cmp	r3, #2
 8002b74:	d102      	bne.n	8002b7c <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d101      	bne.n	8002b8a <HAL_PCD_EP_Open+0xa6>
 8002b86:	2302      	movs	r3, #2
 8002b88:	e00e      	b.n	8002ba8 <HAL_PCD_EP_Open+0xc4>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	68f9      	ldr	r1, [r7, #12]
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f001 ffa9 	bl	8004af0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8002ba6:	7afb      	ldrb	r3, [r7, #11]
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3710      	adds	r7, #16
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}

08002bb0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b084      	sub	sp, #16
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	460b      	mov	r3, r1
 8002bba:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002bbc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	da0e      	bge.n	8002be2 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002bc4:	78fb      	ldrb	r3, [r7, #3]
 8002bc6:	f003 0307 	and.w	r3, r3, #7
 8002bca:	1c5a      	adds	r2, r3, #1
 8002bcc:	4613      	mov	r3, r2
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	4413      	add	r3, r2
 8002bd2:	00db      	lsls	r3, r3, #3
 8002bd4:	687a      	ldr	r2, [r7, #4]
 8002bd6:	4413      	add	r3, r2
 8002bd8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2201      	movs	r2, #1
 8002bde:	705a      	strb	r2, [r3, #1]
 8002be0:	e00e      	b.n	8002c00 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002be2:	78fb      	ldrb	r3, [r7, #3]
 8002be4:	f003 0207 	and.w	r2, r3, #7
 8002be8:	4613      	mov	r3, r2
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	4413      	add	r3, r2
 8002bee:	00db      	lsls	r3, r3, #3
 8002bf0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002bf4:	687a      	ldr	r2, [r7, #4]
 8002bf6:	4413      	add	r3, r2
 8002bf8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002c00:	78fb      	ldrb	r3, [r7, #3]
 8002c02:	f003 0307 	and.w	r3, r3, #7
 8002c06:	b2da      	uxtb	r2, r3
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d101      	bne.n	8002c1a <HAL_PCD_EP_Close+0x6a>
 8002c16:	2302      	movs	r3, #2
 8002c18:	e00e      	b.n	8002c38 <HAL_PCD_EP_Close+0x88>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	68f9      	ldr	r1, [r7, #12]
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f002 facb 	bl	80051c4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2200      	movs	r2, #0
 8002c32:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8002c36:	2300      	movs	r3, #0
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	3710      	adds	r7, #16
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}

08002c40 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b086      	sub	sp, #24
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	60f8      	str	r0, [r7, #12]
 8002c48:	607a      	str	r2, [r7, #4]
 8002c4a:	603b      	str	r3, [r7, #0]
 8002c4c:	460b      	mov	r3, r1
 8002c4e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c50:	7afb      	ldrb	r3, [r7, #11]
 8002c52:	f003 0207 	and.w	r2, r3, #7
 8002c56:	4613      	mov	r3, r2
 8002c58:	009b      	lsls	r3, r3, #2
 8002c5a:	4413      	add	r3, r2
 8002c5c:	00db      	lsls	r3, r3, #3
 8002c5e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002c62:	68fa      	ldr	r2, [r7, #12]
 8002c64:	4413      	add	r3, r2
 8002c66:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	687a      	ldr	r2, [r7, #4]
 8002c6c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	683a      	ldr	r2, [r7, #0]
 8002c72:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	2200      	movs	r2, #0
 8002c78:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c80:	7afb      	ldrb	r3, [r7, #11]
 8002c82:	f003 0307 	and.w	r3, r3, #7
 8002c86:	b2da      	uxtb	r2, r3
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002c8c:	7afb      	ldrb	r3, [r7, #11]
 8002c8e:	f003 0307 	and.w	r3, r3, #7
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d106      	bne.n	8002ca4 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	6979      	ldr	r1, [r7, #20]
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f002 fc7d 	bl	800559c <USB_EPStartXfer>
 8002ca2:	e005      	b.n	8002cb0 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	6979      	ldr	r1, [r7, #20]
 8002caa:	4618      	mov	r0, r3
 8002cac:	f002 fc76 	bl	800559c <USB_EPStartXfer>
  }

  return HAL_OK;
 8002cb0:	2300      	movs	r3, #0
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	3718      	adds	r7, #24
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}

08002cba <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002cba:	b480      	push	{r7}
 8002cbc:	b083      	sub	sp, #12
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	6078      	str	r0, [r7, #4]
 8002cc2:	460b      	mov	r3, r1
 8002cc4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002cc6:	78fb      	ldrb	r3, [r7, #3]
 8002cc8:	f003 0207 	and.w	r2, r3, #7
 8002ccc:	6879      	ldr	r1, [r7, #4]
 8002cce:	4613      	mov	r3, r2
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	4413      	add	r3, r2
 8002cd4:	00db      	lsls	r3, r3, #3
 8002cd6:	440b      	add	r3, r1
 8002cd8:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8002cdc:	681b      	ldr	r3, [r3, #0]
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	370c      	adds	r7, #12
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bc80      	pop	{r7}
 8002ce6:	4770      	bx	lr

08002ce8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b086      	sub	sp, #24
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	60f8      	str	r0, [r7, #12]
 8002cf0:	607a      	str	r2, [r7, #4]
 8002cf2:	603b      	str	r3, [r7, #0]
 8002cf4:	460b      	mov	r3, r1
 8002cf6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002cf8:	7afb      	ldrb	r3, [r7, #11]
 8002cfa:	f003 0307 	and.w	r3, r3, #7
 8002cfe:	1c5a      	adds	r2, r3, #1
 8002d00:	4613      	mov	r3, r2
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	4413      	add	r3, r2
 8002d06:	00db      	lsls	r3, r3, #3
 8002d08:	68fa      	ldr	r2, [r7, #12]
 8002d0a:	4413      	add	r3, r2
 8002d0c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	687a      	ldr	r2, [r7, #4]
 8002d12:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	683a      	ldr	r2, [r7, #0]
 8002d18:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	683a      	ldr	r2, [r7, #0]
 8002d26:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	2201      	movs	r2, #1
 8002d32:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d34:	7afb      	ldrb	r3, [r7, #11]
 8002d36:	f003 0307 	and.w	r3, r3, #7
 8002d3a:	b2da      	uxtb	r2, r3
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002d40:	7afb      	ldrb	r3, [r7, #11]
 8002d42:	f003 0307 	and.w	r3, r3, #7
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d106      	bne.n	8002d58 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	6979      	ldr	r1, [r7, #20]
 8002d50:	4618      	mov	r0, r3
 8002d52:	f002 fc23 	bl	800559c <USB_EPStartXfer>
 8002d56:	e005      	b.n	8002d64 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	6979      	ldr	r1, [r7, #20]
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f002 fc1c 	bl	800559c <USB_EPStartXfer>
  }

  return HAL_OK;
 8002d64:	2300      	movs	r3, #0
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3718      	adds	r7, #24
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}

08002d6e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d6e:	b580      	push	{r7, lr}
 8002d70:	b084      	sub	sp, #16
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	6078      	str	r0, [r7, #4]
 8002d76:	460b      	mov	r3, r1
 8002d78:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002d7a:	78fb      	ldrb	r3, [r7, #3]
 8002d7c:	f003 0207 	and.w	r2, r3, #7
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	429a      	cmp	r2, r3
 8002d86:	d901      	bls.n	8002d8c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e04c      	b.n	8002e26 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002d8c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	da0e      	bge.n	8002db2 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d94:	78fb      	ldrb	r3, [r7, #3]
 8002d96:	f003 0307 	and.w	r3, r3, #7
 8002d9a:	1c5a      	adds	r2, r3, #1
 8002d9c:	4613      	mov	r3, r2
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	4413      	add	r3, r2
 8002da2:	00db      	lsls	r3, r3, #3
 8002da4:	687a      	ldr	r2, [r7, #4]
 8002da6:	4413      	add	r3, r2
 8002da8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2201      	movs	r2, #1
 8002dae:	705a      	strb	r2, [r3, #1]
 8002db0:	e00c      	b.n	8002dcc <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002db2:	78fa      	ldrb	r2, [r7, #3]
 8002db4:	4613      	mov	r3, r2
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	4413      	add	r3, r2
 8002dba:	00db      	lsls	r3, r3, #3
 8002dbc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002dc0:	687a      	ldr	r2, [r7, #4]
 8002dc2:	4413      	add	r3, r2
 8002dc4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2201      	movs	r2, #1
 8002dd0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002dd2:	78fb      	ldrb	r3, [r7, #3]
 8002dd4:	f003 0307 	and.w	r3, r3, #7
 8002dd8:	b2da      	uxtb	r2, r3
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d101      	bne.n	8002dec <HAL_PCD_EP_SetStall+0x7e>
 8002de8:	2302      	movs	r3, #2
 8002dea:	e01c      	b.n	8002e26 <HAL_PCD_EP_SetStall+0xb8>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2201      	movs	r2, #1
 8002df0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	68f9      	ldr	r1, [r7, #12]
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f003 fec5 	bl	8006b8a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002e00:	78fb      	ldrb	r3, [r7, #3]
 8002e02:	f003 0307 	and.w	r3, r3, #7
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d108      	bne.n	8002e1c <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8002e14:	4619      	mov	r1, r3
 8002e16:	4610      	mov	r0, r2
 8002e18:	f003 ffea 	bl	8006df0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002e24:	2300      	movs	r3, #0
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3710      	adds	r7, #16
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}

08002e2e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e2e:	b580      	push	{r7, lr}
 8002e30:	b084      	sub	sp, #16
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	6078      	str	r0, [r7, #4]
 8002e36:	460b      	mov	r3, r1
 8002e38:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002e3a:	78fb      	ldrb	r3, [r7, #3]
 8002e3c:	f003 020f 	and.w	r2, r3, #15
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d901      	bls.n	8002e4c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e040      	b.n	8002ece <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002e4c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	da0e      	bge.n	8002e72 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e54:	78fb      	ldrb	r3, [r7, #3]
 8002e56:	f003 0307 	and.w	r3, r3, #7
 8002e5a:	1c5a      	adds	r2, r3, #1
 8002e5c:	4613      	mov	r3, r2
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	4413      	add	r3, r2
 8002e62:	00db      	lsls	r3, r3, #3
 8002e64:	687a      	ldr	r2, [r7, #4]
 8002e66:	4413      	add	r3, r2
 8002e68:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	705a      	strb	r2, [r3, #1]
 8002e70:	e00e      	b.n	8002e90 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e72:	78fb      	ldrb	r3, [r7, #3]
 8002e74:	f003 0207 	and.w	r2, r3, #7
 8002e78:	4613      	mov	r3, r2
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	4413      	add	r3, r2
 8002e7e:	00db      	lsls	r3, r3, #3
 8002e80:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002e84:	687a      	ldr	r2, [r7, #4]
 8002e86:	4413      	add	r3, r2
 8002e88:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2200      	movs	r2, #0
 8002e94:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e96:	78fb      	ldrb	r3, [r7, #3]
 8002e98:	f003 0307 	and.w	r3, r3, #7
 8002e9c:	b2da      	uxtb	r2, r3
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d101      	bne.n	8002eb0 <HAL_PCD_EP_ClrStall+0x82>
 8002eac:	2302      	movs	r3, #2
 8002eae:	e00e      	b.n	8002ece <HAL_PCD_EP_ClrStall+0xa0>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	68f9      	ldr	r1, [r7, #12]
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f003 feb3 	bl	8006c2a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002ecc:	2300      	movs	r3, #0
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3710      	adds	r7, #16
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}

08002ed6 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002ed6:	b580      	push	{r7, lr}
 8002ed8:	b08e      	sub	sp, #56	; 0x38
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002ede:	e2ec      	b.n	80034ba <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002ee8:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002eea:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	f003 030f 	and.w	r3, r3, #15
 8002ef2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8002ef6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	f040 8161 	bne.w	80031c2 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002f00:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002f02:	f003 0310 	and.w	r3, r3, #16
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d152      	bne.n	8002fb0 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	881b      	ldrh	r3, [r3, #0]
 8002f10:	b29b      	uxth	r3, r3
 8002f12:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002f16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f1a:	81fb      	strh	r3, [r7, #14]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	89fb      	ldrh	r3, [r7, #14]
 8002f22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f2a:	b29b      	uxth	r3, r3
 8002f2c:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	3328      	adds	r3, #40	; 0x28
 8002f32:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f3c:	b29b      	uxth	r3, r3
 8002f3e:	461a      	mov	r2, r3
 8002f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f42:	781b      	ldrb	r3, [r3, #0]
 8002f44:	00db      	lsls	r3, r3, #3
 8002f46:	4413      	add	r3, r2
 8002f48:	3302      	adds	r3, #2
 8002f4a:	005b      	lsls	r3, r3, #1
 8002f4c:	687a      	ldr	r2, [r7, #4]
 8002f4e:	6812      	ldr	r2, [r2, #0]
 8002f50:	4413      	add	r3, r2
 8002f52:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002f56:	881b      	ldrh	r3, [r3, #0]
 8002f58:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f5e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f62:	695a      	ldr	r2, [r3, #20]
 8002f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f66:	69db      	ldr	r3, [r3, #28]
 8002f68:	441a      	add	r2, r3
 8002f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f6c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002f6e:	2100      	movs	r1, #0
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	f005 fd92 	bl	8008a9a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	f000 829b 	beq.w	80034ba <PCD_EP_ISR_Handler+0x5e4>
 8002f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f86:	699b      	ldr	r3, [r3, #24]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	f040 8296 	bne.w	80034ba <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002f9a:	b2da      	uxtb	r2, r3
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	b292      	uxth	r2, r2
 8002fa2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002fae:	e284      	b.n	80034ba <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002fb6:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	881b      	ldrh	r3, [r3, #0]
 8002fbe:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002fc0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002fc2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d034      	beq.n	8003034 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002fd2:	b29b      	uxth	r3, r3
 8002fd4:	461a      	mov	r2, r3
 8002fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd8:	781b      	ldrb	r3, [r3, #0]
 8002fda:	00db      	lsls	r3, r3, #3
 8002fdc:	4413      	add	r3, r2
 8002fde:	3306      	adds	r3, #6
 8002fe0:	005b      	lsls	r3, r3, #1
 8002fe2:	687a      	ldr	r2, [r7, #4]
 8002fe4:	6812      	ldr	r2, [r2, #0]
 8002fe6:	4413      	add	r3, r2
 8002fe8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002fec:	881b      	ldrh	r3, [r3, #0]
 8002fee:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff4:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6818      	ldr	r0, [r3, #0]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8003000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003002:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003006:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003008:	b29b      	uxth	r3, r3
 800300a:	f003 ff41 	bl	8006e90 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	881b      	ldrh	r3, [r3, #0]
 8003014:	b29a      	uxth	r2, r3
 8003016:	f640 738f 	movw	r3, #3983	; 0xf8f
 800301a:	4013      	ands	r3, r2
 800301c:	823b      	strh	r3, [r7, #16]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	8a3a      	ldrh	r2, [r7, #16]
 8003024:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003028:	b292      	uxth	r2, r2
 800302a:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	f005 fd07 	bl	8008a40 <HAL_PCD_SetupStageCallback>
 8003032:	e242      	b.n	80034ba <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003034:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8003038:	2b00      	cmp	r3, #0
 800303a:	f280 823e 	bge.w	80034ba <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	881b      	ldrh	r3, [r3, #0]
 8003044:	b29a      	uxth	r2, r3
 8003046:	f640 738f 	movw	r3, #3983	; 0xf8f
 800304a:	4013      	ands	r3, r2
 800304c:	83bb      	strh	r3, [r7, #28]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	8bba      	ldrh	r2, [r7, #28]
 8003054:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003058:	b292      	uxth	r2, r2
 800305a:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003064:	b29b      	uxth	r3, r3
 8003066:	461a      	mov	r2, r3
 8003068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800306a:	781b      	ldrb	r3, [r3, #0]
 800306c:	00db      	lsls	r3, r3, #3
 800306e:	4413      	add	r3, r2
 8003070:	3306      	adds	r3, #6
 8003072:	005b      	lsls	r3, r3, #1
 8003074:	687a      	ldr	r2, [r7, #4]
 8003076:	6812      	ldr	r2, [r2, #0]
 8003078:	4413      	add	r3, r2
 800307a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800307e:	881b      	ldrh	r3, [r3, #0]
 8003080:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003086:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800308a:	69db      	ldr	r3, [r3, #28]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d019      	beq.n	80030c4 <PCD_EP_ISR_Handler+0x1ee>
 8003090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003092:	695b      	ldr	r3, [r3, #20]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d015      	beq.n	80030c4 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6818      	ldr	r0, [r3, #0]
 800309c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800309e:	6959      	ldr	r1, [r3, #20]
 80030a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a2:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80030a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a6:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80030a8:	b29b      	uxth	r3, r3
 80030aa:	f003 fef1 	bl	8006e90 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80030ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b0:	695a      	ldr	r2, [r3, #20]
 80030b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b4:	69db      	ldr	r3, [r3, #28]
 80030b6:	441a      	add	r2, r3
 80030b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ba:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80030bc:	2100      	movs	r1, #0
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f005 fcd0 	bl	8008a64 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	881b      	ldrh	r3, [r3, #0]
 80030ca:	b29b      	uxth	r3, r3
 80030cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	f040 81f2 	bne.w	80034ba <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	61bb      	str	r3, [r7, #24]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030e4:	b29b      	uxth	r3, r3
 80030e6:	461a      	mov	r2, r3
 80030e8:	69bb      	ldr	r3, [r7, #24]
 80030ea:	4413      	add	r3, r2
 80030ec:	61bb      	str	r3, [r7, #24]
 80030ee:	69bb      	ldr	r3, [r7, #24]
 80030f0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80030f4:	617b      	str	r3, [r7, #20]
 80030f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f8:	691b      	ldr	r3, [r3, #16]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d112      	bne.n	8003124 <PCD_EP_ISR_Handler+0x24e>
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	881b      	ldrh	r3, [r3, #0]
 8003102:	b29b      	uxth	r3, r3
 8003104:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003108:	b29a      	uxth	r2, r3
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	801a      	strh	r2, [r3, #0]
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	881b      	ldrh	r3, [r3, #0]
 8003112:	b29b      	uxth	r3, r3
 8003114:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003118:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800311c:	b29a      	uxth	r2, r3
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	801a      	strh	r2, [r3, #0]
 8003122:	e02f      	b.n	8003184 <PCD_EP_ISR_Handler+0x2ae>
 8003124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003126:	691b      	ldr	r3, [r3, #16]
 8003128:	2b3e      	cmp	r3, #62	; 0x3e
 800312a:	d813      	bhi.n	8003154 <PCD_EP_ISR_Handler+0x27e>
 800312c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800312e:	691b      	ldr	r3, [r3, #16]
 8003130:	085b      	lsrs	r3, r3, #1
 8003132:	633b      	str	r3, [r7, #48]	; 0x30
 8003134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003136:	691b      	ldr	r3, [r3, #16]
 8003138:	f003 0301 	and.w	r3, r3, #1
 800313c:	2b00      	cmp	r3, #0
 800313e:	d002      	beq.n	8003146 <PCD_EP_ISR_Handler+0x270>
 8003140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003142:	3301      	adds	r3, #1
 8003144:	633b      	str	r3, [r7, #48]	; 0x30
 8003146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003148:	b29b      	uxth	r3, r3
 800314a:	029b      	lsls	r3, r3, #10
 800314c:	b29a      	uxth	r2, r3
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	801a      	strh	r2, [r3, #0]
 8003152:	e017      	b.n	8003184 <PCD_EP_ISR_Handler+0x2ae>
 8003154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003156:	691b      	ldr	r3, [r3, #16]
 8003158:	095b      	lsrs	r3, r3, #5
 800315a:	633b      	str	r3, [r7, #48]	; 0x30
 800315c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800315e:	691b      	ldr	r3, [r3, #16]
 8003160:	f003 031f 	and.w	r3, r3, #31
 8003164:	2b00      	cmp	r3, #0
 8003166:	d102      	bne.n	800316e <PCD_EP_ISR_Handler+0x298>
 8003168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800316a:	3b01      	subs	r3, #1
 800316c:	633b      	str	r3, [r7, #48]	; 0x30
 800316e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003170:	b29b      	uxth	r3, r3
 8003172:	029b      	lsls	r3, r3, #10
 8003174:	b29b      	uxth	r3, r3
 8003176:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800317a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800317e:	b29a      	uxth	r2, r3
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	881b      	ldrh	r3, [r3, #0]
 800318a:	b29b      	uxth	r3, r3
 800318c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003190:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003194:	827b      	strh	r3, [r7, #18]
 8003196:	8a7b      	ldrh	r3, [r7, #18]
 8003198:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800319c:	827b      	strh	r3, [r7, #18]
 800319e:	8a7b      	ldrh	r3, [r7, #18]
 80031a0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80031a4:	827b      	strh	r3, [r7, #18]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	8a7b      	ldrh	r3, [r7, #18]
 80031ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80031b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80031b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031bc:	b29b      	uxth	r3, r3
 80031be:	8013      	strh	r3, [r2, #0]
 80031c0:	e17b      	b.n	80034ba <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	461a      	mov	r2, r3
 80031c8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	4413      	add	r3, r2
 80031d0:	881b      	ldrh	r3, [r3, #0]
 80031d2:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80031d4:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80031d8:	2b00      	cmp	r3, #0
 80031da:	f280 80ea 	bge.w	80033b2 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	461a      	mov	r2, r3
 80031e4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80031e8:	009b      	lsls	r3, r3, #2
 80031ea:	4413      	add	r3, r2
 80031ec:	881b      	ldrh	r3, [r3, #0]
 80031ee:	b29a      	uxth	r2, r3
 80031f0:	f640 738f 	movw	r3, #3983	; 0xf8f
 80031f4:	4013      	ands	r3, r2
 80031f6:	853b      	strh	r3, [r7, #40]	; 0x28
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	461a      	mov	r2, r3
 80031fe:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	4413      	add	r3, r2
 8003206:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003208:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800320c:	b292      	uxth	r2, r2
 800320e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003210:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8003214:	4613      	mov	r3, r2
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	4413      	add	r3, r2
 800321a:	00db      	lsls	r3, r3, #3
 800321c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003220:	687a      	ldr	r2, [r7, #4]
 8003222:	4413      	add	r3, r2
 8003224:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003228:	7b1b      	ldrb	r3, [r3, #12]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d122      	bne.n	8003274 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003236:	b29b      	uxth	r3, r3
 8003238:	461a      	mov	r2, r3
 800323a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800323c:	781b      	ldrb	r3, [r3, #0]
 800323e:	00db      	lsls	r3, r3, #3
 8003240:	4413      	add	r3, r2
 8003242:	3306      	adds	r3, #6
 8003244:	005b      	lsls	r3, r3, #1
 8003246:	687a      	ldr	r2, [r7, #4]
 8003248:	6812      	ldr	r2, [r2, #0]
 800324a:	4413      	add	r3, r2
 800324c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003250:	881b      	ldrh	r3, [r3, #0]
 8003252:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003256:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8003258:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800325a:	2b00      	cmp	r3, #0
 800325c:	f000 8087 	beq.w	800336e <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6818      	ldr	r0, [r3, #0]
 8003264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003266:	6959      	ldr	r1, [r3, #20]
 8003268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800326a:	88da      	ldrh	r2, [r3, #6]
 800326c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800326e:	f003 fe0f 	bl	8006e90 <USB_ReadPMA>
 8003272:	e07c      	b.n	800336e <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003276:	78db      	ldrb	r3, [r3, #3]
 8003278:	2b02      	cmp	r3, #2
 800327a:	d108      	bne.n	800328e <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800327c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800327e:	461a      	mov	r2, r3
 8003280:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f000 f927 	bl	80034d6 <HAL_PCD_EP_DB_Receive>
 8003288:	4603      	mov	r3, r0
 800328a:	86fb      	strh	r3, [r7, #54]	; 0x36
 800328c:	e06f      	b.n	800336e <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	461a      	mov	r2, r3
 8003294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003296:	781b      	ldrb	r3, [r3, #0]
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	4413      	add	r3, r2
 800329c:	881b      	ldrh	r3, [r3, #0]
 800329e:	b29b      	uxth	r3, r3
 80032a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032a8:	847b      	strh	r3, [r7, #34]	; 0x22
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	461a      	mov	r2, r3
 80032b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b2:	781b      	ldrb	r3, [r3, #0]
 80032b4:	009b      	lsls	r3, r3, #2
 80032b6:	441a      	add	r2, r3
 80032b8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80032ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80032be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80032c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032c6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80032ca:	b29b      	uxth	r3, r3
 80032cc:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	461a      	mov	r2, r3
 80032d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d6:	781b      	ldrb	r3, [r3, #0]
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	4413      	add	r3, r2
 80032dc:	881b      	ldrh	r3, [r3, #0]
 80032de:	b29b      	uxth	r3, r3
 80032e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d021      	beq.n	800332c <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032f0:	b29b      	uxth	r3, r3
 80032f2:	461a      	mov	r2, r3
 80032f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f6:	781b      	ldrb	r3, [r3, #0]
 80032f8:	00db      	lsls	r3, r3, #3
 80032fa:	4413      	add	r3, r2
 80032fc:	3302      	adds	r3, #2
 80032fe:	005b      	lsls	r3, r3, #1
 8003300:	687a      	ldr	r2, [r7, #4]
 8003302:	6812      	ldr	r2, [r2, #0]
 8003304:	4413      	add	r3, r2
 8003306:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800330a:	881b      	ldrh	r3, [r3, #0]
 800330c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003310:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8003312:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003314:	2b00      	cmp	r3, #0
 8003316:	d02a      	beq.n	800336e <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6818      	ldr	r0, [r3, #0]
 800331c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800331e:	6959      	ldr	r1, [r3, #20]
 8003320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003322:	891a      	ldrh	r2, [r3, #8]
 8003324:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003326:	f003 fdb3 	bl	8006e90 <USB_ReadPMA>
 800332a:	e020      	b.n	800336e <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003334:	b29b      	uxth	r3, r3
 8003336:	461a      	mov	r2, r3
 8003338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800333a:	781b      	ldrb	r3, [r3, #0]
 800333c:	00db      	lsls	r3, r3, #3
 800333e:	4413      	add	r3, r2
 8003340:	3306      	adds	r3, #6
 8003342:	005b      	lsls	r3, r3, #1
 8003344:	687a      	ldr	r2, [r7, #4]
 8003346:	6812      	ldr	r2, [r2, #0]
 8003348:	4413      	add	r3, r2
 800334a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800334e:	881b      	ldrh	r3, [r3, #0]
 8003350:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003354:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8003356:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003358:	2b00      	cmp	r3, #0
 800335a:	d008      	beq.n	800336e <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6818      	ldr	r0, [r3, #0]
 8003360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003362:	6959      	ldr	r1, [r3, #20]
 8003364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003366:	895a      	ldrh	r2, [r3, #10]
 8003368:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800336a:	f003 fd91 	bl	8006e90 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800336e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003370:	69da      	ldr	r2, [r3, #28]
 8003372:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003374:	441a      	add	r2, r3
 8003376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003378:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800337a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800337c:	695a      	ldr	r2, [r3, #20]
 800337e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003380:	441a      	add	r2, r3
 8003382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003384:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003388:	699b      	ldr	r3, [r3, #24]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d004      	beq.n	8003398 <PCD_EP_ISR_Handler+0x4c2>
 800338e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8003390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003392:	691b      	ldr	r3, [r3, #16]
 8003394:	429a      	cmp	r2, r3
 8003396:	d206      	bcs.n	80033a6 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800339a:	781b      	ldrb	r3, [r3, #0]
 800339c:	4619      	mov	r1, r3
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f005 fb60 	bl	8008a64 <HAL_PCD_DataOutStageCallback>
 80033a4:	e005      	b.n	80033b2 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80033ac:	4618      	mov	r0, r3
 80033ae:	f002 f8f5 	bl	800559c <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80033b2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80033b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d07e      	beq.n	80034ba <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 80033bc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80033c0:	1c5a      	adds	r2, r3, #1
 80033c2:	4613      	mov	r3, r2
 80033c4:	009b      	lsls	r3, r3, #2
 80033c6:	4413      	add	r3, r2
 80033c8:	00db      	lsls	r3, r3, #3
 80033ca:	687a      	ldr	r2, [r7, #4]
 80033cc:	4413      	add	r3, r2
 80033ce:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	461a      	mov	r2, r3
 80033d6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	4413      	add	r3, r2
 80033de:	881b      	ldrh	r3, [r3, #0]
 80033e0:	b29b      	uxth	r3, r3
 80033e2:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80033e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033ea:	843b      	strh	r3, [r7, #32]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	461a      	mov	r2, r3
 80033f2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	441a      	add	r2, r3
 80033fa:	8c3b      	ldrh	r3, [r7, #32]
 80033fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003400:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003404:	b29b      	uxth	r3, r3
 8003406:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8003408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340a:	78db      	ldrb	r3, [r3, #3]
 800340c:	2b03      	cmp	r3, #3
 800340e:	d00c      	beq.n	800342a <PCD_EP_ISR_Handler+0x554>
 8003410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003412:	78db      	ldrb	r3, [r3, #3]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d008      	beq.n	800342a <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8003418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341a:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 800341c:	2b02      	cmp	r3, #2
 800341e:	d146      	bne.n	80034ae <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8003420:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003422:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003426:	2b00      	cmp	r3, #0
 8003428:	d141      	bne.n	80034ae <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003432:	b29b      	uxth	r3, r3
 8003434:	461a      	mov	r2, r3
 8003436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003438:	781b      	ldrb	r3, [r3, #0]
 800343a:	00db      	lsls	r3, r3, #3
 800343c:	4413      	add	r3, r2
 800343e:	3302      	adds	r3, #2
 8003440:	005b      	lsls	r3, r3, #1
 8003442:	687a      	ldr	r2, [r7, #4]
 8003444:	6812      	ldr	r2, [r2, #0]
 8003446:	4413      	add	r3, r2
 8003448:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800344c:	881b      	ldrh	r3, [r3, #0]
 800344e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003452:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8003454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003456:	699a      	ldr	r2, [r3, #24]
 8003458:	8bfb      	ldrh	r3, [r7, #30]
 800345a:	429a      	cmp	r2, r3
 800345c:	d906      	bls.n	800346c <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 800345e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003460:	699a      	ldr	r2, [r3, #24]
 8003462:	8bfb      	ldrh	r3, [r7, #30]
 8003464:	1ad2      	subs	r2, r2, r3
 8003466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003468:	619a      	str	r2, [r3, #24]
 800346a:	e002      	b.n	8003472 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 800346c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346e:	2200      	movs	r2, #0
 8003470:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8003472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003474:	699b      	ldr	r3, [r3, #24]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d106      	bne.n	8003488 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800347a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800347c:	781b      	ldrb	r3, [r3, #0]
 800347e:	4619      	mov	r1, r3
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	f005 fb0a 	bl	8008a9a <HAL_PCD_DataInStageCallback>
 8003486:	e018      	b.n	80034ba <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8003488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800348a:	695a      	ldr	r2, [r3, #20]
 800348c:	8bfb      	ldrh	r3, [r7, #30]
 800348e:	441a      	add	r2, r3
 8003490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003492:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8003494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003496:	69da      	ldr	r2, [r3, #28]
 8003498:	8bfb      	ldrh	r3, [r7, #30]
 800349a:	441a      	add	r2, r3
 800349c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800349e:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034a6:	4618      	mov	r0, r3
 80034a8:	f002 f878 	bl	800559c <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80034ac:	e005      	b.n	80034ba <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80034ae:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80034b0:	461a      	mov	r2, r3
 80034b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034b4:	6878      	ldr	r0, [r7, #4]
 80034b6:	f000 f91b 	bl	80036f0 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80034c2:	b29b      	uxth	r3, r3
 80034c4:	b21b      	sxth	r3, r3
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	f6ff ad0a 	blt.w	8002ee0 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80034cc:	2300      	movs	r3, #0
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	3738      	adds	r7, #56	; 0x38
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}

080034d6 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80034d6:	b580      	push	{r7, lr}
 80034d8:	b088      	sub	sp, #32
 80034da:	af00      	add	r7, sp, #0
 80034dc:	60f8      	str	r0, [r7, #12]
 80034de:	60b9      	str	r1, [r7, #8]
 80034e0:	4613      	mov	r3, r2
 80034e2:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80034e4:	88fb      	ldrh	r3, [r7, #6]
 80034e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d07e      	beq.n	80035ec <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034f6:	b29b      	uxth	r3, r3
 80034f8:	461a      	mov	r2, r3
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	781b      	ldrb	r3, [r3, #0]
 80034fe:	00db      	lsls	r3, r3, #3
 8003500:	4413      	add	r3, r2
 8003502:	3302      	adds	r3, #2
 8003504:	005b      	lsls	r3, r3, #1
 8003506:	68fa      	ldr	r2, [r7, #12]
 8003508:	6812      	ldr	r2, [r2, #0]
 800350a:	4413      	add	r3, r2
 800350c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003510:	881b      	ldrh	r3, [r3, #0]
 8003512:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003516:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	699a      	ldr	r2, [r3, #24]
 800351c:	8b7b      	ldrh	r3, [r7, #26]
 800351e:	429a      	cmp	r2, r3
 8003520:	d306      	bcc.n	8003530 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	699a      	ldr	r2, [r3, #24]
 8003526:	8b7b      	ldrh	r3, [r7, #26]
 8003528:	1ad2      	subs	r2, r2, r3
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	619a      	str	r2, [r3, #24]
 800352e:	e002      	b.n	8003536 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	2200      	movs	r2, #0
 8003534:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	699b      	ldr	r3, [r3, #24]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d123      	bne.n	8003586 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	461a      	mov	r2, r3
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	781b      	ldrb	r3, [r3, #0]
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	4413      	add	r3, r2
 800354c:	881b      	ldrh	r3, [r3, #0]
 800354e:	b29b      	uxth	r3, r3
 8003550:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003554:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003558:	833b      	strh	r3, [r7, #24]
 800355a:	8b3b      	ldrh	r3, [r7, #24]
 800355c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003560:	833b      	strh	r3, [r7, #24]
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	461a      	mov	r2, r3
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	781b      	ldrb	r3, [r3, #0]
 800356c:	009b      	lsls	r3, r3, #2
 800356e:	441a      	add	r2, r3
 8003570:	8b3b      	ldrh	r3, [r7, #24]
 8003572:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003576:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800357a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800357e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003582:	b29b      	uxth	r3, r3
 8003584:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003586:	88fb      	ldrh	r3, [r7, #6]
 8003588:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800358c:	2b00      	cmp	r3, #0
 800358e:	d01f      	beq.n	80035d0 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	461a      	mov	r2, r3
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	781b      	ldrb	r3, [r3, #0]
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	4413      	add	r3, r2
 800359e:	881b      	ldrh	r3, [r3, #0]
 80035a0:	b29b      	uxth	r3, r3
 80035a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035aa:	82fb      	strh	r3, [r7, #22]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	461a      	mov	r2, r3
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	781b      	ldrb	r3, [r3, #0]
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	441a      	add	r2, r3
 80035ba:	8afb      	ldrh	r3, [r7, #22]
 80035bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80035c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80035c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035c8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80035cc:	b29b      	uxth	r3, r3
 80035ce:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80035d0:	8b7b      	ldrh	r3, [r7, #26]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	f000 8087 	beq.w	80036e6 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	6818      	ldr	r0, [r3, #0]
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	6959      	ldr	r1, [r3, #20]
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	891a      	ldrh	r2, [r3, #8]
 80035e4:	8b7b      	ldrh	r3, [r7, #26]
 80035e6:	f003 fc53 	bl	8006e90 <USB_ReadPMA>
 80035ea:	e07c      	b.n	80036e6 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80035f4:	b29b      	uxth	r3, r3
 80035f6:	461a      	mov	r2, r3
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	781b      	ldrb	r3, [r3, #0]
 80035fc:	00db      	lsls	r3, r3, #3
 80035fe:	4413      	add	r3, r2
 8003600:	3306      	adds	r3, #6
 8003602:	005b      	lsls	r3, r3, #1
 8003604:	68fa      	ldr	r2, [r7, #12]
 8003606:	6812      	ldr	r2, [r2, #0]
 8003608:	4413      	add	r3, r2
 800360a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800360e:	881b      	ldrh	r3, [r3, #0]
 8003610:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003614:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	699a      	ldr	r2, [r3, #24]
 800361a:	8b7b      	ldrh	r3, [r7, #26]
 800361c:	429a      	cmp	r2, r3
 800361e:	d306      	bcc.n	800362e <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	699a      	ldr	r2, [r3, #24]
 8003624:	8b7b      	ldrh	r3, [r7, #26]
 8003626:	1ad2      	subs	r2, r2, r3
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	619a      	str	r2, [r3, #24]
 800362c:	e002      	b.n	8003634 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	2200      	movs	r2, #0
 8003632:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	699b      	ldr	r3, [r3, #24]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d123      	bne.n	8003684 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	461a      	mov	r2, r3
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	781b      	ldrb	r3, [r3, #0]
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	4413      	add	r3, r2
 800364a:	881b      	ldrh	r3, [r3, #0]
 800364c:	b29b      	uxth	r3, r3
 800364e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003652:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003656:	83fb      	strh	r3, [r7, #30]
 8003658:	8bfb      	ldrh	r3, [r7, #30]
 800365a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800365e:	83fb      	strh	r3, [r7, #30]
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	461a      	mov	r2, r3
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	781b      	ldrb	r3, [r3, #0]
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	441a      	add	r2, r3
 800366e:	8bfb      	ldrh	r3, [r7, #30]
 8003670:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003674:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003678:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800367c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003680:	b29b      	uxth	r3, r3
 8003682:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003684:	88fb      	ldrh	r3, [r7, #6]
 8003686:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800368a:	2b00      	cmp	r3, #0
 800368c:	d11f      	bne.n	80036ce <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	461a      	mov	r2, r3
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	781b      	ldrb	r3, [r3, #0]
 8003698:	009b      	lsls	r3, r3, #2
 800369a:	4413      	add	r3, r2
 800369c:	881b      	ldrh	r3, [r3, #0]
 800369e:	b29b      	uxth	r3, r3
 80036a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036a8:	83bb      	strh	r3, [r7, #28]
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	461a      	mov	r2, r3
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	781b      	ldrb	r3, [r3, #0]
 80036b4:	009b      	lsls	r3, r3, #2
 80036b6:	441a      	add	r2, r3
 80036b8:	8bbb      	ldrh	r3, [r7, #28]
 80036ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80036be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80036c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036c6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80036ca:	b29b      	uxth	r3, r3
 80036cc:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80036ce:	8b7b      	ldrh	r3, [r7, #26]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d008      	beq.n	80036e6 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	6818      	ldr	r0, [r3, #0]
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	6959      	ldr	r1, [r3, #20]
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	895a      	ldrh	r2, [r3, #10]
 80036e0:	8b7b      	ldrh	r3, [r7, #26]
 80036e2:	f003 fbd5 	bl	8006e90 <USB_ReadPMA>
    }
  }

  return count;
 80036e6:	8b7b      	ldrh	r3, [r7, #26]
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	3720      	adds	r7, #32
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}

080036f0 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b0a2      	sub	sp, #136	; 0x88
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	60f8      	str	r0, [r7, #12]
 80036f8:	60b9      	str	r1, [r7, #8]
 80036fa:	4613      	mov	r3, r2
 80036fc:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80036fe:	88fb      	ldrh	r3, [r7, #6]
 8003700:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003704:	2b00      	cmp	r3, #0
 8003706:	f000 81c7 	beq.w	8003a98 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003712:	b29b      	uxth	r3, r3
 8003714:	461a      	mov	r2, r3
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	781b      	ldrb	r3, [r3, #0]
 800371a:	00db      	lsls	r3, r3, #3
 800371c:	4413      	add	r3, r2
 800371e:	3302      	adds	r3, #2
 8003720:	005b      	lsls	r3, r3, #1
 8003722:	68fa      	ldr	r2, [r7, #12]
 8003724:	6812      	ldr	r2, [r2, #0]
 8003726:	4413      	add	r3, r2
 8003728:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800372c:	881b      	ldrh	r3, [r3, #0]
 800372e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003732:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	699a      	ldr	r2, [r3, #24]
 800373a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800373e:	429a      	cmp	r2, r3
 8003740:	d907      	bls.n	8003752 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	699a      	ldr	r2, [r3, #24]
 8003746:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800374a:	1ad2      	subs	r2, r2, r3
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	619a      	str	r2, [r3, #24]
 8003750:	e002      	b.n	8003758 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	2200      	movs	r2, #0
 8003756:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	699b      	ldr	r3, [r3, #24]
 800375c:	2b00      	cmp	r3, #0
 800375e:	f040 80b9 	bne.w	80038d4 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	785b      	ldrb	r3, [r3, #1]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d126      	bne.n	80037b8 <HAL_PCD_EP_DB_Transmit+0xc8>
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003778:	b29b      	uxth	r3, r3
 800377a:	461a      	mov	r2, r3
 800377c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800377e:	4413      	add	r3, r2
 8003780:	62bb      	str	r3, [r7, #40]	; 0x28
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	781b      	ldrb	r3, [r3, #0]
 8003786:	011a      	lsls	r2, r3, #4
 8003788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800378a:	4413      	add	r3, r2
 800378c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003790:	627b      	str	r3, [r7, #36]	; 0x24
 8003792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003794:	881b      	ldrh	r3, [r3, #0]
 8003796:	b29b      	uxth	r3, r3
 8003798:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800379c:	b29a      	uxth	r2, r3
 800379e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a0:	801a      	strh	r2, [r3, #0]
 80037a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a4:	881b      	ldrh	r3, [r3, #0]
 80037a6:	b29b      	uxth	r3, r3
 80037a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80037ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80037b0:	b29a      	uxth	r2, r3
 80037b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b4:	801a      	strh	r2, [r3, #0]
 80037b6:	e01a      	b.n	80037ee <HAL_PCD_EP_DB_Transmit+0xfe>
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	785b      	ldrb	r3, [r3, #1]
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d116      	bne.n	80037ee <HAL_PCD_EP_DB_Transmit+0xfe>
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	633b      	str	r3, [r7, #48]	; 0x30
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80037ce:	b29b      	uxth	r3, r3
 80037d0:	461a      	mov	r2, r3
 80037d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037d4:	4413      	add	r3, r2
 80037d6:	633b      	str	r3, [r7, #48]	; 0x30
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	781b      	ldrb	r3, [r3, #0]
 80037dc:	011a      	lsls	r2, r3, #4
 80037de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037e0:	4413      	add	r3, r2
 80037e2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80037e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037ea:	2200      	movs	r2, #0
 80037ec:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	623b      	str	r3, [r7, #32]
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	785b      	ldrb	r3, [r3, #1]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d126      	bne.n	800384a <HAL_PCD_EP_DB_Transmit+0x15a>
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	61bb      	str	r3, [r7, #24]
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800380a:	b29b      	uxth	r3, r3
 800380c:	461a      	mov	r2, r3
 800380e:	69bb      	ldr	r3, [r7, #24]
 8003810:	4413      	add	r3, r2
 8003812:	61bb      	str	r3, [r7, #24]
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	781b      	ldrb	r3, [r3, #0]
 8003818:	011a      	lsls	r2, r3, #4
 800381a:	69bb      	ldr	r3, [r7, #24]
 800381c:	4413      	add	r3, r2
 800381e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003822:	617b      	str	r3, [r7, #20]
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	881b      	ldrh	r3, [r3, #0]
 8003828:	b29b      	uxth	r3, r3
 800382a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800382e:	b29a      	uxth	r2, r3
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	801a      	strh	r2, [r3, #0]
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	881b      	ldrh	r3, [r3, #0]
 8003838:	b29b      	uxth	r3, r3
 800383a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800383e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003842:	b29a      	uxth	r2, r3
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	801a      	strh	r2, [r3, #0]
 8003848:	e017      	b.n	800387a <HAL_PCD_EP_DB_Transmit+0x18a>
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	785b      	ldrb	r3, [r3, #1]
 800384e:	2b01      	cmp	r3, #1
 8003850:	d113      	bne.n	800387a <HAL_PCD_EP_DB_Transmit+0x18a>
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800385a:	b29b      	uxth	r3, r3
 800385c:	461a      	mov	r2, r3
 800385e:	6a3b      	ldr	r3, [r7, #32]
 8003860:	4413      	add	r3, r2
 8003862:	623b      	str	r3, [r7, #32]
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	781b      	ldrb	r3, [r3, #0]
 8003868:	011a      	lsls	r2, r3, #4
 800386a:	6a3b      	ldr	r3, [r7, #32]
 800386c:	4413      	add	r3, r2
 800386e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003872:	61fb      	str	r3, [r7, #28]
 8003874:	69fb      	ldr	r3, [r7, #28]
 8003876:	2200      	movs	r2, #0
 8003878:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	781b      	ldrb	r3, [r3, #0]
 800387e:	4619      	mov	r1, r3
 8003880:	68f8      	ldr	r0, [r7, #12]
 8003882:	f005 f90a 	bl	8008a9a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003886:	88fb      	ldrh	r3, [r7, #6]
 8003888:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800388c:	2b00      	cmp	r3, #0
 800388e:	f000 82d4 	beq.w	8003e3a <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	461a      	mov	r2, r3
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	781b      	ldrb	r3, [r3, #0]
 800389c:	009b      	lsls	r3, r3, #2
 800389e:	4413      	add	r3, r2
 80038a0:	881b      	ldrh	r3, [r3, #0]
 80038a2:	b29b      	uxth	r3, r3
 80038a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038ac:	827b      	strh	r3, [r7, #18]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	461a      	mov	r2, r3
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	781b      	ldrb	r3, [r3, #0]
 80038b8:	009b      	lsls	r3, r3, #2
 80038ba:	441a      	add	r2, r3
 80038bc:	8a7b      	ldrh	r3, [r7, #18]
 80038be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80038c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80038c6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80038ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	8013      	strh	r3, [r2, #0]
 80038d2:	e2b2      	b.n	8003e3a <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80038d4:	88fb      	ldrh	r3, [r7, #6]
 80038d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d021      	beq.n	8003922 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	461a      	mov	r2, r3
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	781b      	ldrb	r3, [r3, #0]
 80038e8:	009b      	lsls	r3, r3, #2
 80038ea:	4413      	add	r3, r2
 80038ec:	881b      	ldrh	r3, [r3, #0]
 80038ee:	b29b      	uxth	r3, r3
 80038f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038f8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	461a      	mov	r2, r3
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	781b      	ldrb	r3, [r3, #0]
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	441a      	add	r2, r3
 800390a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800390e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003912:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003916:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800391a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800391e:	b29b      	uxth	r3, r3
 8003920:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003928:	2b01      	cmp	r3, #1
 800392a:	f040 8286 	bne.w	8003e3a <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	695a      	ldr	r2, [r3, #20]
 8003932:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003936:	441a      	add	r2, r3
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	69da      	ldr	r2, [r3, #28]
 8003940:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003944:	441a      	add	r2, r3
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	6a1a      	ldr	r2, [r3, #32]
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	691b      	ldr	r3, [r3, #16]
 8003952:	429a      	cmp	r2, r3
 8003954:	d309      	bcc.n	800396a <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	691b      	ldr	r3, [r3, #16]
 800395a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	6a1a      	ldr	r2, [r3, #32]
 8003960:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003962:	1ad2      	subs	r2, r2, r3
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	621a      	str	r2, [r3, #32]
 8003968:	e015      	b.n	8003996 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	6a1b      	ldr	r3, [r3, #32]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d107      	bne.n	8003982 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8003972:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003976:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	2200      	movs	r2, #0
 800397c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003980:	e009      	b.n	8003996 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	2200      	movs	r2, #0
 8003986:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	6a1b      	ldr	r3, [r3, #32]
 800398e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	2200      	movs	r2, #0
 8003994:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	785b      	ldrb	r3, [r3, #1]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d155      	bne.n	8003a4a <HAL_PCD_EP_DB_Transmit+0x35a>
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	63bb      	str	r3, [r7, #56]	; 0x38
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039ac:	b29b      	uxth	r3, r3
 80039ae:	461a      	mov	r2, r3
 80039b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039b2:	4413      	add	r3, r2
 80039b4:	63bb      	str	r3, [r7, #56]	; 0x38
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	781b      	ldrb	r3, [r3, #0]
 80039ba:	011a      	lsls	r2, r3, #4
 80039bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039be:	4413      	add	r3, r2
 80039c0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80039c4:	637b      	str	r3, [r7, #52]	; 0x34
 80039c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d112      	bne.n	80039f2 <HAL_PCD_EP_DB_Transmit+0x302>
 80039cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039ce:	881b      	ldrh	r3, [r3, #0]
 80039d0:	b29b      	uxth	r3, r3
 80039d2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80039d6:	b29a      	uxth	r2, r3
 80039d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039da:	801a      	strh	r2, [r3, #0]
 80039dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039de:	881b      	ldrh	r3, [r3, #0]
 80039e0:	b29b      	uxth	r3, r3
 80039e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80039e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80039ea:	b29a      	uxth	r2, r3
 80039ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039ee:	801a      	strh	r2, [r3, #0]
 80039f0:	e047      	b.n	8003a82 <HAL_PCD_EP_DB_Transmit+0x392>
 80039f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039f4:	2b3e      	cmp	r3, #62	; 0x3e
 80039f6:	d811      	bhi.n	8003a1c <HAL_PCD_EP_DB_Transmit+0x32c>
 80039f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039fa:	085b      	lsrs	r3, r3, #1
 80039fc:	64bb      	str	r3, [r7, #72]	; 0x48
 80039fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a00:	f003 0301 	and.w	r3, r3, #1
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d002      	beq.n	8003a0e <HAL_PCD_EP_DB_Transmit+0x31e>
 8003a08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a0a:	3301      	adds	r3, #1
 8003a0c:	64bb      	str	r3, [r7, #72]	; 0x48
 8003a0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a10:	b29b      	uxth	r3, r3
 8003a12:	029b      	lsls	r3, r3, #10
 8003a14:	b29a      	uxth	r2, r3
 8003a16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a18:	801a      	strh	r2, [r3, #0]
 8003a1a:	e032      	b.n	8003a82 <HAL_PCD_EP_DB_Transmit+0x392>
 8003a1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a1e:	095b      	lsrs	r3, r3, #5
 8003a20:	64bb      	str	r3, [r7, #72]	; 0x48
 8003a22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a24:	f003 031f 	and.w	r3, r3, #31
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d102      	bne.n	8003a32 <HAL_PCD_EP_DB_Transmit+0x342>
 8003a2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a2e:	3b01      	subs	r3, #1
 8003a30:	64bb      	str	r3, [r7, #72]	; 0x48
 8003a32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a34:	b29b      	uxth	r3, r3
 8003a36:	029b      	lsls	r3, r3, #10
 8003a38:	b29b      	uxth	r3, r3
 8003a3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a42:	b29a      	uxth	r2, r3
 8003a44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a46:	801a      	strh	r2, [r3, #0]
 8003a48:	e01b      	b.n	8003a82 <HAL_PCD_EP_DB_Transmit+0x392>
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	785b      	ldrb	r3, [r3, #1]
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d117      	bne.n	8003a82 <HAL_PCD_EP_DB_Transmit+0x392>
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	643b      	str	r3, [r7, #64]	; 0x40
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	461a      	mov	r2, r3
 8003a64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a66:	4413      	add	r3, r2
 8003a68:	643b      	str	r3, [r7, #64]	; 0x40
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	781b      	ldrb	r3, [r3, #0]
 8003a6e:	011a      	lsls	r2, r3, #4
 8003a70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a72:	4413      	add	r3, r2
 8003a74:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003a78:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a7c:	b29a      	uxth	r2, r3
 8003a7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a80:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	6818      	ldr	r0, [r3, #0]
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	6959      	ldr	r1, [r3, #20]
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	891a      	ldrh	r2, [r3, #8]
 8003a8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a90:	b29b      	uxth	r3, r3
 8003a92:	f003 f9b8 	bl	8006e06 <USB_WritePMA>
 8003a96:	e1d0      	b.n	8003e3a <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003aa0:	b29b      	uxth	r3, r3
 8003aa2:	461a      	mov	r2, r3
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	781b      	ldrb	r3, [r3, #0]
 8003aa8:	00db      	lsls	r3, r3, #3
 8003aaa:	4413      	add	r3, r2
 8003aac:	3306      	adds	r3, #6
 8003aae:	005b      	lsls	r3, r3, #1
 8003ab0:	68fa      	ldr	r2, [r7, #12]
 8003ab2:	6812      	ldr	r2, [r2, #0]
 8003ab4:	4413      	add	r3, r2
 8003ab6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003aba:	881b      	ldrh	r3, [r3, #0]
 8003abc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ac0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	699a      	ldr	r2, [r3, #24]
 8003ac8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d307      	bcc.n	8003ae0 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	699a      	ldr	r2, [r3, #24]
 8003ad4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003ad8:	1ad2      	subs	r2, r2, r3
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	619a      	str	r2, [r3, #24]
 8003ade:	e002      	b.n	8003ae6 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	699b      	ldr	r3, [r3, #24]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	f040 80c4 	bne.w	8003c78 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	785b      	ldrb	r3, [r3, #1]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d126      	bne.n	8003b46 <HAL_PCD_EP_DB_Transmit+0x456>
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b06:	b29b      	uxth	r3, r3
 8003b08:	461a      	mov	r2, r3
 8003b0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b0c:	4413      	add	r3, r2
 8003b0e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	781b      	ldrb	r3, [r3, #0]
 8003b14:	011a      	lsls	r2, r3, #4
 8003b16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b18:	4413      	add	r3, r2
 8003b1a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003b1e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003b20:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003b22:	881b      	ldrh	r3, [r3, #0]
 8003b24:	b29b      	uxth	r3, r3
 8003b26:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003b2a:	b29a      	uxth	r2, r3
 8003b2c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003b2e:	801a      	strh	r2, [r3, #0]
 8003b30:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003b32:	881b      	ldrh	r3, [r3, #0]
 8003b34:	b29b      	uxth	r3, r3
 8003b36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b3e:	b29a      	uxth	r2, r3
 8003b40:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003b42:	801a      	strh	r2, [r3, #0]
 8003b44:	e01a      	b.n	8003b7c <HAL_PCD_EP_DB_Transmit+0x48c>
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	785b      	ldrb	r3, [r3, #1]
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	d116      	bne.n	8003b7c <HAL_PCD_EP_DB_Transmit+0x48c>
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	677b      	str	r3, [r7, #116]	; 0x74
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b5c:	b29b      	uxth	r3, r3
 8003b5e:	461a      	mov	r2, r3
 8003b60:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b62:	4413      	add	r3, r2
 8003b64:	677b      	str	r3, [r7, #116]	; 0x74
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	781b      	ldrb	r3, [r3, #0]
 8003b6a:	011a      	lsls	r2, r3, #4
 8003b6c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b6e:	4413      	add	r3, r2
 8003b70:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003b74:	673b      	str	r3, [r7, #112]	; 0x70
 8003b76:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b78:	2200      	movs	r2, #0
 8003b7a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	67bb      	str	r3, [r7, #120]	; 0x78
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	785b      	ldrb	r3, [r3, #1]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d12f      	bne.n	8003bea <HAL_PCD_EP_DB_Transmit+0x4fa>
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b9a:	b29b      	uxth	r3, r3
 8003b9c:	461a      	mov	r2, r3
 8003b9e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003ba2:	4413      	add	r3, r2
 8003ba4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	781b      	ldrb	r3, [r3, #0]
 8003bac:	011a      	lsls	r2, r3, #4
 8003bae:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003bb2:	4413      	add	r3, r2
 8003bb4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003bb8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003bbc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003bc0:	881b      	ldrh	r3, [r3, #0]
 8003bc2:	b29b      	uxth	r3, r3
 8003bc4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003bc8:	b29a      	uxth	r2, r3
 8003bca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003bce:	801a      	strh	r2, [r3, #0]
 8003bd0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003bd4:	881b      	ldrh	r3, [r3, #0]
 8003bd6:	b29b      	uxth	r3, r3
 8003bd8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003bdc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003be0:	b29a      	uxth	r2, r3
 8003be2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003be6:	801a      	strh	r2, [r3, #0]
 8003be8:	e017      	b.n	8003c1a <HAL_PCD_EP_DB_Transmit+0x52a>
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	785b      	ldrb	r3, [r3, #1]
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d113      	bne.n	8003c1a <HAL_PCD_EP_DB_Transmit+0x52a>
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003bfa:	b29b      	uxth	r3, r3
 8003bfc:	461a      	mov	r2, r3
 8003bfe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c00:	4413      	add	r3, r2
 8003c02:	67bb      	str	r3, [r7, #120]	; 0x78
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	781b      	ldrb	r3, [r3, #0]
 8003c08:	011a      	lsls	r2, r3, #4
 8003c0a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c0c:	4413      	add	r3, r2
 8003c0e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003c12:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003c14:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003c16:	2200      	movs	r2, #0
 8003c18:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	781b      	ldrb	r3, [r3, #0]
 8003c1e:	4619      	mov	r1, r3
 8003c20:	68f8      	ldr	r0, [r7, #12]
 8003c22:	f004 ff3a 	bl	8008a9a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003c26:	88fb      	ldrh	r3, [r7, #6]
 8003c28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	f040 8104 	bne.w	8003e3a <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	461a      	mov	r2, r3
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	781b      	ldrb	r3, [r3, #0]
 8003c3c:	009b      	lsls	r3, r3, #2
 8003c3e:	4413      	add	r3, r2
 8003c40:	881b      	ldrh	r3, [r3, #0]
 8003c42:	b29b      	uxth	r3, r3
 8003c44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c4c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	461a      	mov	r2, r3
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	781b      	ldrb	r3, [r3, #0]
 8003c5a:	009b      	lsls	r3, r3, #2
 8003c5c:	441a      	add	r2, r3
 8003c5e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003c62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c6a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c72:	b29b      	uxth	r3, r3
 8003c74:	8013      	strh	r3, [r2, #0]
 8003c76:	e0e0      	b.n	8003e3a <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003c78:	88fb      	ldrh	r3, [r7, #6]
 8003c7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d121      	bne.n	8003cc6 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	461a      	mov	r2, r3
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	781b      	ldrb	r3, [r3, #0]
 8003c8c:	009b      	lsls	r3, r3, #2
 8003c8e:	4413      	add	r3, r2
 8003c90:	881b      	ldrh	r3, [r3, #0]
 8003c92:	b29b      	uxth	r3, r3
 8003c94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c9c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	781b      	ldrb	r3, [r3, #0]
 8003caa:	009b      	lsls	r3, r3, #2
 8003cac:	441a      	add	r2, r3
 8003cae:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003cb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003cb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003cba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003cbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cc2:	b29b      	uxth	r3, r3
 8003cc4:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	f040 80b4 	bne.w	8003e3a <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	695a      	ldr	r2, [r3, #20]
 8003cd6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003cda:	441a      	add	r2, r3
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	69da      	ldr	r2, [r3, #28]
 8003ce4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003ce8:	441a      	add	r2, r3
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	6a1a      	ldr	r2, [r3, #32]
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	691b      	ldr	r3, [r3, #16]
 8003cf6:	429a      	cmp	r2, r3
 8003cf8:	d309      	bcc.n	8003d0e <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	691b      	ldr	r3, [r3, #16]
 8003cfe:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	6a1a      	ldr	r2, [r3, #32]
 8003d04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d06:	1ad2      	subs	r2, r2, r3
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	621a      	str	r2, [r3, #32]
 8003d0c:	e015      	b.n	8003d3a <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	6a1b      	ldr	r3, [r3, #32]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d107      	bne.n	8003d26 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8003d16:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003d1a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003d24:	e009      	b.n	8003d3a <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	6a1b      	ldr	r3, [r3, #32]
 8003d2a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	2200      	movs	r2, #0
 8003d36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	667b      	str	r3, [r7, #100]	; 0x64
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	785b      	ldrb	r3, [r3, #1]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d155      	bne.n	8003df4 <HAL_PCD_EP_DB_Transmit+0x704>
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d56:	b29b      	uxth	r3, r3
 8003d58:	461a      	mov	r2, r3
 8003d5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d5c:	4413      	add	r3, r2
 8003d5e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	781b      	ldrb	r3, [r3, #0]
 8003d64:	011a      	lsls	r2, r3, #4
 8003d66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d68:	4413      	add	r3, r2
 8003d6a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003d6e:	65bb      	str	r3, [r7, #88]	; 0x58
 8003d70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d112      	bne.n	8003d9c <HAL_PCD_EP_DB_Transmit+0x6ac>
 8003d76:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003d78:	881b      	ldrh	r3, [r3, #0]
 8003d7a:	b29b      	uxth	r3, r3
 8003d7c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003d80:	b29a      	uxth	r2, r3
 8003d82:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003d84:	801a      	strh	r2, [r3, #0]
 8003d86:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003d88:	881b      	ldrh	r3, [r3, #0]
 8003d8a:	b29b      	uxth	r3, r3
 8003d8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d94:	b29a      	uxth	r2, r3
 8003d96:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003d98:	801a      	strh	r2, [r3, #0]
 8003d9a:	e044      	b.n	8003e26 <HAL_PCD_EP_DB_Transmit+0x736>
 8003d9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d9e:	2b3e      	cmp	r3, #62	; 0x3e
 8003da0:	d811      	bhi.n	8003dc6 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8003da2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003da4:	085b      	lsrs	r3, r3, #1
 8003da6:	657b      	str	r3, [r7, #84]	; 0x54
 8003da8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003daa:	f003 0301 	and.w	r3, r3, #1
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d002      	beq.n	8003db8 <HAL_PCD_EP_DB_Transmit+0x6c8>
 8003db2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003db4:	3301      	adds	r3, #1
 8003db6:	657b      	str	r3, [r7, #84]	; 0x54
 8003db8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003dba:	b29b      	uxth	r3, r3
 8003dbc:	029b      	lsls	r3, r3, #10
 8003dbe:	b29a      	uxth	r2, r3
 8003dc0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003dc2:	801a      	strh	r2, [r3, #0]
 8003dc4:	e02f      	b.n	8003e26 <HAL_PCD_EP_DB_Transmit+0x736>
 8003dc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003dc8:	095b      	lsrs	r3, r3, #5
 8003dca:	657b      	str	r3, [r7, #84]	; 0x54
 8003dcc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003dce:	f003 031f 	and.w	r3, r3, #31
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d102      	bne.n	8003ddc <HAL_PCD_EP_DB_Transmit+0x6ec>
 8003dd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003dd8:	3b01      	subs	r3, #1
 8003dda:	657b      	str	r3, [r7, #84]	; 0x54
 8003ddc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003dde:	b29b      	uxth	r3, r3
 8003de0:	029b      	lsls	r3, r3, #10
 8003de2:	b29b      	uxth	r3, r3
 8003de4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003de8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003dec:	b29a      	uxth	r2, r3
 8003dee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003df0:	801a      	strh	r2, [r3, #0]
 8003df2:	e018      	b.n	8003e26 <HAL_PCD_EP_DB_Transmit+0x736>
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	785b      	ldrb	r3, [r3, #1]
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	d114      	bne.n	8003e26 <HAL_PCD_EP_DB_Transmit+0x736>
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e04:	b29b      	uxth	r3, r3
 8003e06:	461a      	mov	r2, r3
 8003e08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e0a:	4413      	add	r3, r2
 8003e0c:	667b      	str	r3, [r7, #100]	; 0x64
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	781b      	ldrb	r3, [r3, #0]
 8003e12:	011a      	lsls	r2, r3, #4
 8003e14:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e16:	4413      	add	r3, r2
 8003e18:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003e1c:	663b      	str	r3, [r7, #96]	; 0x60
 8003e1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e20:	b29a      	uxth	r2, r3
 8003e22:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e24:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	6818      	ldr	r0, [r3, #0]
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	6959      	ldr	r1, [r3, #20]
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	895a      	ldrh	r2, [r3, #10]
 8003e32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e34:	b29b      	uxth	r3, r3
 8003e36:	f002 ffe6 	bl	8006e06 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	461a      	mov	r2, r3
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	781b      	ldrb	r3, [r3, #0]
 8003e44:	009b      	lsls	r3, r3, #2
 8003e46:	4413      	add	r3, r2
 8003e48:	881b      	ldrh	r3, [r3, #0]
 8003e4a:	b29b      	uxth	r3, r3
 8003e4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e54:	823b      	strh	r3, [r7, #16]
 8003e56:	8a3b      	ldrh	r3, [r7, #16]
 8003e58:	f083 0310 	eor.w	r3, r3, #16
 8003e5c:	823b      	strh	r3, [r7, #16]
 8003e5e:	8a3b      	ldrh	r3, [r7, #16]
 8003e60:	f083 0320 	eor.w	r3, r3, #32
 8003e64:	823b      	strh	r3, [r7, #16]
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	461a      	mov	r2, r3
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	781b      	ldrb	r3, [r3, #0]
 8003e70:	009b      	lsls	r3, r3, #2
 8003e72:	441a      	add	r2, r3
 8003e74:	8a3b      	ldrh	r3, [r7, #16]
 8003e76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e86:	b29b      	uxth	r3, r3
 8003e88:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003e8a:	2300      	movs	r3, #0
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	3788      	adds	r7, #136	; 0x88
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}

08003e94 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b087      	sub	sp, #28
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	60f8      	str	r0, [r7, #12]
 8003e9c:	607b      	str	r3, [r7, #4]
 8003e9e:	460b      	mov	r3, r1
 8003ea0:	817b      	strh	r3, [r7, #10]
 8003ea2:	4613      	mov	r3, r2
 8003ea4:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003ea6:	897b      	ldrh	r3, [r7, #10]
 8003ea8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eac:	b29b      	uxth	r3, r3
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d00b      	beq.n	8003eca <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003eb2:	897b      	ldrh	r3, [r7, #10]
 8003eb4:	f003 0307 	and.w	r3, r3, #7
 8003eb8:	1c5a      	adds	r2, r3, #1
 8003eba:	4613      	mov	r3, r2
 8003ebc:	009b      	lsls	r3, r3, #2
 8003ebe:	4413      	add	r3, r2
 8003ec0:	00db      	lsls	r3, r3, #3
 8003ec2:	68fa      	ldr	r2, [r7, #12]
 8003ec4:	4413      	add	r3, r2
 8003ec6:	617b      	str	r3, [r7, #20]
 8003ec8:	e009      	b.n	8003ede <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003eca:	897a      	ldrh	r2, [r7, #10]
 8003ecc:	4613      	mov	r3, r2
 8003ece:	009b      	lsls	r3, r3, #2
 8003ed0:	4413      	add	r3, r2
 8003ed2:	00db      	lsls	r3, r3, #3
 8003ed4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003ed8:	68fa      	ldr	r2, [r7, #12]
 8003eda:	4413      	add	r3, r2
 8003edc:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003ede:	893b      	ldrh	r3, [r7, #8]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d107      	bne.n	8003ef4 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	b29a      	uxth	r2, r3
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	80da      	strh	r2, [r3, #6]
 8003ef2:	e00b      	b.n	8003f0c <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	b29a      	uxth	r2, r3
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	0c1b      	lsrs	r3, r3, #16
 8003f06:	b29a      	uxth	r2, r3
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8003f0c:	2300      	movs	r3, #0
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	371c      	adds	r7, #28
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bc80      	pop	{r7}
 8003f16:	4770      	bx	lr

08003f18 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b086      	sub	sp, #24
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d101      	bne.n	8003f2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	e26c      	b.n	8004404 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f003 0301 	and.w	r3, r3, #1
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	f000 8087 	beq.w	8004046 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003f38:	4b92      	ldr	r3, [pc, #584]	; (8004184 <HAL_RCC_OscConfig+0x26c>)
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	f003 030c 	and.w	r3, r3, #12
 8003f40:	2b04      	cmp	r3, #4
 8003f42:	d00c      	beq.n	8003f5e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003f44:	4b8f      	ldr	r3, [pc, #572]	; (8004184 <HAL_RCC_OscConfig+0x26c>)
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	f003 030c 	and.w	r3, r3, #12
 8003f4c:	2b08      	cmp	r3, #8
 8003f4e:	d112      	bne.n	8003f76 <HAL_RCC_OscConfig+0x5e>
 8003f50:	4b8c      	ldr	r3, [pc, #560]	; (8004184 <HAL_RCC_OscConfig+0x26c>)
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f5c:	d10b      	bne.n	8003f76 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f5e:	4b89      	ldr	r3, [pc, #548]	; (8004184 <HAL_RCC_OscConfig+0x26c>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d06c      	beq.n	8004044 <HAL_RCC_OscConfig+0x12c>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d168      	bne.n	8004044 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e246      	b.n	8004404 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f7e:	d106      	bne.n	8003f8e <HAL_RCC_OscConfig+0x76>
 8003f80:	4b80      	ldr	r3, [pc, #512]	; (8004184 <HAL_RCC_OscConfig+0x26c>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a7f      	ldr	r2, [pc, #508]	; (8004184 <HAL_RCC_OscConfig+0x26c>)
 8003f86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f8a:	6013      	str	r3, [r2, #0]
 8003f8c:	e02e      	b.n	8003fec <HAL_RCC_OscConfig+0xd4>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d10c      	bne.n	8003fb0 <HAL_RCC_OscConfig+0x98>
 8003f96:	4b7b      	ldr	r3, [pc, #492]	; (8004184 <HAL_RCC_OscConfig+0x26c>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a7a      	ldr	r2, [pc, #488]	; (8004184 <HAL_RCC_OscConfig+0x26c>)
 8003f9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fa0:	6013      	str	r3, [r2, #0]
 8003fa2:	4b78      	ldr	r3, [pc, #480]	; (8004184 <HAL_RCC_OscConfig+0x26c>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a77      	ldr	r2, [pc, #476]	; (8004184 <HAL_RCC_OscConfig+0x26c>)
 8003fa8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fac:	6013      	str	r3, [r2, #0]
 8003fae:	e01d      	b.n	8003fec <HAL_RCC_OscConfig+0xd4>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003fb8:	d10c      	bne.n	8003fd4 <HAL_RCC_OscConfig+0xbc>
 8003fba:	4b72      	ldr	r3, [pc, #456]	; (8004184 <HAL_RCC_OscConfig+0x26c>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a71      	ldr	r2, [pc, #452]	; (8004184 <HAL_RCC_OscConfig+0x26c>)
 8003fc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003fc4:	6013      	str	r3, [r2, #0]
 8003fc6:	4b6f      	ldr	r3, [pc, #444]	; (8004184 <HAL_RCC_OscConfig+0x26c>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a6e      	ldr	r2, [pc, #440]	; (8004184 <HAL_RCC_OscConfig+0x26c>)
 8003fcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fd0:	6013      	str	r3, [r2, #0]
 8003fd2:	e00b      	b.n	8003fec <HAL_RCC_OscConfig+0xd4>
 8003fd4:	4b6b      	ldr	r3, [pc, #428]	; (8004184 <HAL_RCC_OscConfig+0x26c>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a6a      	ldr	r2, [pc, #424]	; (8004184 <HAL_RCC_OscConfig+0x26c>)
 8003fda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fde:	6013      	str	r3, [r2, #0]
 8003fe0:	4b68      	ldr	r3, [pc, #416]	; (8004184 <HAL_RCC_OscConfig+0x26c>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a67      	ldr	r2, [pc, #412]	; (8004184 <HAL_RCC_OscConfig+0x26c>)
 8003fe6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fea:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d013      	beq.n	800401c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ff4:	f7fd fb84 	bl	8001700 <HAL_GetTick>
 8003ff8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ffa:	e008      	b.n	800400e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ffc:	f7fd fb80 	bl	8001700 <HAL_GetTick>
 8004000:	4602      	mov	r2, r0
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	1ad3      	subs	r3, r2, r3
 8004006:	2b64      	cmp	r3, #100	; 0x64
 8004008:	d901      	bls.n	800400e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800400a:	2303      	movs	r3, #3
 800400c:	e1fa      	b.n	8004404 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800400e:	4b5d      	ldr	r3, [pc, #372]	; (8004184 <HAL_RCC_OscConfig+0x26c>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004016:	2b00      	cmp	r3, #0
 8004018:	d0f0      	beq.n	8003ffc <HAL_RCC_OscConfig+0xe4>
 800401a:	e014      	b.n	8004046 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800401c:	f7fd fb70 	bl	8001700 <HAL_GetTick>
 8004020:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004022:	e008      	b.n	8004036 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004024:	f7fd fb6c 	bl	8001700 <HAL_GetTick>
 8004028:	4602      	mov	r2, r0
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	1ad3      	subs	r3, r2, r3
 800402e:	2b64      	cmp	r3, #100	; 0x64
 8004030:	d901      	bls.n	8004036 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004032:	2303      	movs	r3, #3
 8004034:	e1e6      	b.n	8004404 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004036:	4b53      	ldr	r3, [pc, #332]	; (8004184 <HAL_RCC_OscConfig+0x26c>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800403e:	2b00      	cmp	r3, #0
 8004040:	d1f0      	bne.n	8004024 <HAL_RCC_OscConfig+0x10c>
 8004042:	e000      	b.n	8004046 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004044:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 0302 	and.w	r3, r3, #2
 800404e:	2b00      	cmp	r3, #0
 8004050:	d063      	beq.n	800411a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004052:	4b4c      	ldr	r3, [pc, #304]	; (8004184 <HAL_RCC_OscConfig+0x26c>)
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	f003 030c 	and.w	r3, r3, #12
 800405a:	2b00      	cmp	r3, #0
 800405c:	d00b      	beq.n	8004076 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800405e:	4b49      	ldr	r3, [pc, #292]	; (8004184 <HAL_RCC_OscConfig+0x26c>)
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	f003 030c 	and.w	r3, r3, #12
 8004066:	2b08      	cmp	r3, #8
 8004068:	d11c      	bne.n	80040a4 <HAL_RCC_OscConfig+0x18c>
 800406a:	4b46      	ldr	r3, [pc, #280]	; (8004184 <HAL_RCC_OscConfig+0x26c>)
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004072:	2b00      	cmp	r3, #0
 8004074:	d116      	bne.n	80040a4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004076:	4b43      	ldr	r3, [pc, #268]	; (8004184 <HAL_RCC_OscConfig+0x26c>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 0302 	and.w	r3, r3, #2
 800407e:	2b00      	cmp	r3, #0
 8004080:	d005      	beq.n	800408e <HAL_RCC_OscConfig+0x176>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	691b      	ldr	r3, [r3, #16]
 8004086:	2b01      	cmp	r3, #1
 8004088:	d001      	beq.n	800408e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	e1ba      	b.n	8004404 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800408e:	4b3d      	ldr	r3, [pc, #244]	; (8004184 <HAL_RCC_OscConfig+0x26c>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	695b      	ldr	r3, [r3, #20]
 800409a:	00db      	lsls	r3, r3, #3
 800409c:	4939      	ldr	r1, [pc, #228]	; (8004184 <HAL_RCC_OscConfig+0x26c>)
 800409e:	4313      	orrs	r3, r2
 80040a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040a2:	e03a      	b.n	800411a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	691b      	ldr	r3, [r3, #16]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d020      	beq.n	80040ee <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040ac:	4b36      	ldr	r3, [pc, #216]	; (8004188 <HAL_RCC_OscConfig+0x270>)
 80040ae:	2201      	movs	r2, #1
 80040b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040b2:	f7fd fb25 	bl	8001700 <HAL_GetTick>
 80040b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040b8:	e008      	b.n	80040cc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040ba:	f7fd fb21 	bl	8001700 <HAL_GetTick>
 80040be:	4602      	mov	r2, r0
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	1ad3      	subs	r3, r2, r3
 80040c4:	2b02      	cmp	r3, #2
 80040c6:	d901      	bls.n	80040cc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80040c8:	2303      	movs	r3, #3
 80040ca:	e19b      	b.n	8004404 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040cc:	4b2d      	ldr	r3, [pc, #180]	; (8004184 <HAL_RCC_OscConfig+0x26c>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f003 0302 	and.w	r3, r3, #2
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d0f0      	beq.n	80040ba <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040d8:	4b2a      	ldr	r3, [pc, #168]	; (8004184 <HAL_RCC_OscConfig+0x26c>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	695b      	ldr	r3, [r3, #20]
 80040e4:	00db      	lsls	r3, r3, #3
 80040e6:	4927      	ldr	r1, [pc, #156]	; (8004184 <HAL_RCC_OscConfig+0x26c>)
 80040e8:	4313      	orrs	r3, r2
 80040ea:	600b      	str	r3, [r1, #0]
 80040ec:	e015      	b.n	800411a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040ee:	4b26      	ldr	r3, [pc, #152]	; (8004188 <HAL_RCC_OscConfig+0x270>)
 80040f0:	2200      	movs	r2, #0
 80040f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040f4:	f7fd fb04 	bl	8001700 <HAL_GetTick>
 80040f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040fa:	e008      	b.n	800410e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040fc:	f7fd fb00 	bl	8001700 <HAL_GetTick>
 8004100:	4602      	mov	r2, r0
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	1ad3      	subs	r3, r2, r3
 8004106:	2b02      	cmp	r3, #2
 8004108:	d901      	bls.n	800410e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800410a:	2303      	movs	r3, #3
 800410c:	e17a      	b.n	8004404 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800410e:	4b1d      	ldr	r3, [pc, #116]	; (8004184 <HAL_RCC_OscConfig+0x26c>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f003 0302 	and.w	r3, r3, #2
 8004116:	2b00      	cmp	r3, #0
 8004118:	d1f0      	bne.n	80040fc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 0308 	and.w	r3, r3, #8
 8004122:	2b00      	cmp	r3, #0
 8004124:	d03a      	beq.n	800419c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	699b      	ldr	r3, [r3, #24]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d019      	beq.n	8004162 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800412e:	4b17      	ldr	r3, [pc, #92]	; (800418c <HAL_RCC_OscConfig+0x274>)
 8004130:	2201      	movs	r2, #1
 8004132:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004134:	f7fd fae4 	bl	8001700 <HAL_GetTick>
 8004138:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800413a:	e008      	b.n	800414e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800413c:	f7fd fae0 	bl	8001700 <HAL_GetTick>
 8004140:	4602      	mov	r2, r0
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	1ad3      	subs	r3, r2, r3
 8004146:	2b02      	cmp	r3, #2
 8004148:	d901      	bls.n	800414e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800414a:	2303      	movs	r3, #3
 800414c:	e15a      	b.n	8004404 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800414e:	4b0d      	ldr	r3, [pc, #52]	; (8004184 <HAL_RCC_OscConfig+0x26c>)
 8004150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004152:	f003 0302 	and.w	r3, r3, #2
 8004156:	2b00      	cmp	r3, #0
 8004158:	d0f0      	beq.n	800413c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800415a:	2001      	movs	r0, #1
 800415c:	f000 fac4 	bl	80046e8 <RCC_Delay>
 8004160:	e01c      	b.n	800419c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004162:	4b0a      	ldr	r3, [pc, #40]	; (800418c <HAL_RCC_OscConfig+0x274>)
 8004164:	2200      	movs	r2, #0
 8004166:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004168:	f7fd faca 	bl	8001700 <HAL_GetTick>
 800416c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800416e:	e00f      	b.n	8004190 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004170:	f7fd fac6 	bl	8001700 <HAL_GetTick>
 8004174:	4602      	mov	r2, r0
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	1ad3      	subs	r3, r2, r3
 800417a:	2b02      	cmp	r3, #2
 800417c:	d908      	bls.n	8004190 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800417e:	2303      	movs	r3, #3
 8004180:	e140      	b.n	8004404 <HAL_RCC_OscConfig+0x4ec>
 8004182:	bf00      	nop
 8004184:	40021000 	.word	0x40021000
 8004188:	42420000 	.word	0x42420000
 800418c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004190:	4b9e      	ldr	r3, [pc, #632]	; (800440c <HAL_RCC_OscConfig+0x4f4>)
 8004192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004194:	f003 0302 	and.w	r3, r3, #2
 8004198:	2b00      	cmp	r3, #0
 800419a:	d1e9      	bne.n	8004170 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f003 0304 	and.w	r3, r3, #4
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	f000 80a6 	beq.w	80042f6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041aa:	2300      	movs	r3, #0
 80041ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041ae:	4b97      	ldr	r3, [pc, #604]	; (800440c <HAL_RCC_OscConfig+0x4f4>)
 80041b0:	69db      	ldr	r3, [r3, #28]
 80041b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d10d      	bne.n	80041d6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041ba:	4b94      	ldr	r3, [pc, #592]	; (800440c <HAL_RCC_OscConfig+0x4f4>)
 80041bc:	69db      	ldr	r3, [r3, #28]
 80041be:	4a93      	ldr	r2, [pc, #588]	; (800440c <HAL_RCC_OscConfig+0x4f4>)
 80041c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041c4:	61d3      	str	r3, [r2, #28]
 80041c6:	4b91      	ldr	r3, [pc, #580]	; (800440c <HAL_RCC_OscConfig+0x4f4>)
 80041c8:	69db      	ldr	r3, [r3, #28]
 80041ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041ce:	60bb      	str	r3, [r7, #8]
 80041d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041d2:	2301      	movs	r3, #1
 80041d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041d6:	4b8e      	ldr	r3, [pc, #568]	; (8004410 <HAL_RCC_OscConfig+0x4f8>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d118      	bne.n	8004214 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041e2:	4b8b      	ldr	r3, [pc, #556]	; (8004410 <HAL_RCC_OscConfig+0x4f8>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a8a      	ldr	r2, [pc, #552]	; (8004410 <HAL_RCC_OscConfig+0x4f8>)
 80041e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041ee:	f7fd fa87 	bl	8001700 <HAL_GetTick>
 80041f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041f4:	e008      	b.n	8004208 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041f6:	f7fd fa83 	bl	8001700 <HAL_GetTick>
 80041fa:	4602      	mov	r2, r0
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	1ad3      	subs	r3, r2, r3
 8004200:	2b64      	cmp	r3, #100	; 0x64
 8004202:	d901      	bls.n	8004208 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004204:	2303      	movs	r3, #3
 8004206:	e0fd      	b.n	8004404 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004208:	4b81      	ldr	r3, [pc, #516]	; (8004410 <HAL_RCC_OscConfig+0x4f8>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004210:	2b00      	cmp	r3, #0
 8004212:	d0f0      	beq.n	80041f6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	68db      	ldr	r3, [r3, #12]
 8004218:	2b01      	cmp	r3, #1
 800421a:	d106      	bne.n	800422a <HAL_RCC_OscConfig+0x312>
 800421c:	4b7b      	ldr	r3, [pc, #492]	; (800440c <HAL_RCC_OscConfig+0x4f4>)
 800421e:	6a1b      	ldr	r3, [r3, #32]
 8004220:	4a7a      	ldr	r2, [pc, #488]	; (800440c <HAL_RCC_OscConfig+0x4f4>)
 8004222:	f043 0301 	orr.w	r3, r3, #1
 8004226:	6213      	str	r3, [r2, #32]
 8004228:	e02d      	b.n	8004286 <HAL_RCC_OscConfig+0x36e>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	68db      	ldr	r3, [r3, #12]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d10c      	bne.n	800424c <HAL_RCC_OscConfig+0x334>
 8004232:	4b76      	ldr	r3, [pc, #472]	; (800440c <HAL_RCC_OscConfig+0x4f4>)
 8004234:	6a1b      	ldr	r3, [r3, #32]
 8004236:	4a75      	ldr	r2, [pc, #468]	; (800440c <HAL_RCC_OscConfig+0x4f4>)
 8004238:	f023 0301 	bic.w	r3, r3, #1
 800423c:	6213      	str	r3, [r2, #32]
 800423e:	4b73      	ldr	r3, [pc, #460]	; (800440c <HAL_RCC_OscConfig+0x4f4>)
 8004240:	6a1b      	ldr	r3, [r3, #32]
 8004242:	4a72      	ldr	r2, [pc, #456]	; (800440c <HAL_RCC_OscConfig+0x4f4>)
 8004244:	f023 0304 	bic.w	r3, r3, #4
 8004248:	6213      	str	r3, [r2, #32]
 800424a:	e01c      	b.n	8004286 <HAL_RCC_OscConfig+0x36e>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	68db      	ldr	r3, [r3, #12]
 8004250:	2b05      	cmp	r3, #5
 8004252:	d10c      	bne.n	800426e <HAL_RCC_OscConfig+0x356>
 8004254:	4b6d      	ldr	r3, [pc, #436]	; (800440c <HAL_RCC_OscConfig+0x4f4>)
 8004256:	6a1b      	ldr	r3, [r3, #32]
 8004258:	4a6c      	ldr	r2, [pc, #432]	; (800440c <HAL_RCC_OscConfig+0x4f4>)
 800425a:	f043 0304 	orr.w	r3, r3, #4
 800425e:	6213      	str	r3, [r2, #32]
 8004260:	4b6a      	ldr	r3, [pc, #424]	; (800440c <HAL_RCC_OscConfig+0x4f4>)
 8004262:	6a1b      	ldr	r3, [r3, #32]
 8004264:	4a69      	ldr	r2, [pc, #420]	; (800440c <HAL_RCC_OscConfig+0x4f4>)
 8004266:	f043 0301 	orr.w	r3, r3, #1
 800426a:	6213      	str	r3, [r2, #32]
 800426c:	e00b      	b.n	8004286 <HAL_RCC_OscConfig+0x36e>
 800426e:	4b67      	ldr	r3, [pc, #412]	; (800440c <HAL_RCC_OscConfig+0x4f4>)
 8004270:	6a1b      	ldr	r3, [r3, #32]
 8004272:	4a66      	ldr	r2, [pc, #408]	; (800440c <HAL_RCC_OscConfig+0x4f4>)
 8004274:	f023 0301 	bic.w	r3, r3, #1
 8004278:	6213      	str	r3, [r2, #32]
 800427a:	4b64      	ldr	r3, [pc, #400]	; (800440c <HAL_RCC_OscConfig+0x4f4>)
 800427c:	6a1b      	ldr	r3, [r3, #32]
 800427e:	4a63      	ldr	r2, [pc, #396]	; (800440c <HAL_RCC_OscConfig+0x4f4>)
 8004280:	f023 0304 	bic.w	r3, r3, #4
 8004284:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	68db      	ldr	r3, [r3, #12]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d015      	beq.n	80042ba <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800428e:	f7fd fa37 	bl	8001700 <HAL_GetTick>
 8004292:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004294:	e00a      	b.n	80042ac <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004296:	f7fd fa33 	bl	8001700 <HAL_GetTick>
 800429a:	4602      	mov	r2, r0
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	1ad3      	subs	r3, r2, r3
 80042a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d901      	bls.n	80042ac <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80042a8:	2303      	movs	r3, #3
 80042aa:	e0ab      	b.n	8004404 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042ac:	4b57      	ldr	r3, [pc, #348]	; (800440c <HAL_RCC_OscConfig+0x4f4>)
 80042ae:	6a1b      	ldr	r3, [r3, #32]
 80042b0:	f003 0302 	and.w	r3, r3, #2
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d0ee      	beq.n	8004296 <HAL_RCC_OscConfig+0x37e>
 80042b8:	e014      	b.n	80042e4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042ba:	f7fd fa21 	bl	8001700 <HAL_GetTick>
 80042be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042c0:	e00a      	b.n	80042d8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042c2:	f7fd fa1d 	bl	8001700 <HAL_GetTick>
 80042c6:	4602      	mov	r2, r0
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	1ad3      	subs	r3, r2, r3
 80042cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d901      	bls.n	80042d8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80042d4:	2303      	movs	r3, #3
 80042d6:	e095      	b.n	8004404 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042d8:	4b4c      	ldr	r3, [pc, #304]	; (800440c <HAL_RCC_OscConfig+0x4f4>)
 80042da:	6a1b      	ldr	r3, [r3, #32]
 80042dc:	f003 0302 	and.w	r3, r3, #2
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d1ee      	bne.n	80042c2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80042e4:	7dfb      	ldrb	r3, [r7, #23]
 80042e6:	2b01      	cmp	r3, #1
 80042e8:	d105      	bne.n	80042f6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042ea:	4b48      	ldr	r3, [pc, #288]	; (800440c <HAL_RCC_OscConfig+0x4f4>)
 80042ec:	69db      	ldr	r3, [r3, #28]
 80042ee:	4a47      	ldr	r2, [pc, #284]	; (800440c <HAL_RCC_OscConfig+0x4f4>)
 80042f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042f4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	69db      	ldr	r3, [r3, #28]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	f000 8081 	beq.w	8004402 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004300:	4b42      	ldr	r3, [pc, #264]	; (800440c <HAL_RCC_OscConfig+0x4f4>)
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	f003 030c 	and.w	r3, r3, #12
 8004308:	2b08      	cmp	r3, #8
 800430a:	d061      	beq.n	80043d0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	69db      	ldr	r3, [r3, #28]
 8004310:	2b02      	cmp	r3, #2
 8004312:	d146      	bne.n	80043a2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004314:	4b3f      	ldr	r3, [pc, #252]	; (8004414 <HAL_RCC_OscConfig+0x4fc>)
 8004316:	2200      	movs	r2, #0
 8004318:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800431a:	f7fd f9f1 	bl	8001700 <HAL_GetTick>
 800431e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004320:	e008      	b.n	8004334 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004322:	f7fd f9ed 	bl	8001700 <HAL_GetTick>
 8004326:	4602      	mov	r2, r0
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	1ad3      	subs	r3, r2, r3
 800432c:	2b02      	cmp	r3, #2
 800432e:	d901      	bls.n	8004334 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004330:	2303      	movs	r3, #3
 8004332:	e067      	b.n	8004404 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004334:	4b35      	ldr	r3, [pc, #212]	; (800440c <HAL_RCC_OscConfig+0x4f4>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800433c:	2b00      	cmp	r3, #0
 800433e:	d1f0      	bne.n	8004322 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6a1b      	ldr	r3, [r3, #32]
 8004344:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004348:	d108      	bne.n	800435c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800434a:	4b30      	ldr	r3, [pc, #192]	; (800440c <HAL_RCC_OscConfig+0x4f4>)
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	492d      	ldr	r1, [pc, #180]	; (800440c <HAL_RCC_OscConfig+0x4f4>)
 8004358:	4313      	orrs	r3, r2
 800435a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800435c:	4b2b      	ldr	r3, [pc, #172]	; (800440c <HAL_RCC_OscConfig+0x4f4>)
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6a19      	ldr	r1, [r3, #32]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800436c:	430b      	orrs	r3, r1
 800436e:	4927      	ldr	r1, [pc, #156]	; (800440c <HAL_RCC_OscConfig+0x4f4>)
 8004370:	4313      	orrs	r3, r2
 8004372:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004374:	4b27      	ldr	r3, [pc, #156]	; (8004414 <HAL_RCC_OscConfig+0x4fc>)
 8004376:	2201      	movs	r2, #1
 8004378:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800437a:	f7fd f9c1 	bl	8001700 <HAL_GetTick>
 800437e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004380:	e008      	b.n	8004394 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004382:	f7fd f9bd 	bl	8001700 <HAL_GetTick>
 8004386:	4602      	mov	r2, r0
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	1ad3      	subs	r3, r2, r3
 800438c:	2b02      	cmp	r3, #2
 800438e:	d901      	bls.n	8004394 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004390:	2303      	movs	r3, #3
 8004392:	e037      	b.n	8004404 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004394:	4b1d      	ldr	r3, [pc, #116]	; (800440c <HAL_RCC_OscConfig+0x4f4>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800439c:	2b00      	cmp	r3, #0
 800439e:	d0f0      	beq.n	8004382 <HAL_RCC_OscConfig+0x46a>
 80043a0:	e02f      	b.n	8004402 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043a2:	4b1c      	ldr	r3, [pc, #112]	; (8004414 <HAL_RCC_OscConfig+0x4fc>)
 80043a4:	2200      	movs	r2, #0
 80043a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043a8:	f7fd f9aa 	bl	8001700 <HAL_GetTick>
 80043ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80043ae:	e008      	b.n	80043c2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043b0:	f7fd f9a6 	bl	8001700 <HAL_GetTick>
 80043b4:	4602      	mov	r2, r0
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	1ad3      	subs	r3, r2, r3
 80043ba:	2b02      	cmp	r3, #2
 80043bc:	d901      	bls.n	80043c2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80043be:	2303      	movs	r3, #3
 80043c0:	e020      	b.n	8004404 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80043c2:	4b12      	ldr	r3, [pc, #72]	; (800440c <HAL_RCC_OscConfig+0x4f4>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d1f0      	bne.n	80043b0 <HAL_RCC_OscConfig+0x498>
 80043ce:	e018      	b.n	8004402 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	69db      	ldr	r3, [r3, #28]
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d101      	bne.n	80043dc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80043d8:	2301      	movs	r3, #1
 80043da:	e013      	b.n	8004404 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80043dc:	4b0b      	ldr	r3, [pc, #44]	; (800440c <HAL_RCC_OscConfig+0x4f4>)
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6a1b      	ldr	r3, [r3, #32]
 80043ec:	429a      	cmp	r2, r3
 80043ee:	d106      	bne.n	80043fe <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043fa:	429a      	cmp	r2, r3
 80043fc:	d001      	beq.n	8004402 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80043fe:	2301      	movs	r3, #1
 8004400:	e000      	b.n	8004404 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8004402:	2300      	movs	r3, #0
}
 8004404:	4618      	mov	r0, r3
 8004406:	3718      	adds	r7, #24
 8004408:	46bd      	mov	sp, r7
 800440a:	bd80      	pop	{r7, pc}
 800440c:	40021000 	.word	0x40021000
 8004410:	40007000 	.word	0x40007000
 8004414:	42420060 	.word	0x42420060

08004418 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b084      	sub	sp, #16
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
 8004420:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d101      	bne.n	800442c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004428:	2301      	movs	r3, #1
 800442a:	e0d0      	b.n	80045ce <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800442c:	4b6a      	ldr	r3, [pc, #424]	; (80045d8 <HAL_RCC_ClockConfig+0x1c0>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f003 0307 	and.w	r3, r3, #7
 8004434:	683a      	ldr	r2, [r7, #0]
 8004436:	429a      	cmp	r2, r3
 8004438:	d910      	bls.n	800445c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800443a:	4b67      	ldr	r3, [pc, #412]	; (80045d8 <HAL_RCC_ClockConfig+0x1c0>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f023 0207 	bic.w	r2, r3, #7
 8004442:	4965      	ldr	r1, [pc, #404]	; (80045d8 <HAL_RCC_ClockConfig+0x1c0>)
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	4313      	orrs	r3, r2
 8004448:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800444a:	4b63      	ldr	r3, [pc, #396]	; (80045d8 <HAL_RCC_ClockConfig+0x1c0>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f003 0307 	and.w	r3, r3, #7
 8004452:	683a      	ldr	r2, [r7, #0]
 8004454:	429a      	cmp	r2, r3
 8004456:	d001      	beq.n	800445c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004458:	2301      	movs	r3, #1
 800445a:	e0b8      	b.n	80045ce <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f003 0302 	and.w	r3, r3, #2
 8004464:	2b00      	cmp	r3, #0
 8004466:	d020      	beq.n	80044aa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 0304 	and.w	r3, r3, #4
 8004470:	2b00      	cmp	r3, #0
 8004472:	d005      	beq.n	8004480 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004474:	4b59      	ldr	r3, [pc, #356]	; (80045dc <HAL_RCC_ClockConfig+0x1c4>)
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	4a58      	ldr	r2, [pc, #352]	; (80045dc <HAL_RCC_ClockConfig+0x1c4>)
 800447a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800447e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f003 0308 	and.w	r3, r3, #8
 8004488:	2b00      	cmp	r3, #0
 800448a:	d005      	beq.n	8004498 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800448c:	4b53      	ldr	r3, [pc, #332]	; (80045dc <HAL_RCC_ClockConfig+0x1c4>)
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	4a52      	ldr	r2, [pc, #328]	; (80045dc <HAL_RCC_ClockConfig+0x1c4>)
 8004492:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004496:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004498:	4b50      	ldr	r3, [pc, #320]	; (80045dc <HAL_RCC_ClockConfig+0x1c4>)
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	494d      	ldr	r1, [pc, #308]	; (80045dc <HAL_RCC_ClockConfig+0x1c4>)
 80044a6:	4313      	orrs	r3, r2
 80044a8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f003 0301 	and.w	r3, r3, #1
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d040      	beq.n	8004538 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d107      	bne.n	80044ce <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044be:	4b47      	ldr	r3, [pc, #284]	; (80045dc <HAL_RCC_ClockConfig+0x1c4>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d115      	bne.n	80044f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	e07f      	b.n	80045ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	2b02      	cmp	r3, #2
 80044d4:	d107      	bne.n	80044e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044d6:	4b41      	ldr	r3, [pc, #260]	; (80045dc <HAL_RCC_ClockConfig+0x1c4>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d109      	bne.n	80044f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	e073      	b.n	80045ce <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044e6:	4b3d      	ldr	r3, [pc, #244]	; (80045dc <HAL_RCC_ClockConfig+0x1c4>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f003 0302 	and.w	r3, r3, #2
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d101      	bne.n	80044f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	e06b      	b.n	80045ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80044f6:	4b39      	ldr	r3, [pc, #228]	; (80045dc <HAL_RCC_ClockConfig+0x1c4>)
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	f023 0203 	bic.w	r2, r3, #3
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	4936      	ldr	r1, [pc, #216]	; (80045dc <HAL_RCC_ClockConfig+0x1c4>)
 8004504:	4313      	orrs	r3, r2
 8004506:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004508:	f7fd f8fa 	bl	8001700 <HAL_GetTick>
 800450c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800450e:	e00a      	b.n	8004526 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004510:	f7fd f8f6 	bl	8001700 <HAL_GetTick>
 8004514:	4602      	mov	r2, r0
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	1ad3      	subs	r3, r2, r3
 800451a:	f241 3288 	movw	r2, #5000	; 0x1388
 800451e:	4293      	cmp	r3, r2
 8004520:	d901      	bls.n	8004526 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004522:	2303      	movs	r3, #3
 8004524:	e053      	b.n	80045ce <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004526:	4b2d      	ldr	r3, [pc, #180]	; (80045dc <HAL_RCC_ClockConfig+0x1c4>)
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	f003 020c 	and.w	r2, r3, #12
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	009b      	lsls	r3, r3, #2
 8004534:	429a      	cmp	r2, r3
 8004536:	d1eb      	bne.n	8004510 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004538:	4b27      	ldr	r3, [pc, #156]	; (80045d8 <HAL_RCC_ClockConfig+0x1c0>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f003 0307 	and.w	r3, r3, #7
 8004540:	683a      	ldr	r2, [r7, #0]
 8004542:	429a      	cmp	r2, r3
 8004544:	d210      	bcs.n	8004568 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004546:	4b24      	ldr	r3, [pc, #144]	; (80045d8 <HAL_RCC_ClockConfig+0x1c0>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f023 0207 	bic.w	r2, r3, #7
 800454e:	4922      	ldr	r1, [pc, #136]	; (80045d8 <HAL_RCC_ClockConfig+0x1c0>)
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	4313      	orrs	r3, r2
 8004554:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004556:	4b20      	ldr	r3, [pc, #128]	; (80045d8 <HAL_RCC_ClockConfig+0x1c0>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 0307 	and.w	r3, r3, #7
 800455e:	683a      	ldr	r2, [r7, #0]
 8004560:	429a      	cmp	r2, r3
 8004562:	d001      	beq.n	8004568 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004564:	2301      	movs	r3, #1
 8004566:	e032      	b.n	80045ce <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f003 0304 	and.w	r3, r3, #4
 8004570:	2b00      	cmp	r3, #0
 8004572:	d008      	beq.n	8004586 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004574:	4b19      	ldr	r3, [pc, #100]	; (80045dc <HAL_RCC_ClockConfig+0x1c4>)
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	68db      	ldr	r3, [r3, #12]
 8004580:	4916      	ldr	r1, [pc, #88]	; (80045dc <HAL_RCC_ClockConfig+0x1c4>)
 8004582:	4313      	orrs	r3, r2
 8004584:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f003 0308 	and.w	r3, r3, #8
 800458e:	2b00      	cmp	r3, #0
 8004590:	d009      	beq.n	80045a6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004592:	4b12      	ldr	r3, [pc, #72]	; (80045dc <HAL_RCC_ClockConfig+0x1c4>)
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	691b      	ldr	r3, [r3, #16]
 800459e:	00db      	lsls	r3, r3, #3
 80045a0:	490e      	ldr	r1, [pc, #56]	; (80045dc <HAL_RCC_ClockConfig+0x1c4>)
 80045a2:	4313      	orrs	r3, r2
 80045a4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80045a6:	f000 f821 	bl	80045ec <HAL_RCC_GetSysClockFreq>
 80045aa:	4602      	mov	r2, r0
 80045ac:	4b0b      	ldr	r3, [pc, #44]	; (80045dc <HAL_RCC_ClockConfig+0x1c4>)
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	091b      	lsrs	r3, r3, #4
 80045b2:	f003 030f 	and.w	r3, r3, #15
 80045b6:	490a      	ldr	r1, [pc, #40]	; (80045e0 <HAL_RCC_ClockConfig+0x1c8>)
 80045b8:	5ccb      	ldrb	r3, [r1, r3]
 80045ba:	fa22 f303 	lsr.w	r3, r2, r3
 80045be:	4a09      	ldr	r2, [pc, #36]	; (80045e4 <HAL_RCC_ClockConfig+0x1cc>)
 80045c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80045c2:	4b09      	ldr	r3, [pc, #36]	; (80045e8 <HAL_RCC_ClockConfig+0x1d0>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4618      	mov	r0, r3
 80045c8:	f7fd f858 	bl	800167c <HAL_InitTick>

  return HAL_OK;
 80045cc:	2300      	movs	r3, #0
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	3710      	adds	r7, #16
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}
 80045d6:	bf00      	nop
 80045d8:	40022000 	.word	0x40022000
 80045dc:	40021000 	.word	0x40021000
 80045e0:	08009908 	.word	0x08009908
 80045e4:	2000009c 	.word	0x2000009c
 80045e8:	200000a0 	.word	0x200000a0

080045ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045ec:	b490      	push	{r4, r7}
 80045ee:	b08a      	sub	sp, #40	; 0x28
 80045f0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80045f2:	4b2a      	ldr	r3, [pc, #168]	; (800469c <HAL_RCC_GetSysClockFreq+0xb0>)
 80045f4:	1d3c      	adds	r4, r7, #4
 80045f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80045f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80045fc:	f240 2301 	movw	r3, #513	; 0x201
 8004600:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004602:	2300      	movs	r3, #0
 8004604:	61fb      	str	r3, [r7, #28]
 8004606:	2300      	movs	r3, #0
 8004608:	61bb      	str	r3, [r7, #24]
 800460a:	2300      	movs	r3, #0
 800460c:	627b      	str	r3, [r7, #36]	; 0x24
 800460e:	2300      	movs	r3, #0
 8004610:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004612:	2300      	movs	r3, #0
 8004614:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004616:	4b22      	ldr	r3, [pc, #136]	; (80046a0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800461c:	69fb      	ldr	r3, [r7, #28]
 800461e:	f003 030c 	and.w	r3, r3, #12
 8004622:	2b04      	cmp	r3, #4
 8004624:	d002      	beq.n	800462c <HAL_RCC_GetSysClockFreq+0x40>
 8004626:	2b08      	cmp	r3, #8
 8004628:	d003      	beq.n	8004632 <HAL_RCC_GetSysClockFreq+0x46>
 800462a:	e02d      	b.n	8004688 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800462c:	4b1d      	ldr	r3, [pc, #116]	; (80046a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800462e:	623b      	str	r3, [r7, #32]
      break;
 8004630:	e02d      	b.n	800468e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004632:	69fb      	ldr	r3, [r7, #28]
 8004634:	0c9b      	lsrs	r3, r3, #18
 8004636:	f003 030f 	and.w	r3, r3, #15
 800463a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800463e:	4413      	add	r3, r2
 8004640:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004644:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004646:	69fb      	ldr	r3, [r7, #28]
 8004648:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800464c:	2b00      	cmp	r3, #0
 800464e:	d013      	beq.n	8004678 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004650:	4b13      	ldr	r3, [pc, #76]	; (80046a0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	0c5b      	lsrs	r3, r3, #17
 8004656:	f003 0301 	and.w	r3, r3, #1
 800465a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800465e:	4413      	add	r3, r2
 8004660:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004664:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	4a0e      	ldr	r2, [pc, #56]	; (80046a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800466a:	fb02 f203 	mul.w	r2, r2, r3
 800466e:	69bb      	ldr	r3, [r7, #24]
 8004670:	fbb2 f3f3 	udiv	r3, r2, r3
 8004674:	627b      	str	r3, [r7, #36]	; 0x24
 8004676:	e004      	b.n	8004682 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	4a0b      	ldr	r2, [pc, #44]	; (80046a8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800467c:	fb02 f303 	mul.w	r3, r2, r3
 8004680:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004684:	623b      	str	r3, [r7, #32]
      break;
 8004686:	e002      	b.n	800468e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004688:	4b06      	ldr	r3, [pc, #24]	; (80046a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800468a:	623b      	str	r3, [r7, #32]
      break;
 800468c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800468e:	6a3b      	ldr	r3, [r7, #32]
}
 8004690:	4618      	mov	r0, r3
 8004692:	3728      	adds	r7, #40	; 0x28
 8004694:	46bd      	mov	sp, r7
 8004696:	bc90      	pop	{r4, r7}
 8004698:	4770      	bx	lr
 800469a:	bf00      	nop
 800469c:	080098a0 	.word	0x080098a0
 80046a0:	40021000 	.word	0x40021000
 80046a4:	007a1200 	.word	0x007a1200
 80046a8:	003d0900 	.word	0x003d0900

080046ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046ac:	b480      	push	{r7}
 80046ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80046b0:	4b02      	ldr	r3, [pc, #8]	; (80046bc <HAL_RCC_GetHCLKFreq+0x10>)
 80046b2:	681b      	ldr	r3, [r3, #0]
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bc80      	pop	{r7}
 80046ba:	4770      	bx	lr
 80046bc:	2000009c 	.word	0x2000009c

080046c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80046c4:	f7ff fff2 	bl	80046ac <HAL_RCC_GetHCLKFreq>
 80046c8:	4602      	mov	r2, r0
 80046ca:	4b05      	ldr	r3, [pc, #20]	; (80046e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	0adb      	lsrs	r3, r3, #11
 80046d0:	f003 0307 	and.w	r3, r3, #7
 80046d4:	4903      	ldr	r1, [pc, #12]	; (80046e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80046d6:	5ccb      	ldrb	r3, [r1, r3]
 80046d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046dc:	4618      	mov	r0, r3
 80046de:	bd80      	pop	{r7, pc}
 80046e0:	40021000 	.word	0x40021000
 80046e4:	08009918 	.word	0x08009918

080046e8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b085      	sub	sp, #20
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80046f0:	4b0a      	ldr	r3, [pc, #40]	; (800471c <RCC_Delay+0x34>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a0a      	ldr	r2, [pc, #40]	; (8004720 <RCC_Delay+0x38>)
 80046f6:	fba2 2303 	umull	r2, r3, r2, r3
 80046fa:	0a5b      	lsrs	r3, r3, #9
 80046fc:	687a      	ldr	r2, [r7, #4]
 80046fe:	fb02 f303 	mul.w	r3, r2, r3
 8004702:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004704:	bf00      	nop
  }
  while (Delay --);
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	1e5a      	subs	r2, r3, #1
 800470a:	60fa      	str	r2, [r7, #12]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d1f9      	bne.n	8004704 <RCC_Delay+0x1c>
}
 8004710:	bf00      	nop
 8004712:	bf00      	nop
 8004714:	3714      	adds	r7, #20
 8004716:	46bd      	mov	sp, r7
 8004718:	bc80      	pop	{r7}
 800471a:	4770      	bx	lr
 800471c:	2000009c 	.word	0x2000009c
 8004720:	10624dd3 	.word	0x10624dd3

08004724 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b086      	sub	sp, #24
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800472c:	2300      	movs	r3, #0
 800472e:	613b      	str	r3, [r7, #16]
 8004730:	2300      	movs	r3, #0
 8004732:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f003 0301 	and.w	r3, r3, #1
 800473c:	2b00      	cmp	r3, #0
 800473e:	d07d      	beq.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004740:	2300      	movs	r3, #0
 8004742:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004744:	4b4f      	ldr	r3, [pc, #316]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004746:	69db      	ldr	r3, [r3, #28]
 8004748:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800474c:	2b00      	cmp	r3, #0
 800474e:	d10d      	bne.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004750:	4b4c      	ldr	r3, [pc, #304]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004752:	69db      	ldr	r3, [r3, #28]
 8004754:	4a4b      	ldr	r2, [pc, #300]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004756:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800475a:	61d3      	str	r3, [r2, #28]
 800475c:	4b49      	ldr	r3, [pc, #292]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800475e:	69db      	ldr	r3, [r3, #28]
 8004760:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004764:	60bb      	str	r3, [r7, #8]
 8004766:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004768:	2301      	movs	r3, #1
 800476a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800476c:	4b46      	ldr	r3, [pc, #280]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004774:	2b00      	cmp	r3, #0
 8004776:	d118      	bne.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004778:	4b43      	ldr	r3, [pc, #268]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a42      	ldr	r2, [pc, #264]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800477e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004782:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004784:	f7fc ffbc 	bl	8001700 <HAL_GetTick>
 8004788:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800478a:	e008      	b.n	800479e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800478c:	f7fc ffb8 	bl	8001700 <HAL_GetTick>
 8004790:	4602      	mov	r2, r0
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	1ad3      	subs	r3, r2, r3
 8004796:	2b64      	cmp	r3, #100	; 0x64
 8004798:	d901      	bls.n	800479e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800479a:	2303      	movs	r3, #3
 800479c:	e06d      	b.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800479e:	4b3a      	ldr	r3, [pc, #232]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d0f0      	beq.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80047aa:	4b36      	ldr	r3, [pc, #216]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047ac:	6a1b      	ldr	r3, [r3, #32]
 80047ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047b2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d02e      	beq.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047c2:	68fa      	ldr	r2, [r7, #12]
 80047c4:	429a      	cmp	r2, r3
 80047c6:	d027      	beq.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80047c8:	4b2e      	ldr	r3, [pc, #184]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047ca:	6a1b      	ldr	r3, [r3, #32]
 80047cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047d0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80047d2:	4b2e      	ldr	r3, [pc, #184]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80047d4:	2201      	movs	r2, #1
 80047d6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80047d8:	4b2c      	ldr	r3, [pc, #176]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80047da:	2200      	movs	r2, #0
 80047dc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80047de:	4a29      	ldr	r2, [pc, #164]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	f003 0301 	and.w	r3, r3, #1
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d014      	beq.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047ee:	f7fc ff87 	bl	8001700 <HAL_GetTick>
 80047f2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047f4:	e00a      	b.n	800480c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047f6:	f7fc ff83 	bl	8001700 <HAL_GetTick>
 80047fa:	4602      	mov	r2, r0
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	1ad3      	subs	r3, r2, r3
 8004800:	f241 3288 	movw	r2, #5000	; 0x1388
 8004804:	4293      	cmp	r3, r2
 8004806:	d901      	bls.n	800480c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004808:	2303      	movs	r3, #3
 800480a:	e036      	b.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800480c:	4b1d      	ldr	r3, [pc, #116]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800480e:	6a1b      	ldr	r3, [r3, #32]
 8004810:	f003 0302 	and.w	r3, r3, #2
 8004814:	2b00      	cmp	r3, #0
 8004816:	d0ee      	beq.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004818:	4b1a      	ldr	r3, [pc, #104]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800481a:	6a1b      	ldr	r3, [r3, #32]
 800481c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	4917      	ldr	r1, [pc, #92]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004826:	4313      	orrs	r3, r2
 8004828:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800482a:	7dfb      	ldrb	r3, [r7, #23]
 800482c:	2b01      	cmp	r3, #1
 800482e:	d105      	bne.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004830:	4b14      	ldr	r3, [pc, #80]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004832:	69db      	ldr	r3, [r3, #28]
 8004834:	4a13      	ldr	r2, [pc, #76]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004836:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800483a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f003 0302 	and.w	r3, r3, #2
 8004844:	2b00      	cmp	r3, #0
 8004846:	d008      	beq.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004848:	4b0e      	ldr	r3, [pc, #56]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	490b      	ldr	r1, [pc, #44]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004856:	4313      	orrs	r3, r2
 8004858:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f003 0310 	and.w	r3, r3, #16
 8004862:	2b00      	cmp	r3, #0
 8004864:	d008      	beq.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004866:	4b07      	ldr	r3, [pc, #28]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	68db      	ldr	r3, [r3, #12]
 8004872:	4904      	ldr	r1, [pc, #16]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004874:	4313      	orrs	r3, r2
 8004876:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004878:	2300      	movs	r3, #0
}
 800487a:	4618      	mov	r0, r3
 800487c:	3718      	adds	r7, #24
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}
 8004882:	bf00      	nop
 8004884:	40021000 	.word	0x40021000
 8004888:	40007000 	.word	0x40007000
 800488c:	42420440 	.word	0x42420440

08004890 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004890:	b590      	push	{r4, r7, lr}
 8004892:	b08d      	sub	sp, #52	; 0x34
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004898:	4b5a      	ldr	r3, [pc, #360]	; (8004a04 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 800489a:	f107 040c 	add.w	r4, r7, #12
 800489e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80048a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80048a4:	f240 2301 	movw	r3, #513	; 0x201
 80048a8:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80048aa:	2300      	movs	r3, #0
 80048ac:	627b      	str	r3, [r7, #36]	; 0x24
 80048ae:	2300      	movs	r3, #0
 80048b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048b2:	2300      	movs	r3, #0
 80048b4:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80048b6:	2300      	movs	r3, #0
 80048b8:	61fb      	str	r3, [r7, #28]
 80048ba:	2300      	movs	r3, #0
 80048bc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2b10      	cmp	r3, #16
 80048c2:	d00a      	beq.n	80048da <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2b10      	cmp	r3, #16
 80048c8:	f200 8091 	bhi.w	80049ee <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2b01      	cmp	r3, #1
 80048d0:	d04c      	beq.n	800496c <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2b02      	cmp	r3, #2
 80048d6:	d07c      	beq.n	80049d2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80048d8:	e089      	b.n	80049ee <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      temp_reg = RCC->CFGR;
 80048da:	4b4b      	ldr	r3, [pc, #300]	; (8004a08 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80048e0:	4b49      	ldr	r3, [pc, #292]	; (8004a08 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	f000 8082 	beq.w	80049f2 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80048ee:	69fb      	ldr	r3, [r7, #28]
 80048f0:	0c9b      	lsrs	r3, r3, #18
 80048f2:	f003 030f 	and.w	r3, r3, #15
 80048f6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80048fa:	4413      	add	r3, r2
 80048fc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004900:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004902:	69fb      	ldr	r3, [r7, #28]
 8004904:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004908:	2b00      	cmp	r3, #0
 800490a:	d018      	beq.n	800493e <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800490c:	4b3e      	ldr	r3, [pc, #248]	; (8004a08 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	0c5b      	lsrs	r3, r3, #17
 8004912:	f003 0301 	and.w	r3, r3, #1
 8004916:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800491a:	4413      	add	r3, r2
 800491c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004920:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004922:	69fb      	ldr	r3, [r7, #28]
 8004924:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004928:	2b00      	cmp	r3, #0
 800492a:	d00d      	beq.n	8004948 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800492c:	4a37      	ldr	r2, [pc, #220]	; (8004a0c <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 800492e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004930:	fbb2 f2f3 	udiv	r2, r2, r3
 8004934:	6a3b      	ldr	r3, [r7, #32]
 8004936:	fb02 f303 	mul.w	r3, r2, r3
 800493a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800493c:	e004      	b.n	8004948 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800493e:	6a3b      	ldr	r3, [r7, #32]
 8004940:	4a33      	ldr	r2, [pc, #204]	; (8004a10 <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 8004942:	fb02 f303 	mul.w	r3, r2, r3
 8004946:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004948:	4b2f      	ldr	r3, [pc, #188]	; (8004a08 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004950:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004954:	d102      	bne.n	800495c <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 8004956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004958:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800495a:	e04a      	b.n	80049f2 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = (pllclk * 2) / 3;
 800495c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800495e:	005b      	lsls	r3, r3, #1
 8004960:	4a2c      	ldr	r2, [pc, #176]	; (8004a14 <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 8004962:	fba2 2303 	umull	r2, r3, r2, r3
 8004966:	085b      	lsrs	r3, r3, #1
 8004968:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800496a:	e042      	b.n	80049f2 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      temp_reg = RCC->BDCR;
 800496c:	4b26      	ldr	r3, [pc, #152]	; (8004a08 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800496e:	6a1b      	ldr	r3, [r3, #32]
 8004970:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004972:	69fb      	ldr	r3, [r7, #28]
 8004974:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004978:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800497c:	d108      	bne.n	8004990 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 800497e:	69fb      	ldr	r3, [r7, #28]
 8004980:	f003 0302 	and.w	r3, r3, #2
 8004984:	2b00      	cmp	r3, #0
 8004986:	d003      	beq.n	8004990 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 8004988:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800498c:	62bb      	str	r3, [r7, #40]	; 0x28
 800498e:	e01f      	b.n	80049d0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004990:	69fb      	ldr	r3, [r7, #28]
 8004992:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004996:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800499a:	d109      	bne.n	80049b0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 800499c:	4b1a      	ldr	r3, [pc, #104]	; (8004a08 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800499e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a0:	f003 0302 	and.w	r3, r3, #2
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d003      	beq.n	80049b0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 80049a8:	f649 4340 	movw	r3, #40000	; 0x9c40
 80049ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80049ae:	e00f      	b.n	80049d0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80049b0:	69fb      	ldr	r3, [r7, #28]
 80049b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80049ba:	d11c      	bne.n	80049f6 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 80049bc:	4b12      	ldr	r3, [pc, #72]	; (8004a08 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d016      	beq.n	80049f6 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        frequency = HSE_VALUE / 128U;
 80049c8:	f24f 4324 	movw	r3, #62500	; 0xf424
 80049cc:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80049ce:	e012      	b.n	80049f6 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 80049d0:	e011      	b.n	80049f6 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80049d2:	f7ff fe75 	bl	80046c0 <HAL_RCC_GetPCLK2Freq>
 80049d6:	4602      	mov	r2, r0
 80049d8:	4b0b      	ldr	r3, [pc, #44]	; (8004a08 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	0b9b      	lsrs	r3, r3, #14
 80049de:	f003 0303 	and.w	r3, r3, #3
 80049e2:	3301      	adds	r3, #1
 80049e4:	005b      	lsls	r3, r3, #1
 80049e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80049ea:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80049ec:	e004      	b.n	80049f8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 80049ee:	bf00      	nop
 80049f0:	e002      	b.n	80049f8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 80049f2:	bf00      	nop
 80049f4:	e000      	b.n	80049f8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 80049f6:	bf00      	nop
    }
  }
  return (frequency);
 80049f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3734      	adds	r7, #52	; 0x34
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd90      	pop	{r4, r7, pc}
 8004a02:	bf00      	nop
 8004a04:	080098b0 	.word	0x080098b0
 8004a08:	40021000 	.word	0x40021000
 8004a0c:	007a1200 	.word	0x007a1200
 8004a10:	003d0900 	.word	0x003d0900
 8004a14:	aaaaaaab 	.word	0xaaaaaaab

08004a18 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004a18:	b084      	sub	sp, #16
 8004a1a:	b480      	push	{r7}
 8004a1c:	b083      	sub	sp, #12
 8004a1e:	af00      	add	r7, sp, #0
 8004a20:	6078      	str	r0, [r7, #4]
 8004a22:	f107 0014 	add.w	r0, r7, #20
 8004a26:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004a2a:	2300      	movs	r3, #0
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	370c      	adds	r7, #12
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bc80      	pop	{r7}
 8004a34:	b004      	add	sp, #16
 8004a36:	4770      	bx	lr

08004a38 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b085      	sub	sp, #20
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2200      	movs	r2, #0
 8004a44:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004a48:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004a4c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	b29a      	uxth	r2, r3
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004a58:	2300      	movs	r3, #0
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	3714      	adds	r7, #20
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bc80      	pop	{r7}
 8004a62:	4770      	bx	lr

08004a64 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b085      	sub	sp, #20
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004a6c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004a70:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004a78:	b29a      	uxth	r2, r3
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	b29b      	uxth	r3, r3
 8004a7e:	43db      	mvns	r3, r3
 8004a80:	b29b      	uxth	r3, r3
 8004a82:	4013      	ands	r3, r2
 8004a84:	b29a      	uxth	r2, r3
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004a8c:	2300      	movs	r3, #0
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3714      	adds	r7, #20
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bc80      	pop	{r7}
 8004a96:	4770      	bx	lr

08004a98 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b083      	sub	sp, #12
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
 8004aa0:	460b      	mov	r3, r1
 8004aa2:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004aa4:	2300      	movs	r3, #0
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	370c      	adds	r7, #12
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bc80      	pop	{r7}
 8004aae:	4770      	bx	lr

08004ab0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004ab0:	b084      	sub	sp, #16
 8004ab2:	b480      	push	{r7}
 8004ab4:	b083      	sub	sp, #12
 8004ab6:	af00      	add	r7, sp, #0
 8004ab8:	6078      	str	r0, [r7, #4]
 8004aba:	f107 0014 	add.w	r0, r7, #20
 8004abe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2200      	movs	r2, #0
 8004ace:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2200      	movs	r2, #0
 8004ade:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004ae2:	2300      	movs	r3, #0
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	370c      	adds	r7, #12
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bc80      	pop	{r7}
 8004aec:	b004      	add	sp, #16
 8004aee:	4770      	bx	lr

08004af0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b09b      	sub	sp, #108	; 0x6c
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
 8004af8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004afa:	2300      	movs	r3, #0
 8004afc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004b00:	687a      	ldr	r2, [r7, #4]
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	781b      	ldrb	r3, [r3, #0]
 8004b06:	009b      	lsls	r3, r3, #2
 8004b08:	4413      	add	r3, r2
 8004b0a:	881b      	ldrh	r3, [r3, #0]
 8004b0c:	b29b      	uxth	r3, r3
 8004b0e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004b12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b16:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	78db      	ldrb	r3, [r3, #3]
 8004b1e:	2b03      	cmp	r3, #3
 8004b20:	d81f      	bhi.n	8004b62 <USB_ActivateEndpoint+0x72>
 8004b22:	a201      	add	r2, pc, #4	; (adr r2, 8004b28 <USB_ActivateEndpoint+0x38>)
 8004b24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b28:	08004b39 	.word	0x08004b39
 8004b2c:	08004b55 	.word	0x08004b55
 8004b30:	08004b6b 	.word	0x08004b6b
 8004b34:	08004b47 	.word	0x08004b47
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004b38:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004b3c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004b40:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004b44:	e012      	b.n	8004b6c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004b46:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004b4a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004b4e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004b52:	e00b      	b.n	8004b6c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004b54:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004b58:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004b5c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004b60:	e004      	b.n	8004b6c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8004b68:	e000      	b.n	8004b6c <USB_ActivateEndpoint+0x7c>
      break;
 8004b6a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004b6c:	687a      	ldr	r2, [r7, #4]
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	781b      	ldrb	r3, [r3, #0]
 8004b72:	009b      	lsls	r3, r3, #2
 8004b74:	441a      	add	r2, r3
 8004b76:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004b7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b8a:	b29b      	uxth	r3, r3
 8004b8c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004b8e:	687a      	ldr	r2, [r7, #4]
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	781b      	ldrb	r3, [r3, #0]
 8004b94:	009b      	lsls	r3, r3, #2
 8004b96:	4413      	add	r3, r2
 8004b98:	881b      	ldrh	r3, [r3, #0]
 8004b9a:	b29b      	uxth	r3, r3
 8004b9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ba0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ba4:	b29a      	uxth	r2, r3
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	781b      	ldrb	r3, [r3, #0]
 8004baa:	b29b      	uxth	r3, r3
 8004bac:	4313      	orrs	r3, r2
 8004bae:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8004bb2:	687a      	ldr	r2, [r7, #4]
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	781b      	ldrb	r3, [r3, #0]
 8004bb8:	009b      	lsls	r3, r3, #2
 8004bba:	441a      	add	r2, r3
 8004bbc:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004bc0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bc4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bc8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bd0:	b29b      	uxth	r3, r3
 8004bd2:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	7b1b      	ldrb	r3, [r3, #12]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	f040 8149 	bne.w	8004e70 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	785b      	ldrb	r3, [r3, #1]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	f000 8084 	beq.w	8004cf0 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	617b      	str	r3, [r7, #20]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004bf2:	b29b      	uxth	r3, r3
 8004bf4:	461a      	mov	r2, r3
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	4413      	add	r3, r2
 8004bfa:	617b      	str	r3, [r7, #20]
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	781b      	ldrb	r3, [r3, #0]
 8004c00:	011a      	lsls	r2, r3, #4
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	4413      	add	r3, r2
 8004c06:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c0a:	613b      	str	r3, [r7, #16]
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	88db      	ldrh	r3, [r3, #6]
 8004c10:	085b      	lsrs	r3, r3, #1
 8004c12:	b29b      	uxth	r3, r3
 8004c14:	005b      	lsls	r3, r3, #1
 8004c16:	b29a      	uxth	r2, r3
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004c1c:	687a      	ldr	r2, [r7, #4]
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	781b      	ldrb	r3, [r3, #0]
 8004c22:	009b      	lsls	r3, r3, #2
 8004c24:	4413      	add	r3, r2
 8004c26:	881b      	ldrh	r3, [r3, #0]
 8004c28:	81fb      	strh	r3, [r7, #14]
 8004c2a:	89fb      	ldrh	r3, [r7, #14]
 8004c2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d01b      	beq.n	8004c6c <USB_ActivateEndpoint+0x17c>
 8004c34:	687a      	ldr	r2, [r7, #4]
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	781b      	ldrb	r3, [r3, #0]
 8004c3a:	009b      	lsls	r3, r3, #2
 8004c3c:	4413      	add	r3, r2
 8004c3e:	881b      	ldrh	r3, [r3, #0]
 8004c40:	b29b      	uxth	r3, r3
 8004c42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c4a:	81bb      	strh	r3, [r7, #12]
 8004c4c:	687a      	ldr	r2, [r7, #4]
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	781b      	ldrb	r3, [r3, #0]
 8004c52:	009b      	lsls	r3, r3, #2
 8004c54:	441a      	add	r2, r3
 8004c56:	89bb      	ldrh	r3, [r7, #12]
 8004c58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c64:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004c68:	b29b      	uxth	r3, r3
 8004c6a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	78db      	ldrb	r3, [r3, #3]
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	d020      	beq.n	8004cb6 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004c74:	687a      	ldr	r2, [r7, #4]
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	781b      	ldrb	r3, [r3, #0]
 8004c7a:	009b      	lsls	r3, r3, #2
 8004c7c:	4413      	add	r3, r2
 8004c7e:	881b      	ldrh	r3, [r3, #0]
 8004c80:	b29b      	uxth	r3, r3
 8004c82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c8a:	813b      	strh	r3, [r7, #8]
 8004c8c:	893b      	ldrh	r3, [r7, #8]
 8004c8e:	f083 0320 	eor.w	r3, r3, #32
 8004c92:	813b      	strh	r3, [r7, #8]
 8004c94:	687a      	ldr	r2, [r7, #4]
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	781b      	ldrb	r3, [r3, #0]
 8004c9a:	009b      	lsls	r3, r3, #2
 8004c9c:	441a      	add	r2, r3
 8004c9e:	893b      	ldrh	r3, [r7, #8]
 8004ca0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ca4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ca8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cb0:	b29b      	uxth	r3, r3
 8004cb2:	8013      	strh	r3, [r2, #0]
 8004cb4:	e27f      	b.n	80051b6 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004cb6:	687a      	ldr	r2, [r7, #4]
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	781b      	ldrb	r3, [r3, #0]
 8004cbc:	009b      	lsls	r3, r3, #2
 8004cbe:	4413      	add	r3, r2
 8004cc0:	881b      	ldrh	r3, [r3, #0]
 8004cc2:	b29b      	uxth	r3, r3
 8004cc4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ccc:	817b      	strh	r3, [r7, #10]
 8004cce:	687a      	ldr	r2, [r7, #4]
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	781b      	ldrb	r3, [r3, #0]
 8004cd4:	009b      	lsls	r3, r3, #2
 8004cd6:	441a      	add	r2, r3
 8004cd8:	897b      	ldrh	r3, [r7, #10]
 8004cda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cde:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ce2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ce6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cea:	b29b      	uxth	r3, r3
 8004cec:	8013      	strh	r3, [r2, #0]
 8004cee:	e262      	b.n	80051b6 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004cfa:	b29b      	uxth	r3, r3
 8004cfc:	461a      	mov	r2, r3
 8004cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d00:	4413      	add	r3, r2
 8004d02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	781b      	ldrb	r3, [r3, #0]
 8004d08:	011a      	lsls	r2, r3, #4
 8004d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d0c:	4413      	add	r3, r2
 8004d0e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004d12:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	88db      	ldrh	r3, [r3, #6]
 8004d18:	085b      	lsrs	r3, r3, #1
 8004d1a:	b29b      	uxth	r3, r3
 8004d1c:	005b      	lsls	r3, r3, #1
 8004d1e:	b29a      	uxth	r2, r3
 8004d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d22:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	627b      	str	r3, [r7, #36]	; 0x24
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d2e:	b29b      	uxth	r3, r3
 8004d30:	461a      	mov	r2, r3
 8004d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d34:	4413      	add	r3, r2
 8004d36:	627b      	str	r3, [r7, #36]	; 0x24
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	781b      	ldrb	r3, [r3, #0]
 8004d3c:	011a      	lsls	r2, r3, #4
 8004d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d40:	4413      	add	r3, r2
 8004d42:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004d46:	623b      	str	r3, [r7, #32]
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	691b      	ldr	r3, [r3, #16]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d112      	bne.n	8004d76 <USB_ActivateEndpoint+0x286>
 8004d50:	6a3b      	ldr	r3, [r7, #32]
 8004d52:	881b      	ldrh	r3, [r3, #0]
 8004d54:	b29b      	uxth	r3, r3
 8004d56:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004d5a:	b29a      	uxth	r2, r3
 8004d5c:	6a3b      	ldr	r3, [r7, #32]
 8004d5e:	801a      	strh	r2, [r3, #0]
 8004d60:	6a3b      	ldr	r3, [r7, #32]
 8004d62:	881b      	ldrh	r3, [r3, #0]
 8004d64:	b29b      	uxth	r3, r3
 8004d66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d6e:	b29a      	uxth	r2, r3
 8004d70:	6a3b      	ldr	r3, [r7, #32]
 8004d72:	801a      	strh	r2, [r3, #0]
 8004d74:	e02f      	b.n	8004dd6 <USB_ActivateEndpoint+0x2e6>
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	691b      	ldr	r3, [r3, #16]
 8004d7a:	2b3e      	cmp	r3, #62	; 0x3e
 8004d7c:	d813      	bhi.n	8004da6 <USB_ActivateEndpoint+0x2b6>
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	691b      	ldr	r3, [r3, #16]
 8004d82:	085b      	lsrs	r3, r3, #1
 8004d84:	663b      	str	r3, [r7, #96]	; 0x60
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	691b      	ldr	r3, [r3, #16]
 8004d8a:	f003 0301 	and.w	r3, r3, #1
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d002      	beq.n	8004d98 <USB_ActivateEndpoint+0x2a8>
 8004d92:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d94:	3301      	adds	r3, #1
 8004d96:	663b      	str	r3, [r7, #96]	; 0x60
 8004d98:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d9a:	b29b      	uxth	r3, r3
 8004d9c:	029b      	lsls	r3, r3, #10
 8004d9e:	b29a      	uxth	r2, r3
 8004da0:	6a3b      	ldr	r3, [r7, #32]
 8004da2:	801a      	strh	r2, [r3, #0]
 8004da4:	e017      	b.n	8004dd6 <USB_ActivateEndpoint+0x2e6>
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	691b      	ldr	r3, [r3, #16]
 8004daa:	095b      	lsrs	r3, r3, #5
 8004dac:	663b      	str	r3, [r7, #96]	; 0x60
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	691b      	ldr	r3, [r3, #16]
 8004db2:	f003 031f 	and.w	r3, r3, #31
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d102      	bne.n	8004dc0 <USB_ActivateEndpoint+0x2d0>
 8004dba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004dbc:	3b01      	subs	r3, #1
 8004dbe:	663b      	str	r3, [r7, #96]	; 0x60
 8004dc0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004dc2:	b29b      	uxth	r3, r3
 8004dc4:	029b      	lsls	r3, r3, #10
 8004dc6:	b29b      	uxth	r3, r3
 8004dc8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004dcc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004dd0:	b29a      	uxth	r2, r3
 8004dd2:	6a3b      	ldr	r3, [r7, #32]
 8004dd4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004dd6:	687a      	ldr	r2, [r7, #4]
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	781b      	ldrb	r3, [r3, #0]
 8004ddc:	009b      	lsls	r3, r3, #2
 8004dde:	4413      	add	r3, r2
 8004de0:	881b      	ldrh	r3, [r3, #0]
 8004de2:	83fb      	strh	r3, [r7, #30]
 8004de4:	8bfb      	ldrh	r3, [r7, #30]
 8004de6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d01b      	beq.n	8004e26 <USB_ActivateEndpoint+0x336>
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	781b      	ldrb	r3, [r3, #0]
 8004df4:	009b      	lsls	r3, r3, #2
 8004df6:	4413      	add	r3, r2
 8004df8:	881b      	ldrh	r3, [r3, #0]
 8004dfa:	b29b      	uxth	r3, r3
 8004dfc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e04:	83bb      	strh	r3, [r7, #28]
 8004e06:	687a      	ldr	r2, [r7, #4]
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	781b      	ldrb	r3, [r3, #0]
 8004e0c:	009b      	lsls	r3, r3, #2
 8004e0e:	441a      	add	r2, r3
 8004e10:	8bbb      	ldrh	r3, [r7, #28]
 8004e12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e1a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004e1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e22:	b29b      	uxth	r3, r3
 8004e24:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004e26:	687a      	ldr	r2, [r7, #4]
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	781b      	ldrb	r3, [r3, #0]
 8004e2c:	009b      	lsls	r3, r3, #2
 8004e2e:	4413      	add	r3, r2
 8004e30:	881b      	ldrh	r3, [r3, #0]
 8004e32:	b29b      	uxth	r3, r3
 8004e34:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e3c:	837b      	strh	r3, [r7, #26]
 8004e3e:	8b7b      	ldrh	r3, [r7, #26]
 8004e40:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004e44:	837b      	strh	r3, [r7, #26]
 8004e46:	8b7b      	ldrh	r3, [r7, #26]
 8004e48:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004e4c:	837b      	strh	r3, [r7, #26]
 8004e4e:	687a      	ldr	r2, [r7, #4]
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	781b      	ldrb	r3, [r3, #0]
 8004e54:	009b      	lsls	r3, r3, #2
 8004e56:	441a      	add	r2, r3
 8004e58:	8b7b      	ldrh	r3, [r7, #26]
 8004e5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e6a:	b29b      	uxth	r3, r3
 8004e6c:	8013      	strh	r3, [r2, #0]
 8004e6e:	e1a2      	b.n	80051b6 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004e70:	687a      	ldr	r2, [r7, #4]
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	781b      	ldrb	r3, [r3, #0]
 8004e76:	009b      	lsls	r3, r3, #2
 8004e78:	4413      	add	r3, r2
 8004e7a:	881b      	ldrh	r3, [r3, #0]
 8004e7c:	b29b      	uxth	r3, r3
 8004e7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e86:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8004e8a:	687a      	ldr	r2, [r7, #4]
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	781b      	ldrb	r3, [r3, #0]
 8004e90:	009b      	lsls	r3, r3, #2
 8004e92:	441a      	add	r2, r3
 8004e94:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8004e98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ea0:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004ea4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ea8:	b29b      	uxth	r3, r3
 8004eaa:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	65bb      	str	r3, [r7, #88]	; 0x58
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004eb6:	b29b      	uxth	r3, r3
 8004eb8:	461a      	mov	r2, r3
 8004eba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004ebc:	4413      	add	r3, r2
 8004ebe:	65bb      	str	r3, [r7, #88]	; 0x58
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	781b      	ldrb	r3, [r3, #0]
 8004ec4:	011a      	lsls	r2, r3, #4
 8004ec6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004ec8:	4413      	add	r3, r2
 8004eca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ece:	657b      	str	r3, [r7, #84]	; 0x54
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	891b      	ldrh	r3, [r3, #8]
 8004ed4:	085b      	lsrs	r3, r3, #1
 8004ed6:	b29b      	uxth	r3, r3
 8004ed8:	005b      	lsls	r3, r3, #1
 8004eda:	b29a      	uxth	r2, r3
 8004edc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ede:	801a      	strh	r2, [r3, #0]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	653b      	str	r3, [r7, #80]	; 0x50
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004eea:	b29b      	uxth	r3, r3
 8004eec:	461a      	mov	r2, r3
 8004eee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ef0:	4413      	add	r3, r2
 8004ef2:	653b      	str	r3, [r7, #80]	; 0x50
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	781b      	ldrb	r3, [r3, #0]
 8004ef8:	011a      	lsls	r2, r3, #4
 8004efa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004efc:	4413      	add	r3, r2
 8004efe:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004f02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	895b      	ldrh	r3, [r3, #10]
 8004f08:	085b      	lsrs	r3, r3, #1
 8004f0a:	b29b      	uxth	r3, r3
 8004f0c:	005b      	lsls	r3, r3, #1
 8004f0e:	b29a      	uxth	r2, r3
 8004f10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f12:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	785b      	ldrb	r3, [r3, #1]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	f040 8091 	bne.w	8005040 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004f1e:	687a      	ldr	r2, [r7, #4]
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	781b      	ldrb	r3, [r3, #0]
 8004f24:	009b      	lsls	r3, r3, #2
 8004f26:	4413      	add	r3, r2
 8004f28:	881b      	ldrh	r3, [r3, #0]
 8004f2a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004f2c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004f2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d01b      	beq.n	8004f6e <USB_ActivateEndpoint+0x47e>
 8004f36:	687a      	ldr	r2, [r7, #4]
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	781b      	ldrb	r3, [r3, #0]
 8004f3c:	009b      	lsls	r3, r3, #2
 8004f3e:	4413      	add	r3, r2
 8004f40:	881b      	ldrh	r3, [r3, #0]
 8004f42:	b29b      	uxth	r3, r3
 8004f44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f4c:	877b      	strh	r3, [r7, #58]	; 0x3a
 8004f4e:	687a      	ldr	r2, [r7, #4]
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	781b      	ldrb	r3, [r3, #0]
 8004f54:	009b      	lsls	r3, r3, #2
 8004f56:	441a      	add	r2, r3
 8004f58:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004f5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f62:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004f66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f6a:	b29b      	uxth	r3, r3
 8004f6c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004f6e:	687a      	ldr	r2, [r7, #4]
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	781b      	ldrb	r3, [r3, #0]
 8004f74:	009b      	lsls	r3, r3, #2
 8004f76:	4413      	add	r3, r2
 8004f78:	881b      	ldrh	r3, [r3, #0]
 8004f7a:	873b      	strh	r3, [r7, #56]	; 0x38
 8004f7c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004f7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d01b      	beq.n	8004fbe <USB_ActivateEndpoint+0x4ce>
 8004f86:	687a      	ldr	r2, [r7, #4]
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	781b      	ldrb	r3, [r3, #0]
 8004f8c:	009b      	lsls	r3, r3, #2
 8004f8e:	4413      	add	r3, r2
 8004f90:	881b      	ldrh	r3, [r3, #0]
 8004f92:	b29b      	uxth	r3, r3
 8004f94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f9c:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004f9e:	687a      	ldr	r2, [r7, #4]
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	781b      	ldrb	r3, [r3, #0]
 8004fa4:	009b      	lsls	r3, r3, #2
 8004fa6:	441a      	add	r2, r3
 8004fa8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004faa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fb6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004fba:	b29b      	uxth	r3, r3
 8004fbc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004fbe:	687a      	ldr	r2, [r7, #4]
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	781b      	ldrb	r3, [r3, #0]
 8004fc4:	009b      	lsls	r3, r3, #2
 8004fc6:	4413      	add	r3, r2
 8004fc8:	881b      	ldrh	r3, [r3, #0]
 8004fca:	b29b      	uxth	r3, r3
 8004fcc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004fd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fd4:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004fd6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004fd8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004fdc:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004fde:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004fe0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004fe4:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004fe6:	687a      	ldr	r2, [r7, #4]
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	781b      	ldrb	r3, [r3, #0]
 8004fec:	009b      	lsls	r3, r3, #2
 8004fee:	441a      	add	r2, r3
 8004ff0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004ff2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ff6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ffa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ffe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005002:	b29b      	uxth	r3, r3
 8005004:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005006:	687a      	ldr	r2, [r7, #4]
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	781b      	ldrb	r3, [r3, #0]
 800500c:	009b      	lsls	r3, r3, #2
 800500e:	4413      	add	r3, r2
 8005010:	881b      	ldrh	r3, [r3, #0]
 8005012:	b29b      	uxth	r3, r3
 8005014:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005018:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800501c:	867b      	strh	r3, [r7, #50]	; 0x32
 800501e:	687a      	ldr	r2, [r7, #4]
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	781b      	ldrb	r3, [r3, #0]
 8005024:	009b      	lsls	r3, r3, #2
 8005026:	441a      	add	r2, r3
 8005028:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800502a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800502e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005032:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005036:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800503a:	b29b      	uxth	r3, r3
 800503c:	8013      	strh	r3, [r2, #0]
 800503e:	e0ba      	b.n	80051b6 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005040:	687a      	ldr	r2, [r7, #4]
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	781b      	ldrb	r3, [r3, #0]
 8005046:	009b      	lsls	r3, r3, #2
 8005048:	4413      	add	r3, r2
 800504a:	881b      	ldrh	r3, [r3, #0]
 800504c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005050:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005054:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005058:	2b00      	cmp	r3, #0
 800505a:	d01d      	beq.n	8005098 <USB_ActivateEndpoint+0x5a8>
 800505c:	687a      	ldr	r2, [r7, #4]
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	781b      	ldrb	r3, [r3, #0]
 8005062:	009b      	lsls	r3, r3, #2
 8005064:	4413      	add	r3, r2
 8005066:	881b      	ldrh	r3, [r3, #0]
 8005068:	b29b      	uxth	r3, r3
 800506a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800506e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005072:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005076:	687a      	ldr	r2, [r7, #4]
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	781b      	ldrb	r3, [r3, #0]
 800507c:	009b      	lsls	r3, r3, #2
 800507e:	441a      	add	r2, r3
 8005080:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005084:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005088:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800508c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005090:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005094:	b29b      	uxth	r3, r3
 8005096:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005098:	687a      	ldr	r2, [r7, #4]
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	781b      	ldrb	r3, [r3, #0]
 800509e:	009b      	lsls	r3, r3, #2
 80050a0:	4413      	add	r3, r2
 80050a2:	881b      	ldrh	r3, [r3, #0]
 80050a4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80050a8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80050ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d01d      	beq.n	80050f0 <USB_ActivateEndpoint+0x600>
 80050b4:	687a      	ldr	r2, [r7, #4]
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	781b      	ldrb	r3, [r3, #0]
 80050ba:	009b      	lsls	r3, r3, #2
 80050bc:	4413      	add	r3, r2
 80050be:	881b      	ldrh	r3, [r3, #0]
 80050c0:	b29b      	uxth	r3, r3
 80050c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050ca:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80050ce:	687a      	ldr	r2, [r7, #4]
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	781b      	ldrb	r3, [r3, #0]
 80050d4:	009b      	lsls	r3, r3, #2
 80050d6:	441a      	add	r2, r3
 80050d8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80050dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050e8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80050ec:	b29b      	uxth	r3, r3
 80050ee:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	78db      	ldrb	r3, [r3, #3]
 80050f4:	2b01      	cmp	r3, #1
 80050f6:	d024      	beq.n	8005142 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80050f8:	687a      	ldr	r2, [r7, #4]
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	781b      	ldrb	r3, [r3, #0]
 80050fe:	009b      	lsls	r3, r3, #2
 8005100:	4413      	add	r3, r2
 8005102:	881b      	ldrh	r3, [r3, #0]
 8005104:	b29b      	uxth	r3, r3
 8005106:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800510a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800510e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005112:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005116:	f083 0320 	eor.w	r3, r3, #32
 800511a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800511e:	687a      	ldr	r2, [r7, #4]
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	781b      	ldrb	r3, [r3, #0]
 8005124:	009b      	lsls	r3, r3, #2
 8005126:	441a      	add	r2, r3
 8005128:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800512c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005130:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005134:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005138:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800513c:	b29b      	uxth	r3, r3
 800513e:	8013      	strh	r3, [r2, #0]
 8005140:	e01d      	b.n	800517e <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005142:	687a      	ldr	r2, [r7, #4]
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	781b      	ldrb	r3, [r3, #0]
 8005148:	009b      	lsls	r3, r3, #2
 800514a:	4413      	add	r3, r2
 800514c:	881b      	ldrh	r3, [r3, #0]
 800514e:	b29b      	uxth	r3, r3
 8005150:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005154:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005158:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800515c:	687a      	ldr	r2, [r7, #4]
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	781b      	ldrb	r3, [r3, #0]
 8005162:	009b      	lsls	r3, r3, #2
 8005164:	441a      	add	r2, r3
 8005166:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800516a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800516e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005172:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005176:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800517a:	b29b      	uxth	r3, r3
 800517c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800517e:	687a      	ldr	r2, [r7, #4]
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	781b      	ldrb	r3, [r3, #0]
 8005184:	009b      	lsls	r3, r3, #2
 8005186:	4413      	add	r3, r2
 8005188:	881b      	ldrh	r3, [r3, #0]
 800518a:	b29b      	uxth	r3, r3
 800518c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005190:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005194:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005196:	687a      	ldr	r2, [r7, #4]
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	781b      	ldrb	r3, [r3, #0]
 800519c:	009b      	lsls	r3, r3, #2
 800519e:	441a      	add	r2, r3
 80051a0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80051a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051b2:	b29b      	uxth	r3, r3
 80051b4:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80051b6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	376c      	adds	r7, #108	; 0x6c
 80051be:	46bd      	mov	sp, r7
 80051c0:	bc80      	pop	{r7}
 80051c2:	4770      	bx	lr

080051c4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b08d      	sub	sp, #52	; 0x34
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
 80051cc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	7b1b      	ldrb	r3, [r3, #12]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	f040 808e 	bne.w	80052f4 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	785b      	ldrb	r3, [r3, #1]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d044      	beq.n	800526a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80051e0:	687a      	ldr	r2, [r7, #4]
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	781b      	ldrb	r3, [r3, #0]
 80051e6:	009b      	lsls	r3, r3, #2
 80051e8:	4413      	add	r3, r2
 80051ea:	881b      	ldrh	r3, [r3, #0]
 80051ec:	81bb      	strh	r3, [r7, #12]
 80051ee:	89bb      	ldrh	r3, [r7, #12]
 80051f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d01b      	beq.n	8005230 <USB_DeactivateEndpoint+0x6c>
 80051f8:	687a      	ldr	r2, [r7, #4]
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	781b      	ldrb	r3, [r3, #0]
 80051fe:	009b      	lsls	r3, r3, #2
 8005200:	4413      	add	r3, r2
 8005202:	881b      	ldrh	r3, [r3, #0]
 8005204:	b29b      	uxth	r3, r3
 8005206:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800520a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800520e:	817b      	strh	r3, [r7, #10]
 8005210:	687a      	ldr	r2, [r7, #4]
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	781b      	ldrb	r3, [r3, #0]
 8005216:	009b      	lsls	r3, r3, #2
 8005218:	441a      	add	r2, r3
 800521a:	897b      	ldrh	r3, [r7, #10]
 800521c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005220:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005224:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005228:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800522c:	b29b      	uxth	r3, r3
 800522e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005230:	687a      	ldr	r2, [r7, #4]
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	781b      	ldrb	r3, [r3, #0]
 8005236:	009b      	lsls	r3, r3, #2
 8005238:	4413      	add	r3, r2
 800523a:	881b      	ldrh	r3, [r3, #0]
 800523c:	b29b      	uxth	r3, r3
 800523e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005242:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005246:	813b      	strh	r3, [r7, #8]
 8005248:	687a      	ldr	r2, [r7, #4]
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	781b      	ldrb	r3, [r3, #0]
 800524e:	009b      	lsls	r3, r3, #2
 8005250:	441a      	add	r2, r3
 8005252:	893b      	ldrh	r3, [r7, #8]
 8005254:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005258:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800525c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005260:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005264:	b29b      	uxth	r3, r3
 8005266:	8013      	strh	r3, [r2, #0]
 8005268:	e192      	b.n	8005590 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800526a:	687a      	ldr	r2, [r7, #4]
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	781b      	ldrb	r3, [r3, #0]
 8005270:	009b      	lsls	r3, r3, #2
 8005272:	4413      	add	r3, r2
 8005274:	881b      	ldrh	r3, [r3, #0]
 8005276:	827b      	strh	r3, [r7, #18]
 8005278:	8a7b      	ldrh	r3, [r7, #18]
 800527a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800527e:	2b00      	cmp	r3, #0
 8005280:	d01b      	beq.n	80052ba <USB_DeactivateEndpoint+0xf6>
 8005282:	687a      	ldr	r2, [r7, #4]
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	781b      	ldrb	r3, [r3, #0]
 8005288:	009b      	lsls	r3, r3, #2
 800528a:	4413      	add	r3, r2
 800528c:	881b      	ldrh	r3, [r3, #0]
 800528e:	b29b      	uxth	r3, r3
 8005290:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005294:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005298:	823b      	strh	r3, [r7, #16]
 800529a:	687a      	ldr	r2, [r7, #4]
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	781b      	ldrb	r3, [r3, #0]
 80052a0:	009b      	lsls	r3, r3, #2
 80052a2:	441a      	add	r2, r3
 80052a4:	8a3b      	ldrh	r3, [r7, #16]
 80052a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052ae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80052b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052b6:	b29b      	uxth	r3, r3
 80052b8:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80052ba:	687a      	ldr	r2, [r7, #4]
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	781b      	ldrb	r3, [r3, #0]
 80052c0:	009b      	lsls	r3, r3, #2
 80052c2:	4413      	add	r3, r2
 80052c4:	881b      	ldrh	r3, [r3, #0]
 80052c6:	b29b      	uxth	r3, r3
 80052c8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80052cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052d0:	81fb      	strh	r3, [r7, #14]
 80052d2:	687a      	ldr	r2, [r7, #4]
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	781b      	ldrb	r3, [r3, #0]
 80052d8:	009b      	lsls	r3, r3, #2
 80052da:	441a      	add	r2, r3
 80052dc:	89fb      	ldrh	r3, [r7, #14]
 80052de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052ee:	b29b      	uxth	r3, r3
 80052f0:	8013      	strh	r3, [r2, #0]
 80052f2:	e14d      	b.n	8005590 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	785b      	ldrb	r3, [r3, #1]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	f040 80a5 	bne.w	8005448 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80052fe:	687a      	ldr	r2, [r7, #4]
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	781b      	ldrb	r3, [r3, #0]
 8005304:	009b      	lsls	r3, r3, #2
 8005306:	4413      	add	r3, r2
 8005308:	881b      	ldrh	r3, [r3, #0]
 800530a:	843b      	strh	r3, [r7, #32]
 800530c:	8c3b      	ldrh	r3, [r7, #32]
 800530e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005312:	2b00      	cmp	r3, #0
 8005314:	d01b      	beq.n	800534e <USB_DeactivateEndpoint+0x18a>
 8005316:	687a      	ldr	r2, [r7, #4]
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	781b      	ldrb	r3, [r3, #0]
 800531c:	009b      	lsls	r3, r3, #2
 800531e:	4413      	add	r3, r2
 8005320:	881b      	ldrh	r3, [r3, #0]
 8005322:	b29b      	uxth	r3, r3
 8005324:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005328:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800532c:	83fb      	strh	r3, [r7, #30]
 800532e:	687a      	ldr	r2, [r7, #4]
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	781b      	ldrb	r3, [r3, #0]
 8005334:	009b      	lsls	r3, r3, #2
 8005336:	441a      	add	r2, r3
 8005338:	8bfb      	ldrh	r3, [r7, #30]
 800533a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800533e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005342:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005346:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800534a:	b29b      	uxth	r3, r3
 800534c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800534e:	687a      	ldr	r2, [r7, #4]
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	781b      	ldrb	r3, [r3, #0]
 8005354:	009b      	lsls	r3, r3, #2
 8005356:	4413      	add	r3, r2
 8005358:	881b      	ldrh	r3, [r3, #0]
 800535a:	83bb      	strh	r3, [r7, #28]
 800535c:	8bbb      	ldrh	r3, [r7, #28]
 800535e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005362:	2b00      	cmp	r3, #0
 8005364:	d01b      	beq.n	800539e <USB_DeactivateEndpoint+0x1da>
 8005366:	687a      	ldr	r2, [r7, #4]
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	781b      	ldrb	r3, [r3, #0]
 800536c:	009b      	lsls	r3, r3, #2
 800536e:	4413      	add	r3, r2
 8005370:	881b      	ldrh	r3, [r3, #0]
 8005372:	b29b      	uxth	r3, r3
 8005374:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005378:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800537c:	837b      	strh	r3, [r7, #26]
 800537e:	687a      	ldr	r2, [r7, #4]
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	781b      	ldrb	r3, [r3, #0]
 8005384:	009b      	lsls	r3, r3, #2
 8005386:	441a      	add	r2, r3
 8005388:	8b7b      	ldrh	r3, [r7, #26]
 800538a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800538e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005392:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005396:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800539a:	b29b      	uxth	r3, r3
 800539c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800539e:	687a      	ldr	r2, [r7, #4]
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	781b      	ldrb	r3, [r3, #0]
 80053a4:	009b      	lsls	r3, r3, #2
 80053a6:	4413      	add	r3, r2
 80053a8:	881b      	ldrh	r3, [r3, #0]
 80053aa:	b29b      	uxth	r3, r3
 80053ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053b4:	833b      	strh	r3, [r7, #24]
 80053b6:	687a      	ldr	r2, [r7, #4]
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	781b      	ldrb	r3, [r3, #0]
 80053bc:	009b      	lsls	r3, r3, #2
 80053be:	441a      	add	r2, r3
 80053c0:	8b3b      	ldrh	r3, [r7, #24]
 80053c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053ce:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80053d2:	b29b      	uxth	r3, r3
 80053d4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80053d6:	687a      	ldr	r2, [r7, #4]
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	781b      	ldrb	r3, [r3, #0]
 80053dc:	009b      	lsls	r3, r3, #2
 80053de:	4413      	add	r3, r2
 80053e0:	881b      	ldrh	r3, [r3, #0]
 80053e2:	b29b      	uxth	r3, r3
 80053e4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80053e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053ec:	82fb      	strh	r3, [r7, #22]
 80053ee:	687a      	ldr	r2, [r7, #4]
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	781b      	ldrb	r3, [r3, #0]
 80053f4:	009b      	lsls	r3, r3, #2
 80053f6:	441a      	add	r2, r3
 80053f8:	8afb      	ldrh	r3, [r7, #22]
 80053fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005402:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005406:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800540a:	b29b      	uxth	r3, r3
 800540c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800540e:	687a      	ldr	r2, [r7, #4]
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	781b      	ldrb	r3, [r3, #0]
 8005414:	009b      	lsls	r3, r3, #2
 8005416:	4413      	add	r3, r2
 8005418:	881b      	ldrh	r3, [r3, #0]
 800541a:	b29b      	uxth	r3, r3
 800541c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005420:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005424:	82bb      	strh	r3, [r7, #20]
 8005426:	687a      	ldr	r2, [r7, #4]
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	781b      	ldrb	r3, [r3, #0]
 800542c:	009b      	lsls	r3, r3, #2
 800542e:	441a      	add	r2, r3
 8005430:	8abb      	ldrh	r3, [r7, #20]
 8005432:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005436:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800543a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800543e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005442:	b29b      	uxth	r3, r3
 8005444:	8013      	strh	r3, [r2, #0]
 8005446:	e0a3      	b.n	8005590 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005448:	687a      	ldr	r2, [r7, #4]
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	781b      	ldrb	r3, [r3, #0]
 800544e:	009b      	lsls	r3, r3, #2
 8005450:	4413      	add	r3, r2
 8005452:	881b      	ldrh	r3, [r3, #0]
 8005454:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005456:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005458:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800545c:	2b00      	cmp	r3, #0
 800545e:	d01b      	beq.n	8005498 <USB_DeactivateEndpoint+0x2d4>
 8005460:	687a      	ldr	r2, [r7, #4]
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	781b      	ldrb	r3, [r3, #0]
 8005466:	009b      	lsls	r3, r3, #2
 8005468:	4413      	add	r3, r2
 800546a:	881b      	ldrh	r3, [r3, #0]
 800546c:	b29b      	uxth	r3, r3
 800546e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005472:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005476:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005478:	687a      	ldr	r2, [r7, #4]
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	781b      	ldrb	r3, [r3, #0]
 800547e:	009b      	lsls	r3, r3, #2
 8005480:	441a      	add	r2, r3
 8005482:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005484:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005488:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800548c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005490:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005494:	b29b      	uxth	r3, r3
 8005496:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005498:	687a      	ldr	r2, [r7, #4]
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	781b      	ldrb	r3, [r3, #0]
 800549e:	009b      	lsls	r3, r3, #2
 80054a0:	4413      	add	r3, r2
 80054a2:	881b      	ldrh	r3, [r3, #0]
 80054a4:	857b      	strh	r3, [r7, #42]	; 0x2a
 80054a6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80054a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d01b      	beq.n	80054e8 <USB_DeactivateEndpoint+0x324>
 80054b0:	687a      	ldr	r2, [r7, #4]
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	781b      	ldrb	r3, [r3, #0]
 80054b6:	009b      	lsls	r3, r3, #2
 80054b8:	4413      	add	r3, r2
 80054ba:	881b      	ldrh	r3, [r3, #0]
 80054bc:	b29b      	uxth	r3, r3
 80054be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054c6:	853b      	strh	r3, [r7, #40]	; 0x28
 80054c8:	687a      	ldr	r2, [r7, #4]
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	781b      	ldrb	r3, [r3, #0]
 80054ce:	009b      	lsls	r3, r3, #2
 80054d0:	441a      	add	r2, r3
 80054d2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80054d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054e0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80054e4:	b29b      	uxth	r3, r3
 80054e6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80054e8:	687a      	ldr	r2, [r7, #4]
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	781b      	ldrb	r3, [r3, #0]
 80054ee:	009b      	lsls	r3, r3, #2
 80054f0:	4413      	add	r3, r2
 80054f2:	881b      	ldrh	r3, [r3, #0]
 80054f4:	b29b      	uxth	r3, r3
 80054f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054fe:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005500:	687a      	ldr	r2, [r7, #4]
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	781b      	ldrb	r3, [r3, #0]
 8005506:	009b      	lsls	r3, r3, #2
 8005508:	441a      	add	r2, r3
 800550a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800550c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005510:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005514:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005518:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800551c:	b29b      	uxth	r3, r3
 800551e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005520:	687a      	ldr	r2, [r7, #4]
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	781b      	ldrb	r3, [r3, #0]
 8005526:	009b      	lsls	r3, r3, #2
 8005528:	4413      	add	r3, r2
 800552a:	881b      	ldrh	r3, [r3, #0]
 800552c:	b29b      	uxth	r3, r3
 800552e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005532:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005536:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005538:	687a      	ldr	r2, [r7, #4]
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	781b      	ldrb	r3, [r3, #0]
 800553e:	009b      	lsls	r3, r3, #2
 8005540:	441a      	add	r2, r3
 8005542:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005544:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005548:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800554c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005550:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005554:	b29b      	uxth	r3, r3
 8005556:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005558:	687a      	ldr	r2, [r7, #4]
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	781b      	ldrb	r3, [r3, #0]
 800555e:	009b      	lsls	r3, r3, #2
 8005560:	4413      	add	r3, r2
 8005562:	881b      	ldrh	r3, [r3, #0]
 8005564:	b29b      	uxth	r3, r3
 8005566:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800556a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800556e:	847b      	strh	r3, [r7, #34]	; 0x22
 8005570:	687a      	ldr	r2, [r7, #4]
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	781b      	ldrb	r3, [r3, #0]
 8005576:	009b      	lsls	r3, r3, #2
 8005578:	441a      	add	r2, r3
 800557a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800557c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005580:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005584:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005588:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800558c:	b29b      	uxth	r3, r3
 800558e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005590:	2300      	movs	r3, #0
}
 8005592:	4618      	mov	r0, r3
 8005594:	3734      	adds	r7, #52	; 0x34
 8005596:	46bd      	mov	sp, r7
 8005598:	bc80      	pop	{r7}
 800559a:	4770      	bx	lr

0800559c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b0cc      	sub	sp, #304	; 0x130
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	1d3b      	adds	r3, r7, #4
 80055a4:	6018      	str	r0, [r3, #0]
 80055a6:	463b      	mov	r3, r7
 80055a8:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80055aa:	463b      	mov	r3, r7
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	785b      	ldrb	r3, [r3, #1]
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	f040 872e 	bne.w	8006412 <USB_EPStartXfer+0xe76>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80055b6:	463b      	mov	r3, r7
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	699a      	ldr	r2, [r3, #24]
 80055bc:	463b      	mov	r3, r7
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	691b      	ldr	r3, [r3, #16]
 80055c2:	429a      	cmp	r2, r3
 80055c4:	d905      	bls.n	80055d2 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 80055c6:	463b      	mov	r3, r7
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	691b      	ldr	r3, [r3, #16]
 80055cc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80055d0:	e004      	b.n	80055dc <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80055d2:	463b      	mov	r3, r7
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	699b      	ldr	r3, [r3, #24]
 80055d8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80055dc:	463b      	mov	r3, r7
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	7b1b      	ldrb	r3, [r3, #12]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d134      	bne.n	8005650 <USB_EPStartXfer+0xb4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80055e6:	463b      	mov	r3, r7
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	6959      	ldr	r1, [r3, #20]
 80055ec:	463b      	mov	r3, r7
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	88da      	ldrh	r2, [r3, #6]
 80055f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055f6:	b29b      	uxth	r3, r3
 80055f8:	1d38      	adds	r0, r7, #4
 80055fa:	6800      	ldr	r0, [r0, #0]
 80055fc:	f001 fc03 	bl	8006e06 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005600:	f107 0310 	add.w	r3, r7, #16
 8005604:	1d3a      	adds	r2, r7, #4
 8005606:	6812      	ldr	r2, [r2, #0]
 8005608:	601a      	str	r2, [r3, #0]
 800560a:	1d3b      	adds	r3, r7, #4
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005612:	b29b      	uxth	r3, r3
 8005614:	4619      	mov	r1, r3
 8005616:	f107 0310 	add.w	r3, r7, #16
 800561a:	f107 0210 	add.w	r2, r7, #16
 800561e:	6812      	ldr	r2, [r2, #0]
 8005620:	440a      	add	r2, r1
 8005622:	601a      	str	r2, [r3, #0]
 8005624:	463b      	mov	r3, r7
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	781b      	ldrb	r3, [r3, #0]
 800562a:	011a      	lsls	r2, r3, #4
 800562c:	f107 0310 	add.w	r3, r7, #16
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4413      	add	r3, r2
 8005634:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005638:	f107 030c 	add.w	r3, r7, #12
 800563c:	601a      	str	r2, [r3, #0]
 800563e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005642:	b29a      	uxth	r2, r3
 8005644:	f107 030c 	add.w	r3, r7, #12
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	801a      	strh	r2, [r3, #0]
 800564c:	f000 beac 	b.w	80063a8 <USB_EPStartXfer+0xe0c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005650:	463b      	mov	r3, r7
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	78db      	ldrb	r3, [r3, #3]
 8005656:	2b02      	cmp	r3, #2
 8005658:	f040 838c 	bne.w	8005d74 <USB_EPStartXfer+0x7d8>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800565c:	463b      	mov	r3, r7
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	6a1a      	ldr	r2, [r3, #32]
 8005662:	463b      	mov	r3, r7
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	691b      	ldr	r3, [r3, #16]
 8005668:	429a      	cmp	r2, r3
 800566a:	f240 8330 	bls.w	8005cce <USB_EPStartXfer+0x732>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 800566e:	1d3b      	adds	r3, r7, #4
 8005670:	681a      	ldr	r2, [r3, #0]
 8005672:	463b      	mov	r3, r7
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	781b      	ldrb	r3, [r3, #0]
 8005678:	009b      	lsls	r3, r3, #2
 800567a:	4413      	add	r3, r2
 800567c:	881b      	ldrh	r3, [r3, #0]
 800567e:	b29b      	uxth	r3, r3
 8005680:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005684:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005688:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800568c:	1d3b      	adds	r3, r7, #4
 800568e:	681a      	ldr	r2, [r3, #0]
 8005690:	463b      	mov	r3, r7
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	781b      	ldrb	r3, [r3, #0]
 8005696:	009b      	lsls	r3, r3, #2
 8005698:	441a      	add	r2, r3
 800569a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800569e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056a6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80056aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056ae:	b29b      	uxth	r3, r3
 80056b0:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80056b2:	463b      	mov	r3, r7
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	6a1a      	ldr	r2, [r3, #32]
 80056b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056bc:	1ad2      	subs	r2, r2, r3
 80056be:	463b      	mov	r3, r7
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80056c4:	1d3b      	adds	r3, r7, #4
 80056c6:	681a      	ldr	r2, [r3, #0]
 80056c8:	463b      	mov	r3, r7
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	781b      	ldrb	r3, [r3, #0]
 80056ce:	009b      	lsls	r3, r3, #2
 80056d0:	4413      	add	r3, r2
 80056d2:	881b      	ldrh	r3, [r3, #0]
 80056d4:	b29b      	uxth	r3, r3
 80056d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056da:	2b00      	cmp	r3, #0
 80056dc:	f000 819e 	beq.w	8005a1c <USB_EPStartXfer+0x480>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80056e0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80056e4:	1d3a      	adds	r2, r7, #4
 80056e6:	6812      	ldr	r2, [r2, #0]
 80056e8:	601a      	str	r2, [r3, #0]
 80056ea:	463b      	mov	r3, r7
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	785b      	ldrb	r3, [r3, #1]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d17a      	bne.n	80057ea <USB_EPStartXfer+0x24e>
 80056f4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80056f8:	1d3a      	adds	r2, r7, #4
 80056fa:	6812      	ldr	r2, [r2, #0]
 80056fc:	601a      	str	r2, [r3, #0]
 80056fe:	1d3b      	adds	r3, r7, #4
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005706:	b29b      	uxth	r3, r3
 8005708:	4619      	mov	r1, r3
 800570a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800570e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005712:	6812      	ldr	r2, [r2, #0]
 8005714:	440a      	add	r2, r1
 8005716:	601a      	str	r2, [r3, #0]
 8005718:	463b      	mov	r3, r7
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	781b      	ldrb	r3, [r3, #0]
 800571e:	011a      	lsls	r2, r3, #4
 8005720:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4413      	add	r3, r2
 8005728:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800572c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005730:	601a      	str	r2, [r3, #0]
 8005732:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005736:	2b00      	cmp	r3, #0
 8005738:	d11a      	bne.n	8005770 <USB_EPStartXfer+0x1d4>
 800573a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	881b      	ldrh	r3, [r3, #0]
 8005742:	b29b      	uxth	r3, r3
 8005744:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005748:	b29a      	uxth	r2, r3
 800574a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	801a      	strh	r2, [r3, #0]
 8005752:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	881b      	ldrh	r3, [r3, #0]
 800575a:	b29b      	uxth	r3, r3
 800575c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005760:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005764:	b29a      	uxth	r2, r3
 8005766:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	801a      	strh	r2, [r3, #0]
 800576e:	e062      	b.n	8005836 <USB_EPStartXfer+0x29a>
 8005770:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005774:	2b3e      	cmp	r3, #62	; 0x3e
 8005776:	d819      	bhi.n	80057ac <USB_EPStartXfer+0x210>
 8005778:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800577c:	085b      	lsrs	r3, r3, #1
 800577e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005782:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005786:	f003 0301 	and.w	r3, r3, #1
 800578a:	2b00      	cmp	r3, #0
 800578c:	d004      	beq.n	8005798 <USB_EPStartXfer+0x1fc>
 800578e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005792:	3301      	adds	r3, #1
 8005794:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005798:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800579c:	b29b      	uxth	r3, r3
 800579e:	029b      	lsls	r3, r3, #10
 80057a0:	b29a      	uxth	r2, r3
 80057a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	801a      	strh	r2, [r3, #0]
 80057aa:	e044      	b.n	8005836 <USB_EPStartXfer+0x29a>
 80057ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057b0:	095b      	lsrs	r3, r3, #5
 80057b2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80057b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057ba:	f003 031f 	and.w	r3, r3, #31
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d104      	bne.n	80057cc <USB_EPStartXfer+0x230>
 80057c2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80057c6:	3b01      	subs	r3, #1
 80057c8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80057cc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80057d0:	b29b      	uxth	r3, r3
 80057d2:	029b      	lsls	r3, r3, #10
 80057d4:	b29b      	uxth	r3, r3
 80057d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057de:	b29a      	uxth	r2, r3
 80057e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	801a      	strh	r2, [r3, #0]
 80057e8:	e025      	b.n	8005836 <USB_EPStartXfer+0x29a>
 80057ea:	463b      	mov	r3, r7
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	785b      	ldrb	r3, [r3, #1]
 80057f0:	2b01      	cmp	r3, #1
 80057f2:	d120      	bne.n	8005836 <USB_EPStartXfer+0x29a>
 80057f4:	1d3b      	adds	r3, r7, #4
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057fc:	b29b      	uxth	r3, r3
 80057fe:	4619      	mov	r1, r3
 8005800:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005804:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8005808:	6812      	ldr	r2, [r2, #0]
 800580a:	440a      	add	r2, r1
 800580c:	601a      	str	r2, [r3, #0]
 800580e:	463b      	mov	r3, r7
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	781b      	ldrb	r3, [r3, #0]
 8005814:	011a      	lsls	r2, r3, #4
 8005816:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4413      	add	r3, r2
 800581e:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8005822:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005826:	601a      	str	r2, [r3, #0]
 8005828:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800582c:	b29a      	uxth	r2, r3
 800582e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005836:	463b      	mov	r3, r7
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	895b      	ldrh	r3, [r3, #10]
 800583c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005840:	463b      	mov	r3, r7
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	6959      	ldr	r1, [r3, #20]
 8005846:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800584a:	b29b      	uxth	r3, r3
 800584c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005850:	1d38      	adds	r0, r7, #4
 8005852:	6800      	ldr	r0, [r0, #0]
 8005854:	f001 fad7 	bl	8006e06 <USB_WritePMA>
            ep->xfer_buff += len;
 8005858:	463b      	mov	r3, r7
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	695a      	ldr	r2, [r3, #20]
 800585e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005862:	441a      	add	r2, r3
 8005864:	463b      	mov	r3, r7
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800586a:	463b      	mov	r3, r7
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	6a1a      	ldr	r2, [r3, #32]
 8005870:	463b      	mov	r3, r7
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	691b      	ldr	r3, [r3, #16]
 8005876:	429a      	cmp	r2, r3
 8005878:	d909      	bls.n	800588e <USB_EPStartXfer+0x2f2>
            {
              ep->xfer_len_db -= len;
 800587a:	463b      	mov	r3, r7
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	6a1a      	ldr	r2, [r3, #32]
 8005880:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005884:	1ad2      	subs	r2, r2, r3
 8005886:	463b      	mov	r3, r7
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	621a      	str	r2, [r3, #32]
 800588c:	e008      	b.n	80058a0 <USB_EPStartXfer+0x304>
            }
            else
            {
              len = ep->xfer_len_db;
 800588e:	463b      	mov	r3, r7
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	6a1b      	ldr	r3, [r3, #32]
 8005894:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8005898:	463b      	mov	r3, r7
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	2200      	movs	r2, #0
 800589e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80058a0:	463b      	mov	r3, r7
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	785b      	ldrb	r3, [r3, #1]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d17a      	bne.n	80059a0 <USB_EPStartXfer+0x404>
 80058aa:	f107 0318 	add.w	r3, r7, #24
 80058ae:	1d3a      	adds	r2, r7, #4
 80058b0:	6812      	ldr	r2, [r2, #0]
 80058b2:	601a      	str	r2, [r3, #0]
 80058b4:	1d3b      	adds	r3, r7, #4
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058bc:	b29b      	uxth	r3, r3
 80058be:	4619      	mov	r1, r3
 80058c0:	f107 0318 	add.w	r3, r7, #24
 80058c4:	f107 0218 	add.w	r2, r7, #24
 80058c8:	6812      	ldr	r2, [r2, #0]
 80058ca:	440a      	add	r2, r1
 80058cc:	601a      	str	r2, [r3, #0]
 80058ce:	463b      	mov	r3, r7
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	781b      	ldrb	r3, [r3, #0]
 80058d4:	011a      	lsls	r2, r3, #4
 80058d6:	f107 0318 	add.w	r3, r7, #24
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4413      	add	r3, r2
 80058de:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80058e2:	f107 0314 	add.w	r3, r7, #20
 80058e6:	601a      	str	r2, [r3, #0]
 80058e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d11a      	bne.n	8005926 <USB_EPStartXfer+0x38a>
 80058f0:	f107 0314 	add.w	r3, r7, #20
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	881b      	ldrh	r3, [r3, #0]
 80058f8:	b29b      	uxth	r3, r3
 80058fa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80058fe:	b29a      	uxth	r2, r3
 8005900:	f107 0314 	add.w	r3, r7, #20
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	801a      	strh	r2, [r3, #0]
 8005908:	f107 0314 	add.w	r3, r7, #20
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	881b      	ldrh	r3, [r3, #0]
 8005910:	b29b      	uxth	r3, r3
 8005912:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005916:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800591a:	b29a      	uxth	r2, r3
 800591c:	f107 0314 	add.w	r3, r7, #20
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	801a      	strh	r2, [r3, #0]
 8005924:	e067      	b.n	80059f6 <USB_EPStartXfer+0x45a>
 8005926:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800592a:	2b3e      	cmp	r3, #62	; 0x3e
 800592c:	d819      	bhi.n	8005962 <USB_EPStartXfer+0x3c6>
 800592e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005932:	085b      	lsrs	r3, r3, #1
 8005934:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005938:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800593c:	f003 0301 	and.w	r3, r3, #1
 8005940:	2b00      	cmp	r3, #0
 8005942:	d004      	beq.n	800594e <USB_EPStartXfer+0x3b2>
 8005944:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005948:	3301      	adds	r3, #1
 800594a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800594e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005952:	b29b      	uxth	r3, r3
 8005954:	029b      	lsls	r3, r3, #10
 8005956:	b29a      	uxth	r2, r3
 8005958:	f107 0314 	add.w	r3, r7, #20
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	801a      	strh	r2, [r3, #0]
 8005960:	e049      	b.n	80059f6 <USB_EPStartXfer+0x45a>
 8005962:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005966:	095b      	lsrs	r3, r3, #5
 8005968:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800596c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005970:	f003 031f 	and.w	r3, r3, #31
 8005974:	2b00      	cmp	r3, #0
 8005976:	d104      	bne.n	8005982 <USB_EPStartXfer+0x3e6>
 8005978:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800597c:	3b01      	subs	r3, #1
 800597e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005982:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005986:	b29b      	uxth	r3, r3
 8005988:	029b      	lsls	r3, r3, #10
 800598a:	b29b      	uxth	r3, r3
 800598c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005990:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005994:	b29a      	uxth	r2, r3
 8005996:	f107 0314 	add.w	r3, r7, #20
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	801a      	strh	r2, [r3, #0]
 800599e:	e02a      	b.n	80059f6 <USB_EPStartXfer+0x45a>
 80059a0:	463b      	mov	r3, r7
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	785b      	ldrb	r3, [r3, #1]
 80059a6:	2b01      	cmp	r3, #1
 80059a8:	d125      	bne.n	80059f6 <USB_EPStartXfer+0x45a>
 80059aa:	f107 0320 	add.w	r3, r7, #32
 80059ae:	1d3a      	adds	r2, r7, #4
 80059b0:	6812      	ldr	r2, [r2, #0]
 80059b2:	601a      	str	r2, [r3, #0]
 80059b4:	1d3b      	adds	r3, r7, #4
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059bc:	b29b      	uxth	r3, r3
 80059be:	4619      	mov	r1, r3
 80059c0:	f107 0320 	add.w	r3, r7, #32
 80059c4:	f107 0220 	add.w	r2, r7, #32
 80059c8:	6812      	ldr	r2, [r2, #0]
 80059ca:	440a      	add	r2, r1
 80059cc:	601a      	str	r2, [r3, #0]
 80059ce:	463b      	mov	r3, r7
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	781b      	ldrb	r3, [r3, #0]
 80059d4:	011a      	lsls	r2, r3, #4
 80059d6:	f107 0320 	add.w	r3, r7, #32
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4413      	add	r3, r2
 80059de:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80059e2:	f107 031c 	add.w	r3, r7, #28
 80059e6:	601a      	str	r2, [r3, #0]
 80059e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059ec:	b29a      	uxth	r2, r3
 80059ee:	f107 031c 	add.w	r3, r7, #28
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80059f6:	463b      	mov	r3, r7
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	891b      	ldrh	r3, [r3, #8]
 80059fc:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005a00:	463b      	mov	r3, r7
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	6959      	ldr	r1, [r3, #20]
 8005a06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a0a:	b29b      	uxth	r3, r3
 8005a0c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005a10:	1d38      	adds	r0, r7, #4
 8005a12:	6800      	ldr	r0, [r0, #0]
 8005a14:	f001 f9f7 	bl	8006e06 <USB_WritePMA>
 8005a18:	f000 bcc6 	b.w	80063a8 <USB_EPStartXfer+0xe0c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005a1c:	463b      	mov	r3, r7
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	785b      	ldrb	r3, [r3, #1]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d164      	bne.n	8005af0 <USB_EPStartXfer+0x554>
 8005a26:	1d3b      	adds	r3, r7, #4
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a2c:	1d3b      	adds	r3, r7, #4
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a34:	b29b      	uxth	r3, r3
 8005a36:	461a      	mov	r2, r3
 8005a38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a3a:	4413      	add	r3, r2
 8005a3c:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a3e:	463b      	mov	r3, r7
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	781b      	ldrb	r3, [r3, #0]
 8005a44:	011a      	lsls	r2, r3, #4
 8005a46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a48:	4413      	add	r3, r2
 8005a4a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005a4e:	647b      	str	r3, [r7, #68]	; 0x44
 8005a50:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d112      	bne.n	8005a7e <USB_EPStartXfer+0x4e2>
 8005a58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a5a:	881b      	ldrh	r3, [r3, #0]
 8005a5c:	b29b      	uxth	r3, r3
 8005a5e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005a62:	b29a      	uxth	r2, r3
 8005a64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a66:	801a      	strh	r2, [r3, #0]
 8005a68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a6a:	881b      	ldrh	r3, [r3, #0]
 8005a6c:	b29b      	uxth	r3, r3
 8005a6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a76:	b29a      	uxth	r2, r3
 8005a78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a7a:	801a      	strh	r2, [r3, #0]
 8005a7c:	e057      	b.n	8005b2e <USB_EPStartXfer+0x592>
 8005a7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a82:	2b3e      	cmp	r3, #62	; 0x3e
 8005a84:	d817      	bhi.n	8005ab6 <USB_EPStartXfer+0x51a>
 8005a86:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a8a:	085b      	lsrs	r3, r3, #1
 8005a8c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005a90:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a94:	f003 0301 	and.w	r3, r3, #1
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d004      	beq.n	8005aa6 <USB_EPStartXfer+0x50a>
 8005a9c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005aa0:	3301      	adds	r3, #1
 8005aa2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005aa6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005aaa:	b29b      	uxth	r3, r3
 8005aac:	029b      	lsls	r3, r3, #10
 8005aae:	b29a      	uxth	r2, r3
 8005ab0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ab2:	801a      	strh	r2, [r3, #0]
 8005ab4:	e03b      	b.n	8005b2e <USB_EPStartXfer+0x592>
 8005ab6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005aba:	095b      	lsrs	r3, r3, #5
 8005abc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005ac0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ac4:	f003 031f 	and.w	r3, r3, #31
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d104      	bne.n	8005ad6 <USB_EPStartXfer+0x53a>
 8005acc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005ad0:	3b01      	subs	r3, #1
 8005ad2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005ad6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005ada:	b29b      	uxth	r3, r3
 8005adc:	029b      	lsls	r3, r3, #10
 8005ade:	b29b      	uxth	r3, r3
 8005ae0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ae4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ae8:	b29a      	uxth	r2, r3
 8005aea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005aec:	801a      	strh	r2, [r3, #0]
 8005aee:	e01e      	b.n	8005b2e <USB_EPStartXfer+0x592>
 8005af0:	463b      	mov	r3, r7
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	785b      	ldrb	r3, [r3, #1]
 8005af6:	2b01      	cmp	r3, #1
 8005af8:	d119      	bne.n	8005b2e <USB_EPStartXfer+0x592>
 8005afa:	1d3b      	adds	r3, r7, #4
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	653b      	str	r3, [r7, #80]	; 0x50
 8005b00:	1d3b      	adds	r3, r7, #4
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b08:	b29b      	uxth	r3, r3
 8005b0a:	461a      	mov	r2, r3
 8005b0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b0e:	4413      	add	r3, r2
 8005b10:	653b      	str	r3, [r7, #80]	; 0x50
 8005b12:	463b      	mov	r3, r7
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	781b      	ldrb	r3, [r3, #0]
 8005b18:	011a      	lsls	r2, r3, #4
 8005b1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b1c:	4413      	add	r3, r2
 8005b1e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005b22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b28:	b29a      	uxth	r2, r3
 8005b2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b2c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005b2e:	463b      	mov	r3, r7
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	891b      	ldrh	r3, [r3, #8]
 8005b34:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005b38:	463b      	mov	r3, r7
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	6959      	ldr	r1, [r3, #20]
 8005b3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b42:	b29b      	uxth	r3, r3
 8005b44:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005b48:	1d38      	adds	r0, r7, #4
 8005b4a:	6800      	ldr	r0, [r0, #0]
 8005b4c:	f001 f95b 	bl	8006e06 <USB_WritePMA>
            ep->xfer_buff += len;
 8005b50:	463b      	mov	r3, r7
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	695a      	ldr	r2, [r3, #20]
 8005b56:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b5a:	441a      	add	r2, r3
 8005b5c:	463b      	mov	r3, r7
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005b62:	463b      	mov	r3, r7
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	6a1a      	ldr	r2, [r3, #32]
 8005b68:	463b      	mov	r3, r7
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	691b      	ldr	r3, [r3, #16]
 8005b6e:	429a      	cmp	r2, r3
 8005b70:	d909      	bls.n	8005b86 <USB_EPStartXfer+0x5ea>
            {
              ep->xfer_len_db -= len;
 8005b72:	463b      	mov	r3, r7
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	6a1a      	ldr	r2, [r3, #32]
 8005b78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b7c:	1ad2      	subs	r2, r2, r3
 8005b7e:	463b      	mov	r3, r7
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	621a      	str	r2, [r3, #32]
 8005b84:	e008      	b.n	8005b98 <USB_EPStartXfer+0x5fc>
            }
            else
            {
              len = ep->xfer_len_db;
 8005b86:	463b      	mov	r3, r7
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	6a1b      	ldr	r3, [r3, #32]
 8005b8c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8005b90:	463b      	mov	r3, r7
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	2200      	movs	r2, #0
 8005b96:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005b98:	1d3b      	adds	r3, r7, #4
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	643b      	str	r3, [r7, #64]	; 0x40
 8005b9e:	463b      	mov	r3, r7
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	785b      	ldrb	r3, [r3, #1]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d164      	bne.n	8005c72 <USB_EPStartXfer+0x6d6>
 8005ba8:	1d3b      	adds	r3, r7, #4
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	63bb      	str	r3, [r7, #56]	; 0x38
 8005bae:	1d3b      	adds	r3, r7, #4
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bb6:	b29b      	uxth	r3, r3
 8005bb8:	461a      	mov	r2, r3
 8005bba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bbc:	4413      	add	r3, r2
 8005bbe:	63bb      	str	r3, [r7, #56]	; 0x38
 8005bc0:	463b      	mov	r3, r7
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	781b      	ldrb	r3, [r3, #0]
 8005bc6:	011a      	lsls	r2, r3, #4
 8005bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bca:	4413      	add	r3, r2
 8005bcc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005bd0:	637b      	str	r3, [r7, #52]	; 0x34
 8005bd2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d112      	bne.n	8005c00 <USB_EPStartXfer+0x664>
 8005bda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bdc:	881b      	ldrh	r3, [r3, #0]
 8005bde:	b29b      	uxth	r3, r3
 8005be0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005be4:	b29a      	uxth	r2, r3
 8005be6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005be8:	801a      	strh	r2, [r3, #0]
 8005bea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bec:	881b      	ldrh	r3, [r3, #0]
 8005bee:	b29b      	uxth	r3, r3
 8005bf0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bf4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bf8:	b29a      	uxth	r2, r3
 8005bfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bfc:	801a      	strh	r2, [r3, #0]
 8005bfe:	e054      	b.n	8005caa <USB_EPStartXfer+0x70e>
 8005c00:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c04:	2b3e      	cmp	r3, #62	; 0x3e
 8005c06:	d817      	bhi.n	8005c38 <USB_EPStartXfer+0x69c>
 8005c08:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c0c:	085b      	lsrs	r3, r3, #1
 8005c0e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005c12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c16:	f003 0301 	and.w	r3, r3, #1
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d004      	beq.n	8005c28 <USB_EPStartXfer+0x68c>
 8005c1e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005c22:	3301      	adds	r3, #1
 8005c24:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005c28:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005c2c:	b29b      	uxth	r3, r3
 8005c2e:	029b      	lsls	r3, r3, #10
 8005c30:	b29a      	uxth	r2, r3
 8005c32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c34:	801a      	strh	r2, [r3, #0]
 8005c36:	e038      	b.n	8005caa <USB_EPStartXfer+0x70e>
 8005c38:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c3c:	095b      	lsrs	r3, r3, #5
 8005c3e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005c42:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c46:	f003 031f 	and.w	r3, r3, #31
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d104      	bne.n	8005c58 <USB_EPStartXfer+0x6bc>
 8005c4e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005c52:	3b01      	subs	r3, #1
 8005c54:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005c58:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005c5c:	b29b      	uxth	r3, r3
 8005c5e:	029b      	lsls	r3, r3, #10
 8005c60:	b29b      	uxth	r3, r3
 8005c62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c6a:	b29a      	uxth	r2, r3
 8005c6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c6e:	801a      	strh	r2, [r3, #0]
 8005c70:	e01b      	b.n	8005caa <USB_EPStartXfer+0x70e>
 8005c72:	463b      	mov	r3, r7
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	785b      	ldrb	r3, [r3, #1]
 8005c78:	2b01      	cmp	r3, #1
 8005c7a:	d116      	bne.n	8005caa <USB_EPStartXfer+0x70e>
 8005c7c:	1d3b      	adds	r3, r7, #4
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c84:	b29b      	uxth	r3, r3
 8005c86:	461a      	mov	r2, r3
 8005c88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c8a:	4413      	add	r3, r2
 8005c8c:	643b      	str	r3, [r7, #64]	; 0x40
 8005c8e:	463b      	mov	r3, r7
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	781b      	ldrb	r3, [r3, #0]
 8005c94:	011a      	lsls	r2, r3, #4
 8005c96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c98:	4413      	add	r3, r2
 8005c9a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005c9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ca0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ca4:	b29a      	uxth	r2, r3
 8005ca6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ca8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005caa:	463b      	mov	r3, r7
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	895b      	ldrh	r3, [r3, #10]
 8005cb0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005cb4:	463b      	mov	r3, r7
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	6959      	ldr	r1, [r3, #20]
 8005cba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cbe:	b29b      	uxth	r3, r3
 8005cc0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005cc4:	1d38      	adds	r0, r7, #4
 8005cc6:	6800      	ldr	r0, [r0, #0]
 8005cc8:	f001 f89d 	bl	8006e06 <USB_WritePMA>
 8005ccc:	e36c      	b.n	80063a8 <USB_EPStartXfer+0xe0c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005cce:	463b      	mov	r3, r7
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	6a1b      	ldr	r3, [r3, #32]
 8005cd4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8005cd8:	1d3b      	adds	r3, r7, #4
 8005cda:	681a      	ldr	r2, [r3, #0]
 8005cdc:	463b      	mov	r3, r7
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	781b      	ldrb	r3, [r3, #0]
 8005ce2:	009b      	lsls	r3, r3, #2
 8005ce4:	4413      	add	r3, r2
 8005ce6:	881b      	ldrh	r3, [r3, #0]
 8005ce8:	b29b      	uxth	r3, r3
 8005cea:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005cee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cf2:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005cf6:	1d3b      	adds	r3, r7, #4
 8005cf8:	681a      	ldr	r2, [r3, #0]
 8005cfa:	463b      	mov	r3, r7
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	781b      	ldrb	r3, [r3, #0]
 8005d00:	009b      	lsls	r3, r3, #2
 8005d02:	441a      	add	r2, r3
 8005d04:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005d08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d18:	b29b      	uxth	r3, r3
 8005d1a:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005d1c:	1d3b      	adds	r3, r7, #4
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005d22:	1d3b      	adds	r3, r7, #4
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d2a:	b29b      	uxth	r3, r3
 8005d2c:	461a      	mov	r2, r3
 8005d2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d30:	4413      	add	r3, r2
 8005d32:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005d34:	463b      	mov	r3, r7
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	781b      	ldrb	r3, [r3, #0]
 8005d3a:	011a      	lsls	r2, r3, #4
 8005d3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d3e:	4413      	add	r3, r2
 8005d40:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005d44:	65bb      	str	r3, [r7, #88]	; 0x58
 8005d46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d4a:	b29a      	uxth	r2, r3
 8005d4c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005d4e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005d50:	463b      	mov	r3, r7
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	891b      	ldrh	r3, [r3, #8]
 8005d56:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005d5a:	463b      	mov	r3, r7
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	6959      	ldr	r1, [r3, #20]
 8005d60:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d64:	b29b      	uxth	r3, r3
 8005d66:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005d6a:	1d38      	adds	r0, r7, #4
 8005d6c:	6800      	ldr	r0, [r0, #0]
 8005d6e:	f001 f84a 	bl	8006e06 <USB_WritePMA>
 8005d72:	e319      	b.n	80063a8 <USB_EPStartXfer+0xe0c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8005d74:	1d3b      	adds	r3, r7, #4
 8005d76:	681a      	ldr	r2, [r3, #0]
 8005d78:	463b      	mov	r3, r7
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	781b      	ldrb	r3, [r3, #0]
 8005d7e:	009b      	lsls	r3, r3, #2
 8005d80:	4413      	add	r3, r2
 8005d82:	881b      	ldrh	r3, [r3, #0]
 8005d84:	b29b      	uxth	r3, r3
 8005d86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d8e:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8005d92:	1d3b      	adds	r3, r7, #4
 8005d94:	681a      	ldr	r2, [r3, #0]
 8005d96:	463b      	mov	r3, r7
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	781b      	ldrb	r3, [r3, #0]
 8005d9c:	009b      	lsls	r3, r3, #2
 8005d9e:	441a      	add	r2, r3
 8005da0:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8005da4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005da8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005dac:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005db0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005db4:	b29b      	uxth	r3, r3
 8005db6:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005db8:	463b      	mov	r3, r7
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	6a1a      	ldr	r2, [r3, #32]
 8005dbe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005dc2:	1ad2      	subs	r2, r2, r3
 8005dc4:	463b      	mov	r3, r7
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005dca:	1d3b      	adds	r3, r7, #4
 8005dcc:	681a      	ldr	r2, [r3, #0]
 8005dce:	463b      	mov	r3, r7
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	781b      	ldrb	r3, [r3, #0]
 8005dd4:	009b      	lsls	r3, r3, #2
 8005dd6:	4413      	add	r3, r2
 8005dd8:	881b      	ldrh	r3, [r3, #0]
 8005dda:	b29b      	uxth	r3, r3
 8005ddc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	f000 8162 	beq.w	80060aa <USB_EPStartXfer+0xb0e>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005de6:	1d3b      	adds	r3, r7, #4
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005dee:	463b      	mov	r3, r7
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	785b      	ldrb	r3, [r3, #1]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d164      	bne.n	8005ec2 <USB_EPStartXfer+0x926>
 8005df8:	1d3b      	adds	r3, r7, #4
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	67bb      	str	r3, [r7, #120]	; 0x78
 8005dfe:	1d3b      	adds	r3, r7, #4
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e06:	b29b      	uxth	r3, r3
 8005e08:	461a      	mov	r2, r3
 8005e0a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e0c:	4413      	add	r3, r2
 8005e0e:	67bb      	str	r3, [r7, #120]	; 0x78
 8005e10:	463b      	mov	r3, r7
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	781b      	ldrb	r3, [r3, #0]
 8005e16:	011a      	lsls	r2, r3, #4
 8005e18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e1a:	4413      	add	r3, r2
 8005e1c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005e20:	677b      	str	r3, [r7, #116]	; 0x74
 8005e22:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d112      	bne.n	8005e50 <USB_EPStartXfer+0x8b4>
 8005e2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e2c:	881b      	ldrh	r3, [r3, #0]
 8005e2e:	b29b      	uxth	r3, r3
 8005e30:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005e34:	b29a      	uxth	r2, r3
 8005e36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e38:	801a      	strh	r2, [r3, #0]
 8005e3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e3c:	881b      	ldrh	r3, [r3, #0]
 8005e3e:	b29b      	uxth	r3, r3
 8005e40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e48:	b29a      	uxth	r2, r3
 8005e4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e4c:	801a      	strh	r2, [r3, #0]
 8005e4e:	e057      	b.n	8005f00 <USB_EPStartXfer+0x964>
 8005e50:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e54:	2b3e      	cmp	r3, #62	; 0x3e
 8005e56:	d817      	bhi.n	8005e88 <USB_EPStartXfer+0x8ec>
 8005e58:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e5c:	085b      	lsrs	r3, r3, #1
 8005e5e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005e62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e66:	f003 0301 	and.w	r3, r3, #1
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d004      	beq.n	8005e78 <USB_EPStartXfer+0x8dc>
 8005e6e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005e72:	3301      	adds	r3, #1
 8005e74:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005e78:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005e7c:	b29b      	uxth	r3, r3
 8005e7e:	029b      	lsls	r3, r3, #10
 8005e80:	b29a      	uxth	r2, r3
 8005e82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e84:	801a      	strh	r2, [r3, #0]
 8005e86:	e03b      	b.n	8005f00 <USB_EPStartXfer+0x964>
 8005e88:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e8c:	095b      	lsrs	r3, r3, #5
 8005e8e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005e92:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e96:	f003 031f 	and.w	r3, r3, #31
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d104      	bne.n	8005ea8 <USB_EPStartXfer+0x90c>
 8005e9e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005ea2:	3b01      	subs	r3, #1
 8005ea4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005ea8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005eac:	b29b      	uxth	r3, r3
 8005eae:	029b      	lsls	r3, r3, #10
 8005eb0:	b29b      	uxth	r3, r3
 8005eb2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005eb6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005eba:	b29a      	uxth	r2, r3
 8005ebc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ebe:	801a      	strh	r2, [r3, #0]
 8005ec0:	e01e      	b.n	8005f00 <USB_EPStartXfer+0x964>
 8005ec2:	463b      	mov	r3, r7
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	785b      	ldrb	r3, [r3, #1]
 8005ec8:	2b01      	cmp	r3, #1
 8005eca:	d119      	bne.n	8005f00 <USB_EPStartXfer+0x964>
 8005ecc:	1d3b      	adds	r3, r7, #4
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ed4:	b29b      	uxth	r3, r3
 8005ed6:	461a      	mov	r2, r3
 8005ed8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005edc:	4413      	add	r3, r2
 8005ede:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005ee2:	463b      	mov	r3, r7
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	781b      	ldrb	r3, [r3, #0]
 8005ee8:	011a      	lsls	r2, r3, #4
 8005eea:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005eee:	4413      	add	r3, r2
 8005ef0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005ef4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005ef6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005efa:	b29a      	uxth	r2, r3
 8005efc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005efe:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005f00:	463b      	mov	r3, r7
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	895b      	ldrh	r3, [r3, #10]
 8005f06:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005f0a:	463b      	mov	r3, r7
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	6959      	ldr	r1, [r3, #20]
 8005f10:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f14:	b29b      	uxth	r3, r3
 8005f16:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005f1a:	1d38      	adds	r0, r7, #4
 8005f1c:	6800      	ldr	r0, [r0, #0]
 8005f1e:	f000 ff72 	bl	8006e06 <USB_WritePMA>
          ep->xfer_buff += len;
 8005f22:	463b      	mov	r3, r7
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	695a      	ldr	r2, [r3, #20]
 8005f28:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f2c:	441a      	add	r2, r3
 8005f2e:	463b      	mov	r3, r7
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8005f34:	463b      	mov	r3, r7
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	6a1a      	ldr	r2, [r3, #32]
 8005f3a:	463b      	mov	r3, r7
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	691b      	ldr	r3, [r3, #16]
 8005f40:	429a      	cmp	r2, r3
 8005f42:	d909      	bls.n	8005f58 <USB_EPStartXfer+0x9bc>
          {
            ep->xfer_len_db -= len;
 8005f44:	463b      	mov	r3, r7
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	6a1a      	ldr	r2, [r3, #32]
 8005f4a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f4e:	1ad2      	subs	r2, r2, r3
 8005f50:	463b      	mov	r3, r7
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	621a      	str	r2, [r3, #32]
 8005f56:	e008      	b.n	8005f6a <USB_EPStartXfer+0x9ce>
          }
          else
          {
            len = ep->xfer_len_db;
 8005f58:	463b      	mov	r3, r7
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	6a1b      	ldr	r3, [r3, #32]
 8005f5e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8005f62:	463b      	mov	r3, r7
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	2200      	movs	r2, #0
 8005f68:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8005f6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	f000 821a 	beq.w	80063a8 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005f74:	463b      	mov	r3, r7
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	785b      	ldrb	r3, [r3, #1]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d164      	bne.n	8006048 <USB_EPStartXfer+0xaac>
 8005f7e:	1d3b      	adds	r3, r7, #4
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	66bb      	str	r3, [r7, #104]	; 0x68
 8005f84:	1d3b      	adds	r3, r7, #4
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f8c:	b29b      	uxth	r3, r3
 8005f8e:	461a      	mov	r2, r3
 8005f90:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005f92:	4413      	add	r3, r2
 8005f94:	66bb      	str	r3, [r7, #104]	; 0x68
 8005f96:	463b      	mov	r3, r7
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	781b      	ldrb	r3, [r3, #0]
 8005f9c:	011a      	lsls	r2, r3, #4
 8005f9e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005fa0:	4413      	add	r3, r2
 8005fa2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005fa6:	667b      	str	r3, [r7, #100]	; 0x64
 8005fa8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d112      	bne.n	8005fd6 <USB_EPStartXfer+0xa3a>
 8005fb0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005fb2:	881b      	ldrh	r3, [r3, #0]
 8005fb4:	b29b      	uxth	r3, r3
 8005fb6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005fba:	b29a      	uxth	r2, r3
 8005fbc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005fbe:	801a      	strh	r2, [r3, #0]
 8005fc0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005fc2:	881b      	ldrh	r3, [r3, #0]
 8005fc4:	b29b      	uxth	r3, r3
 8005fc6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fce:	b29a      	uxth	r2, r3
 8005fd0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005fd2:	801a      	strh	r2, [r3, #0]
 8005fd4:	e057      	b.n	8006086 <USB_EPStartXfer+0xaea>
 8005fd6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fda:	2b3e      	cmp	r3, #62	; 0x3e
 8005fdc:	d817      	bhi.n	800600e <USB_EPStartXfer+0xa72>
 8005fde:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fe2:	085b      	lsrs	r3, r3, #1
 8005fe4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005fe8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fec:	f003 0301 	and.w	r3, r3, #1
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d004      	beq.n	8005ffe <USB_EPStartXfer+0xa62>
 8005ff4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ff8:	3301      	adds	r3, #1
 8005ffa:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005ffe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006002:	b29b      	uxth	r3, r3
 8006004:	029b      	lsls	r3, r3, #10
 8006006:	b29a      	uxth	r2, r3
 8006008:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800600a:	801a      	strh	r2, [r3, #0]
 800600c:	e03b      	b.n	8006086 <USB_EPStartXfer+0xaea>
 800600e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006012:	095b      	lsrs	r3, r3, #5
 8006014:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006018:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800601c:	f003 031f 	and.w	r3, r3, #31
 8006020:	2b00      	cmp	r3, #0
 8006022:	d104      	bne.n	800602e <USB_EPStartXfer+0xa92>
 8006024:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006028:	3b01      	subs	r3, #1
 800602a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800602e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006032:	b29b      	uxth	r3, r3
 8006034:	029b      	lsls	r3, r3, #10
 8006036:	b29b      	uxth	r3, r3
 8006038:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800603c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006040:	b29a      	uxth	r2, r3
 8006042:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006044:	801a      	strh	r2, [r3, #0]
 8006046:	e01e      	b.n	8006086 <USB_EPStartXfer+0xaea>
 8006048:	463b      	mov	r3, r7
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	785b      	ldrb	r3, [r3, #1]
 800604e:	2b01      	cmp	r3, #1
 8006050:	d119      	bne.n	8006086 <USB_EPStartXfer+0xaea>
 8006052:	1d3b      	adds	r3, r7, #4
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	673b      	str	r3, [r7, #112]	; 0x70
 8006058:	1d3b      	adds	r3, r7, #4
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006060:	b29b      	uxth	r3, r3
 8006062:	461a      	mov	r2, r3
 8006064:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006066:	4413      	add	r3, r2
 8006068:	673b      	str	r3, [r7, #112]	; 0x70
 800606a:	463b      	mov	r3, r7
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	781b      	ldrb	r3, [r3, #0]
 8006070:	011a      	lsls	r2, r3, #4
 8006072:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006074:	4413      	add	r3, r2
 8006076:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800607a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800607c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006080:	b29a      	uxth	r2, r3
 8006082:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006084:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006086:	463b      	mov	r3, r7
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	891b      	ldrh	r3, [r3, #8]
 800608c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006090:	463b      	mov	r3, r7
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	6959      	ldr	r1, [r3, #20]
 8006096:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800609a:	b29b      	uxth	r3, r3
 800609c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80060a0:	1d38      	adds	r0, r7, #4
 80060a2:	6800      	ldr	r0, [r0, #0]
 80060a4:	f000 feaf 	bl	8006e06 <USB_WritePMA>
 80060a8:	e17e      	b.n	80063a8 <USB_EPStartXfer+0xe0c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80060aa:	463b      	mov	r3, r7
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	785b      	ldrb	r3, [r3, #1]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d16f      	bne.n	8006194 <USB_EPStartXfer+0xbf8>
 80060b4:	1d3b      	adds	r3, r7, #4
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80060bc:	1d3b      	adds	r3, r7, #4
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060c4:	b29b      	uxth	r3, r3
 80060c6:	461a      	mov	r2, r3
 80060c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80060cc:	4413      	add	r3, r2
 80060ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80060d2:	463b      	mov	r3, r7
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	781b      	ldrb	r3, [r3, #0]
 80060d8:	011a      	lsls	r2, r3, #4
 80060da:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80060de:	4413      	add	r3, r2
 80060e0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80060e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80060e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d116      	bne.n	800611e <USB_EPStartXfer+0xb82>
 80060f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80060f4:	881b      	ldrh	r3, [r3, #0]
 80060f6:	b29b      	uxth	r3, r3
 80060f8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80060fc:	b29a      	uxth	r2, r3
 80060fe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006102:	801a      	strh	r2, [r3, #0]
 8006104:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006108:	881b      	ldrh	r3, [r3, #0]
 800610a:	b29b      	uxth	r3, r3
 800610c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006110:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006114:	b29a      	uxth	r2, r3
 8006116:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800611a:	801a      	strh	r2, [r3, #0]
 800611c:	e05f      	b.n	80061de <USB_EPStartXfer+0xc42>
 800611e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006122:	2b3e      	cmp	r3, #62	; 0x3e
 8006124:	d818      	bhi.n	8006158 <USB_EPStartXfer+0xbbc>
 8006126:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800612a:	085b      	lsrs	r3, r3, #1
 800612c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006130:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006134:	f003 0301 	and.w	r3, r3, #1
 8006138:	2b00      	cmp	r3, #0
 800613a:	d004      	beq.n	8006146 <USB_EPStartXfer+0xbaa>
 800613c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006140:	3301      	adds	r3, #1
 8006142:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006146:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800614a:	b29b      	uxth	r3, r3
 800614c:	029b      	lsls	r3, r3, #10
 800614e:	b29a      	uxth	r2, r3
 8006150:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006154:	801a      	strh	r2, [r3, #0]
 8006156:	e042      	b.n	80061de <USB_EPStartXfer+0xc42>
 8006158:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800615c:	095b      	lsrs	r3, r3, #5
 800615e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006162:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006166:	f003 031f 	and.w	r3, r3, #31
 800616a:	2b00      	cmp	r3, #0
 800616c:	d104      	bne.n	8006178 <USB_EPStartXfer+0xbdc>
 800616e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006172:	3b01      	subs	r3, #1
 8006174:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006178:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800617c:	b29b      	uxth	r3, r3
 800617e:	029b      	lsls	r3, r3, #10
 8006180:	b29b      	uxth	r3, r3
 8006182:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006186:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800618a:	b29a      	uxth	r2, r3
 800618c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006190:	801a      	strh	r2, [r3, #0]
 8006192:	e024      	b.n	80061de <USB_EPStartXfer+0xc42>
 8006194:	463b      	mov	r3, r7
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	785b      	ldrb	r3, [r3, #1]
 800619a:	2b01      	cmp	r3, #1
 800619c:	d11f      	bne.n	80061de <USB_EPStartXfer+0xc42>
 800619e:	1d3b      	adds	r3, r7, #4
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80061a6:	1d3b      	adds	r3, r7, #4
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061ae:	b29b      	uxth	r3, r3
 80061b0:	461a      	mov	r2, r3
 80061b2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80061b6:	4413      	add	r3, r2
 80061b8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80061bc:	463b      	mov	r3, r7
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	781b      	ldrb	r3, [r3, #0]
 80061c2:	011a      	lsls	r2, r3, #4
 80061c4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80061c8:	4413      	add	r3, r2
 80061ca:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80061ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80061d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061d6:	b29a      	uxth	r2, r3
 80061d8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80061dc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80061de:	463b      	mov	r3, r7
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	891b      	ldrh	r3, [r3, #8]
 80061e4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80061e8:	463b      	mov	r3, r7
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	6959      	ldr	r1, [r3, #20]
 80061ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061f2:	b29b      	uxth	r3, r3
 80061f4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80061f8:	1d38      	adds	r0, r7, #4
 80061fa:	6800      	ldr	r0, [r0, #0]
 80061fc:	f000 fe03 	bl	8006e06 <USB_WritePMA>
          ep->xfer_buff += len;
 8006200:	463b      	mov	r3, r7
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	695a      	ldr	r2, [r3, #20]
 8006206:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800620a:	441a      	add	r2, r3
 800620c:	463b      	mov	r3, r7
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8006212:	463b      	mov	r3, r7
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	6a1a      	ldr	r2, [r3, #32]
 8006218:	463b      	mov	r3, r7
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	691b      	ldr	r3, [r3, #16]
 800621e:	429a      	cmp	r2, r3
 8006220:	d909      	bls.n	8006236 <USB_EPStartXfer+0xc9a>
          {
            ep->xfer_len_db -= len;
 8006222:	463b      	mov	r3, r7
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	6a1a      	ldr	r2, [r3, #32]
 8006228:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800622c:	1ad2      	subs	r2, r2, r3
 800622e:	463b      	mov	r3, r7
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	621a      	str	r2, [r3, #32]
 8006234:	e008      	b.n	8006248 <USB_EPStartXfer+0xcac>
          }
          else
          {
            len = ep->xfer_len_db;
 8006236:	463b      	mov	r3, r7
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	6a1b      	ldr	r3, [r3, #32]
 800623c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8006240:	463b      	mov	r3, r7
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	2200      	movs	r2, #0
 8006246:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8006248:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800624c:	2b00      	cmp	r3, #0
 800624e:	f000 80ab 	beq.w	80063a8 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006252:	1d3b      	adds	r3, r7, #4
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800625a:	463b      	mov	r3, r7
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	785b      	ldrb	r3, [r3, #1]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d16f      	bne.n	8006344 <USB_EPStartXfer+0xda8>
 8006264:	1d3b      	adds	r3, r7, #4
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800626c:	1d3b      	adds	r3, r7, #4
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006274:	b29b      	uxth	r3, r3
 8006276:	461a      	mov	r2, r3
 8006278:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800627c:	4413      	add	r3, r2
 800627e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006282:	463b      	mov	r3, r7
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	781b      	ldrb	r3, [r3, #0]
 8006288:	011a      	lsls	r2, r3, #4
 800628a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800628e:	4413      	add	r3, r2
 8006290:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006294:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006298:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800629c:	2b00      	cmp	r3, #0
 800629e:	d116      	bne.n	80062ce <USB_EPStartXfer+0xd32>
 80062a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80062a4:	881b      	ldrh	r3, [r3, #0]
 80062a6:	b29b      	uxth	r3, r3
 80062a8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80062ac:	b29a      	uxth	r2, r3
 80062ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80062b2:	801a      	strh	r2, [r3, #0]
 80062b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80062b8:	881b      	ldrh	r3, [r3, #0]
 80062ba:	b29b      	uxth	r3, r3
 80062bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062c4:	b29a      	uxth	r2, r3
 80062c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80062ca:	801a      	strh	r2, [r3, #0]
 80062cc:	e05b      	b.n	8006386 <USB_EPStartXfer+0xdea>
 80062ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062d2:	2b3e      	cmp	r3, #62	; 0x3e
 80062d4:	d818      	bhi.n	8006308 <USB_EPStartXfer+0xd6c>
 80062d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062da:	085b      	lsrs	r3, r3, #1
 80062dc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80062e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062e4:	f003 0301 	and.w	r3, r3, #1
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d004      	beq.n	80062f6 <USB_EPStartXfer+0xd5a>
 80062ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80062f0:	3301      	adds	r3, #1
 80062f2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80062f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80062fa:	b29b      	uxth	r3, r3
 80062fc:	029b      	lsls	r3, r3, #10
 80062fe:	b29a      	uxth	r2, r3
 8006300:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006304:	801a      	strh	r2, [r3, #0]
 8006306:	e03e      	b.n	8006386 <USB_EPStartXfer+0xdea>
 8006308:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800630c:	095b      	lsrs	r3, r3, #5
 800630e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006312:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006316:	f003 031f 	and.w	r3, r3, #31
 800631a:	2b00      	cmp	r3, #0
 800631c:	d104      	bne.n	8006328 <USB_EPStartXfer+0xd8c>
 800631e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006322:	3b01      	subs	r3, #1
 8006324:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006328:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800632c:	b29b      	uxth	r3, r3
 800632e:	029b      	lsls	r3, r3, #10
 8006330:	b29b      	uxth	r3, r3
 8006332:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006336:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800633a:	b29a      	uxth	r2, r3
 800633c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006340:	801a      	strh	r2, [r3, #0]
 8006342:	e020      	b.n	8006386 <USB_EPStartXfer+0xdea>
 8006344:	463b      	mov	r3, r7
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	785b      	ldrb	r3, [r3, #1]
 800634a:	2b01      	cmp	r3, #1
 800634c:	d11b      	bne.n	8006386 <USB_EPStartXfer+0xdea>
 800634e:	1d3b      	adds	r3, r7, #4
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006356:	b29b      	uxth	r3, r3
 8006358:	461a      	mov	r2, r3
 800635a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800635e:	4413      	add	r3, r2
 8006360:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006364:	463b      	mov	r3, r7
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	781b      	ldrb	r3, [r3, #0]
 800636a:	011a      	lsls	r2, r3, #4
 800636c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006370:	4413      	add	r3, r2
 8006372:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006376:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800637a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800637e:	b29a      	uxth	r2, r3
 8006380:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006384:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006386:	463b      	mov	r3, r7
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	895b      	ldrh	r3, [r3, #10]
 800638c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006390:	463b      	mov	r3, r7
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	6959      	ldr	r1, [r3, #20]
 8006396:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800639a:	b29b      	uxth	r3, r3
 800639c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80063a0:	1d38      	adds	r0, r7, #4
 80063a2:	6800      	ldr	r0, [r0, #0]
 80063a4:	f000 fd2f 	bl	8006e06 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80063a8:	1d3b      	adds	r3, r7, #4
 80063aa:	681a      	ldr	r2, [r3, #0]
 80063ac:	463b      	mov	r3, r7
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	781b      	ldrb	r3, [r3, #0]
 80063b2:	009b      	lsls	r3, r3, #2
 80063b4:	4413      	add	r3, r2
 80063b6:	881b      	ldrh	r3, [r3, #0]
 80063b8:	b29b      	uxth	r3, r3
 80063ba:	f107 020a 	add.w	r2, r7, #10
 80063be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063c6:	8013      	strh	r3, [r2, #0]
 80063c8:	f107 030a 	add.w	r3, r7, #10
 80063cc:	f107 020a 	add.w	r2, r7, #10
 80063d0:	8812      	ldrh	r2, [r2, #0]
 80063d2:	f082 0210 	eor.w	r2, r2, #16
 80063d6:	801a      	strh	r2, [r3, #0]
 80063d8:	f107 030a 	add.w	r3, r7, #10
 80063dc:	f107 020a 	add.w	r2, r7, #10
 80063e0:	8812      	ldrh	r2, [r2, #0]
 80063e2:	f082 0220 	eor.w	r2, r2, #32
 80063e6:	801a      	strh	r2, [r3, #0]
 80063e8:	1d3b      	adds	r3, r7, #4
 80063ea:	681a      	ldr	r2, [r3, #0]
 80063ec:	463b      	mov	r3, r7
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	781b      	ldrb	r3, [r3, #0]
 80063f2:	009b      	lsls	r3, r3, #2
 80063f4:	441a      	add	r2, r3
 80063f6:	f107 030a 	add.w	r3, r7, #10
 80063fa:	881b      	ldrh	r3, [r3, #0]
 80063fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006400:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006404:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006408:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800640c:	b29b      	uxth	r3, r3
 800640e:	8013      	strh	r3, [r2, #0]
 8006410:	e3b5      	b.n	8006b7e <USB_EPStartXfer+0x15e2>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006412:	463b      	mov	r3, r7
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	7b1b      	ldrb	r3, [r3, #12]
 8006418:	2b00      	cmp	r3, #0
 800641a:	f040 8090 	bne.w	800653e <USB_EPStartXfer+0xfa2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800641e:	463b      	mov	r3, r7
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	699a      	ldr	r2, [r3, #24]
 8006424:	463b      	mov	r3, r7
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	691b      	ldr	r3, [r3, #16]
 800642a:	429a      	cmp	r2, r3
 800642c:	d90e      	bls.n	800644c <USB_EPStartXfer+0xeb0>
      {
        len = ep->maxpacket;
 800642e:	463b      	mov	r3, r7
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	691b      	ldr	r3, [r3, #16]
 8006434:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8006438:	463b      	mov	r3, r7
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	699a      	ldr	r2, [r3, #24]
 800643e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006442:	1ad2      	subs	r2, r2, r3
 8006444:	463b      	mov	r3, r7
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	619a      	str	r2, [r3, #24]
 800644a:	e008      	b.n	800645e <USB_EPStartXfer+0xec2>
      }
      else
      {
        len = ep->xfer_len;
 800644c:	463b      	mov	r3, r7
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	699b      	ldr	r3, [r3, #24]
 8006452:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8006456:	463b      	mov	r3, r7
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	2200      	movs	r2, #0
 800645c:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800645e:	1d3b      	adds	r3, r7, #4
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006466:	1d3b      	adds	r3, r7, #4
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800646e:	b29b      	uxth	r3, r3
 8006470:	461a      	mov	r2, r3
 8006472:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006476:	4413      	add	r3, r2
 8006478:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800647c:	463b      	mov	r3, r7
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	781b      	ldrb	r3, [r3, #0]
 8006482:	011a      	lsls	r2, r3, #4
 8006484:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006488:	4413      	add	r3, r2
 800648a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800648e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006492:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006496:	2b00      	cmp	r3, #0
 8006498:	d116      	bne.n	80064c8 <USB_EPStartXfer+0xf2c>
 800649a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800649e:	881b      	ldrh	r3, [r3, #0]
 80064a0:	b29b      	uxth	r3, r3
 80064a2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80064a6:	b29a      	uxth	r2, r3
 80064a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80064ac:	801a      	strh	r2, [r3, #0]
 80064ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80064b2:	881b      	ldrh	r3, [r3, #0]
 80064b4:	b29b      	uxth	r3, r3
 80064b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064be:	b29a      	uxth	r2, r3
 80064c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80064c4:	801a      	strh	r2, [r3, #0]
 80064c6:	e32c      	b.n	8006b22 <USB_EPStartXfer+0x1586>
 80064c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064cc:	2b3e      	cmp	r3, #62	; 0x3e
 80064ce:	d818      	bhi.n	8006502 <USB_EPStartXfer+0xf66>
 80064d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064d4:	085b      	lsrs	r3, r3, #1
 80064d6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80064da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064de:	f003 0301 	and.w	r3, r3, #1
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d004      	beq.n	80064f0 <USB_EPStartXfer+0xf54>
 80064e6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80064ea:	3301      	adds	r3, #1
 80064ec:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80064f0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80064f4:	b29b      	uxth	r3, r3
 80064f6:	029b      	lsls	r3, r3, #10
 80064f8:	b29a      	uxth	r2, r3
 80064fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80064fe:	801a      	strh	r2, [r3, #0]
 8006500:	e30f      	b.n	8006b22 <USB_EPStartXfer+0x1586>
 8006502:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006506:	095b      	lsrs	r3, r3, #5
 8006508:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800650c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006510:	f003 031f 	and.w	r3, r3, #31
 8006514:	2b00      	cmp	r3, #0
 8006516:	d104      	bne.n	8006522 <USB_EPStartXfer+0xf86>
 8006518:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800651c:	3b01      	subs	r3, #1
 800651e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006522:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006526:	b29b      	uxth	r3, r3
 8006528:	029b      	lsls	r3, r3, #10
 800652a:	b29b      	uxth	r3, r3
 800652c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006530:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006534:	b29a      	uxth	r2, r3
 8006536:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800653a:	801a      	strh	r2, [r3, #0]
 800653c:	e2f1      	b.n	8006b22 <USB_EPStartXfer+0x1586>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800653e:	463b      	mov	r3, r7
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	78db      	ldrb	r3, [r3, #3]
 8006544:	2b02      	cmp	r3, #2
 8006546:	f040 818f 	bne.w	8006868 <USB_EPStartXfer+0x12cc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800654a:	463b      	mov	r3, r7
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	785b      	ldrb	r3, [r3, #1]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d175      	bne.n	8006640 <USB_EPStartXfer+0x10a4>
 8006554:	1d3b      	adds	r3, r7, #4
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800655c:	1d3b      	adds	r3, r7, #4
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006564:	b29b      	uxth	r3, r3
 8006566:	461a      	mov	r2, r3
 8006568:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800656c:	4413      	add	r3, r2
 800656e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006572:	463b      	mov	r3, r7
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	781b      	ldrb	r3, [r3, #0]
 8006578:	011a      	lsls	r2, r3, #4
 800657a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800657e:	4413      	add	r3, r2
 8006580:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006584:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006588:	463b      	mov	r3, r7
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	691b      	ldr	r3, [r3, #16]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d116      	bne.n	80065c0 <USB_EPStartXfer+0x1024>
 8006592:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006596:	881b      	ldrh	r3, [r3, #0]
 8006598:	b29b      	uxth	r3, r3
 800659a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800659e:	b29a      	uxth	r2, r3
 80065a0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80065a4:	801a      	strh	r2, [r3, #0]
 80065a6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80065aa:	881b      	ldrh	r3, [r3, #0]
 80065ac:	b29b      	uxth	r3, r3
 80065ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065b6:	b29a      	uxth	r2, r3
 80065b8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80065bc:	801a      	strh	r2, [r3, #0]
 80065be:	e065      	b.n	800668c <USB_EPStartXfer+0x10f0>
 80065c0:	463b      	mov	r3, r7
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	691b      	ldr	r3, [r3, #16]
 80065c6:	2b3e      	cmp	r3, #62	; 0x3e
 80065c8:	d81a      	bhi.n	8006600 <USB_EPStartXfer+0x1064>
 80065ca:	463b      	mov	r3, r7
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	691b      	ldr	r3, [r3, #16]
 80065d0:	085b      	lsrs	r3, r3, #1
 80065d2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80065d6:	463b      	mov	r3, r7
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	691b      	ldr	r3, [r3, #16]
 80065dc:	f003 0301 	and.w	r3, r3, #1
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d004      	beq.n	80065ee <USB_EPStartXfer+0x1052>
 80065e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065e8:	3301      	adds	r3, #1
 80065ea:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80065ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065f2:	b29b      	uxth	r3, r3
 80065f4:	029b      	lsls	r3, r3, #10
 80065f6:	b29a      	uxth	r2, r3
 80065f8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80065fc:	801a      	strh	r2, [r3, #0]
 80065fe:	e045      	b.n	800668c <USB_EPStartXfer+0x10f0>
 8006600:	463b      	mov	r3, r7
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	691b      	ldr	r3, [r3, #16]
 8006606:	095b      	lsrs	r3, r3, #5
 8006608:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800660c:	463b      	mov	r3, r7
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	691b      	ldr	r3, [r3, #16]
 8006612:	f003 031f 	and.w	r3, r3, #31
 8006616:	2b00      	cmp	r3, #0
 8006618:	d104      	bne.n	8006624 <USB_EPStartXfer+0x1088>
 800661a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800661e:	3b01      	subs	r3, #1
 8006620:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006624:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006628:	b29b      	uxth	r3, r3
 800662a:	029b      	lsls	r3, r3, #10
 800662c:	b29b      	uxth	r3, r3
 800662e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006632:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006636:	b29a      	uxth	r2, r3
 8006638:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800663c:	801a      	strh	r2, [r3, #0]
 800663e:	e025      	b.n	800668c <USB_EPStartXfer+0x10f0>
 8006640:	463b      	mov	r3, r7
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	785b      	ldrb	r3, [r3, #1]
 8006646:	2b01      	cmp	r3, #1
 8006648:	d120      	bne.n	800668c <USB_EPStartXfer+0x10f0>
 800664a:	1d3b      	adds	r3, r7, #4
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006652:	1d3b      	adds	r3, r7, #4
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800665a:	b29b      	uxth	r3, r3
 800665c:	461a      	mov	r2, r3
 800665e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006662:	4413      	add	r3, r2
 8006664:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006668:	463b      	mov	r3, r7
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	781b      	ldrb	r3, [r3, #0]
 800666e:	011a      	lsls	r2, r3, #4
 8006670:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006674:	4413      	add	r3, r2
 8006676:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800667a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800667e:	463b      	mov	r3, r7
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	691b      	ldr	r3, [r3, #16]
 8006684:	b29a      	uxth	r2, r3
 8006686:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800668a:	801a      	strh	r2, [r3, #0]
 800668c:	1d3b      	adds	r3, r7, #4
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006694:	463b      	mov	r3, r7
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	785b      	ldrb	r3, [r3, #1]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d175      	bne.n	800678a <USB_EPStartXfer+0x11ee>
 800669e:	1d3b      	adds	r3, r7, #4
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80066a6:	1d3b      	adds	r3, r7, #4
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066ae:	b29b      	uxth	r3, r3
 80066b0:	461a      	mov	r2, r3
 80066b2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80066b6:	4413      	add	r3, r2
 80066b8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80066bc:	463b      	mov	r3, r7
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	781b      	ldrb	r3, [r3, #0]
 80066c2:	011a      	lsls	r2, r3, #4
 80066c4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80066c8:	4413      	add	r3, r2
 80066ca:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80066ce:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80066d2:	463b      	mov	r3, r7
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	691b      	ldr	r3, [r3, #16]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d116      	bne.n	800670a <USB_EPStartXfer+0x116e>
 80066dc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80066e0:	881b      	ldrh	r3, [r3, #0]
 80066e2:	b29b      	uxth	r3, r3
 80066e4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80066e8:	b29a      	uxth	r2, r3
 80066ea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80066ee:	801a      	strh	r2, [r3, #0]
 80066f0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80066f4:	881b      	ldrh	r3, [r3, #0]
 80066f6:	b29b      	uxth	r3, r3
 80066f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006700:	b29a      	uxth	r2, r3
 8006702:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006706:	801a      	strh	r2, [r3, #0]
 8006708:	e061      	b.n	80067ce <USB_EPStartXfer+0x1232>
 800670a:	463b      	mov	r3, r7
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	691b      	ldr	r3, [r3, #16]
 8006710:	2b3e      	cmp	r3, #62	; 0x3e
 8006712:	d81a      	bhi.n	800674a <USB_EPStartXfer+0x11ae>
 8006714:	463b      	mov	r3, r7
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	691b      	ldr	r3, [r3, #16]
 800671a:	085b      	lsrs	r3, r3, #1
 800671c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006720:	463b      	mov	r3, r7
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	691b      	ldr	r3, [r3, #16]
 8006726:	f003 0301 	and.w	r3, r3, #1
 800672a:	2b00      	cmp	r3, #0
 800672c:	d004      	beq.n	8006738 <USB_EPStartXfer+0x119c>
 800672e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006732:	3301      	adds	r3, #1
 8006734:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006738:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800673c:	b29b      	uxth	r3, r3
 800673e:	029b      	lsls	r3, r3, #10
 8006740:	b29a      	uxth	r2, r3
 8006742:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006746:	801a      	strh	r2, [r3, #0]
 8006748:	e041      	b.n	80067ce <USB_EPStartXfer+0x1232>
 800674a:	463b      	mov	r3, r7
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	691b      	ldr	r3, [r3, #16]
 8006750:	095b      	lsrs	r3, r3, #5
 8006752:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006756:	463b      	mov	r3, r7
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	691b      	ldr	r3, [r3, #16]
 800675c:	f003 031f 	and.w	r3, r3, #31
 8006760:	2b00      	cmp	r3, #0
 8006762:	d104      	bne.n	800676e <USB_EPStartXfer+0x11d2>
 8006764:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006768:	3b01      	subs	r3, #1
 800676a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800676e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006772:	b29b      	uxth	r3, r3
 8006774:	029b      	lsls	r3, r3, #10
 8006776:	b29b      	uxth	r3, r3
 8006778:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800677c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006780:	b29a      	uxth	r2, r3
 8006782:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006786:	801a      	strh	r2, [r3, #0]
 8006788:	e021      	b.n	80067ce <USB_EPStartXfer+0x1232>
 800678a:	463b      	mov	r3, r7
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	785b      	ldrb	r3, [r3, #1]
 8006790:	2b01      	cmp	r3, #1
 8006792:	d11c      	bne.n	80067ce <USB_EPStartXfer+0x1232>
 8006794:	1d3b      	adds	r3, r7, #4
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800679c:	b29b      	uxth	r3, r3
 800679e:	461a      	mov	r2, r3
 80067a0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80067a4:	4413      	add	r3, r2
 80067a6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80067aa:	463b      	mov	r3, r7
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	781b      	ldrb	r3, [r3, #0]
 80067b0:	011a      	lsls	r2, r3, #4
 80067b2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80067b6:	4413      	add	r3, r2
 80067b8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80067bc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80067c0:	463b      	mov	r3, r7
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	691b      	ldr	r3, [r3, #16]
 80067c6:	b29a      	uxth	r2, r3
 80067c8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80067cc:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80067ce:	463b      	mov	r3, r7
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	69db      	ldr	r3, [r3, #28]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	f000 81a4 	beq.w	8006b22 <USB_EPStartXfer+0x1586>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80067da:	1d3b      	adds	r3, r7, #4
 80067dc:	681a      	ldr	r2, [r3, #0]
 80067de:	463b      	mov	r3, r7
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	781b      	ldrb	r3, [r3, #0]
 80067e4:	009b      	lsls	r3, r3, #2
 80067e6:	4413      	add	r3, r2
 80067e8:	881b      	ldrh	r3, [r3, #0]
 80067ea:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80067ee:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80067f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d005      	beq.n	8006806 <USB_EPStartXfer+0x126a>
 80067fa:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80067fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006802:	2b00      	cmp	r3, #0
 8006804:	d10d      	bne.n	8006822 <USB_EPStartXfer+0x1286>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006806:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800680a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800680e:	2b00      	cmp	r3, #0
 8006810:	f040 8187 	bne.w	8006b22 <USB_EPStartXfer+0x1586>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006814:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006818:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800681c:	2b00      	cmp	r3, #0
 800681e:	f040 8180 	bne.w	8006b22 <USB_EPStartXfer+0x1586>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8006822:	1d3b      	adds	r3, r7, #4
 8006824:	681a      	ldr	r2, [r3, #0]
 8006826:	463b      	mov	r3, r7
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	781b      	ldrb	r3, [r3, #0]
 800682c:	009b      	lsls	r3, r3, #2
 800682e:	4413      	add	r3, r2
 8006830:	881b      	ldrh	r3, [r3, #0]
 8006832:	b29b      	uxth	r3, r3
 8006834:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006838:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800683c:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8006840:	1d3b      	adds	r3, r7, #4
 8006842:	681a      	ldr	r2, [r3, #0]
 8006844:	463b      	mov	r3, r7
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	781b      	ldrb	r3, [r3, #0]
 800684a:	009b      	lsls	r3, r3, #2
 800684c:	441a      	add	r2, r3
 800684e:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8006852:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006856:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800685a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800685e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006862:	b29b      	uxth	r3, r3
 8006864:	8013      	strh	r3, [r2, #0]
 8006866:	e15c      	b.n	8006b22 <USB_EPStartXfer+0x1586>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006868:	463b      	mov	r3, r7
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	78db      	ldrb	r3, [r3, #3]
 800686e:	2b01      	cmp	r3, #1
 8006870:	f040 8155 	bne.w	8006b1e <USB_EPStartXfer+0x1582>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006874:	463b      	mov	r3, r7
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	699a      	ldr	r2, [r3, #24]
 800687a:	463b      	mov	r3, r7
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	691b      	ldr	r3, [r3, #16]
 8006880:	429a      	cmp	r2, r3
 8006882:	d90e      	bls.n	80068a2 <USB_EPStartXfer+0x1306>
        {
          len = ep->maxpacket;
 8006884:	463b      	mov	r3, r7
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	691b      	ldr	r3, [r3, #16]
 800688a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 800688e:	463b      	mov	r3, r7
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	699a      	ldr	r2, [r3, #24]
 8006894:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006898:	1ad2      	subs	r2, r2, r3
 800689a:	463b      	mov	r3, r7
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	619a      	str	r2, [r3, #24]
 80068a0:	e008      	b.n	80068b4 <USB_EPStartXfer+0x1318>
        }
        else
        {
          len = ep->xfer_len;
 80068a2:	463b      	mov	r3, r7
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	699b      	ldr	r3, [r3, #24]
 80068a8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 80068ac:	463b      	mov	r3, r7
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	2200      	movs	r2, #0
 80068b2:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80068b4:	463b      	mov	r3, r7
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	785b      	ldrb	r3, [r3, #1]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d16f      	bne.n	800699e <USB_EPStartXfer+0x1402>
 80068be:	1d3b      	adds	r3, r7, #4
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80068c6:	1d3b      	adds	r3, r7, #4
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068ce:	b29b      	uxth	r3, r3
 80068d0:	461a      	mov	r2, r3
 80068d2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80068d6:	4413      	add	r3, r2
 80068d8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80068dc:	463b      	mov	r3, r7
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	781b      	ldrb	r3, [r3, #0]
 80068e2:	011a      	lsls	r2, r3, #4
 80068e4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80068e8:	4413      	add	r3, r2
 80068ea:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80068ee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80068f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d116      	bne.n	8006928 <USB_EPStartXfer+0x138c>
 80068fa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80068fe:	881b      	ldrh	r3, [r3, #0]
 8006900:	b29b      	uxth	r3, r3
 8006902:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006906:	b29a      	uxth	r2, r3
 8006908:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800690c:	801a      	strh	r2, [r3, #0]
 800690e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006912:	881b      	ldrh	r3, [r3, #0]
 8006914:	b29b      	uxth	r3, r3
 8006916:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800691a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800691e:	b29a      	uxth	r2, r3
 8006920:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006924:	801a      	strh	r2, [r3, #0]
 8006926:	e05f      	b.n	80069e8 <USB_EPStartXfer+0x144c>
 8006928:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800692c:	2b3e      	cmp	r3, #62	; 0x3e
 800692e:	d818      	bhi.n	8006962 <USB_EPStartXfer+0x13c6>
 8006930:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006934:	085b      	lsrs	r3, r3, #1
 8006936:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800693a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800693e:	f003 0301 	and.w	r3, r3, #1
 8006942:	2b00      	cmp	r3, #0
 8006944:	d004      	beq.n	8006950 <USB_EPStartXfer+0x13b4>
 8006946:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800694a:	3301      	adds	r3, #1
 800694c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006950:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006954:	b29b      	uxth	r3, r3
 8006956:	029b      	lsls	r3, r3, #10
 8006958:	b29a      	uxth	r2, r3
 800695a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800695e:	801a      	strh	r2, [r3, #0]
 8006960:	e042      	b.n	80069e8 <USB_EPStartXfer+0x144c>
 8006962:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006966:	095b      	lsrs	r3, r3, #5
 8006968:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800696c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006970:	f003 031f 	and.w	r3, r3, #31
 8006974:	2b00      	cmp	r3, #0
 8006976:	d104      	bne.n	8006982 <USB_EPStartXfer+0x13e6>
 8006978:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800697c:	3b01      	subs	r3, #1
 800697e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006982:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006986:	b29b      	uxth	r3, r3
 8006988:	029b      	lsls	r3, r3, #10
 800698a:	b29b      	uxth	r3, r3
 800698c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006990:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006994:	b29a      	uxth	r2, r3
 8006996:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800699a:	801a      	strh	r2, [r3, #0]
 800699c:	e024      	b.n	80069e8 <USB_EPStartXfer+0x144c>
 800699e:	463b      	mov	r3, r7
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	785b      	ldrb	r3, [r3, #1]
 80069a4:	2b01      	cmp	r3, #1
 80069a6:	d11f      	bne.n	80069e8 <USB_EPStartXfer+0x144c>
 80069a8:	1d3b      	adds	r3, r7, #4
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80069b0:	1d3b      	adds	r3, r7, #4
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069b8:	b29b      	uxth	r3, r3
 80069ba:	461a      	mov	r2, r3
 80069bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069c0:	4413      	add	r3, r2
 80069c2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80069c6:	463b      	mov	r3, r7
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	781b      	ldrb	r3, [r3, #0]
 80069cc:	011a      	lsls	r2, r3, #4
 80069ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069d2:	4413      	add	r3, r2
 80069d4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80069d8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80069dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069e0:	b29a      	uxth	r2, r3
 80069e2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80069e6:	801a      	strh	r2, [r3, #0]
 80069e8:	1d3b      	adds	r3, r7, #4
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80069f0:	463b      	mov	r3, r7
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	785b      	ldrb	r3, [r3, #1]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d16f      	bne.n	8006ada <USB_EPStartXfer+0x153e>
 80069fa:	1d3b      	adds	r3, r7, #4
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006a02:	1d3b      	adds	r3, r7, #4
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a0a:	b29b      	uxth	r3, r3
 8006a0c:	461a      	mov	r2, r3
 8006a0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a12:	4413      	add	r3, r2
 8006a14:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006a18:	463b      	mov	r3, r7
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	781b      	ldrb	r3, [r3, #0]
 8006a1e:	011a      	lsls	r2, r3, #4
 8006a20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a24:	4413      	add	r3, r2
 8006a26:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006a2a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006a2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d116      	bne.n	8006a64 <USB_EPStartXfer+0x14c8>
 8006a36:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006a3a:	881b      	ldrh	r3, [r3, #0]
 8006a3c:	b29b      	uxth	r3, r3
 8006a3e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006a42:	b29a      	uxth	r2, r3
 8006a44:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006a48:	801a      	strh	r2, [r3, #0]
 8006a4a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006a4e:	881b      	ldrh	r3, [r3, #0]
 8006a50:	b29b      	uxth	r3, r3
 8006a52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a5a:	b29a      	uxth	r2, r3
 8006a5c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006a60:	801a      	strh	r2, [r3, #0]
 8006a62:	e05e      	b.n	8006b22 <USB_EPStartXfer+0x1586>
 8006a64:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a68:	2b3e      	cmp	r3, #62	; 0x3e
 8006a6a:	d818      	bhi.n	8006a9e <USB_EPStartXfer+0x1502>
 8006a6c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a70:	085b      	lsrs	r3, r3, #1
 8006a72:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006a76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a7a:	f003 0301 	and.w	r3, r3, #1
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d004      	beq.n	8006a8c <USB_EPStartXfer+0x14f0>
 8006a82:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006a86:	3301      	adds	r3, #1
 8006a88:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006a8c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006a90:	b29b      	uxth	r3, r3
 8006a92:	029b      	lsls	r3, r3, #10
 8006a94:	b29a      	uxth	r2, r3
 8006a96:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006a9a:	801a      	strh	r2, [r3, #0]
 8006a9c:	e041      	b.n	8006b22 <USB_EPStartXfer+0x1586>
 8006a9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006aa2:	095b      	lsrs	r3, r3, #5
 8006aa4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006aa8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006aac:	f003 031f 	and.w	r3, r3, #31
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d104      	bne.n	8006abe <USB_EPStartXfer+0x1522>
 8006ab4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006ab8:	3b01      	subs	r3, #1
 8006aba:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006abe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006ac2:	b29b      	uxth	r3, r3
 8006ac4:	029b      	lsls	r3, r3, #10
 8006ac6:	b29b      	uxth	r3, r3
 8006ac8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006acc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ad0:	b29a      	uxth	r2, r3
 8006ad2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006ad6:	801a      	strh	r2, [r3, #0]
 8006ad8:	e023      	b.n	8006b22 <USB_EPStartXfer+0x1586>
 8006ada:	463b      	mov	r3, r7
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	785b      	ldrb	r3, [r3, #1]
 8006ae0:	2b01      	cmp	r3, #1
 8006ae2:	d11e      	bne.n	8006b22 <USB_EPStartXfer+0x1586>
 8006ae4:	1d3b      	adds	r3, r7, #4
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006aec:	b29b      	uxth	r3, r3
 8006aee:	461a      	mov	r2, r3
 8006af0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006af4:	4413      	add	r3, r2
 8006af6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006afa:	463b      	mov	r3, r7
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	781b      	ldrb	r3, [r3, #0]
 8006b00:	011a      	lsls	r2, r3, #4
 8006b02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b06:	4413      	add	r3, r2
 8006b08:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006b0c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006b10:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b14:	b29a      	uxth	r2, r3
 8006b16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b1a:	801a      	strh	r2, [r3, #0]
 8006b1c:	e001      	b.n	8006b22 <USB_EPStartXfer+0x1586>
      }
      else
      {
        return HAL_ERROR;
 8006b1e:	2301      	movs	r3, #1
 8006b20:	e02e      	b.n	8006b80 <USB_EPStartXfer+0x15e4>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006b22:	1d3b      	adds	r3, r7, #4
 8006b24:	681a      	ldr	r2, [r3, #0]
 8006b26:	463b      	mov	r3, r7
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	781b      	ldrb	r3, [r3, #0]
 8006b2c:	009b      	lsls	r3, r3, #2
 8006b2e:	4413      	add	r3, r2
 8006b30:	881b      	ldrh	r3, [r3, #0]
 8006b32:	b29b      	uxth	r3, r3
 8006b34:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b3c:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006b40:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006b44:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006b48:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006b4c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006b50:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006b54:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006b58:	1d3b      	adds	r3, r7, #4
 8006b5a:	681a      	ldr	r2, [r3, #0]
 8006b5c:	463b      	mov	r3, r7
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	781b      	ldrb	r3, [r3, #0]
 8006b62:	009b      	lsls	r3, r3, #2
 8006b64:	441a      	add	r2, r3
 8006b66:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006b6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b7a:	b29b      	uxth	r3, r3
 8006b7c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006b7e:	2300      	movs	r3, #0
}
 8006b80:	4618      	mov	r0, r3
 8006b82:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bd80      	pop	{r7, pc}

08006b8a <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006b8a:	b480      	push	{r7}
 8006b8c:	b085      	sub	sp, #20
 8006b8e:	af00      	add	r7, sp, #0
 8006b90:	6078      	str	r0, [r7, #4]
 8006b92:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	785b      	ldrb	r3, [r3, #1]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d020      	beq.n	8006bde <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006b9c:	687a      	ldr	r2, [r7, #4]
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	781b      	ldrb	r3, [r3, #0]
 8006ba2:	009b      	lsls	r3, r3, #2
 8006ba4:	4413      	add	r3, r2
 8006ba6:	881b      	ldrh	r3, [r3, #0]
 8006ba8:	b29b      	uxth	r3, r3
 8006baa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006bb2:	81bb      	strh	r3, [r7, #12]
 8006bb4:	89bb      	ldrh	r3, [r7, #12]
 8006bb6:	f083 0310 	eor.w	r3, r3, #16
 8006bba:	81bb      	strh	r3, [r7, #12]
 8006bbc:	687a      	ldr	r2, [r7, #4]
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	781b      	ldrb	r3, [r3, #0]
 8006bc2:	009b      	lsls	r3, r3, #2
 8006bc4:	441a      	add	r2, r3
 8006bc6:	89bb      	ldrh	r3, [r7, #12]
 8006bc8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006bcc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006bd0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006bd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bd8:	b29b      	uxth	r3, r3
 8006bda:	8013      	strh	r3, [r2, #0]
 8006bdc:	e01f      	b.n	8006c1e <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006bde:	687a      	ldr	r2, [r7, #4]
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	781b      	ldrb	r3, [r3, #0]
 8006be4:	009b      	lsls	r3, r3, #2
 8006be6:	4413      	add	r3, r2
 8006be8:	881b      	ldrh	r3, [r3, #0]
 8006bea:	b29b      	uxth	r3, r3
 8006bec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006bf0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bf4:	81fb      	strh	r3, [r7, #14]
 8006bf6:	89fb      	ldrh	r3, [r7, #14]
 8006bf8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006bfc:	81fb      	strh	r3, [r7, #14]
 8006bfe:	687a      	ldr	r2, [r7, #4]
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	781b      	ldrb	r3, [r3, #0]
 8006c04:	009b      	lsls	r3, r3, #2
 8006c06:	441a      	add	r2, r3
 8006c08:	89fb      	ldrh	r3, [r7, #14]
 8006c0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c1a:	b29b      	uxth	r3, r3
 8006c1c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006c1e:	2300      	movs	r3, #0
}
 8006c20:	4618      	mov	r0, r3
 8006c22:	3714      	adds	r7, #20
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bc80      	pop	{r7}
 8006c28:	4770      	bx	lr

08006c2a <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006c2a:	b480      	push	{r7}
 8006c2c:	b087      	sub	sp, #28
 8006c2e:	af00      	add	r7, sp, #0
 8006c30:	6078      	str	r0, [r7, #4]
 8006c32:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	7b1b      	ldrb	r3, [r3, #12]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	f040 809d 	bne.w	8006d78 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	785b      	ldrb	r3, [r3, #1]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d04c      	beq.n	8006ce0 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006c46:	687a      	ldr	r2, [r7, #4]
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	781b      	ldrb	r3, [r3, #0]
 8006c4c:	009b      	lsls	r3, r3, #2
 8006c4e:	4413      	add	r3, r2
 8006c50:	881b      	ldrh	r3, [r3, #0]
 8006c52:	823b      	strh	r3, [r7, #16]
 8006c54:	8a3b      	ldrh	r3, [r7, #16]
 8006c56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d01b      	beq.n	8006c96 <USB_EPClearStall+0x6c>
 8006c5e:	687a      	ldr	r2, [r7, #4]
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	781b      	ldrb	r3, [r3, #0]
 8006c64:	009b      	lsls	r3, r3, #2
 8006c66:	4413      	add	r3, r2
 8006c68:	881b      	ldrh	r3, [r3, #0]
 8006c6a:	b29b      	uxth	r3, r3
 8006c6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c74:	81fb      	strh	r3, [r7, #14]
 8006c76:	687a      	ldr	r2, [r7, #4]
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	781b      	ldrb	r3, [r3, #0]
 8006c7c:	009b      	lsls	r3, r3, #2
 8006c7e:	441a      	add	r2, r3
 8006c80:	89fb      	ldrh	r3, [r7, #14]
 8006c82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c8e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006c92:	b29b      	uxth	r3, r3
 8006c94:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	78db      	ldrb	r3, [r3, #3]
 8006c9a:	2b01      	cmp	r3, #1
 8006c9c:	d06c      	beq.n	8006d78 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006c9e:	687a      	ldr	r2, [r7, #4]
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	781b      	ldrb	r3, [r3, #0]
 8006ca4:	009b      	lsls	r3, r3, #2
 8006ca6:	4413      	add	r3, r2
 8006ca8:	881b      	ldrh	r3, [r3, #0]
 8006caa:	b29b      	uxth	r3, r3
 8006cac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006cb0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006cb4:	81bb      	strh	r3, [r7, #12]
 8006cb6:	89bb      	ldrh	r3, [r7, #12]
 8006cb8:	f083 0320 	eor.w	r3, r3, #32
 8006cbc:	81bb      	strh	r3, [r7, #12]
 8006cbe:	687a      	ldr	r2, [r7, #4]
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	781b      	ldrb	r3, [r3, #0]
 8006cc4:	009b      	lsls	r3, r3, #2
 8006cc6:	441a      	add	r2, r3
 8006cc8:	89bb      	ldrh	r3, [r7, #12]
 8006cca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006cce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006cd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006cd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cda:	b29b      	uxth	r3, r3
 8006cdc:	8013      	strh	r3, [r2, #0]
 8006cde:	e04b      	b.n	8006d78 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006ce0:	687a      	ldr	r2, [r7, #4]
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	781b      	ldrb	r3, [r3, #0]
 8006ce6:	009b      	lsls	r3, r3, #2
 8006ce8:	4413      	add	r3, r2
 8006cea:	881b      	ldrh	r3, [r3, #0]
 8006cec:	82fb      	strh	r3, [r7, #22]
 8006cee:	8afb      	ldrh	r3, [r7, #22]
 8006cf0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d01b      	beq.n	8006d30 <USB_EPClearStall+0x106>
 8006cf8:	687a      	ldr	r2, [r7, #4]
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	781b      	ldrb	r3, [r3, #0]
 8006cfe:	009b      	lsls	r3, r3, #2
 8006d00:	4413      	add	r3, r2
 8006d02:	881b      	ldrh	r3, [r3, #0]
 8006d04:	b29b      	uxth	r3, r3
 8006d06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d0e:	82bb      	strh	r3, [r7, #20]
 8006d10:	687a      	ldr	r2, [r7, #4]
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	781b      	ldrb	r3, [r3, #0]
 8006d16:	009b      	lsls	r3, r3, #2
 8006d18:	441a      	add	r2, r3
 8006d1a:	8abb      	ldrh	r3, [r7, #20]
 8006d1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d24:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006d28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d2c:	b29b      	uxth	r3, r3
 8006d2e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006d30:	687a      	ldr	r2, [r7, #4]
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	781b      	ldrb	r3, [r3, #0]
 8006d36:	009b      	lsls	r3, r3, #2
 8006d38:	4413      	add	r3, r2
 8006d3a:	881b      	ldrh	r3, [r3, #0]
 8006d3c:	b29b      	uxth	r3, r3
 8006d3e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006d42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d46:	827b      	strh	r3, [r7, #18]
 8006d48:	8a7b      	ldrh	r3, [r7, #18]
 8006d4a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006d4e:	827b      	strh	r3, [r7, #18]
 8006d50:	8a7b      	ldrh	r3, [r7, #18]
 8006d52:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006d56:	827b      	strh	r3, [r7, #18]
 8006d58:	687a      	ldr	r2, [r7, #4]
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	781b      	ldrb	r3, [r3, #0]
 8006d5e:	009b      	lsls	r3, r3, #2
 8006d60:	441a      	add	r2, r3
 8006d62:	8a7b      	ldrh	r3, [r7, #18]
 8006d64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d74:	b29b      	uxth	r3, r3
 8006d76:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006d78:	2300      	movs	r3, #0
}
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	371c      	adds	r7, #28
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bc80      	pop	{r7}
 8006d82:	4770      	bx	lr

08006d84 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006d84:	b480      	push	{r7}
 8006d86:	b083      	sub	sp, #12
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
 8006d8c:	460b      	mov	r3, r1
 8006d8e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006d90:	78fb      	ldrb	r3, [r7, #3]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d103      	bne.n	8006d9e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2280      	movs	r2, #128	; 0x80
 8006d9a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006d9e:	2300      	movs	r3, #0
}
 8006da0:	4618      	mov	r0, r3
 8006da2:	370c      	adds	r7, #12
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bc80      	pop	{r7}
 8006da8:	4770      	bx	lr

08006daa <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006daa:	b480      	push	{r7}
 8006dac:	b083      	sub	sp, #12
 8006dae:	af00      	add	r7, sp, #0
 8006db0:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006db2:	2300      	movs	r3, #0
}
 8006db4:	4618      	mov	r0, r3
 8006db6:	370c      	adds	r7, #12
 8006db8:	46bd      	mov	sp, r7
 8006dba:	bc80      	pop	{r7}
 8006dbc:	4770      	bx	lr

08006dbe <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006dbe:	b480      	push	{r7}
 8006dc0:	b083      	sub	sp, #12
 8006dc2:	af00      	add	r7, sp, #0
 8006dc4:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006dc6:	2300      	movs	r3, #0
}
 8006dc8:	4618      	mov	r0, r3
 8006dca:	370c      	adds	r7, #12
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	bc80      	pop	{r7}
 8006dd0:	4770      	bx	lr

08006dd2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8006dd2:	b480      	push	{r7}
 8006dd4:	b085      	sub	sp, #20
 8006dd6:	af00      	add	r7, sp, #0
 8006dd8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006de0:	b29b      	uxth	r3, r3
 8006de2:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006de4:	68fb      	ldr	r3, [r7, #12]
}
 8006de6:	4618      	mov	r0, r3
 8006de8:	3714      	adds	r7, #20
 8006dea:	46bd      	mov	sp, r7
 8006dec:	bc80      	pop	{r7}
 8006dee:	4770      	bx	lr

08006df0 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006df0:	b480      	push	{r7}
 8006df2:	b083      	sub	sp, #12
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
 8006df8:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006dfa:	2300      	movs	r3, #0
}
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	370c      	adds	r7, #12
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bc80      	pop	{r7}
 8006e04:	4770      	bx	lr

08006e06 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006e06:	b480      	push	{r7}
 8006e08:	b08d      	sub	sp, #52	; 0x34
 8006e0a:	af00      	add	r7, sp, #0
 8006e0c:	60f8      	str	r0, [r7, #12]
 8006e0e:	60b9      	str	r1, [r7, #8]
 8006e10:	4611      	mov	r1, r2
 8006e12:	461a      	mov	r2, r3
 8006e14:	460b      	mov	r3, r1
 8006e16:	80fb      	strh	r3, [r7, #6]
 8006e18:	4613      	mov	r3, r2
 8006e1a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006e1c:	88bb      	ldrh	r3, [r7, #4]
 8006e1e:	3301      	adds	r3, #1
 8006e20:	085b      	lsrs	r3, r3, #1
 8006e22:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006e2c:	88fb      	ldrh	r3, [r7, #6]
 8006e2e:	005a      	lsls	r2, r3, #1
 8006e30:	69fb      	ldr	r3, [r7, #28]
 8006e32:	4413      	add	r3, r2
 8006e34:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006e38:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8006e3a:	6a3b      	ldr	r3, [r7, #32]
 8006e3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e3e:	e01e      	b.n	8006e7e <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8006e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e42:	781b      	ldrb	r3, [r3, #0]
 8006e44:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8006e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e48:	3301      	adds	r3, #1
 8006e4a:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8006e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e4e:	781b      	ldrb	r3, [r3, #0]
 8006e50:	b29b      	uxth	r3, r3
 8006e52:	021b      	lsls	r3, r3, #8
 8006e54:	b29b      	uxth	r3, r3
 8006e56:	461a      	mov	r2, r3
 8006e58:	69bb      	ldr	r3, [r7, #24]
 8006e5a:	4313      	orrs	r3, r2
 8006e5c:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8006e5e:	697b      	ldr	r3, [r7, #20]
 8006e60:	b29a      	uxth	r2, r3
 8006e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e64:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e68:	3302      	adds	r3, #2
 8006e6a:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8006e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e6e:	3302      	adds	r3, #2
 8006e70:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8006e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e74:	3301      	adds	r3, #1
 8006e76:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8006e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e7a:	3b01      	subs	r3, #1
 8006e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d1dd      	bne.n	8006e40 <USB_WritePMA+0x3a>
  }
}
 8006e84:	bf00      	nop
 8006e86:	bf00      	nop
 8006e88:	3734      	adds	r7, #52	; 0x34
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bc80      	pop	{r7}
 8006e8e:	4770      	bx	lr

08006e90 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006e90:	b480      	push	{r7}
 8006e92:	b08b      	sub	sp, #44	; 0x2c
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	60f8      	str	r0, [r7, #12]
 8006e98:	60b9      	str	r1, [r7, #8]
 8006e9a:	4611      	mov	r1, r2
 8006e9c:	461a      	mov	r2, r3
 8006e9e:	460b      	mov	r3, r1
 8006ea0:	80fb      	strh	r3, [r7, #6]
 8006ea2:	4613      	mov	r3, r2
 8006ea4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006ea6:	88bb      	ldrh	r3, [r7, #4]
 8006ea8:	085b      	lsrs	r3, r3, #1
 8006eaa:	b29b      	uxth	r3, r3
 8006eac:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006eb2:	68bb      	ldr	r3, [r7, #8]
 8006eb4:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006eb6:	88fb      	ldrh	r3, [r7, #6]
 8006eb8:	005a      	lsls	r2, r3, #1
 8006eba:	697b      	ldr	r3, [r7, #20]
 8006ebc:	4413      	add	r3, r2
 8006ebe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ec2:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8006ec4:	69bb      	ldr	r3, [r7, #24]
 8006ec6:	627b      	str	r3, [r7, #36]	; 0x24
 8006ec8:	e01b      	b.n	8006f02 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8006eca:	6a3b      	ldr	r3, [r7, #32]
 8006ecc:	881b      	ldrh	r3, [r3, #0]
 8006ece:	b29b      	uxth	r3, r3
 8006ed0:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006ed2:	6a3b      	ldr	r3, [r7, #32]
 8006ed4:	3302      	adds	r3, #2
 8006ed6:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006ed8:	693b      	ldr	r3, [r7, #16]
 8006eda:	b2da      	uxtb	r2, r3
 8006edc:	69fb      	ldr	r3, [r7, #28]
 8006ede:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006ee0:	69fb      	ldr	r3, [r7, #28]
 8006ee2:	3301      	adds	r3, #1
 8006ee4:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8006ee6:	693b      	ldr	r3, [r7, #16]
 8006ee8:	0a1b      	lsrs	r3, r3, #8
 8006eea:	b2da      	uxtb	r2, r3
 8006eec:	69fb      	ldr	r3, [r7, #28]
 8006eee:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006ef0:	69fb      	ldr	r3, [r7, #28]
 8006ef2:	3301      	adds	r3, #1
 8006ef4:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006ef6:	6a3b      	ldr	r3, [r7, #32]
 8006ef8:	3302      	adds	r3, #2
 8006efa:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8006efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006efe:	3b01      	subs	r3, #1
 8006f00:	627b      	str	r3, [r7, #36]	; 0x24
 8006f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d1e0      	bne.n	8006eca <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8006f08:	88bb      	ldrh	r3, [r7, #4]
 8006f0a:	f003 0301 	and.w	r3, r3, #1
 8006f0e:	b29b      	uxth	r3, r3
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d007      	beq.n	8006f24 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8006f14:	6a3b      	ldr	r3, [r7, #32]
 8006f16:	881b      	ldrh	r3, [r3, #0]
 8006f18:	b29b      	uxth	r3, r3
 8006f1a:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006f1c:	693b      	ldr	r3, [r7, #16]
 8006f1e:	b2da      	uxtb	r2, r3
 8006f20:	69fb      	ldr	r3, [r7, #28]
 8006f22:	701a      	strb	r2, [r3, #0]
  }
}
 8006f24:	bf00      	nop
 8006f26:	372c      	adds	r7, #44	; 0x2c
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	bc80      	pop	{r7}
 8006f2c:	4770      	bx	lr

08006f2e <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006f2e:	b580      	push	{r7, lr}
 8006f30:	b084      	sub	sp, #16
 8006f32:	af00      	add	r7, sp, #0
 8006f34:	6078      	str	r0, [r7, #4]
 8006f36:	460b      	mov	r3, r1
 8006f38:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	7c1b      	ldrb	r3, [r3, #16]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d115      	bne.n	8006f72 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006f46:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006f4a:	2202      	movs	r2, #2
 8006f4c:	2181      	movs	r1, #129	; 0x81
 8006f4e:	6878      	ldr	r0, [r7, #4]
 8006f50:	f001 fe87 	bl	8008c62 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2201      	movs	r2, #1
 8006f58:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006f5a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006f5e:	2202      	movs	r2, #2
 8006f60:	2101      	movs	r1, #1
 8006f62:	6878      	ldr	r0, [r7, #4]
 8006f64:	f001 fe7d 	bl	8008c62 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2201      	movs	r2, #1
 8006f6c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8006f70:	e012      	b.n	8006f98 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006f72:	2340      	movs	r3, #64	; 0x40
 8006f74:	2202      	movs	r2, #2
 8006f76:	2181      	movs	r1, #129	; 0x81
 8006f78:	6878      	ldr	r0, [r7, #4]
 8006f7a:	f001 fe72 	bl	8008c62 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2201      	movs	r2, #1
 8006f82:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006f84:	2340      	movs	r3, #64	; 0x40
 8006f86:	2202      	movs	r2, #2
 8006f88:	2101      	movs	r1, #1
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	f001 fe69 	bl	8008c62 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2201      	movs	r2, #1
 8006f94:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006f98:	2308      	movs	r3, #8
 8006f9a:	2203      	movs	r2, #3
 8006f9c:	2182      	movs	r1, #130	; 0x82
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	f001 fe5f 	bl	8008c62 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2201      	movs	r2, #1
 8006fa8:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006faa:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006fae:	f001 ff7f 	bl	8008eb0 <USBD_static_malloc>
 8006fb2:	4602      	mov	r2, r0
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d102      	bne.n	8006fca <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8006fc4:	2301      	movs	r3, #1
 8006fc6:	73fb      	strb	r3, [r7, #15]
 8006fc8:	e026      	b.n	8007018 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fd0:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	2200      	movs	r2, #0
 8006fe0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	7c1b      	ldrb	r3, [r3, #16]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d109      	bne.n	8007008 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006ffa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006ffe:	2101      	movs	r1, #1
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	f001 ff1f 	bl	8008e44 <USBD_LL_PrepareReceive>
 8007006:	e007      	b.n	8007018 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800700e:	2340      	movs	r3, #64	; 0x40
 8007010:	2101      	movs	r1, #1
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	f001 ff16 	bl	8008e44 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8007018:	7bfb      	ldrb	r3, [r7, #15]
}
 800701a:	4618      	mov	r0, r3
 800701c:	3710      	adds	r7, #16
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}

08007022 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007022:	b580      	push	{r7, lr}
 8007024:	b084      	sub	sp, #16
 8007026:	af00      	add	r7, sp, #0
 8007028:	6078      	str	r0, [r7, #4]
 800702a:	460b      	mov	r3, r1
 800702c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800702e:	2300      	movs	r3, #0
 8007030:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007032:	2181      	movs	r1, #129	; 0x81
 8007034:	6878      	ldr	r0, [r7, #4]
 8007036:	f001 fe3a 	bl	8008cae <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2200      	movs	r2, #0
 800703e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007040:	2101      	movs	r1, #1
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	f001 fe33 	bl	8008cae <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2200      	movs	r2, #0
 800704c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007050:	2182      	movs	r1, #130	; 0x82
 8007052:	6878      	ldr	r0, [r7, #4]
 8007054:	f001 fe2b 	bl	8008cae <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2200      	movs	r2, #0
 800705c:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007064:	2b00      	cmp	r3, #0
 8007066:	d00e      	beq.n	8007086 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800706e:	685b      	ldr	r3, [r3, #4]
 8007070:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007078:	4618      	mov	r0, r3
 800707a:	f001 ff25 	bl	8008ec8 <USBD_static_free>
    pdev->pClassData = NULL;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2200      	movs	r2, #0
 8007082:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8007086:	7bfb      	ldrb	r3, [r7, #15]
}
 8007088:	4618      	mov	r0, r3
 800708a:	3710      	adds	r7, #16
 800708c:	46bd      	mov	sp, r7
 800708e:	bd80      	pop	{r7, pc}

08007090 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b086      	sub	sp, #24
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
 8007098:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070a0:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80070a2:	2300      	movs	r3, #0
 80070a4:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80070a6:	2300      	movs	r3, #0
 80070a8:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80070aa:	2300      	movs	r3, #0
 80070ac:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	781b      	ldrb	r3, [r3, #0]
 80070b2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d039      	beq.n	800712e <USBD_CDC_Setup+0x9e>
 80070ba:	2b20      	cmp	r3, #32
 80070bc:	d17f      	bne.n	80071be <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	88db      	ldrh	r3, [r3, #6]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d029      	beq.n	800711a <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	781b      	ldrb	r3, [r3, #0]
 80070ca:	b25b      	sxtb	r3, r3
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	da11      	bge.n	80070f4 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80070d6:	689b      	ldr	r3, [r3, #8]
 80070d8:	683a      	ldr	r2, [r7, #0]
 80070da:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80070dc:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80070de:	683a      	ldr	r2, [r7, #0]
 80070e0:	88d2      	ldrh	r2, [r2, #6]
 80070e2:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80070e4:	6939      	ldr	r1, [r7, #16]
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	88db      	ldrh	r3, [r3, #6]
 80070ea:	461a      	mov	r2, r3
 80070ec:	6878      	ldr	r0, [r7, #4]
 80070ee:	f001 fa0a 	bl	8008506 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80070f2:	e06b      	b.n	80071cc <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	785a      	ldrb	r2, [r3, #1]
 80070f8:	693b      	ldr	r3, [r7, #16]
 80070fa:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	88db      	ldrh	r3, [r3, #6]
 8007102:	b2da      	uxtb	r2, r3
 8007104:	693b      	ldr	r3, [r7, #16]
 8007106:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800710a:	6939      	ldr	r1, [r7, #16]
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	88db      	ldrh	r3, [r3, #6]
 8007110:	461a      	mov	r2, r3
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	f001 fa25 	bl	8008562 <USBD_CtlPrepareRx>
      break;
 8007118:	e058      	b.n	80071cc <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007120:	689b      	ldr	r3, [r3, #8]
 8007122:	683a      	ldr	r2, [r7, #0]
 8007124:	7850      	ldrb	r0, [r2, #1]
 8007126:	2200      	movs	r2, #0
 8007128:	6839      	ldr	r1, [r7, #0]
 800712a:	4798      	blx	r3
      break;
 800712c:	e04e      	b.n	80071cc <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	785b      	ldrb	r3, [r3, #1]
 8007132:	2b0b      	cmp	r3, #11
 8007134:	d02e      	beq.n	8007194 <USBD_CDC_Setup+0x104>
 8007136:	2b0b      	cmp	r3, #11
 8007138:	dc38      	bgt.n	80071ac <USBD_CDC_Setup+0x11c>
 800713a:	2b00      	cmp	r3, #0
 800713c:	d002      	beq.n	8007144 <USBD_CDC_Setup+0xb4>
 800713e:	2b0a      	cmp	r3, #10
 8007140:	d014      	beq.n	800716c <USBD_CDC_Setup+0xdc>
 8007142:	e033      	b.n	80071ac <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800714a:	2b03      	cmp	r3, #3
 800714c:	d107      	bne.n	800715e <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800714e:	f107 030c 	add.w	r3, r7, #12
 8007152:	2202      	movs	r2, #2
 8007154:	4619      	mov	r1, r3
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	f001 f9d5 	bl	8008506 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800715c:	e02e      	b.n	80071bc <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800715e:	6839      	ldr	r1, [r7, #0]
 8007160:	6878      	ldr	r0, [r7, #4]
 8007162:	f001 f966 	bl	8008432 <USBD_CtlError>
            ret = USBD_FAIL;
 8007166:	2302      	movs	r3, #2
 8007168:	75fb      	strb	r3, [r7, #23]
          break;
 800716a:	e027      	b.n	80071bc <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007172:	2b03      	cmp	r3, #3
 8007174:	d107      	bne.n	8007186 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8007176:	f107 030f 	add.w	r3, r7, #15
 800717a:	2201      	movs	r2, #1
 800717c:	4619      	mov	r1, r3
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	f001 f9c1 	bl	8008506 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007184:	e01a      	b.n	80071bc <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007186:	6839      	ldr	r1, [r7, #0]
 8007188:	6878      	ldr	r0, [r7, #4]
 800718a:	f001 f952 	bl	8008432 <USBD_CtlError>
            ret = USBD_FAIL;
 800718e:	2302      	movs	r3, #2
 8007190:	75fb      	strb	r3, [r7, #23]
          break;
 8007192:	e013      	b.n	80071bc <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800719a:	2b03      	cmp	r3, #3
 800719c:	d00d      	beq.n	80071ba <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800719e:	6839      	ldr	r1, [r7, #0]
 80071a0:	6878      	ldr	r0, [r7, #4]
 80071a2:	f001 f946 	bl	8008432 <USBD_CtlError>
            ret = USBD_FAIL;
 80071a6:	2302      	movs	r3, #2
 80071a8:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80071aa:	e006      	b.n	80071ba <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 80071ac:	6839      	ldr	r1, [r7, #0]
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f001 f93f 	bl	8008432 <USBD_CtlError>
          ret = USBD_FAIL;
 80071b4:	2302      	movs	r3, #2
 80071b6:	75fb      	strb	r3, [r7, #23]
          break;
 80071b8:	e000      	b.n	80071bc <USBD_CDC_Setup+0x12c>
          break;
 80071ba:	bf00      	nop
      }
      break;
 80071bc:	e006      	b.n	80071cc <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80071be:	6839      	ldr	r1, [r7, #0]
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	f001 f936 	bl	8008432 <USBD_CtlError>
      ret = USBD_FAIL;
 80071c6:	2302      	movs	r3, #2
 80071c8:	75fb      	strb	r3, [r7, #23]
      break;
 80071ca:	bf00      	nop
  }

  return ret;
 80071cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80071ce:	4618      	mov	r0, r3
 80071d0:	3718      	adds	r7, #24
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bd80      	pop	{r7, pc}

080071d6 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80071d6:	b580      	push	{r7, lr}
 80071d8:	b084      	sub	sp, #16
 80071da:	af00      	add	r7, sp, #0
 80071dc:	6078      	str	r0, [r7, #4]
 80071de:	460b      	mov	r3, r1
 80071e0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071e8:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80071f0:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d03a      	beq.n	8007272 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80071fc:	78fa      	ldrb	r2, [r7, #3]
 80071fe:	6879      	ldr	r1, [r7, #4]
 8007200:	4613      	mov	r3, r2
 8007202:	009b      	lsls	r3, r3, #2
 8007204:	4413      	add	r3, r2
 8007206:	009b      	lsls	r3, r3, #2
 8007208:	440b      	add	r3, r1
 800720a:	331c      	adds	r3, #28
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d029      	beq.n	8007266 <USBD_CDC_DataIn+0x90>
 8007212:	78fa      	ldrb	r2, [r7, #3]
 8007214:	6879      	ldr	r1, [r7, #4]
 8007216:	4613      	mov	r3, r2
 8007218:	009b      	lsls	r3, r3, #2
 800721a:	4413      	add	r3, r2
 800721c:	009b      	lsls	r3, r3, #2
 800721e:	440b      	add	r3, r1
 8007220:	331c      	adds	r3, #28
 8007222:	681a      	ldr	r2, [r3, #0]
 8007224:	78f9      	ldrb	r1, [r7, #3]
 8007226:	68b8      	ldr	r0, [r7, #8]
 8007228:	460b      	mov	r3, r1
 800722a:	009b      	lsls	r3, r3, #2
 800722c:	440b      	add	r3, r1
 800722e:	00db      	lsls	r3, r3, #3
 8007230:	4403      	add	r3, r0
 8007232:	3338      	adds	r3, #56	; 0x38
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	fbb2 f1f3 	udiv	r1, r2, r3
 800723a:	fb03 f301 	mul.w	r3, r3, r1
 800723e:	1ad3      	subs	r3, r2, r3
 8007240:	2b00      	cmp	r3, #0
 8007242:	d110      	bne.n	8007266 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8007244:	78fa      	ldrb	r2, [r7, #3]
 8007246:	6879      	ldr	r1, [r7, #4]
 8007248:	4613      	mov	r3, r2
 800724a:	009b      	lsls	r3, r3, #2
 800724c:	4413      	add	r3, r2
 800724e:	009b      	lsls	r3, r3, #2
 8007250:	440b      	add	r3, r1
 8007252:	331c      	adds	r3, #28
 8007254:	2200      	movs	r2, #0
 8007256:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007258:	78f9      	ldrb	r1, [r7, #3]
 800725a:	2300      	movs	r3, #0
 800725c:	2200      	movs	r2, #0
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	f001 fdcd 	bl	8008dfe <USBD_LL_Transmit>
 8007264:	e003      	b.n	800726e <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	2200      	movs	r2, #0
 800726a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800726e:	2300      	movs	r3, #0
 8007270:	e000      	b.n	8007274 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8007272:	2302      	movs	r3, #2
  }
}
 8007274:	4618      	mov	r0, r3
 8007276:	3710      	adds	r7, #16
 8007278:	46bd      	mov	sp, r7
 800727a:	bd80      	pop	{r7, pc}

0800727c <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b084      	sub	sp, #16
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
 8007284:	460b      	mov	r3, r1
 8007286:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800728e:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007290:	78fb      	ldrb	r3, [r7, #3]
 8007292:	4619      	mov	r1, r3
 8007294:	6878      	ldr	r0, [r7, #4]
 8007296:	f001 fdf8 	bl	8008e8a <USBD_LL_GetRxDataSize>
 800729a:	4602      	mov	r2, r0
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d00d      	beq.n	80072c8 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80072b2:	68db      	ldr	r3, [r3, #12]
 80072b4:	68fa      	ldr	r2, [r7, #12]
 80072b6:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80072ba:	68fa      	ldr	r2, [r7, #12]
 80072bc:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80072c0:	4611      	mov	r1, r2
 80072c2:	4798      	blx	r3

    return USBD_OK;
 80072c4:	2300      	movs	r3, #0
 80072c6:	e000      	b.n	80072ca <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80072c8:	2302      	movs	r3, #2
  }
}
 80072ca:	4618      	mov	r0, r3
 80072cc:	3710      	adds	r7, #16
 80072ce:	46bd      	mov	sp, r7
 80072d0:	bd80      	pop	{r7, pc}

080072d2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80072d2:	b580      	push	{r7, lr}
 80072d4:	b084      	sub	sp, #16
 80072d6:	af00      	add	r7, sp, #0
 80072d8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072e0:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d015      	beq.n	8007318 <USBD_CDC_EP0_RxReady+0x46>
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80072f2:	2bff      	cmp	r3, #255	; 0xff
 80072f4:	d010      	beq.n	8007318 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80072fc:	689b      	ldr	r3, [r3, #8]
 80072fe:	68fa      	ldr	r2, [r7, #12]
 8007300:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8007304:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007306:	68fa      	ldr	r2, [r7, #12]
 8007308:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800730c:	b292      	uxth	r2, r2
 800730e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	22ff      	movs	r2, #255	; 0xff
 8007314:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8007318:	2300      	movs	r3, #0
}
 800731a:	4618      	mov	r0, r3
 800731c:	3710      	adds	r7, #16
 800731e:	46bd      	mov	sp, r7
 8007320:	bd80      	pop	{r7, pc}
	...

08007324 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007324:	b480      	push	{r7}
 8007326:	b083      	sub	sp, #12
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2243      	movs	r2, #67	; 0x43
 8007330:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8007332:	4b03      	ldr	r3, [pc, #12]	; (8007340 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007334:	4618      	mov	r0, r3
 8007336:	370c      	adds	r7, #12
 8007338:	46bd      	mov	sp, r7
 800733a:	bc80      	pop	{r7}
 800733c:	4770      	bx	lr
 800733e:	bf00      	nop
 8007340:	20000130 	.word	0x20000130

08007344 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007344:	b480      	push	{r7}
 8007346:	b083      	sub	sp, #12
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2243      	movs	r2, #67	; 0x43
 8007350:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8007352:	4b03      	ldr	r3, [pc, #12]	; (8007360 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007354:	4618      	mov	r0, r3
 8007356:	370c      	adds	r7, #12
 8007358:	46bd      	mov	sp, r7
 800735a:	bc80      	pop	{r7}
 800735c:	4770      	bx	lr
 800735e:	bf00      	nop
 8007360:	200000ec 	.word	0x200000ec

08007364 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007364:	b480      	push	{r7}
 8007366:	b083      	sub	sp, #12
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2243      	movs	r2, #67	; 0x43
 8007370:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8007372:	4b03      	ldr	r3, [pc, #12]	; (8007380 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007374:	4618      	mov	r0, r3
 8007376:	370c      	adds	r7, #12
 8007378:	46bd      	mov	sp, r7
 800737a:	bc80      	pop	{r7}
 800737c:	4770      	bx	lr
 800737e:	bf00      	nop
 8007380:	20000174 	.word	0x20000174

08007384 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007384:	b480      	push	{r7}
 8007386:	b083      	sub	sp, #12
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	220a      	movs	r2, #10
 8007390:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8007392:	4b03      	ldr	r3, [pc, #12]	; (80073a0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007394:	4618      	mov	r0, r3
 8007396:	370c      	adds	r7, #12
 8007398:	46bd      	mov	sp, r7
 800739a:	bc80      	pop	{r7}
 800739c:	4770      	bx	lr
 800739e:	bf00      	nop
 80073a0:	200000a8 	.word	0x200000a8

080073a4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80073a4:	b480      	push	{r7}
 80073a6:	b085      	sub	sp, #20
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
 80073ac:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80073ae:	2302      	movs	r3, #2
 80073b0:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d005      	beq.n	80073c4 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	683a      	ldr	r2, [r7, #0]
 80073bc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 80073c0:	2300      	movs	r3, #0
 80073c2:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80073c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80073c6:	4618      	mov	r0, r3
 80073c8:	3714      	adds	r7, #20
 80073ca:	46bd      	mov	sp, r7
 80073cc:	bc80      	pop	{r7}
 80073ce:	4770      	bx	lr

080073d0 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80073d0:	b480      	push	{r7}
 80073d2:	b087      	sub	sp, #28
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	60f8      	str	r0, [r7, #12]
 80073d8:	60b9      	str	r1, [r7, #8]
 80073da:	4613      	mov	r3, r2
 80073dc:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073e4:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80073e6:	697b      	ldr	r3, [r7, #20]
 80073e8:	68ba      	ldr	r2, [r7, #8]
 80073ea:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80073ee:	88fa      	ldrh	r2, [r7, #6]
 80073f0:	697b      	ldr	r3, [r7, #20]
 80073f2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80073f6:	2300      	movs	r3, #0
}
 80073f8:	4618      	mov	r0, r3
 80073fa:	371c      	adds	r7, #28
 80073fc:	46bd      	mov	sp, r7
 80073fe:	bc80      	pop	{r7}
 8007400:	4770      	bx	lr

08007402 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8007402:	b480      	push	{r7}
 8007404:	b085      	sub	sp, #20
 8007406:	af00      	add	r7, sp, #0
 8007408:	6078      	str	r0, [r7, #4]
 800740a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007412:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	683a      	ldr	r2, [r7, #0]
 8007418:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800741c:	2300      	movs	r3, #0
}
 800741e:	4618      	mov	r0, r3
 8007420:	3714      	adds	r7, #20
 8007422:	46bd      	mov	sp, r7
 8007424:	bc80      	pop	{r7}
 8007426:	4770      	bx	lr

08007428 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b084      	sub	sp, #16
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007436:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800743e:	2b00      	cmp	r3, #0
 8007440:	d01c      	beq.n	800747c <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007448:	2b00      	cmp	r3, #0
 800744a:	d115      	bne.n	8007478 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	2201      	movs	r2, #1
 8007450:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800746a:	b29b      	uxth	r3, r3
 800746c:	2181      	movs	r1, #129	; 0x81
 800746e:	6878      	ldr	r0, [r7, #4]
 8007470:	f001 fcc5 	bl	8008dfe <USBD_LL_Transmit>

      return USBD_OK;
 8007474:	2300      	movs	r3, #0
 8007476:	e002      	b.n	800747e <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8007478:	2301      	movs	r3, #1
 800747a:	e000      	b.n	800747e <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800747c:	2302      	movs	r3, #2
  }
}
 800747e:	4618      	mov	r0, r3
 8007480:	3710      	adds	r7, #16
 8007482:	46bd      	mov	sp, r7
 8007484:	bd80      	pop	{r7, pc}

08007486 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007486:	b580      	push	{r7, lr}
 8007488:	b084      	sub	sp, #16
 800748a:	af00      	add	r7, sp, #0
 800748c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007494:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800749c:	2b00      	cmp	r3, #0
 800749e:	d017      	beq.n	80074d0 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	7c1b      	ldrb	r3, [r3, #16]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d109      	bne.n	80074bc <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80074ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80074b2:	2101      	movs	r1, #1
 80074b4:	6878      	ldr	r0, [r7, #4]
 80074b6:	f001 fcc5 	bl	8008e44 <USBD_LL_PrepareReceive>
 80074ba:	e007      	b.n	80074cc <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80074c2:	2340      	movs	r3, #64	; 0x40
 80074c4:	2101      	movs	r1, #1
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f001 fcbc 	bl	8008e44 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80074cc:	2300      	movs	r3, #0
 80074ce:	e000      	b.n	80074d2 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80074d0:	2302      	movs	r3, #2
  }
}
 80074d2:	4618      	mov	r0, r3
 80074d4:	3710      	adds	r7, #16
 80074d6:	46bd      	mov	sp, r7
 80074d8:	bd80      	pop	{r7, pc}

080074da <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80074da:	b580      	push	{r7, lr}
 80074dc:	b084      	sub	sp, #16
 80074de:	af00      	add	r7, sp, #0
 80074e0:	60f8      	str	r0, [r7, #12]
 80074e2:	60b9      	str	r1, [r7, #8]
 80074e4:	4613      	mov	r3, r2
 80074e6:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d101      	bne.n	80074f2 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80074ee:	2302      	movs	r3, #2
 80074f0:	e01a      	b.n	8007528 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d003      	beq.n	8007504 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	2200      	movs	r2, #0
 8007500:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007504:	68bb      	ldr	r3, [r7, #8]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d003      	beq.n	8007512 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	68ba      	ldr	r2, [r7, #8]
 800750e:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	2201      	movs	r2, #1
 8007516:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	79fa      	ldrb	r2, [r7, #7]
 800751e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007520:	68f8      	ldr	r0, [r7, #12]
 8007522:	f001 fb29 	bl	8008b78 <USBD_LL_Init>

  return USBD_OK;
 8007526:	2300      	movs	r3, #0
}
 8007528:	4618      	mov	r0, r3
 800752a:	3710      	adds	r7, #16
 800752c:	46bd      	mov	sp, r7
 800752e:	bd80      	pop	{r7, pc}

08007530 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007530:	b480      	push	{r7}
 8007532:	b085      	sub	sp, #20
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
 8007538:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800753a:	2300      	movs	r3, #0
 800753c:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d006      	beq.n	8007552 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	683a      	ldr	r2, [r7, #0]
 8007548:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800754c:	2300      	movs	r3, #0
 800754e:	73fb      	strb	r3, [r7, #15]
 8007550:	e001      	b.n	8007556 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8007552:	2302      	movs	r3, #2
 8007554:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007556:	7bfb      	ldrb	r3, [r7, #15]
}
 8007558:	4618      	mov	r0, r3
 800755a:	3714      	adds	r7, #20
 800755c:	46bd      	mov	sp, r7
 800755e:	bc80      	pop	{r7}
 8007560:	4770      	bx	lr

08007562 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007562:	b580      	push	{r7, lr}
 8007564:	b082      	sub	sp, #8
 8007566:	af00      	add	r7, sp, #0
 8007568:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800756a:	6878      	ldr	r0, [r7, #4]
 800756c:	f001 fb5e 	bl	8008c2c <USBD_LL_Start>

  return USBD_OK;
 8007570:	2300      	movs	r3, #0
}
 8007572:	4618      	mov	r0, r3
 8007574:	3708      	adds	r7, #8
 8007576:	46bd      	mov	sp, r7
 8007578:	bd80      	pop	{r7, pc}

0800757a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800757a:	b480      	push	{r7}
 800757c:	b083      	sub	sp, #12
 800757e:	af00      	add	r7, sp, #0
 8007580:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007582:	2300      	movs	r3, #0
}
 8007584:	4618      	mov	r0, r3
 8007586:	370c      	adds	r7, #12
 8007588:	46bd      	mov	sp, r7
 800758a:	bc80      	pop	{r7}
 800758c:	4770      	bx	lr

0800758e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800758e:	b580      	push	{r7, lr}
 8007590:	b084      	sub	sp, #16
 8007592:	af00      	add	r7, sp, #0
 8007594:	6078      	str	r0, [r7, #4]
 8007596:	460b      	mov	r3, r1
 8007598:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800759a:	2302      	movs	r3, #2
 800759c:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d00c      	beq.n	80075c2 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	78fa      	ldrb	r2, [r7, #3]
 80075b2:	4611      	mov	r1, r2
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	4798      	blx	r3
 80075b8:	4603      	mov	r3, r0
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d101      	bne.n	80075c2 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80075be:	2300      	movs	r3, #0
 80075c0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80075c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80075c4:	4618      	mov	r0, r3
 80075c6:	3710      	adds	r7, #16
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bd80      	pop	{r7, pc}

080075cc <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b082      	sub	sp, #8
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
 80075d4:	460b      	mov	r3, r1
 80075d6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075de:	685b      	ldr	r3, [r3, #4]
 80075e0:	78fa      	ldrb	r2, [r7, #3]
 80075e2:	4611      	mov	r1, r2
 80075e4:	6878      	ldr	r0, [r7, #4]
 80075e6:	4798      	blx	r3

  return USBD_OK;
 80075e8:	2300      	movs	r3, #0
}
 80075ea:	4618      	mov	r0, r3
 80075ec:	3708      	adds	r7, #8
 80075ee:	46bd      	mov	sp, r7
 80075f0:	bd80      	pop	{r7, pc}

080075f2 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80075f2:	b580      	push	{r7, lr}
 80075f4:	b082      	sub	sp, #8
 80075f6:	af00      	add	r7, sp, #0
 80075f8:	6078      	str	r0, [r7, #4]
 80075fa:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007602:	6839      	ldr	r1, [r7, #0]
 8007604:	4618      	mov	r0, r3
 8007606:	f000 fed8 	bl	80083ba <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2201      	movs	r2, #1
 800760e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007618:	461a      	mov	r2, r3
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007626:	f003 031f 	and.w	r3, r3, #31
 800762a:	2b02      	cmp	r3, #2
 800762c:	d016      	beq.n	800765c <USBD_LL_SetupStage+0x6a>
 800762e:	2b02      	cmp	r3, #2
 8007630:	d81c      	bhi.n	800766c <USBD_LL_SetupStage+0x7a>
 8007632:	2b00      	cmp	r3, #0
 8007634:	d002      	beq.n	800763c <USBD_LL_SetupStage+0x4a>
 8007636:	2b01      	cmp	r3, #1
 8007638:	d008      	beq.n	800764c <USBD_LL_SetupStage+0x5a>
 800763a:	e017      	b.n	800766c <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007642:	4619      	mov	r1, r3
 8007644:	6878      	ldr	r0, [r7, #4]
 8007646:	f000 f9cb 	bl	80079e0 <USBD_StdDevReq>
      break;
 800764a:	e01a      	b.n	8007682 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007652:	4619      	mov	r1, r3
 8007654:	6878      	ldr	r0, [r7, #4]
 8007656:	f000 fa2d 	bl	8007ab4 <USBD_StdItfReq>
      break;
 800765a:	e012      	b.n	8007682 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007662:	4619      	mov	r1, r3
 8007664:	6878      	ldr	r0, [r7, #4]
 8007666:	f000 fa6d 	bl	8007b44 <USBD_StdEPReq>
      break;
 800766a:	e00a      	b.n	8007682 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007672:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007676:	b2db      	uxtb	r3, r3
 8007678:	4619      	mov	r1, r3
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	f001 fb36 	bl	8008cec <USBD_LL_StallEP>
      break;
 8007680:	bf00      	nop
  }

  return USBD_OK;
 8007682:	2300      	movs	r3, #0
}
 8007684:	4618      	mov	r0, r3
 8007686:	3708      	adds	r7, #8
 8007688:	46bd      	mov	sp, r7
 800768a:	bd80      	pop	{r7, pc}

0800768c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b086      	sub	sp, #24
 8007690:	af00      	add	r7, sp, #0
 8007692:	60f8      	str	r0, [r7, #12]
 8007694:	460b      	mov	r3, r1
 8007696:	607a      	str	r2, [r7, #4]
 8007698:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800769a:	7afb      	ldrb	r3, [r7, #11]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d14b      	bne.n	8007738 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80076a6:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80076ae:	2b03      	cmp	r3, #3
 80076b0:	d134      	bne.n	800771c <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80076b2:	697b      	ldr	r3, [r7, #20]
 80076b4:	68da      	ldr	r2, [r3, #12]
 80076b6:	697b      	ldr	r3, [r7, #20]
 80076b8:	691b      	ldr	r3, [r3, #16]
 80076ba:	429a      	cmp	r2, r3
 80076bc:	d919      	bls.n	80076f2 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80076be:	697b      	ldr	r3, [r7, #20]
 80076c0:	68da      	ldr	r2, [r3, #12]
 80076c2:	697b      	ldr	r3, [r7, #20]
 80076c4:	691b      	ldr	r3, [r3, #16]
 80076c6:	1ad2      	subs	r2, r2, r3
 80076c8:	697b      	ldr	r3, [r7, #20]
 80076ca:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80076cc:	697b      	ldr	r3, [r7, #20]
 80076ce:	68da      	ldr	r2, [r3, #12]
 80076d0:	697b      	ldr	r3, [r7, #20]
 80076d2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80076d4:	429a      	cmp	r2, r3
 80076d6:	d203      	bcs.n	80076e0 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80076d8:	697b      	ldr	r3, [r7, #20]
 80076da:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80076dc:	b29b      	uxth	r3, r3
 80076de:	e002      	b.n	80076e6 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80076e0:	697b      	ldr	r3, [r7, #20]
 80076e2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80076e4:	b29b      	uxth	r3, r3
 80076e6:	461a      	mov	r2, r3
 80076e8:	6879      	ldr	r1, [r7, #4]
 80076ea:	68f8      	ldr	r0, [r7, #12]
 80076ec:	f000 ff57 	bl	800859e <USBD_CtlContinueRx>
 80076f0:	e038      	b.n	8007764 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076f8:	691b      	ldr	r3, [r3, #16]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d00a      	beq.n	8007714 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007704:	2b03      	cmp	r3, #3
 8007706:	d105      	bne.n	8007714 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800770e:	691b      	ldr	r3, [r3, #16]
 8007710:	68f8      	ldr	r0, [r7, #12]
 8007712:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007714:	68f8      	ldr	r0, [r7, #12]
 8007716:	f000 ff54 	bl	80085c2 <USBD_CtlSendStatus>
 800771a:	e023      	b.n	8007764 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007722:	2b05      	cmp	r3, #5
 8007724:	d11e      	bne.n	8007764 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	2200      	movs	r2, #0
 800772a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800772e:	2100      	movs	r1, #0
 8007730:	68f8      	ldr	r0, [r7, #12]
 8007732:	f001 fadb 	bl	8008cec <USBD_LL_StallEP>
 8007736:	e015      	b.n	8007764 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800773e:	699b      	ldr	r3, [r3, #24]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d00d      	beq.n	8007760 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800774a:	2b03      	cmp	r3, #3
 800774c:	d108      	bne.n	8007760 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007754:	699b      	ldr	r3, [r3, #24]
 8007756:	7afa      	ldrb	r2, [r7, #11]
 8007758:	4611      	mov	r1, r2
 800775a:	68f8      	ldr	r0, [r7, #12]
 800775c:	4798      	blx	r3
 800775e:	e001      	b.n	8007764 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007760:	2302      	movs	r3, #2
 8007762:	e000      	b.n	8007766 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007764:	2300      	movs	r3, #0
}
 8007766:	4618      	mov	r0, r3
 8007768:	3718      	adds	r7, #24
 800776a:	46bd      	mov	sp, r7
 800776c:	bd80      	pop	{r7, pc}

0800776e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800776e:	b580      	push	{r7, lr}
 8007770:	b086      	sub	sp, #24
 8007772:	af00      	add	r7, sp, #0
 8007774:	60f8      	str	r0, [r7, #12]
 8007776:	460b      	mov	r3, r1
 8007778:	607a      	str	r2, [r7, #4]
 800777a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800777c:	7afb      	ldrb	r3, [r7, #11]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d17f      	bne.n	8007882 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	3314      	adds	r3, #20
 8007786:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800778e:	2b02      	cmp	r3, #2
 8007790:	d15c      	bne.n	800784c <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8007792:	697b      	ldr	r3, [r7, #20]
 8007794:	68da      	ldr	r2, [r3, #12]
 8007796:	697b      	ldr	r3, [r7, #20]
 8007798:	691b      	ldr	r3, [r3, #16]
 800779a:	429a      	cmp	r2, r3
 800779c:	d915      	bls.n	80077ca <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800779e:	697b      	ldr	r3, [r7, #20]
 80077a0:	68da      	ldr	r2, [r3, #12]
 80077a2:	697b      	ldr	r3, [r7, #20]
 80077a4:	691b      	ldr	r3, [r3, #16]
 80077a6:	1ad2      	subs	r2, r2, r3
 80077a8:	697b      	ldr	r3, [r7, #20]
 80077aa:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80077ac:	697b      	ldr	r3, [r7, #20]
 80077ae:	68db      	ldr	r3, [r3, #12]
 80077b0:	b29b      	uxth	r3, r3
 80077b2:	461a      	mov	r2, r3
 80077b4:	6879      	ldr	r1, [r7, #4]
 80077b6:	68f8      	ldr	r0, [r7, #12]
 80077b8:	f000 fec1 	bl	800853e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80077bc:	2300      	movs	r3, #0
 80077be:	2200      	movs	r2, #0
 80077c0:	2100      	movs	r1, #0
 80077c2:	68f8      	ldr	r0, [r7, #12]
 80077c4:	f001 fb3e 	bl	8008e44 <USBD_LL_PrepareReceive>
 80077c8:	e04e      	b.n	8007868 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80077ca:	697b      	ldr	r3, [r7, #20]
 80077cc:	689b      	ldr	r3, [r3, #8]
 80077ce:	697a      	ldr	r2, [r7, #20]
 80077d0:	6912      	ldr	r2, [r2, #16]
 80077d2:	fbb3 f1f2 	udiv	r1, r3, r2
 80077d6:	fb02 f201 	mul.w	r2, r2, r1
 80077da:	1a9b      	subs	r3, r3, r2
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d11c      	bne.n	800781a <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80077e0:	697b      	ldr	r3, [r7, #20]
 80077e2:	689a      	ldr	r2, [r3, #8]
 80077e4:	697b      	ldr	r3, [r7, #20]
 80077e6:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80077e8:	429a      	cmp	r2, r3
 80077ea:	d316      	bcc.n	800781a <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80077ec:	697b      	ldr	r3, [r7, #20]
 80077ee:	689a      	ldr	r2, [r3, #8]
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80077f6:	429a      	cmp	r2, r3
 80077f8:	d20f      	bcs.n	800781a <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80077fa:	2200      	movs	r2, #0
 80077fc:	2100      	movs	r1, #0
 80077fe:	68f8      	ldr	r0, [r7, #12]
 8007800:	f000 fe9d 	bl	800853e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	2200      	movs	r2, #0
 8007808:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800780c:	2300      	movs	r3, #0
 800780e:	2200      	movs	r2, #0
 8007810:	2100      	movs	r1, #0
 8007812:	68f8      	ldr	r0, [r7, #12]
 8007814:	f001 fb16 	bl	8008e44 <USBD_LL_PrepareReceive>
 8007818:	e026      	b.n	8007868 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007820:	68db      	ldr	r3, [r3, #12]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d00a      	beq.n	800783c <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800782c:	2b03      	cmp	r3, #3
 800782e:	d105      	bne.n	800783c <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007836:	68db      	ldr	r3, [r3, #12]
 8007838:	68f8      	ldr	r0, [r7, #12]
 800783a:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800783c:	2180      	movs	r1, #128	; 0x80
 800783e:	68f8      	ldr	r0, [r7, #12]
 8007840:	f001 fa54 	bl	8008cec <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007844:	68f8      	ldr	r0, [r7, #12]
 8007846:	f000 fecf 	bl	80085e8 <USBD_CtlReceiveStatus>
 800784a:	e00d      	b.n	8007868 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007852:	2b04      	cmp	r3, #4
 8007854:	d004      	beq.n	8007860 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800785c:	2b00      	cmp	r3, #0
 800785e:	d103      	bne.n	8007868 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007860:	2180      	movs	r1, #128	; 0x80
 8007862:	68f8      	ldr	r0, [r7, #12]
 8007864:	f001 fa42 	bl	8008cec <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800786e:	2b01      	cmp	r3, #1
 8007870:	d11d      	bne.n	80078ae <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007872:	68f8      	ldr	r0, [r7, #12]
 8007874:	f7ff fe81 	bl	800757a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	2200      	movs	r2, #0
 800787c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007880:	e015      	b.n	80078ae <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007888:	695b      	ldr	r3, [r3, #20]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d00d      	beq.n	80078aa <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007894:	2b03      	cmp	r3, #3
 8007896:	d108      	bne.n	80078aa <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800789e:	695b      	ldr	r3, [r3, #20]
 80078a0:	7afa      	ldrb	r2, [r7, #11]
 80078a2:	4611      	mov	r1, r2
 80078a4:	68f8      	ldr	r0, [r7, #12]
 80078a6:	4798      	blx	r3
 80078a8:	e001      	b.n	80078ae <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80078aa:	2302      	movs	r3, #2
 80078ac:	e000      	b.n	80078b0 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80078ae:	2300      	movs	r3, #0
}
 80078b0:	4618      	mov	r0, r3
 80078b2:	3718      	adds	r7, #24
 80078b4:	46bd      	mov	sp, r7
 80078b6:	bd80      	pop	{r7, pc}

080078b8 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b082      	sub	sp, #8
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80078c0:	2340      	movs	r3, #64	; 0x40
 80078c2:	2200      	movs	r2, #0
 80078c4:	2100      	movs	r1, #0
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	f001 f9cb 	bl	8008c62 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2201      	movs	r2, #1
 80078d0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2240      	movs	r2, #64	; 0x40
 80078d8:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80078dc:	2340      	movs	r3, #64	; 0x40
 80078de:	2200      	movs	r2, #0
 80078e0:	2180      	movs	r1, #128	; 0x80
 80078e2:	6878      	ldr	r0, [r7, #4]
 80078e4:	f001 f9bd 	bl	8008c62 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2201      	movs	r2, #1
 80078ec:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2240      	movs	r2, #64	; 0x40
 80078f2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2201      	movs	r2, #1
 80078f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2200      	movs	r2, #0
 8007900:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2200      	movs	r2, #0
 8007908:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	2200      	movs	r2, #0
 800790e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007918:	2b00      	cmp	r3, #0
 800791a:	d009      	beq.n	8007930 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007922:	685b      	ldr	r3, [r3, #4]
 8007924:	687a      	ldr	r2, [r7, #4]
 8007926:	6852      	ldr	r2, [r2, #4]
 8007928:	b2d2      	uxtb	r2, r2
 800792a:	4611      	mov	r1, r2
 800792c:	6878      	ldr	r0, [r7, #4]
 800792e:	4798      	blx	r3
  }

  return USBD_OK;
 8007930:	2300      	movs	r3, #0
}
 8007932:	4618      	mov	r0, r3
 8007934:	3708      	adds	r7, #8
 8007936:	46bd      	mov	sp, r7
 8007938:	bd80      	pop	{r7, pc}

0800793a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800793a:	b480      	push	{r7}
 800793c:	b083      	sub	sp, #12
 800793e:	af00      	add	r7, sp, #0
 8007940:	6078      	str	r0, [r7, #4]
 8007942:	460b      	mov	r3, r1
 8007944:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	78fa      	ldrb	r2, [r7, #3]
 800794a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800794c:	2300      	movs	r3, #0
}
 800794e:	4618      	mov	r0, r3
 8007950:	370c      	adds	r7, #12
 8007952:	46bd      	mov	sp, r7
 8007954:	bc80      	pop	{r7}
 8007956:	4770      	bx	lr

08007958 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007958:	b480      	push	{r7}
 800795a:	b083      	sub	sp, #12
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2204      	movs	r2, #4
 8007970:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007974:	2300      	movs	r3, #0
}
 8007976:	4618      	mov	r0, r3
 8007978:	370c      	adds	r7, #12
 800797a:	46bd      	mov	sp, r7
 800797c:	bc80      	pop	{r7}
 800797e:	4770      	bx	lr

08007980 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007980:	b480      	push	{r7}
 8007982:	b083      	sub	sp, #12
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800798e:	2b04      	cmp	r3, #4
 8007990:	d105      	bne.n	800799e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800799e:	2300      	movs	r3, #0
}
 80079a0:	4618      	mov	r0, r3
 80079a2:	370c      	adds	r7, #12
 80079a4:	46bd      	mov	sp, r7
 80079a6:	bc80      	pop	{r7}
 80079a8:	4770      	bx	lr

080079aa <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80079aa:	b580      	push	{r7, lr}
 80079ac:	b082      	sub	sp, #8
 80079ae:	af00      	add	r7, sp, #0
 80079b0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079b8:	2b03      	cmp	r3, #3
 80079ba:	d10b      	bne.n	80079d4 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079c2:	69db      	ldr	r3, [r3, #28]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d005      	beq.n	80079d4 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079ce:	69db      	ldr	r3, [r3, #28]
 80079d0:	6878      	ldr	r0, [r7, #4]
 80079d2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80079d4:	2300      	movs	r3, #0
}
 80079d6:	4618      	mov	r0, r3
 80079d8:	3708      	adds	r7, #8
 80079da:	46bd      	mov	sp, r7
 80079dc:	bd80      	pop	{r7, pc}
	...

080079e0 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b084      	sub	sp, #16
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
 80079e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80079ea:	2300      	movs	r3, #0
 80079ec:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	781b      	ldrb	r3, [r3, #0]
 80079f2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80079f6:	2b40      	cmp	r3, #64	; 0x40
 80079f8:	d005      	beq.n	8007a06 <USBD_StdDevReq+0x26>
 80079fa:	2b40      	cmp	r3, #64	; 0x40
 80079fc:	d84f      	bhi.n	8007a9e <USBD_StdDevReq+0xbe>
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d009      	beq.n	8007a16 <USBD_StdDevReq+0x36>
 8007a02:	2b20      	cmp	r3, #32
 8007a04:	d14b      	bne.n	8007a9e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a0c:	689b      	ldr	r3, [r3, #8]
 8007a0e:	6839      	ldr	r1, [r7, #0]
 8007a10:	6878      	ldr	r0, [r7, #4]
 8007a12:	4798      	blx	r3
      break;
 8007a14:	e048      	b.n	8007aa8 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	785b      	ldrb	r3, [r3, #1]
 8007a1a:	2b09      	cmp	r3, #9
 8007a1c:	d839      	bhi.n	8007a92 <USBD_StdDevReq+0xb2>
 8007a1e:	a201      	add	r2, pc, #4	; (adr r2, 8007a24 <USBD_StdDevReq+0x44>)
 8007a20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a24:	08007a75 	.word	0x08007a75
 8007a28:	08007a89 	.word	0x08007a89
 8007a2c:	08007a93 	.word	0x08007a93
 8007a30:	08007a7f 	.word	0x08007a7f
 8007a34:	08007a93 	.word	0x08007a93
 8007a38:	08007a57 	.word	0x08007a57
 8007a3c:	08007a4d 	.word	0x08007a4d
 8007a40:	08007a93 	.word	0x08007a93
 8007a44:	08007a6b 	.word	0x08007a6b
 8007a48:	08007a61 	.word	0x08007a61
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007a4c:	6839      	ldr	r1, [r7, #0]
 8007a4e:	6878      	ldr	r0, [r7, #4]
 8007a50:	f000 f9dc 	bl	8007e0c <USBD_GetDescriptor>
          break;
 8007a54:	e022      	b.n	8007a9c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007a56:	6839      	ldr	r1, [r7, #0]
 8007a58:	6878      	ldr	r0, [r7, #4]
 8007a5a:	f000 fb3f 	bl	80080dc <USBD_SetAddress>
          break;
 8007a5e:	e01d      	b.n	8007a9c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007a60:	6839      	ldr	r1, [r7, #0]
 8007a62:	6878      	ldr	r0, [r7, #4]
 8007a64:	f000 fb7e 	bl	8008164 <USBD_SetConfig>
          break;
 8007a68:	e018      	b.n	8007a9c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007a6a:	6839      	ldr	r1, [r7, #0]
 8007a6c:	6878      	ldr	r0, [r7, #4]
 8007a6e:	f000 fc07 	bl	8008280 <USBD_GetConfig>
          break;
 8007a72:	e013      	b.n	8007a9c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007a74:	6839      	ldr	r1, [r7, #0]
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	f000 fc37 	bl	80082ea <USBD_GetStatus>
          break;
 8007a7c:	e00e      	b.n	8007a9c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007a7e:	6839      	ldr	r1, [r7, #0]
 8007a80:	6878      	ldr	r0, [r7, #4]
 8007a82:	f000 fc65 	bl	8008350 <USBD_SetFeature>
          break;
 8007a86:	e009      	b.n	8007a9c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007a88:	6839      	ldr	r1, [r7, #0]
 8007a8a:	6878      	ldr	r0, [r7, #4]
 8007a8c:	f000 fc74 	bl	8008378 <USBD_ClrFeature>
          break;
 8007a90:	e004      	b.n	8007a9c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8007a92:	6839      	ldr	r1, [r7, #0]
 8007a94:	6878      	ldr	r0, [r7, #4]
 8007a96:	f000 fccc 	bl	8008432 <USBD_CtlError>
          break;
 8007a9a:	bf00      	nop
      }
      break;
 8007a9c:	e004      	b.n	8007aa8 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8007a9e:	6839      	ldr	r1, [r7, #0]
 8007aa0:	6878      	ldr	r0, [r7, #4]
 8007aa2:	f000 fcc6 	bl	8008432 <USBD_CtlError>
      break;
 8007aa6:	bf00      	nop
  }

  return ret;
 8007aa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007aaa:	4618      	mov	r0, r3
 8007aac:	3710      	adds	r7, #16
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	bd80      	pop	{r7, pc}
 8007ab2:	bf00      	nop

08007ab4 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b084      	sub	sp, #16
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
 8007abc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007abe:	2300      	movs	r3, #0
 8007ac0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	781b      	ldrb	r3, [r3, #0]
 8007ac6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007aca:	2b40      	cmp	r3, #64	; 0x40
 8007acc:	d005      	beq.n	8007ada <USBD_StdItfReq+0x26>
 8007ace:	2b40      	cmp	r3, #64	; 0x40
 8007ad0:	d82e      	bhi.n	8007b30 <USBD_StdItfReq+0x7c>
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d001      	beq.n	8007ada <USBD_StdItfReq+0x26>
 8007ad6:	2b20      	cmp	r3, #32
 8007ad8:	d12a      	bne.n	8007b30 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ae0:	3b01      	subs	r3, #1
 8007ae2:	2b02      	cmp	r3, #2
 8007ae4:	d81d      	bhi.n	8007b22 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	889b      	ldrh	r3, [r3, #4]
 8007aea:	b2db      	uxtb	r3, r3
 8007aec:	2b01      	cmp	r3, #1
 8007aee:	d813      	bhi.n	8007b18 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007af6:	689b      	ldr	r3, [r3, #8]
 8007af8:	6839      	ldr	r1, [r7, #0]
 8007afa:	6878      	ldr	r0, [r7, #4]
 8007afc:	4798      	blx	r3
 8007afe:	4603      	mov	r3, r0
 8007b00:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	88db      	ldrh	r3, [r3, #6]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d110      	bne.n	8007b2c <USBD_StdItfReq+0x78>
 8007b0a:	7bfb      	ldrb	r3, [r7, #15]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d10d      	bne.n	8007b2c <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8007b10:	6878      	ldr	r0, [r7, #4]
 8007b12:	f000 fd56 	bl	80085c2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007b16:	e009      	b.n	8007b2c <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8007b18:	6839      	ldr	r1, [r7, #0]
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	f000 fc89 	bl	8008432 <USBD_CtlError>
          break;
 8007b20:	e004      	b.n	8007b2c <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8007b22:	6839      	ldr	r1, [r7, #0]
 8007b24:	6878      	ldr	r0, [r7, #4]
 8007b26:	f000 fc84 	bl	8008432 <USBD_CtlError>
          break;
 8007b2a:	e000      	b.n	8007b2e <USBD_StdItfReq+0x7a>
          break;
 8007b2c:	bf00      	nop
      }
      break;
 8007b2e:	e004      	b.n	8007b3a <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8007b30:	6839      	ldr	r1, [r7, #0]
 8007b32:	6878      	ldr	r0, [r7, #4]
 8007b34:	f000 fc7d 	bl	8008432 <USBD_CtlError>
      break;
 8007b38:	bf00      	nop
  }

  return USBD_OK;
 8007b3a:	2300      	movs	r3, #0
}
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	3710      	adds	r7, #16
 8007b40:	46bd      	mov	sp, r7
 8007b42:	bd80      	pop	{r7, pc}

08007b44 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b084      	sub	sp, #16
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
 8007b4c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007b4e:	2300      	movs	r3, #0
 8007b50:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	889b      	ldrh	r3, [r3, #4]
 8007b56:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	781b      	ldrb	r3, [r3, #0]
 8007b5c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007b60:	2b40      	cmp	r3, #64	; 0x40
 8007b62:	d007      	beq.n	8007b74 <USBD_StdEPReq+0x30>
 8007b64:	2b40      	cmp	r3, #64	; 0x40
 8007b66:	f200 8146 	bhi.w	8007df6 <USBD_StdEPReq+0x2b2>
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d00a      	beq.n	8007b84 <USBD_StdEPReq+0x40>
 8007b6e:	2b20      	cmp	r3, #32
 8007b70:	f040 8141 	bne.w	8007df6 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b7a:	689b      	ldr	r3, [r3, #8]
 8007b7c:	6839      	ldr	r1, [r7, #0]
 8007b7e:	6878      	ldr	r0, [r7, #4]
 8007b80:	4798      	blx	r3
      break;
 8007b82:	e13d      	b.n	8007e00 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	781b      	ldrb	r3, [r3, #0]
 8007b88:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007b8c:	2b20      	cmp	r3, #32
 8007b8e:	d10a      	bne.n	8007ba6 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b96:	689b      	ldr	r3, [r3, #8]
 8007b98:	6839      	ldr	r1, [r7, #0]
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	4798      	blx	r3
 8007b9e:	4603      	mov	r3, r0
 8007ba0:	73fb      	strb	r3, [r7, #15]

        return ret;
 8007ba2:	7bfb      	ldrb	r3, [r7, #15]
 8007ba4:	e12d      	b.n	8007e02 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8007ba6:	683b      	ldr	r3, [r7, #0]
 8007ba8:	785b      	ldrb	r3, [r3, #1]
 8007baa:	2b03      	cmp	r3, #3
 8007bac:	d007      	beq.n	8007bbe <USBD_StdEPReq+0x7a>
 8007bae:	2b03      	cmp	r3, #3
 8007bb0:	f300 811b 	bgt.w	8007dea <USBD_StdEPReq+0x2a6>
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d072      	beq.n	8007c9e <USBD_StdEPReq+0x15a>
 8007bb8:	2b01      	cmp	r3, #1
 8007bba:	d03a      	beq.n	8007c32 <USBD_StdEPReq+0xee>
 8007bbc:	e115      	b.n	8007dea <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bc4:	2b02      	cmp	r3, #2
 8007bc6:	d002      	beq.n	8007bce <USBD_StdEPReq+0x8a>
 8007bc8:	2b03      	cmp	r3, #3
 8007bca:	d015      	beq.n	8007bf8 <USBD_StdEPReq+0xb4>
 8007bcc:	e02b      	b.n	8007c26 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007bce:	7bbb      	ldrb	r3, [r7, #14]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d00c      	beq.n	8007bee <USBD_StdEPReq+0xaa>
 8007bd4:	7bbb      	ldrb	r3, [r7, #14]
 8007bd6:	2b80      	cmp	r3, #128	; 0x80
 8007bd8:	d009      	beq.n	8007bee <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007bda:	7bbb      	ldrb	r3, [r7, #14]
 8007bdc:	4619      	mov	r1, r3
 8007bde:	6878      	ldr	r0, [r7, #4]
 8007be0:	f001 f884 	bl	8008cec <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007be4:	2180      	movs	r1, #128	; 0x80
 8007be6:	6878      	ldr	r0, [r7, #4]
 8007be8:	f001 f880 	bl	8008cec <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007bec:	e020      	b.n	8007c30 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8007bee:	6839      	ldr	r1, [r7, #0]
 8007bf0:	6878      	ldr	r0, [r7, #4]
 8007bf2:	f000 fc1e 	bl	8008432 <USBD_CtlError>
              break;
 8007bf6:	e01b      	b.n	8007c30 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	885b      	ldrh	r3, [r3, #2]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d10e      	bne.n	8007c1e <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8007c00:	7bbb      	ldrb	r3, [r7, #14]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d00b      	beq.n	8007c1e <USBD_StdEPReq+0xda>
 8007c06:	7bbb      	ldrb	r3, [r7, #14]
 8007c08:	2b80      	cmp	r3, #128	; 0x80
 8007c0a:	d008      	beq.n	8007c1e <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	88db      	ldrh	r3, [r3, #6]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d104      	bne.n	8007c1e <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8007c14:	7bbb      	ldrb	r3, [r7, #14]
 8007c16:	4619      	mov	r1, r3
 8007c18:	6878      	ldr	r0, [r7, #4]
 8007c1a:	f001 f867 	bl	8008cec <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	f000 fccf 	bl	80085c2 <USBD_CtlSendStatus>

              break;
 8007c24:	e004      	b.n	8007c30 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8007c26:	6839      	ldr	r1, [r7, #0]
 8007c28:	6878      	ldr	r0, [r7, #4]
 8007c2a:	f000 fc02 	bl	8008432 <USBD_CtlError>
              break;
 8007c2e:	bf00      	nop
          }
          break;
 8007c30:	e0e0      	b.n	8007df4 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c38:	2b02      	cmp	r3, #2
 8007c3a:	d002      	beq.n	8007c42 <USBD_StdEPReq+0xfe>
 8007c3c:	2b03      	cmp	r3, #3
 8007c3e:	d015      	beq.n	8007c6c <USBD_StdEPReq+0x128>
 8007c40:	e026      	b.n	8007c90 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007c42:	7bbb      	ldrb	r3, [r7, #14]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d00c      	beq.n	8007c62 <USBD_StdEPReq+0x11e>
 8007c48:	7bbb      	ldrb	r3, [r7, #14]
 8007c4a:	2b80      	cmp	r3, #128	; 0x80
 8007c4c:	d009      	beq.n	8007c62 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007c4e:	7bbb      	ldrb	r3, [r7, #14]
 8007c50:	4619      	mov	r1, r3
 8007c52:	6878      	ldr	r0, [r7, #4]
 8007c54:	f001 f84a 	bl	8008cec <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007c58:	2180      	movs	r1, #128	; 0x80
 8007c5a:	6878      	ldr	r0, [r7, #4]
 8007c5c:	f001 f846 	bl	8008cec <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007c60:	e01c      	b.n	8007c9c <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8007c62:	6839      	ldr	r1, [r7, #0]
 8007c64:	6878      	ldr	r0, [r7, #4]
 8007c66:	f000 fbe4 	bl	8008432 <USBD_CtlError>
              break;
 8007c6a:	e017      	b.n	8007c9c <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	885b      	ldrh	r3, [r3, #2]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d112      	bne.n	8007c9a <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007c74:	7bbb      	ldrb	r3, [r7, #14]
 8007c76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d004      	beq.n	8007c88 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8007c7e:	7bbb      	ldrb	r3, [r7, #14]
 8007c80:	4619      	mov	r1, r3
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	f001 f851 	bl	8008d2a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007c88:	6878      	ldr	r0, [r7, #4]
 8007c8a:	f000 fc9a 	bl	80085c2 <USBD_CtlSendStatus>
              }
              break;
 8007c8e:	e004      	b.n	8007c9a <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8007c90:	6839      	ldr	r1, [r7, #0]
 8007c92:	6878      	ldr	r0, [r7, #4]
 8007c94:	f000 fbcd 	bl	8008432 <USBD_CtlError>
              break;
 8007c98:	e000      	b.n	8007c9c <USBD_StdEPReq+0x158>
              break;
 8007c9a:	bf00      	nop
          }
          break;
 8007c9c:	e0aa      	b.n	8007df4 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ca4:	2b02      	cmp	r3, #2
 8007ca6:	d002      	beq.n	8007cae <USBD_StdEPReq+0x16a>
 8007ca8:	2b03      	cmp	r3, #3
 8007caa:	d032      	beq.n	8007d12 <USBD_StdEPReq+0x1ce>
 8007cac:	e097      	b.n	8007dde <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007cae:	7bbb      	ldrb	r3, [r7, #14]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d007      	beq.n	8007cc4 <USBD_StdEPReq+0x180>
 8007cb4:	7bbb      	ldrb	r3, [r7, #14]
 8007cb6:	2b80      	cmp	r3, #128	; 0x80
 8007cb8:	d004      	beq.n	8007cc4 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8007cba:	6839      	ldr	r1, [r7, #0]
 8007cbc:	6878      	ldr	r0, [r7, #4]
 8007cbe:	f000 fbb8 	bl	8008432 <USBD_CtlError>
                break;
 8007cc2:	e091      	b.n	8007de8 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007cc4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	da0b      	bge.n	8007ce4 <USBD_StdEPReq+0x1a0>
 8007ccc:	7bbb      	ldrb	r3, [r7, #14]
 8007cce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007cd2:	4613      	mov	r3, r2
 8007cd4:	009b      	lsls	r3, r3, #2
 8007cd6:	4413      	add	r3, r2
 8007cd8:	009b      	lsls	r3, r3, #2
 8007cda:	3310      	adds	r3, #16
 8007cdc:	687a      	ldr	r2, [r7, #4]
 8007cde:	4413      	add	r3, r2
 8007ce0:	3304      	adds	r3, #4
 8007ce2:	e00b      	b.n	8007cfc <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007ce4:	7bbb      	ldrb	r3, [r7, #14]
 8007ce6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007cea:	4613      	mov	r3, r2
 8007cec:	009b      	lsls	r3, r3, #2
 8007cee:	4413      	add	r3, r2
 8007cf0:	009b      	lsls	r3, r3, #2
 8007cf2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007cf6:	687a      	ldr	r2, [r7, #4]
 8007cf8:	4413      	add	r3, r2
 8007cfa:	3304      	adds	r3, #4
 8007cfc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007cfe:	68bb      	ldr	r3, [r7, #8]
 8007d00:	2200      	movs	r2, #0
 8007d02:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007d04:	68bb      	ldr	r3, [r7, #8]
 8007d06:	2202      	movs	r2, #2
 8007d08:	4619      	mov	r1, r3
 8007d0a:	6878      	ldr	r0, [r7, #4]
 8007d0c:	f000 fbfb 	bl	8008506 <USBD_CtlSendData>
              break;
 8007d10:	e06a      	b.n	8007de8 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007d12:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	da11      	bge.n	8007d3e <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007d1a:	7bbb      	ldrb	r3, [r7, #14]
 8007d1c:	f003 020f 	and.w	r2, r3, #15
 8007d20:	6879      	ldr	r1, [r7, #4]
 8007d22:	4613      	mov	r3, r2
 8007d24:	009b      	lsls	r3, r3, #2
 8007d26:	4413      	add	r3, r2
 8007d28:	009b      	lsls	r3, r3, #2
 8007d2a:	440b      	add	r3, r1
 8007d2c:	3318      	adds	r3, #24
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d117      	bne.n	8007d64 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007d34:	6839      	ldr	r1, [r7, #0]
 8007d36:	6878      	ldr	r0, [r7, #4]
 8007d38:	f000 fb7b 	bl	8008432 <USBD_CtlError>
                  break;
 8007d3c:	e054      	b.n	8007de8 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007d3e:	7bbb      	ldrb	r3, [r7, #14]
 8007d40:	f003 020f 	and.w	r2, r3, #15
 8007d44:	6879      	ldr	r1, [r7, #4]
 8007d46:	4613      	mov	r3, r2
 8007d48:	009b      	lsls	r3, r3, #2
 8007d4a:	4413      	add	r3, r2
 8007d4c:	009b      	lsls	r3, r3, #2
 8007d4e:	440b      	add	r3, r1
 8007d50:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d104      	bne.n	8007d64 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007d5a:	6839      	ldr	r1, [r7, #0]
 8007d5c:	6878      	ldr	r0, [r7, #4]
 8007d5e:	f000 fb68 	bl	8008432 <USBD_CtlError>
                  break;
 8007d62:	e041      	b.n	8007de8 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007d64:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	da0b      	bge.n	8007d84 <USBD_StdEPReq+0x240>
 8007d6c:	7bbb      	ldrb	r3, [r7, #14]
 8007d6e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007d72:	4613      	mov	r3, r2
 8007d74:	009b      	lsls	r3, r3, #2
 8007d76:	4413      	add	r3, r2
 8007d78:	009b      	lsls	r3, r3, #2
 8007d7a:	3310      	adds	r3, #16
 8007d7c:	687a      	ldr	r2, [r7, #4]
 8007d7e:	4413      	add	r3, r2
 8007d80:	3304      	adds	r3, #4
 8007d82:	e00b      	b.n	8007d9c <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007d84:	7bbb      	ldrb	r3, [r7, #14]
 8007d86:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007d8a:	4613      	mov	r3, r2
 8007d8c:	009b      	lsls	r3, r3, #2
 8007d8e:	4413      	add	r3, r2
 8007d90:	009b      	lsls	r3, r3, #2
 8007d92:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007d96:	687a      	ldr	r2, [r7, #4]
 8007d98:	4413      	add	r3, r2
 8007d9a:	3304      	adds	r3, #4
 8007d9c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007d9e:	7bbb      	ldrb	r3, [r7, #14]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d002      	beq.n	8007daa <USBD_StdEPReq+0x266>
 8007da4:	7bbb      	ldrb	r3, [r7, #14]
 8007da6:	2b80      	cmp	r3, #128	; 0x80
 8007da8:	d103      	bne.n	8007db2 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8007daa:	68bb      	ldr	r3, [r7, #8]
 8007dac:	2200      	movs	r2, #0
 8007dae:	601a      	str	r2, [r3, #0]
 8007db0:	e00e      	b.n	8007dd0 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007db2:	7bbb      	ldrb	r3, [r7, #14]
 8007db4:	4619      	mov	r1, r3
 8007db6:	6878      	ldr	r0, [r7, #4]
 8007db8:	f000 ffd6 	bl	8008d68 <USBD_LL_IsStallEP>
 8007dbc:	4603      	mov	r3, r0
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d003      	beq.n	8007dca <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8007dc2:	68bb      	ldr	r3, [r7, #8]
 8007dc4:	2201      	movs	r2, #1
 8007dc6:	601a      	str	r2, [r3, #0]
 8007dc8:	e002      	b.n	8007dd0 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8007dca:	68bb      	ldr	r3, [r7, #8]
 8007dcc:	2200      	movs	r2, #0
 8007dce:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007dd0:	68bb      	ldr	r3, [r7, #8]
 8007dd2:	2202      	movs	r2, #2
 8007dd4:	4619      	mov	r1, r3
 8007dd6:	6878      	ldr	r0, [r7, #4]
 8007dd8:	f000 fb95 	bl	8008506 <USBD_CtlSendData>
              break;
 8007ddc:	e004      	b.n	8007de8 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8007dde:	6839      	ldr	r1, [r7, #0]
 8007de0:	6878      	ldr	r0, [r7, #4]
 8007de2:	f000 fb26 	bl	8008432 <USBD_CtlError>
              break;
 8007de6:	bf00      	nop
          }
          break;
 8007de8:	e004      	b.n	8007df4 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8007dea:	6839      	ldr	r1, [r7, #0]
 8007dec:	6878      	ldr	r0, [r7, #4]
 8007dee:	f000 fb20 	bl	8008432 <USBD_CtlError>
          break;
 8007df2:	bf00      	nop
      }
      break;
 8007df4:	e004      	b.n	8007e00 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8007df6:	6839      	ldr	r1, [r7, #0]
 8007df8:	6878      	ldr	r0, [r7, #4]
 8007dfa:	f000 fb1a 	bl	8008432 <USBD_CtlError>
      break;
 8007dfe:	bf00      	nop
  }

  return ret;
 8007e00:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e02:	4618      	mov	r0, r3
 8007e04:	3710      	adds	r7, #16
 8007e06:	46bd      	mov	sp, r7
 8007e08:	bd80      	pop	{r7, pc}
	...

08007e0c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b084      	sub	sp, #16
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
 8007e14:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007e16:	2300      	movs	r3, #0
 8007e18:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007e1e:	2300      	movs	r3, #0
 8007e20:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	885b      	ldrh	r3, [r3, #2]
 8007e26:	0a1b      	lsrs	r3, r3, #8
 8007e28:	b29b      	uxth	r3, r3
 8007e2a:	3b01      	subs	r3, #1
 8007e2c:	2b06      	cmp	r3, #6
 8007e2e:	f200 8128 	bhi.w	8008082 <USBD_GetDescriptor+0x276>
 8007e32:	a201      	add	r2, pc, #4	; (adr r2, 8007e38 <USBD_GetDescriptor+0x2c>)
 8007e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e38:	08007e55 	.word	0x08007e55
 8007e3c:	08007e6d 	.word	0x08007e6d
 8007e40:	08007ead 	.word	0x08007ead
 8007e44:	08008083 	.word	0x08008083
 8007e48:	08008083 	.word	0x08008083
 8007e4c:	08008023 	.word	0x08008023
 8007e50:	0800804f 	.word	0x0800804f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	687a      	ldr	r2, [r7, #4]
 8007e5e:	7c12      	ldrb	r2, [r2, #16]
 8007e60:	f107 0108 	add.w	r1, r7, #8
 8007e64:	4610      	mov	r0, r2
 8007e66:	4798      	blx	r3
 8007e68:	60f8      	str	r0, [r7, #12]
      break;
 8007e6a:	e112      	b.n	8008092 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	7c1b      	ldrb	r3, [r3, #16]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d10d      	bne.n	8007e90 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e7c:	f107 0208 	add.w	r2, r7, #8
 8007e80:	4610      	mov	r0, r2
 8007e82:	4798      	blx	r3
 8007e84:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	3301      	adds	r3, #1
 8007e8a:	2202      	movs	r2, #2
 8007e8c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007e8e:	e100      	b.n	8008092 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e98:	f107 0208 	add.w	r2, r7, #8
 8007e9c:	4610      	mov	r0, r2
 8007e9e:	4798      	blx	r3
 8007ea0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	3301      	adds	r3, #1
 8007ea6:	2202      	movs	r2, #2
 8007ea8:	701a      	strb	r2, [r3, #0]
      break;
 8007eaa:	e0f2      	b.n	8008092 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	885b      	ldrh	r3, [r3, #2]
 8007eb0:	b2db      	uxtb	r3, r3
 8007eb2:	2b05      	cmp	r3, #5
 8007eb4:	f200 80ac 	bhi.w	8008010 <USBD_GetDescriptor+0x204>
 8007eb8:	a201      	add	r2, pc, #4	; (adr r2, 8007ec0 <USBD_GetDescriptor+0xb4>)
 8007eba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ebe:	bf00      	nop
 8007ec0:	08007ed9 	.word	0x08007ed9
 8007ec4:	08007f0d 	.word	0x08007f0d
 8007ec8:	08007f41 	.word	0x08007f41
 8007ecc:	08007f75 	.word	0x08007f75
 8007ed0:	08007fa9 	.word	0x08007fa9
 8007ed4:	08007fdd 	.word	0x08007fdd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007ede:	685b      	ldr	r3, [r3, #4]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d00b      	beq.n	8007efc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007eea:	685b      	ldr	r3, [r3, #4]
 8007eec:	687a      	ldr	r2, [r7, #4]
 8007eee:	7c12      	ldrb	r2, [r2, #16]
 8007ef0:	f107 0108 	add.w	r1, r7, #8
 8007ef4:	4610      	mov	r0, r2
 8007ef6:	4798      	blx	r3
 8007ef8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007efa:	e091      	b.n	8008020 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007efc:	6839      	ldr	r1, [r7, #0]
 8007efe:	6878      	ldr	r0, [r7, #4]
 8007f00:	f000 fa97 	bl	8008432 <USBD_CtlError>
            err++;
 8007f04:	7afb      	ldrb	r3, [r7, #11]
 8007f06:	3301      	adds	r3, #1
 8007f08:	72fb      	strb	r3, [r7, #11]
          break;
 8007f0a:	e089      	b.n	8008020 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007f12:	689b      	ldr	r3, [r3, #8]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d00b      	beq.n	8007f30 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007f1e:	689b      	ldr	r3, [r3, #8]
 8007f20:	687a      	ldr	r2, [r7, #4]
 8007f22:	7c12      	ldrb	r2, [r2, #16]
 8007f24:	f107 0108 	add.w	r1, r7, #8
 8007f28:	4610      	mov	r0, r2
 8007f2a:	4798      	blx	r3
 8007f2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007f2e:	e077      	b.n	8008020 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007f30:	6839      	ldr	r1, [r7, #0]
 8007f32:	6878      	ldr	r0, [r7, #4]
 8007f34:	f000 fa7d 	bl	8008432 <USBD_CtlError>
            err++;
 8007f38:	7afb      	ldrb	r3, [r7, #11]
 8007f3a:	3301      	adds	r3, #1
 8007f3c:	72fb      	strb	r3, [r7, #11]
          break;
 8007f3e:	e06f      	b.n	8008020 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007f46:	68db      	ldr	r3, [r3, #12]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d00b      	beq.n	8007f64 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007f52:	68db      	ldr	r3, [r3, #12]
 8007f54:	687a      	ldr	r2, [r7, #4]
 8007f56:	7c12      	ldrb	r2, [r2, #16]
 8007f58:	f107 0108 	add.w	r1, r7, #8
 8007f5c:	4610      	mov	r0, r2
 8007f5e:	4798      	blx	r3
 8007f60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007f62:	e05d      	b.n	8008020 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007f64:	6839      	ldr	r1, [r7, #0]
 8007f66:	6878      	ldr	r0, [r7, #4]
 8007f68:	f000 fa63 	bl	8008432 <USBD_CtlError>
            err++;
 8007f6c:	7afb      	ldrb	r3, [r7, #11]
 8007f6e:	3301      	adds	r3, #1
 8007f70:	72fb      	strb	r3, [r7, #11]
          break;
 8007f72:	e055      	b.n	8008020 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007f7a:	691b      	ldr	r3, [r3, #16]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d00b      	beq.n	8007f98 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007f86:	691b      	ldr	r3, [r3, #16]
 8007f88:	687a      	ldr	r2, [r7, #4]
 8007f8a:	7c12      	ldrb	r2, [r2, #16]
 8007f8c:	f107 0108 	add.w	r1, r7, #8
 8007f90:	4610      	mov	r0, r2
 8007f92:	4798      	blx	r3
 8007f94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007f96:	e043      	b.n	8008020 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007f98:	6839      	ldr	r1, [r7, #0]
 8007f9a:	6878      	ldr	r0, [r7, #4]
 8007f9c:	f000 fa49 	bl	8008432 <USBD_CtlError>
            err++;
 8007fa0:	7afb      	ldrb	r3, [r7, #11]
 8007fa2:	3301      	adds	r3, #1
 8007fa4:	72fb      	strb	r3, [r7, #11]
          break;
 8007fa6:	e03b      	b.n	8008020 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007fae:	695b      	ldr	r3, [r3, #20]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d00b      	beq.n	8007fcc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007fba:	695b      	ldr	r3, [r3, #20]
 8007fbc:	687a      	ldr	r2, [r7, #4]
 8007fbe:	7c12      	ldrb	r2, [r2, #16]
 8007fc0:	f107 0108 	add.w	r1, r7, #8
 8007fc4:	4610      	mov	r0, r2
 8007fc6:	4798      	blx	r3
 8007fc8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007fca:	e029      	b.n	8008020 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007fcc:	6839      	ldr	r1, [r7, #0]
 8007fce:	6878      	ldr	r0, [r7, #4]
 8007fd0:	f000 fa2f 	bl	8008432 <USBD_CtlError>
            err++;
 8007fd4:	7afb      	ldrb	r3, [r7, #11]
 8007fd6:	3301      	adds	r3, #1
 8007fd8:	72fb      	strb	r3, [r7, #11]
          break;
 8007fda:	e021      	b.n	8008020 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007fe2:	699b      	ldr	r3, [r3, #24]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d00b      	beq.n	8008000 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007fee:	699b      	ldr	r3, [r3, #24]
 8007ff0:	687a      	ldr	r2, [r7, #4]
 8007ff2:	7c12      	ldrb	r2, [r2, #16]
 8007ff4:	f107 0108 	add.w	r1, r7, #8
 8007ff8:	4610      	mov	r0, r2
 8007ffa:	4798      	blx	r3
 8007ffc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ffe:	e00f      	b.n	8008020 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008000:	6839      	ldr	r1, [r7, #0]
 8008002:	6878      	ldr	r0, [r7, #4]
 8008004:	f000 fa15 	bl	8008432 <USBD_CtlError>
            err++;
 8008008:	7afb      	ldrb	r3, [r7, #11]
 800800a:	3301      	adds	r3, #1
 800800c:	72fb      	strb	r3, [r7, #11]
          break;
 800800e:	e007      	b.n	8008020 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8008010:	6839      	ldr	r1, [r7, #0]
 8008012:	6878      	ldr	r0, [r7, #4]
 8008014:	f000 fa0d 	bl	8008432 <USBD_CtlError>
          err++;
 8008018:	7afb      	ldrb	r3, [r7, #11]
 800801a:	3301      	adds	r3, #1
 800801c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800801e:	e038      	b.n	8008092 <USBD_GetDescriptor+0x286>
 8008020:	e037      	b.n	8008092 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	7c1b      	ldrb	r3, [r3, #16]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d109      	bne.n	800803e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008030:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008032:	f107 0208 	add.w	r2, r7, #8
 8008036:	4610      	mov	r0, r2
 8008038:	4798      	blx	r3
 800803a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800803c:	e029      	b.n	8008092 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800803e:	6839      	ldr	r1, [r7, #0]
 8008040:	6878      	ldr	r0, [r7, #4]
 8008042:	f000 f9f6 	bl	8008432 <USBD_CtlError>
        err++;
 8008046:	7afb      	ldrb	r3, [r7, #11]
 8008048:	3301      	adds	r3, #1
 800804a:	72fb      	strb	r3, [r7, #11]
      break;
 800804c:	e021      	b.n	8008092 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	7c1b      	ldrb	r3, [r3, #16]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d10d      	bne.n	8008072 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800805c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800805e:	f107 0208 	add.w	r2, r7, #8
 8008062:	4610      	mov	r0, r2
 8008064:	4798      	blx	r3
 8008066:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	3301      	adds	r3, #1
 800806c:	2207      	movs	r2, #7
 800806e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008070:	e00f      	b.n	8008092 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008072:	6839      	ldr	r1, [r7, #0]
 8008074:	6878      	ldr	r0, [r7, #4]
 8008076:	f000 f9dc 	bl	8008432 <USBD_CtlError>
        err++;
 800807a:	7afb      	ldrb	r3, [r7, #11]
 800807c:	3301      	adds	r3, #1
 800807e:	72fb      	strb	r3, [r7, #11]
      break;
 8008080:	e007      	b.n	8008092 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008082:	6839      	ldr	r1, [r7, #0]
 8008084:	6878      	ldr	r0, [r7, #4]
 8008086:	f000 f9d4 	bl	8008432 <USBD_CtlError>
      err++;
 800808a:	7afb      	ldrb	r3, [r7, #11]
 800808c:	3301      	adds	r3, #1
 800808e:	72fb      	strb	r3, [r7, #11]
      break;
 8008090:	bf00      	nop
  }

  if (err != 0U)
 8008092:	7afb      	ldrb	r3, [r7, #11]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d11c      	bne.n	80080d2 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008098:	893b      	ldrh	r3, [r7, #8]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d011      	beq.n	80080c2 <USBD_GetDescriptor+0x2b6>
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	88db      	ldrh	r3, [r3, #6]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d00d      	beq.n	80080c2 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	88da      	ldrh	r2, [r3, #6]
 80080aa:	893b      	ldrh	r3, [r7, #8]
 80080ac:	4293      	cmp	r3, r2
 80080ae:	bf28      	it	cs
 80080b0:	4613      	movcs	r3, r2
 80080b2:	b29b      	uxth	r3, r3
 80080b4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80080b6:	893b      	ldrh	r3, [r7, #8]
 80080b8:	461a      	mov	r2, r3
 80080ba:	68f9      	ldr	r1, [r7, #12]
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	f000 fa22 	bl	8008506 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	88db      	ldrh	r3, [r3, #6]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d104      	bne.n	80080d4 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80080ca:	6878      	ldr	r0, [r7, #4]
 80080cc:	f000 fa79 	bl	80085c2 <USBD_CtlSendStatus>
 80080d0:	e000      	b.n	80080d4 <USBD_GetDescriptor+0x2c8>
    return;
 80080d2:	bf00      	nop
    }
  }
}
 80080d4:	3710      	adds	r7, #16
 80080d6:	46bd      	mov	sp, r7
 80080d8:	bd80      	pop	{r7, pc}
 80080da:	bf00      	nop

080080dc <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b084      	sub	sp, #16
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
 80080e4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	889b      	ldrh	r3, [r3, #4]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d130      	bne.n	8008150 <USBD_SetAddress+0x74>
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	88db      	ldrh	r3, [r3, #6]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d12c      	bne.n	8008150 <USBD_SetAddress+0x74>
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	885b      	ldrh	r3, [r3, #2]
 80080fa:	2b7f      	cmp	r3, #127	; 0x7f
 80080fc:	d828      	bhi.n	8008150 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	885b      	ldrh	r3, [r3, #2]
 8008102:	b2db      	uxtb	r3, r3
 8008104:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008108:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008110:	2b03      	cmp	r3, #3
 8008112:	d104      	bne.n	800811e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008114:	6839      	ldr	r1, [r7, #0]
 8008116:	6878      	ldr	r0, [r7, #4]
 8008118:	f000 f98b 	bl	8008432 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800811c:	e01d      	b.n	800815a <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	7bfa      	ldrb	r2, [r7, #15]
 8008122:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008126:	7bfb      	ldrb	r3, [r7, #15]
 8008128:	4619      	mov	r1, r3
 800812a:	6878      	ldr	r0, [r7, #4]
 800812c:	f000 fe48 	bl	8008dc0 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008130:	6878      	ldr	r0, [r7, #4]
 8008132:	f000 fa46 	bl	80085c2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008136:	7bfb      	ldrb	r3, [r7, #15]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d004      	beq.n	8008146 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2202      	movs	r2, #2
 8008140:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008144:	e009      	b.n	800815a <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	2201      	movs	r2, #1
 800814a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800814e:	e004      	b.n	800815a <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008150:	6839      	ldr	r1, [r7, #0]
 8008152:	6878      	ldr	r0, [r7, #4]
 8008154:	f000 f96d 	bl	8008432 <USBD_CtlError>
  }
}
 8008158:	bf00      	nop
 800815a:	bf00      	nop
 800815c:	3710      	adds	r7, #16
 800815e:	46bd      	mov	sp, r7
 8008160:	bd80      	pop	{r7, pc}
	...

08008164 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b082      	sub	sp, #8
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
 800816c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	885b      	ldrh	r3, [r3, #2]
 8008172:	b2da      	uxtb	r2, r3
 8008174:	4b41      	ldr	r3, [pc, #260]	; (800827c <USBD_SetConfig+0x118>)
 8008176:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008178:	4b40      	ldr	r3, [pc, #256]	; (800827c <USBD_SetConfig+0x118>)
 800817a:	781b      	ldrb	r3, [r3, #0]
 800817c:	2b01      	cmp	r3, #1
 800817e:	d904      	bls.n	800818a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008180:	6839      	ldr	r1, [r7, #0]
 8008182:	6878      	ldr	r0, [r7, #4]
 8008184:	f000 f955 	bl	8008432 <USBD_CtlError>
 8008188:	e075      	b.n	8008276 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008190:	2b02      	cmp	r3, #2
 8008192:	d002      	beq.n	800819a <USBD_SetConfig+0x36>
 8008194:	2b03      	cmp	r3, #3
 8008196:	d023      	beq.n	80081e0 <USBD_SetConfig+0x7c>
 8008198:	e062      	b.n	8008260 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800819a:	4b38      	ldr	r3, [pc, #224]	; (800827c <USBD_SetConfig+0x118>)
 800819c:	781b      	ldrb	r3, [r3, #0]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d01a      	beq.n	80081d8 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80081a2:	4b36      	ldr	r3, [pc, #216]	; (800827c <USBD_SetConfig+0x118>)
 80081a4:	781b      	ldrb	r3, [r3, #0]
 80081a6:	461a      	mov	r2, r3
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2203      	movs	r2, #3
 80081b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80081b4:	4b31      	ldr	r3, [pc, #196]	; (800827c <USBD_SetConfig+0x118>)
 80081b6:	781b      	ldrb	r3, [r3, #0]
 80081b8:	4619      	mov	r1, r3
 80081ba:	6878      	ldr	r0, [r7, #4]
 80081bc:	f7ff f9e7 	bl	800758e <USBD_SetClassConfig>
 80081c0:	4603      	mov	r3, r0
 80081c2:	2b02      	cmp	r3, #2
 80081c4:	d104      	bne.n	80081d0 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80081c6:	6839      	ldr	r1, [r7, #0]
 80081c8:	6878      	ldr	r0, [r7, #4]
 80081ca:	f000 f932 	bl	8008432 <USBD_CtlError>
            return;
 80081ce:	e052      	b.n	8008276 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80081d0:	6878      	ldr	r0, [r7, #4]
 80081d2:	f000 f9f6 	bl	80085c2 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80081d6:	e04e      	b.n	8008276 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80081d8:	6878      	ldr	r0, [r7, #4]
 80081da:	f000 f9f2 	bl	80085c2 <USBD_CtlSendStatus>
        break;
 80081de:	e04a      	b.n	8008276 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80081e0:	4b26      	ldr	r3, [pc, #152]	; (800827c <USBD_SetConfig+0x118>)
 80081e2:	781b      	ldrb	r3, [r3, #0]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d112      	bne.n	800820e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2202      	movs	r2, #2
 80081ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80081f0:	4b22      	ldr	r3, [pc, #136]	; (800827c <USBD_SetConfig+0x118>)
 80081f2:	781b      	ldrb	r3, [r3, #0]
 80081f4:	461a      	mov	r2, r3
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80081fa:	4b20      	ldr	r3, [pc, #128]	; (800827c <USBD_SetConfig+0x118>)
 80081fc:	781b      	ldrb	r3, [r3, #0]
 80081fe:	4619      	mov	r1, r3
 8008200:	6878      	ldr	r0, [r7, #4]
 8008202:	f7ff f9e3 	bl	80075cc <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8008206:	6878      	ldr	r0, [r7, #4]
 8008208:	f000 f9db 	bl	80085c2 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800820c:	e033      	b.n	8008276 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800820e:	4b1b      	ldr	r3, [pc, #108]	; (800827c <USBD_SetConfig+0x118>)
 8008210:	781b      	ldrb	r3, [r3, #0]
 8008212:	461a      	mov	r2, r3
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	685b      	ldr	r3, [r3, #4]
 8008218:	429a      	cmp	r2, r3
 800821a:	d01d      	beq.n	8008258 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	685b      	ldr	r3, [r3, #4]
 8008220:	b2db      	uxtb	r3, r3
 8008222:	4619      	mov	r1, r3
 8008224:	6878      	ldr	r0, [r7, #4]
 8008226:	f7ff f9d1 	bl	80075cc <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800822a:	4b14      	ldr	r3, [pc, #80]	; (800827c <USBD_SetConfig+0x118>)
 800822c:	781b      	ldrb	r3, [r3, #0]
 800822e:	461a      	mov	r2, r3
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008234:	4b11      	ldr	r3, [pc, #68]	; (800827c <USBD_SetConfig+0x118>)
 8008236:	781b      	ldrb	r3, [r3, #0]
 8008238:	4619      	mov	r1, r3
 800823a:	6878      	ldr	r0, [r7, #4]
 800823c:	f7ff f9a7 	bl	800758e <USBD_SetClassConfig>
 8008240:	4603      	mov	r3, r0
 8008242:	2b02      	cmp	r3, #2
 8008244:	d104      	bne.n	8008250 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8008246:	6839      	ldr	r1, [r7, #0]
 8008248:	6878      	ldr	r0, [r7, #4]
 800824a:	f000 f8f2 	bl	8008432 <USBD_CtlError>
            return;
 800824e:	e012      	b.n	8008276 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008250:	6878      	ldr	r0, [r7, #4]
 8008252:	f000 f9b6 	bl	80085c2 <USBD_CtlSendStatus>
        break;
 8008256:	e00e      	b.n	8008276 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008258:	6878      	ldr	r0, [r7, #4]
 800825a:	f000 f9b2 	bl	80085c2 <USBD_CtlSendStatus>
        break;
 800825e:	e00a      	b.n	8008276 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8008260:	6839      	ldr	r1, [r7, #0]
 8008262:	6878      	ldr	r0, [r7, #4]
 8008264:	f000 f8e5 	bl	8008432 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008268:	4b04      	ldr	r3, [pc, #16]	; (800827c <USBD_SetConfig+0x118>)
 800826a:	781b      	ldrb	r3, [r3, #0]
 800826c:	4619      	mov	r1, r3
 800826e:	6878      	ldr	r0, [r7, #4]
 8008270:	f7ff f9ac 	bl	80075cc <USBD_ClrClassConfig>
        break;
 8008274:	bf00      	nop
    }
  }
}
 8008276:	3708      	adds	r7, #8
 8008278:	46bd      	mov	sp, r7
 800827a:	bd80      	pop	{r7, pc}
 800827c:	2000029c 	.word	0x2000029c

08008280 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b082      	sub	sp, #8
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
 8008288:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	88db      	ldrh	r3, [r3, #6]
 800828e:	2b01      	cmp	r3, #1
 8008290:	d004      	beq.n	800829c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008292:	6839      	ldr	r1, [r7, #0]
 8008294:	6878      	ldr	r0, [r7, #4]
 8008296:	f000 f8cc 	bl	8008432 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800829a:	e022      	b.n	80082e2 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082a2:	2b02      	cmp	r3, #2
 80082a4:	dc02      	bgt.n	80082ac <USBD_GetConfig+0x2c>
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	dc03      	bgt.n	80082b2 <USBD_GetConfig+0x32>
 80082aa:	e015      	b.n	80082d8 <USBD_GetConfig+0x58>
 80082ac:	2b03      	cmp	r3, #3
 80082ae:	d00b      	beq.n	80082c8 <USBD_GetConfig+0x48>
 80082b0:	e012      	b.n	80082d8 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	2200      	movs	r2, #0
 80082b6:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	3308      	adds	r3, #8
 80082bc:	2201      	movs	r2, #1
 80082be:	4619      	mov	r1, r3
 80082c0:	6878      	ldr	r0, [r7, #4]
 80082c2:	f000 f920 	bl	8008506 <USBD_CtlSendData>
        break;
 80082c6:	e00c      	b.n	80082e2 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	3304      	adds	r3, #4
 80082cc:	2201      	movs	r2, #1
 80082ce:	4619      	mov	r1, r3
 80082d0:	6878      	ldr	r0, [r7, #4]
 80082d2:	f000 f918 	bl	8008506 <USBD_CtlSendData>
        break;
 80082d6:	e004      	b.n	80082e2 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 80082d8:	6839      	ldr	r1, [r7, #0]
 80082da:	6878      	ldr	r0, [r7, #4]
 80082dc:	f000 f8a9 	bl	8008432 <USBD_CtlError>
        break;
 80082e0:	bf00      	nop
}
 80082e2:	bf00      	nop
 80082e4:	3708      	adds	r7, #8
 80082e6:	46bd      	mov	sp, r7
 80082e8:	bd80      	pop	{r7, pc}

080082ea <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80082ea:	b580      	push	{r7, lr}
 80082ec:	b082      	sub	sp, #8
 80082ee:	af00      	add	r7, sp, #0
 80082f0:	6078      	str	r0, [r7, #4]
 80082f2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082fa:	3b01      	subs	r3, #1
 80082fc:	2b02      	cmp	r3, #2
 80082fe:	d81e      	bhi.n	800833e <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	88db      	ldrh	r3, [r3, #6]
 8008304:	2b02      	cmp	r3, #2
 8008306:	d004      	beq.n	8008312 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8008308:	6839      	ldr	r1, [r7, #0]
 800830a:	6878      	ldr	r0, [r7, #4]
 800830c:	f000 f891 	bl	8008432 <USBD_CtlError>
        break;
 8008310:	e01a      	b.n	8008348 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	2201      	movs	r2, #1
 8008316:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800831e:	2b00      	cmp	r3, #0
 8008320:	d005      	beq.n	800832e <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	68db      	ldr	r3, [r3, #12]
 8008326:	f043 0202 	orr.w	r2, r3, #2
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	330c      	adds	r3, #12
 8008332:	2202      	movs	r2, #2
 8008334:	4619      	mov	r1, r3
 8008336:	6878      	ldr	r0, [r7, #4]
 8008338:	f000 f8e5 	bl	8008506 <USBD_CtlSendData>
      break;
 800833c:	e004      	b.n	8008348 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800833e:	6839      	ldr	r1, [r7, #0]
 8008340:	6878      	ldr	r0, [r7, #4]
 8008342:	f000 f876 	bl	8008432 <USBD_CtlError>
      break;
 8008346:	bf00      	nop
  }
}
 8008348:	bf00      	nop
 800834a:	3708      	adds	r7, #8
 800834c:	46bd      	mov	sp, r7
 800834e:	bd80      	pop	{r7, pc}

08008350 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b082      	sub	sp, #8
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
 8008358:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800835a:	683b      	ldr	r3, [r7, #0]
 800835c:	885b      	ldrh	r3, [r3, #2]
 800835e:	2b01      	cmp	r3, #1
 8008360:	d106      	bne.n	8008370 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	2201      	movs	r2, #1
 8008366:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800836a:	6878      	ldr	r0, [r7, #4]
 800836c:	f000 f929 	bl	80085c2 <USBD_CtlSendStatus>
  }
}
 8008370:	bf00      	nop
 8008372:	3708      	adds	r7, #8
 8008374:	46bd      	mov	sp, r7
 8008376:	bd80      	pop	{r7, pc}

08008378 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b082      	sub	sp, #8
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
 8008380:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008388:	3b01      	subs	r3, #1
 800838a:	2b02      	cmp	r3, #2
 800838c:	d80b      	bhi.n	80083a6 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800838e:	683b      	ldr	r3, [r7, #0]
 8008390:	885b      	ldrh	r3, [r3, #2]
 8008392:	2b01      	cmp	r3, #1
 8008394:	d10c      	bne.n	80083b0 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	2200      	movs	r2, #0
 800839a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800839e:	6878      	ldr	r0, [r7, #4]
 80083a0:	f000 f90f 	bl	80085c2 <USBD_CtlSendStatus>
      }
      break;
 80083a4:	e004      	b.n	80083b0 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80083a6:	6839      	ldr	r1, [r7, #0]
 80083a8:	6878      	ldr	r0, [r7, #4]
 80083aa:	f000 f842 	bl	8008432 <USBD_CtlError>
      break;
 80083ae:	e000      	b.n	80083b2 <USBD_ClrFeature+0x3a>
      break;
 80083b0:	bf00      	nop
  }
}
 80083b2:	bf00      	nop
 80083b4:	3708      	adds	r7, #8
 80083b6:	46bd      	mov	sp, r7
 80083b8:	bd80      	pop	{r7, pc}

080083ba <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80083ba:	b480      	push	{r7}
 80083bc:	b083      	sub	sp, #12
 80083be:	af00      	add	r7, sp, #0
 80083c0:	6078      	str	r0, [r7, #4]
 80083c2:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	781a      	ldrb	r2, [r3, #0]
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	785a      	ldrb	r2, [r3, #1]
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80083d4:	683b      	ldr	r3, [r7, #0]
 80083d6:	3302      	adds	r3, #2
 80083d8:	781b      	ldrb	r3, [r3, #0]
 80083da:	b29a      	uxth	r2, r3
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	3303      	adds	r3, #3
 80083e0:	781b      	ldrb	r3, [r3, #0]
 80083e2:	b29b      	uxth	r3, r3
 80083e4:	021b      	lsls	r3, r3, #8
 80083e6:	b29b      	uxth	r3, r3
 80083e8:	4413      	add	r3, r2
 80083ea:	b29a      	uxth	r2, r3
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	3304      	adds	r3, #4
 80083f4:	781b      	ldrb	r3, [r3, #0]
 80083f6:	b29a      	uxth	r2, r3
 80083f8:	683b      	ldr	r3, [r7, #0]
 80083fa:	3305      	adds	r3, #5
 80083fc:	781b      	ldrb	r3, [r3, #0]
 80083fe:	b29b      	uxth	r3, r3
 8008400:	021b      	lsls	r3, r3, #8
 8008402:	b29b      	uxth	r3, r3
 8008404:	4413      	add	r3, r2
 8008406:	b29a      	uxth	r2, r3
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	3306      	adds	r3, #6
 8008410:	781b      	ldrb	r3, [r3, #0]
 8008412:	b29a      	uxth	r2, r3
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	3307      	adds	r3, #7
 8008418:	781b      	ldrb	r3, [r3, #0]
 800841a:	b29b      	uxth	r3, r3
 800841c:	021b      	lsls	r3, r3, #8
 800841e:	b29b      	uxth	r3, r3
 8008420:	4413      	add	r3, r2
 8008422:	b29a      	uxth	r2, r3
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	80da      	strh	r2, [r3, #6]

}
 8008428:	bf00      	nop
 800842a:	370c      	adds	r7, #12
 800842c:	46bd      	mov	sp, r7
 800842e:	bc80      	pop	{r7}
 8008430:	4770      	bx	lr

08008432 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8008432:	b580      	push	{r7, lr}
 8008434:	b082      	sub	sp, #8
 8008436:	af00      	add	r7, sp, #0
 8008438:	6078      	str	r0, [r7, #4]
 800843a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800843c:	2180      	movs	r1, #128	; 0x80
 800843e:	6878      	ldr	r0, [r7, #4]
 8008440:	f000 fc54 	bl	8008cec <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008444:	2100      	movs	r1, #0
 8008446:	6878      	ldr	r0, [r7, #4]
 8008448:	f000 fc50 	bl	8008cec <USBD_LL_StallEP>
}
 800844c:	bf00      	nop
 800844e:	3708      	adds	r7, #8
 8008450:	46bd      	mov	sp, r7
 8008452:	bd80      	pop	{r7, pc}

08008454 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008454:	b580      	push	{r7, lr}
 8008456:	b086      	sub	sp, #24
 8008458:	af00      	add	r7, sp, #0
 800845a:	60f8      	str	r0, [r7, #12]
 800845c:	60b9      	str	r1, [r7, #8]
 800845e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008460:	2300      	movs	r3, #0
 8008462:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d032      	beq.n	80084d0 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800846a:	68f8      	ldr	r0, [r7, #12]
 800846c:	f000 f834 	bl	80084d8 <USBD_GetLen>
 8008470:	4603      	mov	r3, r0
 8008472:	3301      	adds	r3, #1
 8008474:	b29b      	uxth	r3, r3
 8008476:	005b      	lsls	r3, r3, #1
 8008478:	b29a      	uxth	r2, r3
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800847e:	7dfb      	ldrb	r3, [r7, #23]
 8008480:	1c5a      	adds	r2, r3, #1
 8008482:	75fa      	strb	r2, [r7, #23]
 8008484:	461a      	mov	r2, r3
 8008486:	68bb      	ldr	r3, [r7, #8]
 8008488:	4413      	add	r3, r2
 800848a:	687a      	ldr	r2, [r7, #4]
 800848c:	7812      	ldrb	r2, [r2, #0]
 800848e:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008490:	7dfb      	ldrb	r3, [r7, #23]
 8008492:	1c5a      	adds	r2, r3, #1
 8008494:	75fa      	strb	r2, [r7, #23]
 8008496:	461a      	mov	r2, r3
 8008498:	68bb      	ldr	r3, [r7, #8]
 800849a:	4413      	add	r3, r2
 800849c:	2203      	movs	r2, #3
 800849e:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80084a0:	e012      	b.n	80084c8 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	1c5a      	adds	r2, r3, #1
 80084a6:	60fa      	str	r2, [r7, #12]
 80084a8:	7dfa      	ldrb	r2, [r7, #23]
 80084aa:	1c51      	adds	r1, r2, #1
 80084ac:	75f9      	strb	r1, [r7, #23]
 80084ae:	4611      	mov	r1, r2
 80084b0:	68ba      	ldr	r2, [r7, #8]
 80084b2:	440a      	add	r2, r1
 80084b4:	781b      	ldrb	r3, [r3, #0]
 80084b6:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80084b8:	7dfb      	ldrb	r3, [r7, #23]
 80084ba:	1c5a      	adds	r2, r3, #1
 80084bc:	75fa      	strb	r2, [r7, #23]
 80084be:	461a      	mov	r2, r3
 80084c0:	68bb      	ldr	r3, [r7, #8]
 80084c2:	4413      	add	r3, r2
 80084c4:	2200      	movs	r2, #0
 80084c6:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	781b      	ldrb	r3, [r3, #0]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d1e8      	bne.n	80084a2 <USBD_GetString+0x4e>
    }
  }
}
 80084d0:	bf00      	nop
 80084d2:	3718      	adds	r7, #24
 80084d4:	46bd      	mov	sp, r7
 80084d6:	bd80      	pop	{r7, pc}

080084d8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80084d8:	b480      	push	{r7}
 80084da:	b085      	sub	sp, #20
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80084e0:	2300      	movs	r3, #0
 80084e2:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80084e4:	e005      	b.n	80084f2 <USBD_GetLen+0x1a>
  {
    len++;
 80084e6:	7bfb      	ldrb	r3, [r7, #15]
 80084e8:	3301      	adds	r3, #1
 80084ea:	73fb      	strb	r3, [r7, #15]
    buf++;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	3301      	adds	r3, #1
 80084f0:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	781b      	ldrb	r3, [r3, #0]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d1f5      	bne.n	80084e6 <USBD_GetLen+0xe>
  }

  return len;
 80084fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80084fc:	4618      	mov	r0, r3
 80084fe:	3714      	adds	r7, #20
 8008500:	46bd      	mov	sp, r7
 8008502:	bc80      	pop	{r7}
 8008504:	4770      	bx	lr

08008506 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008506:	b580      	push	{r7, lr}
 8008508:	b084      	sub	sp, #16
 800850a:	af00      	add	r7, sp, #0
 800850c:	60f8      	str	r0, [r7, #12]
 800850e:	60b9      	str	r1, [r7, #8]
 8008510:	4613      	mov	r3, r2
 8008512:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	2202      	movs	r2, #2
 8008518:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800851c:	88fa      	ldrh	r2, [r7, #6]
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008522:	88fa      	ldrh	r2, [r7, #6]
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008528:	88fb      	ldrh	r3, [r7, #6]
 800852a:	68ba      	ldr	r2, [r7, #8]
 800852c:	2100      	movs	r1, #0
 800852e:	68f8      	ldr	r0, [r7, #12]
 8008530:	f000 fc65 	bl	8008dfe <USBD_LL_Transmit>

  return USBD_OK;
 8008534:	2300      	movs	r3, #0
}
 8008536:	4618      	mov	r0, r3
 8008538:	3710      	adds	r7, #16
 800853a:	46bd      	mov	sp, r7
 800853c:	bd80      	pop	{r7, pc}

0800853e <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800853e:	b580      	push	{r7, lr}
 8008540:	b084      	sub	sp, #16
 8008542:	af00      	add	r7, sp, #0
 8008544:	60f8      	str	r0, [r7, #12]
 8008546:	60b9      	str	r1, [r7, #8]
 8008548:	4613      	mov	r3, r2
 800854a:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800854c:	88fb      	ldrh	r3, [r7, #6]
 800854e:	68ba      	ldr	r2, [r7, #8]
 8008550:	2100      	movs	r1, #0
 8008552:	68f8      	ldr	r0, [r7, #12]
 8008554:	f000 fc53 	bl	8008dfe <USBD_LL_Transmit>

  return USBD_OK;
 8008558:	2300      	movs	r3, #0
}
 800855a:	4618      	mov	r0, r3
 800855c:	3710      	adds	r7, #16
 800855e:	46bd      	mov	sp, r7
 8008560:	bd80      	pop	{r7, pc}

08008562 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8008562:	b580      	push	{r7, lr}
 8008564:	b084      	sub	sp, #16
 8008566:	af00      	add	r7, sp, #0
 8008568:	60f8      	str	r0, [r7, #12]
 800856a:	60b9      	str	r1, [r7, #8]
 800856c:	4613      	mov	r3, r2
 800856e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	2203      	movs	r2, #3
 8008574:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008578:	88fa      	ldrh	r2, [r7, #6]
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8008580:	88fa      	ldrh	r2, [r7, #6]
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008588:	88fb      	ldrh	r3, [r7, #6]
 800858a:	68ba      	ldr	r2, [r7, #8]
 800858c:	2100      	movs	r1, #0
 800858e:	68f8      	ldr	r0, [r7, #12]
 8008590:	f000 fc58 	bl	8008e44 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008594:	2300      	movs	r3, #0
}
 8008596:	4618      	mov	r0, r3
 8008598:	3710      	adds	r7, #16
 800859a:	46bd      	mov	sp, r7
 800859c:	bd80      	pop	{r7, pc}

0800859e <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800859e:	b580      	push	{r7, lr}
 80085a0:	b084      	sub	sp, #16
 80085a2:	af00      	add	r7, sp, #0
 80085a4:	60f8      	str	r0, [r7, #12]
 80085a6:	60b9      	str	r1, [r7, #8]
 80085a8:	4613      	mov	r3, r2
 80085aa:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80085ac:	88fb      	ldrh	r3, [r7, #6]
 80085ae:	68ba      	ldr	r2, [r7, #8]
 80085b0:	2100      	movs	r1, #0
 80085b2:	68f8      	ldr	r0, [r7, #12]
 80085b4:	f000 fc46 	bl	8008e44 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80085b8:	2300      	movs	r3, #0
}
 80085ba:	4618      	mov	r0, r3
 80085bc:	3710      	adds	r7, #16
 80085be:	46bd      	mov	sp, r7
 80085c0:	bd80      	pop	{r7, pc}

080085c2 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80085c2:	b580      	push	{r7, lr}
 80085c4:	b082      	sub	sp, #8
 80085c6:	af00      	add	r7, sp, #0
 80085c8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	2204      	movs	r2, #4
 80085ce:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80085d2:	2300      	movs	r3, #0
 80085d4:	2200      	movs	r2, #0
 80085d6:	2100      	movs	r1, #0
 80085d8:	6878      	ldr	r0, [r7, #4]
 80085da:	f000 fc10 	bl	8008dfe <USBD_LL_Transmit>

  return USBD_OK;
 80085de:	2300      	movs	r3, #0
}
 80085e0:	4618      	mov	r0, r3
 80085e2:	3708      	adds	r7, #8
 80085e4:	46bd      	mov	sp, r7
 80085e6:	bd80      	pop	{r7, pc}

080085e8 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b082      	sub	sp, #8
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2205      	movs	r2, #5
 80085f4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80085f8:	2300      	movs	r3, #0
 80085fa:	2200      	movs	r2, #0
 80085fc:	2100      	movs	r1, #0
 80085fe:	6878      	ldr	r0, [r7, #4]
 8008600:	f000 fc20 	bl	8008e44 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008604:	2300      	movs	r3, #0
}
 8008606:	4618      	mov	r0, r3
 8008608:	3708      	adds	r7, #8
 800860a:	46bd      	mov	sp, r7
 800860c:	bd80      	pop	{r7, pc}
	...

08008610 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008610:	b580      	push	{r7, lr}
 8008612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008614:	2200      	movs	r2, #0
 8008616:	4912      	ldr	r1, [pc, #72]	; (8008660 <MX_USB_DEVICE_Init+0x50>)
 8008618:	4812      	ldr	r0, [pc, #72]	; (8008664 <MX_USB_DEVICE_Init+0x54>)
 800861a:	f7fe ff5e 	bl	80074da <USBD_Init>
 800861e:	4603      	mov	r3, r0
 8008620:	2b00      	cmp	r3, #0
 8008622:	d001      	beq.n	8008628 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008624:	f7f8 fcba 	bl	8000f9c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008628:	490f      	ldr	r1, [pc, #60]	; (8008668 <MX_USB_DEVICE_Init+0x58>)
 800862a:	480e      	ldr	r0, [pc, #56]	; (8008664 <MX_USB_DEVICE_Init+0x54>)
 800862c:	f7fe ff80 	bl	8007530 <USBD_RegisterClass>
 8008630:	4603      	mov	r3, r0
 8008632:	2b00      	cmp	r3, #0
 8008634:	d001      	beq.n	800863a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008636:	f7f8 fcb1 	bl	8000f9c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800863a:	490c      	ldr	r1, [pc, #48]	; (800866c <MX_USB_DEVICE_Init+0x5c>)
 800863c:	4809      	ldr	r0, [pc, #36]	; (8008664 <MX_USB_DEVICE_Init+0x54>)
 800863e:	f7fe feb1 	bl	80073a4 <USBD_CDC_RegisterInterface>
 8008642:	4603      	mov	r3, r0
 8008644:	2b00      	cmp	r3, #0
 8008646:	d001      	beq.n	800864c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008648:	f7f8 fca8 	bl	8000f9c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800864c:	4805      	ldr	r0, [pc, #20]	; (8008664 <MX_USB_DEVICE_Init+0x54>)
 800864e:	f7fe ff88 	bl	8007562 <USBD_Start>
 8008652:	4603      	mov	r3, r0
 8008654:	2b00      	cmp	r3, #0
 8008656:	d001      	beq.n	800865c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008658:	f7f8 fca0 	bl	8000f9c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800865c:	bf00      	nop
 800865e:	bd80      	pop	{r7, pc}
 8008660:	200001c8 	.word	0x200001c8
 8008664:	200004fc 	.word	0x200004fc
 8008668:	200000b4 	.word	0x200000b4
 800866c:	200001b8 	.word	0x200001b8

08008670 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008670:	b580      	push	{r7, lr}
 8008672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008674:	2200      	movs	r2, #0
 8008676:	4905      	ldr	r1, [pc, #20]	; (800868c <CDC_Init_FS+0x1c>)
 8008678:	4805      	ldr	r0, [pc, #20]	; (8008690 <CDC_Init_FS+0x20>)
 800867a:	f7fe fea9 	bl	80073d0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800867e:	4905      	ldr	r1, [pc, #20]	; (8008694 <CDC_Init_FS+0x24>)
 8008680:	4803      	ldr	r0, [pc, #12]	; (8008690 <CDC_Init_FS+0x20>)
 8008682:	f7fe febe 	bl	8007402 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008686:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008688:	4618      	mov	r0, r3
 800868a:	bd80      	pop	{r7, pc}
 800868c:	20000ba8 	.word	0x20000ba8
 8008690:	200004fc 	.word	0x200004fc
 8008694:	200007c0 	.word	0x200007c0

08008698 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008698:	b480      	push	{r7}
 800869a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800869c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800869e:	4618      	mov	r0, r3
 80086a0:	46bd      	mov	sp, r7
 80086a2:	bc80      	pop	{r7}
 80086a4:	4770      	bx	lr
	...

080086a8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80086a8:	b480      	push	{r7}
 80086aa:	b083      	sub	sp, #12
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	4603      	mov	r3, r0
 80086b0:	6039      	str	r1, [r7, #0]
 80086b2:	71fb      	strb	r3, [r7, #7]
 80086b4:	4613      	mov	r3, r2
 80086b6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80086b8:	79fb      	ldrb	r3, [r7, #7]
 80086ba:	2b23      	cmp	r3, #35	; 0x23
 80086bc:	d84a      	bhi.n	8008754 <CDC_Control_FS+0xac>
 80086be:	a201      	add	r2, pc, #4	; (adr r2, 80086c4 <CDC_Control_FS+0x1c>)
 80086c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086c4:	08008755 	.word	0x08008755
 80086c8:	08008755 	.word	0x08008755
 80086cc:	08008755 	.word	0x08008755
 80086d0:	08008755 	.word	0x08008755
 80086d4:	08008755 	.word	0x08008755
 80086d8:	08008755 	.word	0x08008755
 80086dc:	08008755 	.word	0x08008755
 80086e0:	08008755 	.word	0x08008755
 80086e4:	08008755 	.word	0x08008755
 80086e8:	08008755 	.word	0x08008755
 80086ec:	08008755 	.word	0x08008755
 80086f0:	08008755 	.word	0x08008755
 80086f4:	08008755 	.word	0x08008755
 80086f8:	08008755 	.word	0x08008755
 80086fc:	08008755 	.word	0x08008755
 8008700:	08008755 	.word	0x08008755
 8008704:	08008755 	.word	0x08008755
 8008708:	08008755 	.word	0x08008755
 800870c:	08008755 	.word	0x08008755
 8008710:	08008755 	.word	0x08008755
 8008714:	08008755 	.word	0x08008755
 8008718:	08008755 	.word	0x08008755
 800871c:	08008755 	.word	0x08008755
 8008720:	08008755 	.word	0x08008755
 8008724:	08008755 	.word	0x08008755
 8008728:	08008755 	.word	0x08008755
 800872c:	08008755 	.word	0x08008755
 8008730:	08008755 	.word	0x08008755
 8008734:	08008755 	.word	0x08008755
 8008738:	08008755 	.word	0x08008755
 800873c:	08008755 	.word	0x08008755
 8008740:	08008755 	.word	0x08008755
 8008744:	08008755 	.word	0x08008755
 8008748:	08008755 	.word	0x08008755
 800874c:	08008755 	.word	0x08008755
 8008750:	08008755 	.word	0x08008755
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008754:	bf00      	nop
  }

  return (USBD_OK);
 8008756:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008758:	4618      	mov	r0, r3
 800875a:	370c      	adds	r7, #12
 800875c:	46bd      	mov	sp, r7
 800875e:	bc80      	pop	{r7}
 8008760:	4770      	bx	lr
 8008762:	bf00      	nop

08008764 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b082      	sub	sp, #8
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
 800876c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800876e:	6879      	ldr	r1, [r7, #4]
 8008770:	4805      	ldr	r0, [pc, #20]	; (8008788 <CDC_Receive_FS+0x24>)
 8008772:	f7fe fe46 	bl	8007402 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008776:	4804      	ldr	r0, [pc, #16]	; (8008788 <CDC_Receive_FS+0x24>)
 8008778:	f7fe fe85 	bl	8007486 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800877c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800877e:	4618      	mov	r0, r3
 8008780:	3708      	adds	r7, #8
 8008782:	46bd      	mov	sp, r7
 8008784:	bd80      	pop	{r7, pc}
 8008786:	bf00      	nop
 8008788:	200004fc 	.word	0x200004fc

0800878c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b084      	sub	sp, #16
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
 8008794:	460b      	mov	r3, r1
 8008796:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008798:	2300      	movs	r3, #0
 800879a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800879c:	4b0d      	ldr	r3, [pc, #52]	; (80087d4 <CDC_Transmit_FS+0x48>)
 800879e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087a2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80087a4:	68bb      	ldr	r3, [r7, #8]
 80087a6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d001      	beq.n	80087b2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80087ae:	2301      	movs	r3, #1
 80087b0:	e00b      	b.n	80087ca <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80087b2:	887b      	ldrh	r3, [r7, #2]
 80087b4:	461a      	mov	r2, r3
 80087b6:	6879      	ldr	r1, [r7, #4]
 80087b8:	4806      	ldr	r0, [pc, #24]	; (80087d4 <CDC_Transmit_FS+0x48>)
 80087ba:	f7fe fe09 	bl	80073d0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80087be:	4805      	ldr	r0, [pc, #20]	; (80087d4 <CDC_Transmit_FS+0x48>)
 80087c0:	f7fe fe32 	bl	8007428 <USBD_CDC_TransmitPacket>
 80087c4:	4603      	mov	r3, r0
 80087c6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80087c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80087ca:	4618      	mov	r0, r3
 80087cc:	3710      	adds	r7, #16
 80087ce:	46bd      	mov	sp, r7
 80087d0:	bd80      	pop	{r7, pc}
 80087d2:	bf00      	nop
 80087d4:	200004fc 	.word	0x200004fc

080087d8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087d8:	b480      	push	{r7}
 80087da:	b083      	sub	sp, #12
 80087dc:	af00      	add	r7, sp, #0
 80087de:	4603      	mov	r3, r0
 80087e0:	6039      	str	r1, [r7, #0]
 80087e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80087e4:	683b      	ldr	r3, [r7, #0]
 80087e6:	2212      	movs	r2, #18
 80087e8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80087ea:	4b03      	ldr	r3, [pc, #12]	; (80087f8 <USBD_FS_DeviceDescriptor+0x20>)
}
 80087ec:	4618      	mov	r0, r3
 80087ee:	370c      	adds	r7, #12
 80087f0:	46bd      	mov	sp, r7
 80087f2:	bc80      	pop	{r7}
 80087f4:	4770      	bx	lr
 80087f6:	bf00      	nop
 80087f8:	200001e4 	.word	0x200001e4

080087fc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087fc:	b480      	push	{r7}
 80087fe:	b083      	sub	sp, #12
 8008800:	af00      	add	r7, sp, #0
 8008802:	4603      	mov	r3, r0
 8008804:	6039      	str	r1, [r7, #0]
 8008806:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	2204      	movs	r2, #4
 800880c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800880e:	4b03      	ldr	r3, [pc, #12]	; (800881c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008810:	4618      	mov	r0, r3
 8008812:	370c      	adds	r7, #12
 8008814:	46bd      	mov	sp, r7
 8008816:	bc80      	pop	{r7}
 8008818:	4770      	bx	lr
 800881a:	bf00      	nop
 800881c:	200001f8 	.word	0x200001f8

08008820 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008820:	b580      	push	{r7, lr}
 8008822:	b082      	sub	sp, #8
 8008824:	af00      	add	r7, sp, #0
 8008826:	4603      	mov	r3, r0
 8008828:	6039      	str	r1, [r7, #0]
 800882a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800882c:	79fb      	ldrb	r3, [r7, #7]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d105      	bne.n	800883e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008832:	683a      	ldr	r2, [r7, #0]
 8008834:	4907      	ldr	r1, [pc, #28]	; (8008854 <USBD_FS_ProductStrDescriptor+0x34>)
 8008836:	4808      	ldr	r0, [pc, #32]	; (8008858 <USBD_FS_ProductStrDescriptor+0x38>)
 8008838:	f7ff fe0c 	bl	8008454 <USBD_GetString>
 800883c:	e004      	b.n	8008848 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800883e:	683a      	ldr	r2, [r7, #0]
 8008840:	4904      	ldr	r1, [pc, #16]	; (8008854 <USBD_FS_ProductStrDescriptor+0x34>)
 8008842:	4805      	ldr	r0, [pc, #20]	; (8008858 <USBD_FS_ProductStrDescriptor+0x38>)
 8008844:	f7ff fe06 	bl	8008454 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008848:	4b02      	ldr	r3, [pc, #8]	; (8008854 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800884a:	4618      	mov	r0, r3
 800884c:	3708      	adds	r7, #8
 800884e:	46bd      	mov	sp, r7
 8008850:	bd80      	pop	{r7, pc}
 8008852:	bf00      	nop
 8008854:	20000f90 	.word	0x20000f90
 8008858:	080098c0 	.word	0x080098c0

0800885c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800885c:	b580      	push	{r7, lr}
 800885e:	b082      	sub	sp, #8
 8008860:	af00      	add	r7, sp, #0
 8008862:	4603      	mov	r3, r0
 8008864:	6039      	str	r1, [r7, #0]
 8008866:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008868:	683a      	ldr	r2, [r7, #0]
 800886a:	4904      	ldr	r1, [pc, #16]	; (800887c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800886c:	4804      	ldr	r0, [pc, #16]	; (8008880 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800886e:	f7ff fdf1 	bl	8008454 <USBD_GetString>
  return USBD_StrDesc;
 8008872:	4b02      	ldr	r3, [pc, #8]	; (800887c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008874:	4618      	mov	r0, r3
 8008876:	3708      	adds	r7, #8
 8008878:	46bd      	mov	sp, r7
 800887a:	bd80      	pop	{r7, pc}
 800887c:	20000f90 	.word	0x20000f90
 8008880:	080098d8 	.word	0x080098d8

08008884 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008884:	b580      	push	{r7, lr}
 8008886:	b082      	sub	sp, #8
 8008888:	af00      	add	r7, sp, #0
 800888a:	4603      	mov	r3, r0
 800888c:	6039      	str	r1, [r7, #0]
 800888e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008890:	683b      	ldr	r3, [r7, #0]
 8008892:	221a      	movs	r2, #26
 8008894:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008896:	f000 f843 	bl	8008920 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800889a:	4b02      	ldr	r3, [pc, #8]	; (80088a4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800889c:	4618      	mov	r0, r3
 800889e:	3708      	adds	r7, #8
 80088a0:	46bd      	mov	sp, r7
 80088a2:	bd80      	pop	{r7, pc}
 80088a4:	200001fc 	.word	0x200001fc

080088a8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b082      	sub	sp, #8
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	4603      	mov	r3, r0
 80088b0:	6039      	str	r1, [r7, #0]
 80088b2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80088b4:	79fb      	ldrb	r3, [r7, #7]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d105      	bne.n	80088c6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80088ba:	683a      	ldr	r2, [r7, #0]
 80088bc:	4907      	ldr	r1, [pc, #28]	; (80088dc <USBD_FS_ConfigStrDescriptor+0x34>)
 80088be:	4808      	ldr	r0, [pc, #32]	; (80088e0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80088c0:	f7ff fdc8 	bl	8008454 <USBD_GetString>
 80088c4:	e004      	b.n	80088d0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80088c6:	683a      	ldr	r2, [r7, #0]
 80088c8:	4904      	ldr	r1, [pc, #16]	; (80088dc <USBD_FS_ConfigStrDescriptor+0x34>)
 80088ca:	4805      	ldr	r0, [pc, #20]	; (80088e0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80088cc:	f7ff fdc2 	bl	8008454 <USBD_GetString>
  }
  return USBD_StrDesc;
 80088d0:	4b02      	ldr	r3, [pc, #8]	; (80088dc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80088d2:	4618      	mov	r0, r3
 80088d4:	3708      	adds	r7, #8
 80088d6:	46bd      	mov	sp, r7
 80088d8:	bd80      	pop	{r7, pc}
 80088da:	bf00      	nop
 80088dc:	20000f90 	.word	0x20000f90
 80088e0:	080098ec 	.word	0x080098ec

080088e4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	b082      	sub	sp, #8
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	4603      	mov	r3, r0
 80088ec:	6039      	str	r1, [r7, #0]
 80088ee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80088f0:	79fb      	ldrb	r3, [r7, #7]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d105      	bne.n	8008902 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80088f6:	683a      	ldr	r2, [r7, #0]
 80088f8:	4907      	ldr	r1, [pc, #28]	; (8008918 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80088fa:	4808      	ldr	r0, [pc, #32]	; (800891c <USBD_FS_InterfaceStrDescriptor+0x38>)
 80088fc:	f7ff fdaa 	bl	8008454 <USBD_GetString>
 8008900:	e004      	b.n	800890c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008902:	683a      	ldr	r2, [r7, #0]
 8008904:	4904      	ldr	r1, [pc, #16]	; (8008918 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008906:	4805      	ldr	r0, [pc, #20]	; (800891c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008908:	f7ff fda4 	bl	8008454 <USBD_GetString>
  }
  return USBD_StrDesc;
 800890c:	4b02      	ldr	r3, [pc, #8]	; (8008918 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800890e:	4618      	mov	r0, r3
 8008910:	3708      	adds	r7, #8
 8008912:	46bd      	mov	sp, r7
 8008914:	bd80      	pop	{r7, pc}
 8008916:	bf00      	nop
 8008918:	20000f90 	.word	0x20000f90
 800891c:	080098f8 	.word	0x080098f8

08008920 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008920:	b580      	push	{r7, lr}
 8008922:	b084      	sub	sp, #16
 8008924:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008926:	4b0f      	ldr	r3, [pc, #60]	; (8008964 <Get_SerialNum+0x44>)
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800892c:	4b0e      	ldr	r3, [pc, #56]	; (8008968 <Get_SerialNum+0x48>)
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008932:	4b0e      	ldr	r3, [pc, #56]	; (800896c <Get_SerialNum+0x4c>)
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008938:	68fa      	ldr	r2, [r7, #12]
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	4413      	add	r3, r2
 800893e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d009      	beq.n	800895a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008946:	2208      	movs	r2, #8
 8008948:	4909      	ldr	r1, [pc, #36]	; (8008970 <Get_SerialNum+0x50>)
 800894a:	68f8      	ldr	r0, [r7, #12]
 800894c:	f000 f814 	bl	8008978 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008950:	2204      	movs	r2, #4
 8008952:	4908      	ldr	r1, [pc, #32]	; (8008974 <Get_SerialNum+0x54>)
 8008954:	68b8      	ldr	r0, [r7, #8]
 8008956:	f000 f80f 	bl	8008978 <IntToUnicode>
  }
}
 800895a:	bf00      	nop
 800895c:	3710      	adds	r7, #16
 800895e:	46bd      	mov	sp, r7
 8008960:	bd80      	pop	{r7, pc}
 8008962:	bf00      	nop
 8008964:	1ffff7e8 	.word	0x1ffff7e8
 8008968:	1ffff7ec 	.word	0x1ffff7ec
 800896c:	1ffff7f0 	.word	0x1ffff7f0
 8008970:	200001fe 	.word	0x200001fe
 8008974:	2000020e 	.word	0x2000020e

08008978 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008978:	b480      	push	{r7}
 800897a:	b087      	sub	sp, #28
 800897c:	af00      	add	r7, sp, #0
 800897e:	60f8      	str	r0, [r7, #12]
 8008980:	60b9      	str	r1, [r7, #8]
 8008982:	4613      	mov	r3, r2
 8008984:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008986:	2300      	movs	r3, #0
 8008988:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800898a:	2300      	movs	r3, #0
 800898c:	75fb      	strb	r3, [r7, #23]
 800898e:	e027      	b.n	80089e0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	0f1b      	lsrs	r3, r3, #28
 8008994:	2b09      	cmp	r3, #9
 8008996:	d80b      	bhi.n	80089b0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	0f1b      	lsrs	r3, r3, #28
 800899c:	b2da      	uxtb	r2, r3
 800899e:	7dfb      	ldrb	r3, [r7, #23]
 80089a0:	005b      	lsls	r3, r3, #1
 80089a2:	4619      	mov	r1, r3
 80089a4:	68bb      	ldr	r3, [r7, #8]
 80089a6:	440b      	add	r3, r1
 80089a8:	3230      	adds	r2, #48	; 0x30
 80089aa:	b2d2      	uxtb	r2, r2
 80089ac:	701a      	strb	r2, [r3, #0]
 80089ae:	e00a      	b.n	80089c6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	0f1b      	lsrs	r3, r3, #28
 80089b4:	b2da      	uxtb	r2, r3
 80089b6:	7dfb      	ldrb	r3, [r7, #23]
 80089b8:	005b      	lsls	r3, r3, #1
 80089ba:	4619      	mov	r1, r3
 80089bc:	68bb      	ldr	r3, [r7, #8]
 80089be:	440b      	add	r3, r1
 80089c0:	3237      	adds	r2, #55	; 0x37
 80089c2:	b2d2      	uxtb	r2, r2
 80089c4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	011b      	lsls	r3, r3, #4
 80089ca:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80089cc:	7dfb      	ldrb	r3, [r7, #23]
 80089ce:	005b      	lsls	r3, r3, #1
 80089d0:	3301      	adds	r3, #1
 80089d2:	68ba      	ldr	r2, [r7, #8]
 80089d4:	4413      	add	r3, r2
 80089d6:	2200      	movs	r2, #0
 80089d8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80089da:	7dfb      	ldrb	r3, [r7, #23]
 80089dc:	3301      	adds	r3, #1
 80089de:	75fb      	strb	r3, [r7, #23]
 80089e0:	7dfa      	ldrb	r2, [r7, #23]
 80089e2:	79fb      	ldrb	r3, [r7, #7]
 80089e4:	429a      	cmp	r2, r3
 80089e6:	d3d3      	bcc.n	8008990 <IntToUnicode+0x18>
  }
}
 80089e8:	bf00      	nop
 80089ea:	bf00      	nop
 80089ec:	371c      	adds	r7, #28
 80089ee:	46bd      	mov	sp, r7
 80089f0:	bc80      	pop	{r7}
 80089f2:	4770      	bx	lr

080089f4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b084      	sub	sp, #16
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	4a0d      	ldr	r2, [pc, #52]	; (8008a38 <HAL_PCD_MspInit+0x44>)
 8008a02:	4293      	cmp	r3, r2
 8008a04:	d113      	bne.n	8008a2e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008a06:	4b0d      	ldr	r3, [pc, #52]	; (8008a3c <HAL_PCD_MspInit+0x48>)
 8008a08:	69db      	ldr	r3, [r3, #28]
 8008a0a:	4a0c      	ldr	r2, [pc, #48]	; (8008a3c <HAL_PCD_MspInit+0x48>)
 8008a0c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008a10:	61d3      	str	r3, [r2, #28]
 8008a12:	4b0a      	ldr	r3, [pc, #40]	; (8008a3c <HAL_PCD_MspInit+0x48>)
 8008a14:	69db      	ldr	r3, [r3, #28]
 8008a16:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008a1a:	60fb      	str	r3, [r7, #12]
 8008a1c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8008a1e:	2200      	movs	r2, #0
 8008a20:	2100      	movs	r1, #0
 8008a22:	2014      	movs	r0, #20
 8008a24:	f7f9 fbc9 	bl	80021ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8008a28:	2014      	movs	r0, #20
 8008a2a:	f7f9 fbe2 	bl	80021f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008a2e:	bf00      	nop
 8008a30:	3710      	adds	r7, #16
 8008a32:	46bd      	mov	sp, r7
 8008a34:	bd80      	pop	{r7, pc}
 8008a36:	bf00      	nop
 8008a38:	40005c00 	.word	0x40005c00
 8008a3c:	40021000 	.word	0x40021000

08008a40 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b082      	sub	sp, #8
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8008a54:	4619      	mov	r1, r3
 8008a56:	4610      	mov	r0, r2
 8008a58:	f7fe fdcb 	bl	80075f2 <USBD_LL_SetupStage>
}
 8008a5c:	bf00      	nop
 8008a5e:	3708      	adds	r7, #8
 8008a60:	46bd      	mov	sp, r7
 8008a62:	bd80      	pop	{r7, pc}

08008a64 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b082      	sub	sp, #8
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
 8008a6c:	460b      	mov	r3, r1
 8008a6e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8008a76:	78fa      	ldrb	r2, [r7, #3]
 8008a78:	6879      	ldr	r1, [r7, #4]
 8008a7a:	4613      	mov	r3, r2
 8008a7c:	009b      	lsls	r3, r3, #2
 8008a7e:	4413      	add	r3, r2
 8008a80:	00db      	lsls	r3, r3, #3
 8008a82:	440b      	add	r3, r1
 8008a84:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8008a88:	681a      	ldr	r2, [r3, #0]
 8008a8a:	78fb      	ldrb	r3, [r7, #3]
 8008a8c:	4619      	mov	r1, r3
 8008a8e:	f7fe fdfd 	bl	800768c <USBD_LL_DataOutStage>
}
 8008a92:	bf00      	nop
 8008a94:	3708      	adds	r7, #8
 8008a96:	46bd      	mov	sp, r7
 8008a98:	bd80      	pop	{r7, pc}

08008a9a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a9a:	b580      	push	{r7, lr}
 8008a9c:	b082      	sub	sp, #8
 8008a9e:	af00      	add	r7, sp, #0
 8008aa0:	6078      	str	r0, [r7, #4]
 8008aa2:	460b      	mov	r3, r1
 8008aa4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8008aac:	78fa      	ldrb	r2, [r7, #3]
 8008aae:	6879      	ldr	r1, [r7, #4]
 8008ab0:	4613      	mov	r3, r2
 8008ab2:	009b      	lsls	r3, r3, #2
 8008ab4:	4413      	add	r3, r2
 8008ab6:	00db      	lsls	r3, r3, #3
 8008ab8:	440b      	add	r3, r1
 8008aba:	333c      	adds	r3, #60	; 0x3c
 8008abc:	681a      	ldr	r2, [r3, #0]
 8008abe:	78fb      	ldrb	r3, [r7, #3]
 8008ac0:	4619      	mov	r1, r3
 8008ac2:	f7fe fe54 	bl	800776e <USBD_LL_DataInStage>
}
 8008ac6:	bf00      	nop
 8008ac8:	3708      	adds	r7, #8
 8008aca:	46bd      	mov	sp, r7
 8008acc:	bd80      	pop	{r7, pc}

08008ace <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ace:	b580      	push	{r7, lr}
 8008ad0:	b082      	sub	sp, #8
 8008ad2:	af00      	add	r7, sp, #0
 8008ad4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008adc:	4618      	mov	r0, r3
 8008ade:	f7fe ff64 	bl	80079aa <USBD_LL_SOF>
}
 8008ae2:	bf00      	nop
 8008ae4:	3708      	adds	r7, #8
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	bd80      	pop	{r7, pc}

08008aea <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008aea:	b580      	push	{r7, lr}
 8008aec:	b084      	sub	sp, #16
 8008aee:	af00      	add	r7, sp, #0
 8008af0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008af2:	2301      	movs	r3, #1
 8008af4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	689b      	ldr	r3, [r3, #8]
 8008afa:	2b02      	cmp	r3, #2
 8008afc:	d001      	beq.n	8008b02 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008afe:	f7f8 fa4d 	bl	8000f9c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008b08:	7bfa      	ldrb	r2, [r7, #15]
 8008b0a:	4611      	mov	r1, r2
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	f7fe ff14 	bl	800793a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008b18:	4618      	mov	r0, r3
 8008b1a:	f7fe fecd 	bl	80078b8 <USBD_LL_Reset>
}
 8008b1e:	bf00      	nop
 8008b20:	3710      	adds	r7, #16
 8008b22:	46bd      	mov	sp, r7
 8008b24:	bd80      	pop	{r7, pc}
	...

08008b28 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b082      	sub	sp, #8
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008b36:	4618      	mov	r0, r3
 8008b38:	f7fe ff0e 	bl	8007958 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	699b      	ldr	r3, [r3, #24]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d005      	beq.n	8008b50 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008b44:	4b04      	ldr	r3, [pc, #16]	; (8008b58 <HAL_PCD_SuspendCallback+0x30>)
 8008b46:	691b      	ldr	r3, [r3, #16]
 8008b48:	4a03      	ldr	r2, [pc, #12]	; (8008b58 <HAL_PCD_SuspendCallback+0x30>)
 8008b4a:	f043 0306 	orr.w	r3, r3, #6
 8008b4e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008b50:	bf00      	nop
 8008b52:	3708      	adds	r7, #8
 8008b54:	46bd      	mov	sp, r7
 8008b56:	bd80      	pop	{r7, pc}
 8008b58:	e000ed00 	.word	0xe000ed00

08008b5c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b082      	sub	sp, #8
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	f7fe ff08 	bl	8007980 <USBD_LL_Resume>
}
 8008b70:	bf00      	nop
 8008b72:	3708      	adds	r7, #8
 8008b74:	46bd      	mov	sp, r7
 8008b76:	bd80      	pop	{r7, pc}

08008b78 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b082      	sub	sp, #8
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008b80:	4a28      	ldr	r2, [pc, #160]	; (8008c24 <USBD_LL_Init+0xac>)
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	4a26      	ldr	r2, [pc, #152]	; (8008c24 <USBD_LL_Init+0xac>)
 8008b8c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8008b90:	4b24      	ldr	r3, [pc, #144]	; (8008c24 <USBD_LL_Init+0xac>)
 8008b92:	4a25      	ldr	r2, [pc, #148]	; (8008c28 <USBD_LL_Init+0xb0>)
 8008b94:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8008b96:	4b23      	ldr	r3, [pc, #140]	; (8008c24 <USBD_LL_Init+0xac>)
 8008b98:	2208      	movs	r2, #8
 8008b9a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008b9c:	4b21      	ldr	r3, [pc, #132]	; (8008c24 <USBD_LL_Init+0xac>)
 8008b9e:	2202      	movs	r2, #2
 8008ba0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008ba2:	4b20      	ldr	r3, [pc, #128]	; (8008c24 <USBD_LL_Init+0xac>)
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008ba8:	4b1e      	ldr	r3, [pc, #120]	; (8008c24 <USBD_LL_Init+0xac>)
 8008baa:	2200      	movs	r2, #0
 8008bac:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008bae:	4b1d      	ldr	r3, [pc, #116]	; (8008c24 <USBD_LL_Init+0xac>)
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008bb4:	481b      	ldr	r0, [pc, #108]	; (8008c24 <USBD_LL_Init+0xac>)
 8008bb6:	f7f9 fcea 	bl	800258e <HAL_PCD_Init>
 8008bba:	4603      	mov	r3, r0
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d001      	beq.n	8008bc4 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8008bc0:	f7f8 f9ec 	bl	8000f9c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008bca:	2318      	movs	r3, #24
 8008bcc:	2200      	movs	r2, #0
 8008bce:	2100      	movs	r1, #0
 8008bd0:	f7fb f960 	bl	8003e94 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008bda:	2358      	movs	r3, #88	; 0x58
 8008bdc:	2200      	movs	r2, #0
 8008bde:	2180      	movs	r1, #128	; 0x80
 8008be0:	f7fb f958 	bl	8003e94 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008bea:	23c0      	movs	r3, #192	; 0xc0
 8008bec:	2200      	movs	r2, #0
 8008bee:	2181      	movs	r1, #129	; 0x81
 8008bf0:	f7fb f950 	bl	8003e94 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008bfa:	f44f 7388 	mov.w	r3, #272	; 0x110
 8008bfe:	2200      	movs	r2, #0
 8008c00:	2101      	movs	r1, #1
 8008c02:	f7fb f947 	bl	8003e94 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008c0c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008c10:	2200      	movs	r2, #0
 8008c12:	2182      	movs	r1, #130	; 0x82
 8008c14:	f7fb f93e 	bl	8003e94 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8008c18:	2300      	movs	r3, #0
}
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	3708      	adds	r7, #8
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	bd80      	pop	{r7, pc}
 8008c22:	bf00      	nop
 8008c24:	20001190 	.word	0x20001190
 8008c28:	40005c00 	.word	0x40005c00

08008c2c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b084      	sub	sp, #16
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c34:	2300      	movs	r3, #0
 8008c36:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c38:	2300      	movs	r3, #0
 8008c3a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008c42:	4618      	mov	r0, r3
 8008c44:	f7f9 fdae 	bl	80027a4 <HAL_PCD_Start>
 8008c48:	4603      	mov	r3, r0
 8008c4a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c4c:	7bfb      	ldrb	r3, [r7, #15]
 8008c4e:	4618      	mov	r0, r3
 8008c50:	f000 f94e 	bl	8008ef0 <USBD_Get_USB_Status>
 8008c54:	4603      	mov	r3, r0
 8008c56:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c58:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	3710      	adds	r7, #16
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	bd80      	pop	{r7, pc}

08008c62 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008c62:	b580      	push	{r7, lr}
 8008c64:	b084      	sub	sp, #16
 8008c66:	af00      	add	r7, sp, #0
 8008c68:	6078      	str	r0, [r7, #4]
 8008c6a:	4608      	mov	r0, r1
 8008c6c:	4611      	mov	r1, r2
 8008c6e:	461a      	mov	r2, r3
 8008c70:	4603      	mov	r3, r0
 8008c72:	70fb      	strb	r3, [r7, #3]
 8008c74:	460b      	mov	r3, r1
 8008c76:	70bb      	strb	r3, [r7, #2]
 8008c78:	4613      	mov	r3, r2
 8008c7a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c80:	2300      	movs	r3, #0
 8008c82:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008c8a:	78bb      	ldrb	r3, [r7, #2]
 8008c8c:	883a      	ldrh	r2, [r7, #0]
 8008c8e:	78f9      	ldrb	r1, [r7, #3]
 8008c90:	f7f9 ff28 	bl	8002ae4 <HAL_PCD_EP_Open>
 8008c94:	4603      	mov	r3, r0
 8008c96:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c98:	7bfb      	ldrb	r3, [r7, #15]
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	f000 f928 	bl	8008ef0 <USBD_Get_USB_Status>
 8008ca0:	4603      	mov	r3, r0
 8008ca2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ca4:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	3710      	adds	r7, #16
 8008caa:	46bd      	mov	sp, r7
 8008cac:	bd80      	pop	{r7, pc}

08008cae <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008cae:	b580      	push	{r7, lr}
 8008cb0:	b084      	sub	sp, #16
 8008cb2:	af00      	add	r7, sp, #0
 8008cb4:	6078      	str	r0, [r7, #4]
 8008cb6:	460b      	mov	r3, r1
 8008cb8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008cba:	2300      	movs	r3, #0
 8008cbc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008cc8:	78fa      	ldrb	r2, [r7, #3]
 8008cca:	4611      	mov	r1, r2
 8008ccc:	4618      	mov	r0, r3
 8008cce:	f7f9 ff6f 	bl	8002bb0 <HAL_PCD_EP_Close>
 8008cd2:	4603      	mov	r3, r0
 8008cd4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008cd6:	7bfb      	ldrb	r3, [r7, #15]
 8008cd8:	4618      	mov	r0, r3
 8008cda:	f000 f909 	bl	8008ef0 <USBD_Get_USB_Status>
 8008cde:	4603      	mov	r3, r0
 8008ce0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ce2:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	3710      	adds	r7, #16
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	bd80      	pop	{r7, pc}

08008cec <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b084      	sub	sp, #16
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
 8008cf4:	460b      	mov	r3, r1
 8008cf6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008d06:	78fa      	ldrb	r2, [r7, #3]
 8008d08:	4611      	mov	r1, r2
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	f7fa f82f 	bl	8002d6e <HAL_PCD_EP_SetStall>
 8008d10:	4603      	mov	r3, r0
 8008d12:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d14:	7bfb      	ldrb	r3, [r7, #15]
 8008d16:	4618      	mov	r0, r3
 8008d18:	f000 f8ea 	bl	8008ef0 <USBD_Get_USB_Status>
 8008d1c:	4603      	mov	r3, r0
 8008d1e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d20:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d22:	4618      	mov	r0, r3
 8008d24:	3710      	adds	r7, #16
 8008d26:	46bd      	mov	sp, r7
 8008d28:	bd80      	pop	{r7, pc}

08008d2a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008d2a:	b580      	push	{r7, lr}
 8008d2c:	b084      	sub	sp, #16
 8008d2e:	af00      	add	r7, sp, #0
 8008d30:	6078      	str	r0, [r7, #4]
 8008d32:	460b      	mov	r3, r1
 8008d34:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d36:	2300      	movs	r3, #0
 8008d38:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008d44:	78fa      	ldrb	r2, [r7, #3]
 8008d46:	4611      	mov	r1, r2
 8008d48:	4618      	mov	r0, r3
 8008d4a:	f7fa f870 	bl	8002e2e <HAL_PCD_EP_ClrStall>
 8008d4e:	4603      	mov	r3, r0
 8008d50:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d52:	7bfb      	ldrb	r3, [r7, #15]
 8008d54:	4618      	mov	r0, r3
 8008d56:	f000 f8cb 	bl	8008ef0 <USBD_Get_USB_Status>
 8008d5a:	4603      	mov	r3, r0
 8008d5c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d5e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d60:	4618      	mov	r0, r3
 8008d62:	3710      	adds	r7, #16
 8008d64:	46bd      	mov	sp, r7
 8008d66:	bd80      	pop	{r7, pc}

08008d68 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008d68:	b480      	push	{r7}
 8008d6a:	b085      	sub	sp, #20
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
 8008d70:	460b      	mov	r3, r1
 8008d72:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008d7a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008d7c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	da0c      	bge.n	8008d9e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008d84:	78fb      	ldrb	r3, [r7, #3]
 8008d86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d8a:	68f9      	ldr	r1, [r7, #12]
 8008d8c:	1c5a      	adds	r2, r3, #1
 8008d8e:	4613      	mov	r3, r2
 8008d90:	009b      	lsls	r3, r3, #2
 8008d92:	4413      	add	r3, r2
 8008d94:	00db      	lsls	r3, r3, #3
 8008d96:	440b      	add	r3, r1
 8008d98:	3302      	adds	r3, #2
 8008d9a:	781b      	ldrb	r3, [r3, #0]
 8008d9c:	e00b      	b.n	8008db6 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008d9e:	78fb      	ldrb	r3, [r7, #3]
 8008da0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008da4:	68f9      	ldr	r1, [r7, #12]
 8008da6:	4613      	mov	r3, r2
 8008da8:	009b      	lsls	r3, r3, #2
 8008daa:	4413      	add	r3, r2
 8008dac:	00db      	lsls	r3, r3, #3
 8008dae:	440b      	add	r3, r1
 8008db0:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8008db4:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008db6:	4618      	mov	r0, r3
 8008db8:	3714      	adds	r7, #20
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	bc80      	pop	{r7}
 8008dbe:	4770      	bx	lr

08008dc0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	b084      	sub	sp, #16
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
 8008dc8:	460b      	mov	r3, r1
 8008dca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008dcc:	2300      	movs	r3, #0
 8008dce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008dda:	78fa      	ldrb	r2, [r7, #3]
 8008ddc:	4611      	mov	r1, r2
 8008dde:	4618      	mov	r0, r3
 8008de0:	f7f9 fe5b 	bl	8002a9a <HAL_PCD_SetAddress>
 8008de4:	4603      	mov	r3, r0
 8008de6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008de8:	7bfb      	ldrb	r3, [r7, #15]
 8008dea:	4618      	mov	r0, r3
 8008dec:	f000 f880 	bl	8008ef0 <USBD_Get_USB_Status>
 8008df0:	4603      	mov	r3, r0
 8008df2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008df4:	7bbb      	ldrb	r3, [r7, #14]
}
 8008df6:	4618      	mov	r0, r3
 8008df8:	3710      	adds	r7, #16
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	bd80      	pop	{r7, pc}

08008dfe <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008dfe:	b580      	push	{r7, lr}
 8008e00:	b086      	sub	sp, #24
 8008e02:	af00      	add	r7, sp, #0
 8008e04:	60f8      	str	r0, [r7, #12]
 8008e06:	607a      	str	r2, [r7, #4]
 8008e08:	461a      	mov	r2, r3
 8008e0a:	460b      	mov	r3, r1
 8008e0c:	72fb      	strb	r3, [r7, #11]
 8008e0e:	4613      	mov	r3, r2
 8008e10:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e12:	2300      	movs	r3, #0
 8008e14:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e16:	2300      	movs	r3, #0
 8008e18:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008e20:	893b      	ldrh	r3, [r7, #8]
 8008e22:	7af9      	ldrb	r1, [r7, #11]
 8008e24:	687a      	ldr	r2, [r7, #4]
 8008e26:	f7f9 ff5f 	bl	8002ce8 <HAL_PCD_EP_Transmit>
 8008e2a:	4603      	mov	r3, r0
 8008e2c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e2e:	7dfb      	ldrb	r3, [r7, #23]
 8008e30:	4618      	mov	r0, r3
 8008e32:	f000 f85d 	bl	8008ef0 <USBD_Get_USB_Status>
 8008e36:	4603      	mov	r3, r0
 8008e38:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008e3a:	7dbb      	ldrb	r3, [r7, #22]
}
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	3718      	adds	r7, #24
 8008e40:	46bd      	mov	sp, r7
 8008e42:	bd80      	pop	{r7, pc}

08008e44 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008e44:	b580      	push	{r7, lr}
 8008e46:	b086      	sub	sp, #24
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	60f8      	str	r0, [r7, #12]
 8008e4c:	607a      	str	r2, [r7, #4]
 8008e4e:	461a      	mov	r2, r3
 8008e50:	460b      	mov	r3, r1
 8008e52:	72fb      	strb	r3, [r7, #11]
 8008e54:	4613      	mov	r3, r2
 8008e56:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e58:	2300      	movs	r3, #0
 8008e5a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008e66:	893b      	ldrh	r3, [r7, #8]
 8008e68:	7af9      	ldrb	r1, [r7, #11]
 8008e6a:	687a      	ldr	r2, [r7, #4]
 8008e6c:	f7f9 fee8 	bl	8002c40 <HAL_PCD_EP_Receive>
 8008e70:	4603      	mov	r3, r0
 8008e72:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e74:	7dfb      	ldrb	r3, [r7, #23]
 8008e76:	4618      	mov	r0, r3
 8008e78:	f000 f83a 	bl	8008ef0 <USBD_Get_USB_Status>
 8008e7c:	4603      	mov	r3, r0
 8008e7e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008e80:	7dbb      	ldrb	r3, [r7, #22]
}
 8008e82:	4618      	mov	r0, r3
 8008e84:	3718      	adds	r7, #24
 8008e86:	46bd      	mov	sp, r7
 8008e88:	bd80      	pop	{r7, pc}

08008e8a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008e8a:	b580      	push	{r7, lr}
 8008e8c:	b082      	sub	sp, #8
 8008e8e:	af00      	add	r7, sp, #0
 8008e90:	6078      	str	r0, [r7, #4]
 8008e92:	460b      	mov	r3, r1
 8008e94:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008e9c:	78fa      	ldrb	r2, [r7, #3]
 8008e9e:	4611      	mov	r1, r2
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	f7f9 ff0a 	bl	8002cba <HAL_PCD_EP_GetRxCount>
 8008ea6:	4603      	mov	r3, r0
}
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	3708      	adds	r7, #8
 8008eac:	46bd      	mov	sp, r7
 8008eae:	bd80      	pop	{r7, pc}

08008eb0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008eb0:	b480      	push	{r7}
 8008eb2:	b083      	sub	sp, #12
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008eb8:	4b02      	ldr	r3, [pc, #8]	; (8008ec4 <USBD_static_malloc+0x14>)
}
 8008eba:	4618      	mov	r0, r3
 8008ebc:	370c      	adds	r7, #12
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	bc80      	pop	{r7}
 8008ec2:	4770      	bx	lr
 8008ec4:	200002a0 	.word	0x200002a0

08008ec8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008ec8:	b480      	push	{r7}
 8008eca:	b083      	sub	sp, #12
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]

}
 8008ed0:	bf00      	nop
 8008ed2:	370c      	adds	r7, #12
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	bc80      	pop	{r7}
 8008ed8:	4770      	bx	lr

08008eda <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008eda:	b480      	push	{r7}
 8008edc:	b083      	sub	sp, #12
 8008ede:	af00      	add	r7, sp, #0
 8008ee0:	6078      	str	r0, [r7, #4]
 8008ee2:	460b      	mov	r3, r1
 8008ee4:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8008ee6:	bf00      	nop
 8008ee8:	370c      	adds	r7, #12
 8008eea:	46bd      	mov	sp, r7
 8008eec:	bc80      	pop	{r7}
 8008eee:	4770      	bx	lr

08008ef0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008ef0:	b480      	push	{r7}
 8008ef2:	b085      	sub	sp, #20
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	4603      	mov	r3, r0
 8008ef8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008efa:	2300      	movs	r3, #0
 8008efc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008efe:	79fb      	ldrb	r3, [r7, #7]
 8008f00:	2b03      	cmp	r3, #3
 8008f02:	d817      	bhi.n	8008f34 <USBD_Get_USB_Status+0x44>
 8008f04:	a201      	add	r2, pc, #4	; (adr r2, 8008f0c <USBD_Get_USB_Status+0x1c>)
 8008f06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f0a:	bf00      	nop
 8008f0c:	08008f1d 	.word	0x08008f1d
 8008f10:	08008f23 	.word	0x08008f23
 8008f14:	08008f29 	.word	0x08008f29
 8008f18:	08008f2f 	.word	0x08008f2f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	73fb      	strb	r3, [r7, #15]
    break;
 8008f20:	e00b      	b.n	8008f3a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008f22:	2302      	movs	r3, #2
 8008f24:	73fb      	strb	r3, [r7, #15]
    break;
 8008f26:	e008      	b.n	8008f3a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008f28:	2301      	movs	r3, #1
 8008f2a:	73fb      	strb	r3, [r7, #15]
    break;
 8008f2c:	e005      	b.n	8008f3a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008f2e:	2302      	movs	r3, #2
 8008f30:	73fb      	strb	r3, [r7, #15]
    break;
 8008f32:	e002      	b.n	8008f3a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008f34:	2302      	movs	r3, #2
 8008f36:	73fb      	strb	r3, [r7, #15]
    break;
 8008f38:	bf00      	nop
  }
  return usb_status;
 8008f3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	3714      	adds	r7, #20
 8008f40:	46bd      	mov	sp, r7
 8008f42:	bc80      	pop	{r7}
 8008f44:	4770      	bx	lr
 8008f46:	bf00      	nop

08008f48 <__errno>:
 8008f48:	4b01      	ldr	r3, [pc, #4]	; (8008f50 <__errno+0x8>)
 8008f4a:	6818      	ldr	r0, [r3, #0]
 8008f4c:	4770      	bx	lr
 8008f4e:	bf00      	nop
 8008f50:	20000218 	.word	0x20000218

08008f54 <__libc_init_array>:
 8008f54:	b570      	push	{r4, r5, r6, lr}
 8008f56:	2600      	movs	r6, #0
 8008f58:	4d0c      	ldr	r5, [pc, #48]	; (8008f8c <__libc_init_array+0x38>)
 8008f5a:	4c0d      	ldr	r4, [pc, #52]	; (8008f90 <__libc_init_array+0x3c>)
 8008f5c:	1b64      	subs	r4, r4, r5
 8008f5e:	10a4      	asrs	r4, r4, #2
 8008f60:	42a6      	cmp	r6, r4
 8008f62:	d109      	bne.n	8008f78 <__libc_init_array+0x24>
 8008f64:	f000 fc5c 	bl	8009820 <_init>
 8008f68:	2600      	movs	r6, #0
 8008f6a:	4d0a      	ldr	r5, [pc, #40]	; (8008f94 <__libc_init_array+0x40>)
 8008f6c:	4c0a      	ldr	r4, [pc, #40]	; (8008f98 <__libc_init_array+0x44>)
 8008f6e:	1b64      	subs	r4, r4, r5
 8008f70:	10a4      	asrs	r4, r4, #2
 8008f72:	42a6      	cmp	r6, r4
 8008f74:	d105      	bne.n	8008f82 <__libc_init_array+0x2e>
 8008f76:	bd70      	pop	{r4, r5, r6, pc}
 8008f78:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f7c:	4798      	blx	r3
 8008f7e:	3601      	adds	r6, #1
 8008f80:	e7ee      	b.n	8008f60 <__libc_init_array+0xc>
 8008f82:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f86:	4798      	blx	r3
 8008f88:	3601      	adds	r6, #1
 8008f8a:	e7f2      	b.n	8008f72 <__libc_init_array+0x1e>
 8008f8c:	08009954 	.word	0x08009954
 8008f90:	08009954 	.word	0x08009954
 8008f94:	08009954 	.word	0x08009954
 8008f98:	08009958 	.word	0x08009958

08008f9c <memset>:
 8008f9c:	4603      	mov	r3, r0
 8008f9e:	4402      	add	r2, r0
 8008fa0:	4293      	cmp	r3, r2
 8008fa2:	d100      	bne.n	8008fa6 <memset+0xa>
 8008fa4:	4770      	bx	lr
 8008fa6:	f803 1b01 	strb.w	r1, [r3], #1
 8008faa:	e7f9      	b.n	8008fa0 <memset+0x4>

08008fac <siprintf>:
 8008fac:	b40e      	push	{r1, r2, r3}
 8008fae:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008fb2:	b500      	push	{lr}
 8008fb4:	b09c      	sub	sp, #112	; 0x70
 8008fb6:	ab1d      	add	r3, sp, #116	; 0x74
 8008fb8:	9002      	str	r0, [sp, #8]
 8008fba:	9006      	str	r0, [sp, #24]
 8008fbc:	9107      	str	r1, [sp, #28]
 8008fbe:	9104      	str	r1, [sp, #16]
 8008fc0:	4808      	ldr	r0, [pc, #32]	; (8008fe4 <siprintf+0x38>)
 8008fc2:	4909      	ldr	r1, [pc, #36]	; (8008fe8 <siprintf+0x3c>)
 8008fc4:	f853 2b04 	ldr.w	r2, [r3], #4
 8008fc8:	9105      	str	r1, [sp, #20]
 8008fca:	6800      	ldr	r0, [r0, #0]
 8008fcc:	a902      	add	r1, sp, #8
 8008fce:	9301      	str	r3, [sp, #4]
 8008fd0:	f000 f868 	bl	80090a4 <_svfiprintf_r>
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	9b02      	ldr	r3, [sp, #8]
 8008fd8:	701a      	strb	r2, [r3, #0]
 8008fda:	b01c      	add	sp, #112	; 0x70
 8008fdc:	f85d eb04 	ldr.w	lr, [sp], #4
 8008fe0:	b003      	add	sp, #12
 8008fe2:	4770      	bx	lr
 8008fe4:	20000218 	.word	0x20000218
 8008fe8:	ffff0208 	.word	0xffff0208

08008fec <__ssputs_r>:
 8008fec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ff0:	688e      	ldr	r6, [r1, #8]
 8008ff2:	4682      	mov	sl, r0
 8008ff4:	429e      	cmp	r6, r3
 8008ff6:	460c      	mov	r4, r1
 8008ff8:	4690      	mov	r8, r2
 8008ffa:	461f      	mov	r7, r3
 8008ffc:	d838      	bhi.n	8009070 <__ssputs_r+0x84>
 8008ffe:	898a      	ldrh	r2, [r1, #12]
 8009000:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009004:	d032      	beq.n	800906c <__ssputs_r+0x80>
 8009006:	6825      	ldr	r5, [r4, #0]
 8009008:	6909      	ldr	r1, [r1, #16]
 800900a:	3301      	adds	r3, #1
 800900c:	eba5 0901 	sub.w	r9, r5, r1
 8009010:	6965      	ldr	r5, [r4, #20]
 8009012:	444b      	add	r3, r9
 8009014:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009018:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800901c:	106d      	asrs	r5, r5, #1
 800901e:	429d      	cmp	r5, r3
 8009020:	bf38      	it	cc
 8009022:	461d      	movcc	r5, r3
 8009024:	0553      	lsls	r3, r2, #21
 8009026:	d531      	bpl.n	800908c <__ssputs_r+0xa0>
 8009028:	4629      	mov	r1, r5
 800902a:	f000 fb53 	bl	80096d4 <_malloc_r>
 800902e:	4606      	mov	r6, r0
 8009030:	b950      	cbnz	r0, 8009048 <__ssputs_r+0x5c>
 8009032:	230c      	movs	r3, #12
 8009034:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009038:	f8ca 3000 	str.w	r3, [sl]
 800903c:	89a3      	ldrh	r3, [r4, #12]
 800903e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009042:	81a3      	strh	r3, [r4, #12]
 8009044:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009048:	464a      	mov	r2, r9
 800904a:	6921      	ldr	r1, [r4, #16]
 800904c:	f000 face 	bl	80095ec <memcpy>
 8009050:	89a3      	ldrh	r3, [r4, #12]
 8009052:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009056:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800905a:	81a3      	strh	r3, [r4, #12]
 800905c:	6126      	str	r6, [r4, #16]
 800905e:	444e      	add	r6, r9
 8009060:	6026      	str	r6, [r4, #0]
 8009062:	463e      	mov	r6, r7
 8009064:	6165      	str	r5, [r4, #20]
 8009066:	eba5 0509 	sub.w	r5, r5, r9
 800906a:	60a5      	str	r5, [r4, #8]
 800906c:	42be      	cmp	r6, r7
 800906e:	d900      	bls.n	8009072 <__ssputs_r+0x86>
 8009070:	463e      	mov	r6, r7
 8009072:	4632      	mov	r2, r6
 8009074:	4641      	mov	r1, r8
 8009076:	6820      	ldr	r0, [r4, #0]
 8009078:	f000 fac6 	bl	8009608 <memmove>
 800907c:	68a3      	ldr	r3, [r4, #8]
 800907e:	6822      	ldr	r2, [r4, #0]
 8009080:	1b9b      	subs	r3, r3, r6
 8009082:	4432      	add	r2, r6
 8009084:	2000      	movs	r0, #0
 8009086:	60a3      	str	r3, [r4, #8]
 8009088:	6022      	str	r2, [r4, #0]
 800908a:	e7db      	b.n	8009044 <__ssputs_r+0x58>
 800908c:	462a      	mov	r2, r5
 800908e:	f000 fb7b 	bl	8009788 <_realloc_r>
 8009092:	4606      	mov	r6, r0
 8009094:	2800      	cmp	r0, #0
 8009096:	d1e1      	bne.n	800905c <__ssputs_r+0x70>
 8009098:	4650      	mov	r0, sl
 800909a:	6921      	ldr	r1, [r4, #16]
 800909c:	f000 face 	bl	800963c <_free_r>
 80090a0:	e7c7      	b.n	8009032 <__ssputs_r+0x46>
	...

080090a4 <_svfiprintf_r>:
 80090a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090a8:	4698      	mov	r8, r3
 80090aa:	898b      	ldrh	r3, [r1, #12]
 80090ac:	4607      	mov	r7, r0
 80090ae:	061b      	lsls	r3, r3, #24
 80090b0:	460d      	mov	r5, r1
 80090b2:	4614      	mov	r4, r2
 80090b4:	b09d      	sub	sp, #116	; 0x74
 80090b6:	d50e      	bpl.n	80090d6 <_svfiprintf_r+0x32>
 80090b8:	690b      	ldr	r3, [r1, #16]
 80090ba:	b963      	cbnz	r3, 80090d6 <_svfiprintf_r+0x32>
 80090bc:	2140      	movs	r1, #64	; 0x40
 80090be:	f000 fb09 	bl	80096d4 <_malloc_r>
 80090c2:	6028      	str	r0, [r5, #0]
 80090c4:	6128      	str	r0, [r5, #16]
 80090c6:	b920      	cbnz	r0, 80090d2 <_svfiprintf_r+0x2e>
 80090c8:	230c      	movs	r3, #12
 80090ca:	603b      	str	r3, [r7, #0]
 80090cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80090d0:	e0d1      	b.n	8009276 <_svfiprintf_r+0x1d2>
 80090d2:	2340      	movs	r3, #64	; 0x40
 80090d4:	616b      	str	r3, [r5, #20]
 80090d6:	2300      	movs	r3, #0
 80090d8:	9309      	str	r3, [sp, #36]	; 0x24
 80090da:	2320      	movs	r3, #32
 80090dc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80090e0:	2330      	movs	r3, #48	; 0x30
 80090e2:	f04f 0901 	mov.w	r9, #1
 80090e6:	f8cd 800c 	str.w	r8, [sp, #12]
 80090ea:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009290 <_svfiprintf_r+0x1ec>
 80090ee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80090f2:	4623      	mov	r3, r4
 80090f4:	469a      	mov	sl, r3
 80090f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80090fa:	b10a      	cbz	r2, 8009100 <_svfiprintf_r+0x5c>
 80090fc:	2a25      	cmp	r2, #37	; 0x25
 80090fe:	d1f9      	bne.n	80090f4 <_svfiprintf_r+0x50>
 8009100:	ebba 0b04 	subs.w	fp, sl, r4
 8009104:	d00b      	beq.n	800911e <_svfiprintf_r+0x7a>
 8009106:	465b      	mov	r3, fp
 8009108:	4622      	mov	r2, r4
 800910a:	4629      	mov	r1, r5
 800910c:	4638      	mov	r0, r7
 800910e:	f7ff ff6d 	bl	8008fec <__ssputs_r>
 8009112:	3001      	adds	r0, #1
 8009114:	f000 80aa 	beq.w	800926c <_svfiprintf_r+0x1c8>
 8009118:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800911a:	445a      	add	r2, fp
 800911c:	9209      	str	r2, [sp, #36]	; 0x24
 800911e:	f89a 3000 	ldrb.w	r3, [sl]
 8009122:	2b00      	cmp	r3, #0
 8009124:	f000 80a2 	beq.w	800926c <_svfiprintf_r+0x1c8>
 8009128:	2300      	movs	r3, #0
 800912a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800912e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009132:	f10a 0a01 	add.w	sl, sl, #1
 8009136:	9304      	str	r3, [sp, #16]
 8009138:	9307      	str	r3, [sp, #28]
 800913a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800913e:	931a      	str	r3, [sp, #104]	; 0x68
 8009140:	4654      	mov	r4, sl
 8009142:	2205      	movs	r2, #5
 8009144:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009148:	4851      	ldr	r0, [pc, #324]	; (8009290 <_svfiprintf_r+0x1ec>)
 800914a:	f000 fa41 	bl	80095d0 <memchr>
 800914e:	9a04      	ldr	r2, [sp, #16]
 8009150:	b9d8      	cbnz	r0, 800918a <_svfiprintf_r+0xe6>
 8009152:	06d0      	lsls	r0, r2, #27
 8009154:	bf44      	itt	mi
 8009156:	2320      	movmi	r3, #32
 8009158:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800915c:	0711      	lsls	r1, r2, #28
 800915e:	bf44      	itt	mi
 8009160:	232b      	movmi	r3, #43	; 0x2b
 8009162:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009166:	f89a 3000 	ldrb.w	r3, [sl]
 800916a:	2b2a      	cmp	r3, #42	; 0x2a
 800916c:	d015      	beq.n	800919a <_svfiprintf_r+0xf6>
 800916e:	4654      	mov	r4, sl
 8009170:	2000      	movs	r0, #0
 8009172:	f04f 0c0a 	mov.w	ip, #10
 8009176:	9a07      	ldr	r2, [sp, #28]
 8009178:	4621      	mov	r1, r4
 800917a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800917e:	3b30      	subs	r3, #48	; 0x30
 8009180:	2b09      	cmp	r3, #9
 8009182:	d94e      	bls.n	8009222 <_svfiprintf_r+0x17e>
 8009184:	b1b0      	cbz	r0, 80091b4 <_svfiprintf_r+0x110>
 8009186:	9207      	str	r2, [sp, #28]
 8009188:	e014      	b.n	80091b4 <_svfiprintf_r+0x110>
 800918a:	eba0 0308 	sub.w	r3, r0, r8
 800918e:	fa09 f303 	lsl.w	r3, r9, r3
 8009192:	4313      	orrs	r3, r2
 8009194:	46a2      	mov	sl, r4
 8009196:	9304      	str	r3, [sp, #16]
 8009198:	e7d2      	b.n	8009140 <_svfiprintf_r+0x9c>
 800919a:	9b03      	ldr	r3, [sp, #12]
 800919c:	1d19      	adds	r1, r3, #4
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	9103      	str	r1, [sp, #12]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	bfbb      	ittet	lt
 80091a6:	425b      	neglt	r3, r3
 80091a8:	f042 0202 	orrlt.w	r2, r2, #2
 80091ac:	9307      	strge	r3, [sp, #28]
 80091ae:	9307      	strlt	r3, [sp, #28]
 80091b0:	bfb8      	it	lt
 80091b2:	9204      	strlt	r2, [sp, #16]
 80091b4:	7823      	ldrb	r3, [r4, #0]
 80091b6:	2b2e      	cmp	r3, #46	; 0x2e
 80091b8:	d10c      	bne.n	80091d4 <_svfiprintf_r+0x130>
 80091ba:	7863      	ldrb	r3, [r4, #1]
 80091bc:	2b2a      	cmp	r3, #42	; 0x2a
 80091be:	d135      	bne.n	800922c <_svfiprintf_r+0x188>
 80091c0:	9b03      	ldr	r3, [sp, #12]
 80091c2:	3402      	adds	r4, #2
 80091c4:	1d1a      	adds	r2, r3, #4
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	9203      	str	r2, [sp, #12]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	bfb8      	it	lt
 80091ce:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80091d2:	9305      	str	r3, [sp, #20]
 80091d4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80092a0 <_svfiprintf_r+0x1fc>
 80091d8:	2203      	movs	r2, #3
 80091da:	4650      	mov	r0, sl
 80091dc:	7821      	ldrb	r1, [r4, #0]
 80091de:	f000 f9f7 	bl	80095d0 <memchr>
 80091e2:	b140      	cbz	r0, 80091f6 <_svfiprintf_r+0x152>
 80091e4:	2340      	movs	r3, #64	; 0x40
 80091e6:	eba0 000a 	sub.w	r0, r0, sl
 80091ea:	fa03 f000 	lsl.w	r0, r3, r0
 80091ee:	9b04      	ldr	r3, [sp, #16]
 80091f0:	3401      	adds	r4, #1
 80091f2:	4303      	orrs	r3, r0
 80091f4:	9304      	str	r3, [sp, #16]
 80091f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091fa:	2206      	movs	r2, #6
 80091fc:	4825      	ldr	r0, [pc, #148]	; (8009294 <_svfiprintf_r+0x1f0>)
 80091fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009202:	f000 f9e5 	bl	80095d0 <memchr>
 8009206:	2800      	cmp	r0, #0
 8009208:	d038      	beq.n	800927c <_svfiprintf_r+0x1d8>
 800920a:	4b23      	ldr	r3, [pc, #140]	; (8009298 <_svfiprintf_r+0x1f4>)
 800920c:	bb1b      	cbnz	r3, 8009256 <_svfiprintf_r+0x1b2>
 800920e:	9b03      	ldr	r3, [sp, #12]
 8009210:	3307      	adds	r3, #7
 8009212:	f023 0307 	bic.w	r3, r3, #7
 8009216:	3308      	adds	r3, #8
 8009218:	9303      	str	r3, [sp, #12]
 800921a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800921c:	4433      	add	r3, r6
 800921e:	9309      	str	r3, [sp, #36]	; 0x24
 8009220:	e767      	b.n	80090f2 <_svfiprintf_r+0x4e>
 8009222:	460c      	mov	r4, r1
 8009224:	2001      	movs	r0, #1
 8009226:	fb0c 3202 	mla	r2, ip, r2, r3
 800922a:	e7a5      	b.n	8009178 <_svfiprintf_r+0xd4>
 800922c:	2300      	movs	r3, #0
 800922e:	f04f 0c0a 	mov.w	ip, #10
 8009232:	4619      	mov	r1, r3
 8009234:	3401      	adds	r4, #1
 8009236:	9305      	str	r3, [sp, #20]
 8009238:	4620      	mov	r0, r4
 800923a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800923e:	3a30      	subs	r2, #48	; 0x30
 8009240:	2a09      	cmp	r2, #9
 8009242:	d903      	bls.n	800924c <_svfiprintf_r+0x1a8>
 8009244:	2b00      	cmp	r3, #0
 8009246:	d0c5      	beq.n	80091d4 <_svfiprintf_r+0x130>
 8009248:	9105      	str	r1, [sp, #20]
 800924a:	e7c3      	b.n	80091d4 <_svfiprintf_r+0x130>
 800924c:	4604      	mov	r4, r0
 800924e:	2301      	movs	r3, #1
 8009250:	fb0c 2101 	mla	r1, ip, r1, r2
 8009254:	e7f0      	b.n	8009238 <_svfiprintf_r+0x194>
 8009256:	ab03      	add	r3, sp, #12
 8009258:	9300      	str	r3, [sp, #0]
 800925a:	462a      	mov	r2, r5
 800925c:	4638      	mov	r0, r7
 800925e:	4b0f      	ldr	r3, [pc, #60]	; (800929c <_svfiprintf_r+0x1f8>)
 8009260:	a904      	add	r1, sp, #16
 8009262:	f3af 8000 	nop.w
 8009266:	1c42      	adds	r2, r0, #1
 8009268:	4606      	mov	r6, r0
 800926a:	d1d6      	bne.n	800921a <_svfiprintf_r+0x176>
 800926c:	89ab      	ldrh	r3, [r5, #12]
 800926e:	065b      	lsls	r3, r3, #25
 8009270:	f53f af2c 	bmi.w	80090cc <_svfiprintf_r+0x28>
 8009274:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009276:	b01d      	add	sp, #116	; 0x74
 8009278:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800927c:	ab03      	add	r3, sp, #12
 800927e:	9300      	str	r3, [sp, #0]
 8009280:	462a      	mov	r2, r5
 8009282:	4638      	mov	r0, r7
 8009284:	4b05      	ldr	r3, [pc, #20]	; (800929c <_svfiprintf_r+0x1f8>)
 8009286:	a904      	add	r1, sp, #16
 8009288:	f000 f87c 	bl	8009384 <_printf_i>
 800928c:	e7eb      	b.n	8009266 <_svfiprintf_r+0x1c2>
 800928e:	bf00      	nop
 8009290:	08009920 	.word	0x08009920
 8009294:	0800992a 	.word	0x0800992a
 8009298:	00000000 	.word	0x00000000
 800929c:	08008fed 	.word	0x08008fed
 80092a0:	08009926 	.word	0x08009926

080092a4 <_printf_common>:
 80092a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092a8:	4616      	mov	r6, r2
 80092aa:	4699      	mov	r9, r3
 80092ac:	688a      	ldr	r2, [r1, #8]
 80092ae:	690b      	ldr	r3, [r1, #16]
 80092b0:	4607      	mov	r7, r0
 80092b2:	4293      	cmp	r3, r2
 80092b4:	bfb8      	it	lt
 80092b6:	4613      	movlt	r3, r2
 80092b8:	6033      	str	r3, [r6, #0]
 80092ba:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80092be:	460c      	mov	r4, r1
 80092c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80092c4:	b10a      	cbz	r2, 80092ca <_printf_common+0x26>
 80092c6:	3301      	adds	r3, #1
 80092c8:	6033      	str	r3, [r6, #0]
 80092ca:	6823      	ldr	r3, [r4, #0]
 80092cc:	0699      	lsls	r1, r3, #26
 80092ce:	bf42      	ittt	mi
 80092d0:	6833      	ldrmi	r3, [r6, #0]
 80092d2:	3302      	addmi	r3, #2
 80092d4:	6033      	strmi	r3, [r6, #0]
 80092d6:	6825      	ldr	r5, [r4, #0]
 80092d8:	f015 0506 	ands.w	r5, r5, #6
 80092dc:	d106      	bne.n	80092ec <_printf_common+0x48>
 80092de:	f104 0a19 	add.w	sl, r4, #25
 80092e2:	68e3      	ldr	r3, [r4, #12]
 80092e4:	6832      	ldr	r2, [r6, #0]
 80092e6:	1a9b      	subs	r3, r3, r2
 80092e8:	42ab      	cmp	r3, r5
 80092ea:	dc28      	bgt.n	800933e <_printf_common+0x9a>
 80092ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80092f0:	1e13      	subs	r3, r2, #0
 80092f2:	6822      	ldr	r2, [r4, #0]
 80092f4:	bf18      	it	ne
 80092f6:	2301      	movne	r3, #1
 80092f8:	0692      	lsls	r2, r2, #26
 80092fa:	d42d      	bmi.n	8009358 <_printf_common+0xb4>
 80092fc:	4649      	mov	r1, r9
 80092fe:	4638      	mov	r0, r7
 8009300:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009304:	47c0      	blx	r8
 8009306:	3001      	adds	r0, #1
 8009308:	d020      	beq.n	800934c <_printf_common+0xa8>
 800930a:	6823      	ldr	r3, [r4, #0]
 800930c:	68e5      	ldr	r5, [r4, #12]
 800930e:	f003 0306 	and.w	r3, r3, #6
 8009312:	2b04      	cmp	r3, #4
 8009314:	bf18      	it	ne
 8009316:	2500      	movne	r5, #0
 8009318:	6832      	ldr	r2, [r6, #0]
 800931a:	f04f 0600 	mov.w	r6, #0
 800931e:	68a3      	ldr	r3, [r4, #8]
 8009320:	bf08      	it	eq
 8009322:	1aad      	subeq	r5, r5, r2
 8009324:	6922      	ldr	r2, [r4, #16]
 8009326:	bf08      	it	eq
 8009328:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800932c:	4293      	cmp	r3, r2
 800932e:	bfc4      	itt	gt
 8009330:	1a9b      	subgt	r3, r3, r2
 8009332:	18ed      	addgt	r5, r5, r3
 8009334:	341a      	adds	r4, #26
 8009336:	42b5      	cmp	r5, r6
 8009338:	d11a      	bne.n	8009370 <_printf_common+0xcc>
 800933a:	2000      	movs	r0, #0
 800933c:	e008      	b.n	8009350 <_printf_common+0xac>
 800933e:	2301      	movs	r3, #1
 8009340:	4652      	mov	r2, sl
 8009342:	4649      	mov	r1, r9
 8009344:	4638      	mov	r0, r7
 8009346:	47c0      	blx	r8
 8009348:	3001      	adds	r0, #1
 800934a:	d103      	bne.n	8009354 <_printf_common+0xb0>
 800934c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009350:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009354:	3501      	adds	r5, #1
 8009356:	e7c4      	b.n	80092e2 <_printf_common+0x3e>
 8009358:	2030      	movs	r0, #48	; 0x30
 800935a:	18e1      	adds	r1, r4, r3
 800935c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009360:	1c5a      	adds	r2, r3, #1
 8009362:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009366:	4422      	add	r2, r4
 8009368:	3302      	adds	r3, #2
 800936a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800936e:	e7c5      	b.n	80092fc <_printf_common+0x58>
 8009370:	2301      	movs	r3, #1
 8009372:	4622      	mov	r2, r4
 8009374:	4649      	mov	r1, r9
 8009376:	4638      	mov	r0, r7
 8009378:	47c0      	blx	r8
 800937a:	3001      	adds	r0, #1
 800937c:	d0e6      	beq.n	800934c <_printf_common+0xa8>
 800937e:	3601      	adds	r6, #1
 8009380:	e7d9      	b.n	8009336 <_printf_common+0x92>
	...

08009384 <_printf_i>:
 8009384:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009388:	460c      	mov	r4, r1
 800938a:	7e27      	ldrb	r7, [r4, #24]
 800938c:	4691      	mov	r9, r2
 800938e:	2f78      	cmp	r7, #120	; 0x78
 8009390:	4680      	mov	r8, r0
 8009392:	469a      	mov	sl, r3
 8009394:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009396:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800939a:	d807      	bhi.n	80093ac <_printf_i+0x28>
 800939c:	2f62      	cmp	r7, #98	; 0x62
 800939e:	d80a      	bhi.n	80093b6 <_printf_i+0x32>
 80093a0:	2f00      	cmp	r7, #0
 80093a2:	f000 80d9 	beq.w	8009558 <_printf_i+0x1d4>
 80093a6:	2f58      	cmp	r7, #88	; 0x58
 80093a8:	f000 80a4 	beq.w	80094f4 <_printf_i+0x170>
 80093ac:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80093b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80093b4:	e03a      	b.n	800942c <_printf_i+0xa8>
 80093b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80093ba:	2b15      	cmp	r3, #21
 80093bc:	d8f6      	bhi.n	80093ac <_printf_i+0x28>
 80093be:	a001      	add	r0, pc, #4	; (adr r0, 80093c4 <_printf_i+0x40>)
 80093c0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80093c4:	0800941d 	.word	0x0800941d
 80093c8:	08009431 	.word	0x08009431
 80093cc:	080093ad 	.word	0x080093ad
 80093d0:	080093ad 	.word	0x080093ad
 80093d4:	080093ad 	.word	0x080093ad
 80093d8:	080093ad 	.word	0x080093ad
 80093dc:	08009431 	.word	0x08009431
 80093e0:	080093ad 	.word	0x080093ad
 80093e4:	080093ad 	.word	0x080093ad
 80093e8:	080093ad 	.word	0x080093ad
 80093ec:	080093ad 	.word	0x080093ad
 80093f0:	0800953f 	.word	0x0800953f
 80093f4:	08009461 	.word	0x08009461
 80093f8:	08009521 	.word	0x08009521
 80093fc:	080093ad 	.word	0x080093ad
 8009400:	080093ad 	.word	0x080093ad
 8009404:	08009561 	.word	0x08009561
 8009408:	080093ad 	.word	0x080093ad
 800940c:	08009461 	.word	0x08009461
 8009410:	080093ad 	.word	0x080093ad
 8009414:	080093ad 	.word	0x080093ad
 8009418:	08009529 	.word	0x08009529
 800941c:	680b      	ldr	r3, [r1, #0]
 800941e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009422:	1d1a      	adds	r2, r3, #4
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	600a      	str	r2, [r1, #0]
 8009428:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800942c:	2301      	movs	r3, #1
 800942e:	e0a4      	b.n	800957a <_printf_i+0x1f6>
 8009430:	6825      	ldr	r5, [r4, #0]
 8009432:	6808      	ldr	r0, [r1, #0]
 8009434:	062e      	lsls	r6, r5, #24
 8009436:	f100 0304 	add.w	r3, r0, #4
 800943a:	d50a      	bpl.n	8009452 <_printf_i+0xce>
 800943c:	6805      	ldr	r5, [r0, #0]
 800943e:	600b      	str	r3, [r1, #0]
 8009440:	2d00      	cmp	r5, #0
 8009442:	da03      	bge.n	800944c <_printf_i+0xc8>
 8009444:	232d      	movs	r3, #45	; 0x2d
 8009446:	426d      	negs	r5, r5
 8009448:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800944c:	230a      	movs	r3, #10
 800944e:	485e      	ldr	r0, [pc, #376]	; (80095c8 <_printf_i+0x244>)
 8009450:	e019      	b.n	8009486 <_printf_i+0x102>
 8009452:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009456:	6805      	ldr	r5, [r0, #0]
 8009458:	600b      	str	r3, [r1, #0]
 800945a:	bf18      	it	ne
 800945c:	b22d      	sxthne	r5, r5
 800945e:	e7ef      	b.n	8009440 <_printf_i+0xbc>
 8009460:	680b      	ldr	r3, [r1, #0]
 8009462:	6825      	ldr	r5, [r4, #0]
 8009464:	1d18      	adds	r0, r3, #4
 8009466:	6008      	str	r0, [r1, #0]
 8009468:	0628      	lsls	r0, r5, #24
 800946a:	d501      	bpl.n	8009470 <_printf_i+0xec>
 800946c:	681d      	ldr	r5, [r3, #0]
 800946e:	e002      	b.n	8009476 <_printf_i+0xf2>
 8009470:	0669      	lsls	r1, r5, #25
 8009472:	d5fb      	bpl.n	800946c <_printf_i+0xe8>
 8009474:	881d      	ldrh	r5, [r3, #0]
 8009476:	2f6f      	cmp	r7, #111	; 0x6f
 8009478:	bf0c      	ite	eq
 800947a:	2308      	moveq	r3, #8
 800947c:	230a      	movne	r3, #10
 800947e:	4852      	ldr	r0, [pc, #328]	; (80095c8 <_printf_i+0x244>)
 8009480:	2100      	movs	r1, #0
 8009482:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009486:	6866      	ldr	r6, [r4, #4]
 8009488:	2e00      	cmp	r6, #0
 800948a:	bfa8      	it	ge
 800948c:	6821      	ldrge	r1, [r4, #0]
 800948e:	60a6      	str	r6, [r4, #8]
 8009490:	bfa4      	itt	ge
 8009492:	f021 0104 	bicge.w	r1, r1, #4
 8009496:	6021      	strge	r1, [r4, #0]
 8009498:	b90d      	cbnz	r5, 800949e <_printf_i+0x11a>
 800949a:	2e00      	cmp	r6, #0
 800949c:	d04d      	beq.n	800953a <_printf_i+0x1b6>
 800949e:	4616      	mov	r6, r2
 80094a0:	fbb5 f1f3 	udiv	r1, r5, r3
 80094a4:	fb03 5711 	mls	r7, r3, r1, r5
 80094a8:	5dc7      	ldrb	r7, [r0, r7]
 80094aa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80094ae:	462f      	mov	r7, r5
 80094b0:	42bb      	cmp	r3, r7
 80094b2:	460d      	mov	r5, r1
 80094b4:	d9f4      	bls.n	80094a0 <_printf_i+0x11c>
 80094b6:	2b08      	cmp	r3, #8
 80094b8:	d10b      	bne.n	80094d2 <_printf_i+0x14e>
 80094ba:	6823      	ldr	r3, [r4, #0]
 80094bc:	07df      	lsls	r7, r3, #31
 80094be:	d508      	bpl.n	80094d2 <_printf_i+0x14e>
 80094c0:	6923      	ldr	r3, [r4, #16]
 80094c2:	6861      	ldr	r1, [r4, #4]
 80094c4:	4299      	cmp	r1, r3
 80094c6:	bfde      	ittt	le
 80094c8:	2330      	movle	r3, #48	; 0x30
 80094ca:	f806 3c01 	strble.w	r3, [r6, #-1]
 80094ce:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 80094d2:	1b92      	subs	r2, r2, r6
 80094d4:	6122      	str	r2, [r4, #16]
 80094d6:	464b      	mov	r3, r9
 80094d8:	4621      	mov	r1, r4
 80094da:	4640      	mov	r0, r8
 80094dc:	f8cd a000 	str.w	sl, [sp]
 80094e0:	aa03      	add	r2, sp, #12
 80094e2:	f7ff fedf 	bl	80092a4 <_printf_common>
 80094e6:	3001      	adds	r0, #1
 80094e8:	d14c      	bne.n	8009584 <_printf_i+0x200>
 80094ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80094ee:	b004      	add	sp, #16
 80094f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094f4:	4834      	ldr	r0, [pc, #208]	; (80095c8 <_printf_i+0x244>)
 80094f6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80094fa:	680e      	ldr	r6, [r1, #0]
 80094fc:	6823      	ldr	r3, [r4, #0]
 80094fe:	f856 5b04 	ldr.w	r5, [r6], #4
 8009502:	061f      	lsls	r7, r3, #24
 8009504:	600e      	str	r6, [r1, #0]
 8009506:	d514      	bpl.n	8009532 <_printf_i+0x1ae>
 8009508:	07d9      	lsls	r1, r3, #31
 800950a:	bf44      	itt	mi
 800950c:	f043 0320 	orrmi.w	r3, r3, #32
 8009510:	6023      	strmi	r3, [r4, #0]
 8009512:	b91d      	cbnz	r5, 800951c <_printf_i+0x198>
 8009514:	6823      	ldr	r3, [r4, #0]
 8009516:	f023 0320 	bic.w	r3, r3, #32
 800951a:	6023      	str	r3, [r4, #0]
 800951c:	2310      	movs	r3, #16
 800951e:	e7af      	b.n	8009480 <_printf_i+0xfc>
 8009520:	6823      	ldr	r3, [r4, #0]
 8009522:	f043 0320 	orr.w	r3, r3, #32
 8009526:	6023      	str	r3, [r4, #0]
 8009528:	2378      	movs	r3, #120	; 0x78
 800952a:	4828      	ldr	r0, [pc, #160]	; (80095cc <_printf_i+0x248>)
 800952c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009530:	e7e3      	b.n	80094fa <_printf_i+0x176>
 8009532:	065e      	lsls	r6, r3, #25
 8009534:	bf48      	it	mi
 8009536:	b2ad      	uxthmi	r5, r5
 8009538:	e7e6      	b.n	8009508 <_printf_i+0x184>
 800953a:	4616      	mov	r6, r2
 800953c:	e7bb      	b.n	80094b6 <_printf_i+0x132>
 800953e:	680b      	ldr	r3, [r1, #0]
 8009540:	6826      	ldr	r6, [r4, #0]
 8009542:	1d1d      	adds	r5, r3, #4
 8009544:	6960      	ldr	r0, [r4, #20]
 8009546:	600d      	str	r5, [r1, #0]
 8009548:	0635      	lsls	r5, r6, #24
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	d501      	bpl.n	8009552 <_printf_i+0x1ce>
 800954e:	6018      	str	r0, [r3, #0]
 8009550:	e002      	b.n	8009558 <_printf_i+0x1d4>
 8009552:	0671      	lsls	r1, r6, #25
 8009554:	d5fb      	bpl.n	800954e <_printf_i+0x1ca>
 8009556:	8018      	strh	r0, [r3, #0]
 8009558:	2300      	movs	r3, #0
 800955a:	4616      	mov	r6, r2
 800955c:	6123      	str	r3, [r4, #16]
 800955e:	e7ba      	b.n	80094d6 <_printf_i+0x152>
 8009560:	680b      	ldr	r3, [r1, #0]
 8009562:	1d1a      	adds	r2, r3, #4
 8009564:	600a      	str	r2, [r1, #0]
 8009566:	681e      	ldr	r6, [r3, #0]
 8009568:	2100      	movs	r1, #0
 800956a:	4630      	mov	r0, r6
 800956c:	6862      	ldr	r2, [r4, #4]
 800956e:	f000 f82f 	bl	80095d0 <memchr>
 8009572:	b108      	cbz	r0, 8009578 <_printf_i+0x1f4>
 8009574:	1b80      	subs	r0, r0, r6
 8009576:	6060      	str	r0, [r4, #4]
 8009578:	6863      	ldr	r3, [r4, #4]
 800957a:	6123      	str	r3, [r4, #16]
 800957c:	2300      	movs	r3, #0
 800957e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009582:	e7a8      	b.n	80094d6 <_printf_i+0x152>
 8009584:	4632      	mov	r2, r6
 8009586:	4649      	mov	r1, r9
 8009588:	4640      	mov	r0, r8
 800958a:	6923      	ldr	r3, [r4, #16]
 800958c:	47d0      	blx	sl
 800958e:	3001      	adds	r0, #1
 8009590:	d0ab      	beq.n	80094ea <_printf_i+0x166>
 8009592:	6823      	ldr	r3, [r4, #0]
 8009594:	079b      	lsls	r3, r3, #30
 8009596:	d413      	bmi.n	80095c0 <_printf_i+0x23c>
 8009598:	68e0      	ldr	r0, [r4, #12]
 800959a:	9b03      	ldr	r3, [sp, #12]
 800959c:	4298      	cmp	r0, r3
 800959e:	bfb8      	it	lt
 80095a0:	4618      	movlt	r0, r3
 80095a2:	e7a4      	b.n	80094ee <_printf_i+0x16a>
 80095a4:	2301      	movs	r3, #1
 80095a6:	4632      	mov	r2, r6
 80095a8:	4649      	mov	r1, r9
 80095aa:	4640      	mov	r0, r8
 80095ac:	47d0      	blx	sl
 80095ae:	3001      	adds	r0, #1
 80095b0:	d09b      	beq.n	80094ea <_printf_i+0x166>
 80095b2:	3501      	adds	r5, #1
 80095b4:	68e3      	ldr	r3, [r4, #12]
 80095b6:	9903      	ldr	r1, [sp, #12]
 80095b8:	1a5b      	subs	r3, r3, r1
 80095ba:	42ab      	cmp	r3, r5
 80095bc:	dcf2      	bgt.n	80095a4 <_printf_i+0x220>
 80095be:	e7eb      	b.n	8009598 <_printf_i+0x214>
 80095c0:	2500      	movs	r5, #0
 80095c2:	f104 0619 	add.w	r6, r4, #25
 80095c6:	e7f5      	b.n	80095b4 <_printf_i+0x230>
 80095c8:	08009931 	.word	0x08009931
 80095cc:	08009942 	.word	0x08009942

080095d0 <memchr>:
 80095d0:	4603      	mov	r3, r0
 80095d2:	b510      	push	{r4, lr}
 80095d4:	b2c9      	uxtb	r1, r1
 80095d6:	4402      	add	r2, r0
 80095d8:	4293      	cmp	r3, r2
 80095da:	4618      	mov	r0, r3
 80095dc:	d101      	bne.n	80095e2 <memchr+0x12>
 80095de:	2000      	movs	r0, #0
 80095e0:	e003      	b.n	80095ea <memchr+0x1a>
 80095e2:	7804      	ldrb	r4, [r0, #0]
 80095e4:	3301      	adds	r3, #1
 80095e6:	428c      	cmp	r4, r1
 80095e8:	d1f6      	bne.n	80095d8 <memchr+0x8>
 80095ea:	bd10      	pop	{r4, pc}

080095ec <memcpy>:
 80095ec:	440a      	add	r2, r1
 80095ee:	4291      	cmp	r1, r2
 80095f0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80095f4:	d100      	bne.n	80095f8 <memcpy+0xc>
 80095f6:	4770      	bx	lr
 80095f8:	b510      	push	{r4, lr}
 80095fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80095fe:	4291      	cmp	r1, r2
 8009600:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009604:	d1f9      	bne.n	80095fa <memcpy+0xe>
 8009606:	bd10      	pop	{r4, pc}

08009608 <memmove>:
 8009608:	4288      	cmp	r0, r1
 800960a:	b510      	push	{r4, lr}
 800960c:	eb01 0402 	add.w	r4, r1, r2
 8009610:	d902      	bls.n	8009618 <memmove+0x10>
 8009612:	4284      	cmp	r4, r0
 8009614:	4623      	mov	r3, r4
 8009616:	d807      	bhi.n	8009628 <memmove+0x20>
 8009618:	1e43      	subs	r3, r0, #1
 800961a:	42a1      	cmp	r1, r4
 800961c:	d008      	beq.n	8009630 <memmove+0x28>
 800961e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009622:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009626:	e7f8      	b.n	800961a <memmove+0x12>
 8009628:	4601      	mov	r1, r0
 800962a:	4402      	add	r2, r0
 800962c:	428a      	cmp	r2, r1
 800962e:	d100      	bne.n	8009632 <memmove+0x2a>
 8009630:	bd10      	pop	{r4, pc}
 8009632:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009636:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800963a:	e7f7      	b.n	800962c <memmove+0x24>

0800963c <_free_r>:
 800963c:	b538      	push	{r3, r4, r5, lr}
 800963e:	4605      	mov	r5, r0
 8009640:	2900      	cmp	r1, #0
 8009642:	d043      	beq.n	80096cc <_free_r+0x90>
 8009644:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009648:	1f0c      	subs	r4, r1, #4
 800964a:	2b00      	cmp	r3, #0
 800964c:	bfb8      	it	lt
 800964e:	18e4      	addlt	r4, r4, r3
 8009650:	f000 f8d0 	bl	80097f4 <__malloc_lock>
 8009654:	4a1e      	ldr	r2, [pc, #120]	; (80096d0 <_free_r+0x94>)
 8009656:	6813      	ldr	r3, [r2, #0]
 8009658:	4610      	mov	r0, r2
 800965a:	b933      	cbnz	r3, 800966a <_free_r+0x2e>
 800965c:	6063      	str	r3, [r4, #4]
 800965e:	6014      	str	r4, [r2, #0]
 8009660:	4628      	mov	r0, r5
 8009662:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009666:	f000 b8cb 	b.w	8009800 <__malloc_unlock>
 800966a:	42a3      	cmp	r3, r4
 800966c:	d90a      	bls.n	8009684 <_free_r+0x48>
 800966e:	6821      	ldr	r1, [r4, #0]
 8009670:	1862      	adds	r2, r4, r1
 8009672:	4293      	cmp	r3, r2
 8009674:	bf01      	itttt	eq
 8009676:	681a      	ldreq	r2, [r3, #0]
 8009678:	685b      	ldreq	r3, [r3, #4]
 800967a:	1852      	addeq	r2, r2, r1
 800967c:	6022      	streq	r2, [r4, #0]
 800967e:	6063      	str	r3, [r4, #4]
 8009680:	6004      	str	r4, [r0, #0]
 8009682:	e7ed      	b.n	8009660 <_free_r+0x24>
 8009684:	461a      	mov	r2, r3
 8009686:	685b      	ldr	r3, [r3, #4]
 8009688:	b10b      	cbz	r3, 800968e <_free_r+0x52>
 800968a:	42a3      	cmp	r3, r4
 800968c:	d9fa      	bls.n	8009684 <_free_r+0x48>
 800968e:	6811      	ldr	r1, [r2, #0]
 8009690:	1850      	adds	r0, r2, r1
 8009692:	42a0      	cmp	r0, r4
 8009694:	d10b      	bne.n	80096ae <_free_r+0x72>
 8009696:	6820      	ldr	r0, [r4, #0]
 8009698:	4401      	add	r1, r0
 800969a:	1850      	adds	r0, r2, r1
 800969c:	4283      	cmp	r3, r0
 800969e:	6011      	str	r1, [r2, #0]
 80096a0:	d1de      	bne.n	8009660 <_free_r+0x24>
 80096a2:	6818      	ldr	r0, [r3, #0]
 80096a4:	685b      	ldr	r3, [r3, #4]
 80096a6:	4401      	add	r1, r0
 80096a8:	6011      	str	r1, [r2, #0]
 80096aa:	6053      	str	r3, [r2, #4]
 80096ac:	e7d8      	b.n	8009660 <_free_r+0x24>
 80096ae:	d902      	bls.n	80096b6 <_free_r+0x7a>
 80096b0:	230c      	movs	r3, #12
 80096b2:	602b      	str	r3, [r5, #0]
 80096b4:	e7d4      	b.n	8009660 <_free_r+0x24>
 80096b6:	6820      	ldr	r0, [r4, #0]
 80096b8:	1821      	adds	r1, r4, r0
 80096ba:	428b      	cmp	r3, r1
 80096bc:	bf01      	itttt	eq
 80096be:	6819      	ldreq	r1, [r3, #0]
 80096c0:	685b      	ldreq	r3, [r3, #4]
 80096c2:	1809      	addeq	r1, r1, r0
 80096c4:	6021      	streq	r1, [r4, #0]
 80096c6:	6063      	str	r3, [r4, #4]
 80096c8:	6054      	str	r4, [r2, #4]
 80096ca:	e7c9      	b.n	8009660 <_free_r+0x24>
 80096cc:	bd38      	pop	{r3, r4, r5, pc}
 80096ce:	bf00      	nop
 80096d0:	200004c0 	.word	0x200004c0

080096d4 <_malloc_r>:
 80096d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096d6:	1ccd      	adds	r5, r1, #3
 80096d8:	f025 0503 	bic.w	r5, r5, #3
 80096dc:	3508      	adds	r5, #8
 80096de:	2d0c      	cmp	r5, #12
 80096e0:	bf38      	it	cc
 80096e2:	250c      	movcc	r5, #12
 80096e4:	2d00      	cmp	r5, #0
 80096e6:	4606      	mov	r6, r0
 80096e8:	db01      	blt.n	80096ee <_malloc_r+0x1a>
 80096ea:	42a9      	cmp	r1, r5
 80096ec:	d903      	bls.n	80096f6 <_malloc_r+0x22>
 80096ee:	230c      	movs	r3, #12
 80096f0:	6033      	str	r3, [r6, #0]
 80096f2:	2000      	movs	r0, #0
 80096f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80096f6:	f000 f87d 	bl	80097f4 <__malloc_lock>
 80096fa:	4921      	ldr	r1, [pc, #132]	; (8009780 <_malloc_r+0xac>)
 80096fc:	680a      	ldr	r2, [r1, #0]
 80096fe:	4614      	mov	r4, r2
 8009700:	b99c      	cbnz	r4, 800972a <_malloc_r+0x56>
 8009702:	4f20      	ldr	r7, [pc, #128]	; (8009784 <_malloc_r+0xb0>)
 8009704:	683b      	ldr	r3, [r7, #0]
 8009706:	b923      	cbnz	r3, 8009712 <_malloc_r+0x3e>
 8009708:	4621      	mov	r1, r4
 800970a:	4630      	mov	r0, r6
 800970c:	f000 f862 	bl	80097d4 <_sbrk_r>
 8009710:	6038      	str	r0, [r7, #0]
 8009712:	4629      	mov	r1, r5
 8009714:	4630      	mov	r0, r6
 8009716:	f000 f85d 	bl	80097d4 <_sbrk_r>
 800971a:	1c43      	adds	r3, r0, #1
 800971c:	d123      	bne.n	8009766 <_malloc_r+0x92>
 800971e:	230c      	movs	r3, #12
 8009720:	4630      	mov	r0, r6
 8009722:	6033      	str	r3, [r6, #0]
 8009724:	f000 f86c 	bl	8009800 <__malloc_unlock>
 8009728:	e7e3      	b.n	80096f2 <_malloc_r+0x1e>
 800972a:	6823      	ldr	r3, [r4, #0]
 800972c:	1b5b      	subs	r3, r3, r5
 800972e:	d417      	bmi.n	8009760 <_malloc_r+0x8c>
 8009730:	2b0b      	cmp	r3, #11
 8009732:	d903      	bls.n	800973c <_malloc_r+0x68>
 8009734:	6023      	str	r3, [r4, #0]
 8009736:	441c      	add	r4, r3
 8009738:	6025      	str	r5, [r4, #0]
 800973a:	e004      	b.n	8009746 <_malloc_r+0x72>
 800973c:	6863      	ldr	r3, [r4, #4]
 800973e:	42a2      	cmp	r2, r4
 8009740:	bf0c      	ite	eq
 8009742:	600b      	streq	r3, [r1, #0]
 8009744:	6053      	strne	r3, [r2, #4]
 8009746:	4630      	mov	r0, r6
 8009748:	f000 f85a 	bl	8009800 <__malloc_unlock>
 800974c:	f104 000b 	add.w	r0, r4, #11
 8009750:	1d23      	adds	r3, r4, #4
 8009752:	f020 0007 	bic.w	r0, r0, #7
 8009756:	1ac2      	subs	r2, r0, r3
 8009758:	d0cc      	beq.n	80096f4 <_malloc_r+0x20>
 800975a:	1a1b      	subs	r3, r3, r0
 800975c:	50a3      	str	r3, [r4, r2]
 800975e:	e7c9      	b.n	80096f4 <_malloc_r+0x20>
 8009760:	4622      	mov	r2, r4
 8009762:	6864      	ldr	r4, [r4, #4]
 8009764:	e7cc      	b.n	8009700 <_malloc_r+0x2c>
 8009766:	1cc4      	adds	r4, r0, #3
 8009768:	f024 0403 	bic.w	r4, r4, #3
 800976c:	42a0      	cmp	r0, r4
 800976e:	d0e3      	beq.n	8009738 <_malloc_r+0x64>
 8009770:	1a21      	subs	r1, r4, r0
 8009772:	4630      	mov	r0, r6
 8009774:	f000 f82e 	bl	80097d4 <_sbrk_r>
 8009778:	3001      	adds	r0, #1
 800977a:	d1dd      	bne.n	8009738 <_malloc_r+0x64>
 800977c:	e7cf      	b.n	800971e <_malloc_r+0x4a>
 800977e:	bf00      	nop
 8009780:	200004c0 	.word	0x200004c0
 8009784:	200004c4 	.word	0x200004c4

08009788 <_realloc_r>:
 8009788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800978a:	4607      	mov	r7, r0
 800978c:	4614      	mov	r4, r2
 800978e:	460e      	mov	r6, r1
 8009790:	b921      	cbnz	r1, 800979c <_realloc_r+0x14>
 8009792:	4611      	mov	r1, r2
 8009794:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009798:	f7ff bf9c 	b.w	80096d4 <_malloc_r>
 800979c:	b922      	cbnz	r2, 80097a8 <_realloc_r+0x20>
 800979e:	f7ff ff4d 	bl	800963c <_free_r>
 80097a2:	4625      	mov	r5, r4
 80097a4:	4628      	mov	r0, r5
 80097a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80097a8:	f000 f830 	bl	800980c <_malloc_usable_size_r>
 80097ac:	42a0      	cmp	r0, r4
 80097ae:	d20f      	bcs.n	80097d0 <_realloc_r+0x48>
 80097b0:	4621      	mov	r1, r4
 80097b2:	4638      	mov	r0, r7
 80097b4:	f7ff ff8e 	bl	80096d4 <_malloc_r>
 80097b8:	4605      	mov	r5, r0
 80097ba:	2800      	cmp	r0, #0
 80097bc:	d0f2      	beq.n	80097a4 <_realloc_r+0x1c>
 80097be:	4631      	mov	r1, r6
 80097c0:	4622      	mov	r2, r4
 80097c2:	f7ff ff13 	bl	80095ec <memcpy>
 80097c6:	4631      	mov	r1, r6
 80097c8:	4638      	mov	r0, r7
 80097ca:	f7ff ff37 	bl	800963c <_free_r>
 80097ce:	e7e9      	b.n	80097a4 <_realloc_r+0x1c>
 80097d0:	4635      	mov	r5, r6
 80097d2:	e7e7      	b.n	80097a4 <_realloc_r+0x1c>

080097d4 <_sbrk_r>:
 80097d4:	b538      	push	{r3, r4, r5, lr}
 80097d6:	2300      	movs	r3, #0
 80097d8:	4d05      	ldr	r5, [pc, #20]	; (80097f0 <_sbrk_r+0x1c>)
 80097da:	4604      	mov	r4, r0
 80097dc:	4608      	mov	r0, r1
 80097de:	602b      	str	r3, [r5, #0]
 80097e0:	f7f7 fc82 	bl	80010e8 <_sbrk>
 80097e4:	1c43      	adds	r3, r0, #1
 80097e6:	d102      	bne.n	80097ee <_sbrk_r+0x1a>
 80097e8:	682b      	ldr	r3, [r5, #0]
 80097ea:	b103      	cbz	r3, 80097ee <_sbrk_r+0x1a>
 80097ec:	6023      	str	r3, [r4, #0]
 80097ee:	bd38      	pop	{r3, r4, r5, pc}
 80097f0:	2000147c 	.word	0x2000147c

080097f4 <__malloc_lock>:
 80097f4:	4801      	ldr	r0, [pc, #4]	; (80097fc <__malloc_lock+0x8>)
 80097f6:	f000 b811 	b.w	800981c <__retarget_lock_acquire_recursive>
 80097fa:	bf00      	nop
 80097fc:	20001484 	.word	0x20001484

08009800 <__malloc_unlock>:
 8009800:	4801      	ldr	r0, [pc, #4]	; (8009808 <__malloc_unlock+0x8>)
 8009802:	f000 b80c 	b.w	800981e <__retarget_lock_release_recursive>
 8009806:	bf00      	nop
 8009808:	20001484 	.word	0x20001484

0800980c <_malloc_usable_size_r>:
 800980c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009810:	1f18      	subs	r0, r3, #4
 8009812:	2b00      	cmp	r3, #0
 8009814:	bfbc      	itt	lt
 8009816:	580b      	ldrlt	r3, [r1, r0]
 8009818:	18c0      	addlt	r0, r0, r3
 800981a:	4770      	bx	lr

0800981c <__retarget_lock_acquire_recursive>:
 800981c:	4770      	bx	lr

0800981e <__retarget_lock_release_recursive>:
 800981e:	4770      	bx	lr

08009820 <_init>:
 8009820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009822:	bf00      	nop
 8009824:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009826:	bc08      	pop	{r3}
 8009828:	469e      	mov	lr, r3
 800982a:	4770      	bx	lr

0800982c <_fini>:
 800982c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800982e:	bf00      	nop
 8009830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009832:	bc08      	pop	{r3}
 8009834:	469e      	mov	lr, r3
 8009836:	4770      	bx	lr
